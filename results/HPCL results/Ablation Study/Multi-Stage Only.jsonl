{"predict": "(20, CUDA, CUDA_CHECK(cudaMalloc((void **)&dev_max, sizeof(FP) * SEQLEN * DIM));); (40, CUDA, cudaFree(dev_max);); (22, CUDA, CUDA_CHECK(cudaMemcpy(dev_denom, host_denom, sizeof(FP) * SEQLEN * DIM, cudaMemcpyHostToDevice));); (18, CUDA, CUDA_CHECK(cudaMalloc((void **)&dev_denom, sizeof(FP) * SEQLEN * DIM));); (18, CUDA, CUDA_CHECK(cudaMalloc((void **)&QK, sizeof(FP) * SEQLEN * SEQLEN));); (18, CUDA, CUDA_CHECK(cudaMemcpy(dev_max, host_max, sizeof(FP) * SEQLEN * DIM, cudaMemcpyHostToDevice));); (33, CUDA, cudaFree(QK);); (34, CUDA, cudaFree(dev_denom);)", "label": "(20, CUDA, CUDA_CHECK(cudaMalloc((void **)&dev_max, sizeof(FP) * SEQLEN * DIM));); (39, CUDA, cudaFree(dev_max);); (22, CUDA, CUDA_CHECK(cudaMemcpy(dev_denom, host_denom, sizeof(FP) * SEQLEN * DIM, cudaMemcpyHostToDevice));); (18, CUDA, CUDA_CHECK(cudaMalloc((void **)&dev_denom, sizeof(FP) * SEQLEN * DIM));); (18, CUDA, CUDA_CHECK(cudaMalloc((void **)&QK, sizeof(FP) * SEQLEN * SEQLEN));); (18, CUDA, CUDA_CHECK(cudaMemcpy(dev_max, host_max, sizeof(FP) * SEQLEN * DIM, cudaMemcpyHostToDevice));); (33, CUDA, cudaFree(QK);); (34, CUDA, cudaFree(dev_denom);)"}
{"predict": "(15, OpenMP, #pragma omp critical(out))", "label": "(32, OpenMP, #pragma omp critical(cerr)); (15, OpenMP, #pragma omp critical(out))"}
{"predict": "(30, MPI, MPI_T_finalize();); (4, MPI, MPI_T_init_thread(required, &provided);); (6, MPI, MPI_Abort(MPI_COMM_WORLD, -1);)", "label": "(31, MPI, MPI_T_finalize();); (4, MPI, MPI_T_init_thread(required, &provided);); (6, MPI, MPI_Abort(MPI_COMM_WORLD, -1);)"}
{"predict": "(18, OpenMP, #pragma omp parallel for reduction(+:totalSum))", "label": "(19, OpenMP, #pragma omp parallel for simd reduction(+:totalSum) schedule(guided) aligned(data: 64) num_threads(N_THREADS)); (10, OpenMP, #pragma omp parallel for num_threads(N_THREADS))"}
{"predict": "(15, CUDA, cudaMemset(printfbuf_local, 0, sizeof(cuPrintfHeader));); (15, CUDA, cudaMemcpy(printfbuf_local, bufptr, sizeof(cuPrintfHeader), cudaMemcpyDeviceToHost);); (21, CUDA, cudaDeviceSynchronize();)", "label": "(15, CUDA, cudaMemcpy(printfbuf_local, bufptr, CUPRINTF_MAX_LEN, cudaMemcpyDeviceToHost);)"}
{"predict": "(16, OpenMP, #pragma omp parallel sections firstprivate(, )); (36, OpenMP, #pragma omp parallel sections firstprivate(x)); (9, OpenMP, #pragma omp parallel sections firstprivate(,); (1, OpenMP, #pragma omp parallel sections firstprivate(); (37, OpenMP, #pragma omp parallel sections firstprivate(x, y)); (40, OpenMP, #pragma omp parallel sections firstprivate(x, y, z)); (20, OpenMP, #pragma omp parallel sections firstprivate(int)); (14, OpenMP, #pragma omp parallel sections firstprivate()); (23, OpenMP, #pragma omp parallel sections firstprivate(0))", "label": "(26, OpenMP, #pragma omp parallel sections firstprivate(int)); (10, OpenMP, #pragma omp parallel sections firstprivate(,); (14, OpenMP, #pragma omp parallel sections firstprivate(, )); (34, OpenMP, #pragma omp parallel sections lastprivate(x) firstprivate(x)); (17, OpenMP, #pragma omp parallel sections firstprivate()); (36, OpenMP, #pragma omp parallel sections lastprivate(x, y) firstprivate(x, y)); (25, OpenMP, #pragma omp parallel sections firstprivate(0)); (-3, OpenMP, #pragma omp parallel sections firstprivate(); (37, OpenMP, #pragma omp parallel sections lastprivate(x, y, z) firstprivate(x, y, z))"}
{"predict": "(18, MPI, MPI_Wait(&request, &status);); (16, MPI, MPI_Isend(a, 10, MPI_INT, rank, 0, MPI_COMM_WORLD, &request);); (26, MPI, MPI_Recv(b, 10, MPI_INT, rank, 0, MPI_COMM_WORLD, &request);); (5, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (22, MPI, MPI_Get_count(&status, MPI_INT, &count);); (5, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);)", "label": "(29, MPI, MPI_Recv(NULL, 0, MPI_INT, MPI_ANY_SOURCE, MPI_ANY_TAG, MPI_COMM_WORLD, &status);); (16, MPI, MPI_Isend(a, 0, MPI_INT, rank, 0, MPI_COMM_WORLD, &request);); (24, MPI, MPI_Wait(&request, &status);); (8, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (24, MPI, MPI_Isend(NULL, 0, MPI_INT, rank, 0, MPI_COMM_WORLD, &request);); (14, MPI, MPI_Get_count(&status, MPI_INT, &count);); (12, MPI, MPI_Recv(b, 1, MPI_INT, MPI_ANY_SOURCE, MPI_ANY_TAG, MPI_COMM_WORLD, &status);)"}
{"predict": "(14, OpenCL, retVal = clReleaseMemObject(image);)", "label": "(14, OpenCL, retVal = clReleaseMemObject(image);)"}
{"predict": "(54, OpenMP, #pragma omp parallel for)", "label": "(60, OpenMP, #pragma omp parallel for)"}
{"predict": "(17, CUDA, CHECK(cudaMalloc((void**) &_anchorsDev, 4 * params.anchorsRatioCount * params.anchorsScaleCount * sizeof(float)));)", "label": "(17, CUDA, CHECK(cudaMalloc((void**) &anchorsDev, 4 * params.anchorsRatioCount * params.anchorsScaleCount * sizeof(float)));)"}
{"predict": "(3, CUDA, extern __shared__ float entire_buffer[];)", "label": "(3, CUDA, extern __shared__ float entire_buffer[];)"}
{"predict": "(24, CUDA, cudaFree(res_dev);); (17, CUDA, cudaMalloc(&res_dev, sizeof(float));); (19, CUDA, cudaMemcpy(&res_host, res_dev, sizeof(float), cudaMemcpyDeviceToHost);)", "label": "(24, CUDA, cudaFree(res_dev);); (17, CUDA, cudaMalloc(&res_dev, sizeof(float));); (19, CUDA, cudaMemcpy(&res_host, res_dev, sizeof(float), cudaMemcpyDeviceToHost);)"}
{"predict": "(18, OpenCL, auto mappedPtr1 = clEnqueueMapBuffer(&cmdQ, b1, CL_TRUE, CL_MAP_READ, 0, 8, 0, nullptr, nullptr, nullptr);); (31, OpenCL, clReleaseEvent(gatingEvent);); (20, OpenCL, auto gatingEvent = clCreateEventFromType(CL_EVENT_TYPE_COMMAND_QUEUE, nullptr);); (14, OpenCL, auto b1 = clCreateBuffer(context, CL_MEM_READ_WRITE, 20, nullptr, nullptr);); (21, OpenCL, clEnqueueWaitForEvents(&cmdQ, 1, &gatingEvent);); (27, OpenCL, clReleaseMemObject(b1);); (10, OpenCL, clEnqueueUnmapMemObject(&cmdQ, b1, mappedPtr1, 0, nullptr, nullptr);)", "label": "(16, OpenCL, auto b1 = clCreateBuffer(context, CL_MEM_READ_WRITE, 20, nullptr, nullptr);); (24, OpenCL, void *ptr2 = clEnqueueMapBuffer(&cmdQ, b2, CL_TRUE, CL_MAP_READ, 0, 8, 0, nullptr, nullptr, nullptr);); (32, OpenCL, clReleaseMemObject(b2);); (17, OpenCL, void *ptr1 = clEnqueueMapBuffer(&cmdQ, b1, CL_FALSE, CL_MAP_READ, 0, 8, 1, &gatingEvent, nullptr, nullptr);); (29, OpenCL, clReleaseMemObject(b1);); (31, OpenCL, clReleaseEvent(gatingEvent);); (25, OpenCL, clEnqueueUnmapMemObject(pCmdQ, b2, ptr2, 0, nullptr, nullptr);); (12, OpenCL, auto gatingEvent = clCreateUserEvent(context, nullptr);); (13, OpenCL, clEnqueueUnmapMemObject(&cmdQ, b1, ptr1, 0, nullptr, nullptr);); (8, OpenCL, auto b2 = clCreateBuffer(context, CL_MEM_READ_WRITE, 20, nullptr, nullptr);)"}
{"predict": "(111, CUDA, cudaFree(gpuMatrix);); (44, CUDA, cudaMemcpy(gpuMatrix, Matrix, NUM * sizeof(float), cudaMemcpyHostToDevice);); (36, CUDA, cudaMalloc((void**)&gpuMatrix, NUM * sizeof(float));); (36, CUDA, cudaMalloc((void**)&gpuTransposeMatrix, NUM * sizeof(float));); (46, CUDA, cudaEventRecord(stop, NULL);); (46, CUDA, cudaEventSynchronize(stop);); (47, CUDA, cudaEventElapsedTime(&eventMs, start, stop);); (110, CUDA, cudaFree(gpuTransposeMatrix);); (15, CUDA, cudaEventCreate(&stop);); (37, CUDA, cudaEventRecord(start, NULL);); (77, CUDA, cudaMemcpy(TransposeMatrix, gpuTransposeMatrix, NUM * sizeof(float), cudaMemcpyDeviceToHost);); (5, CUDA, cudaGetDeviceProperties(&devProp, 0);); (11, CUDA, cudaEventCreate(&start);)", "label": "(53, CUDA, cudaEventSynchronize(stop);); (86, CUDA, cudaMemcpy(TransposeMatrix, gpuTransposeMatrix, NUM * sizeof(float), cudaMemcpyDeviceToHost);); (9, CUDA, cudaGetDeviceProperties(&devProp, 0);); (44, CUDA, cudaMemcpy(gpuMatrix, Matrix, NUM * sizeof(float), cudaMemcpyHostToDevice);); (114, CUDA, cudaFree(gpuMatrix);); (32, CUDA, cudaMalloc((void**)&gpuMatrix, NUM * sizeof(float));); (49, CUDA, cudaEventElapsedTime(&eventMs, start, stop);); (36, CUDA, cudaEventRecord(start, NULL);); (112, CUDA, cudaFree(gpuTransposeMatrix);); (42, CUDA, cudaEventRecord(stop, NULL);); (10, CUDA, cudaEventCreate(&stop);); (28, CUDA, cudaMalloc((void**)&gpuTransposeMatrix, NUM * sizeof(float));); (6, CUDA, cudaEventCreate(&start);)"}
{"predict": "(5, CUDA, ASSERT_EQ(cudaSuccess, cudaStreamCreate(&stream));); (54, CUDA, ASSERT_EQ(cudaSuccess, cudaStreamSynchronize(stream));); (58, CUDA, ASSERT_EQ(cudaSuccess, cudaStreamDestroy(stream));)", "label": "(56, CUDA, ASSERT_EQ(cudaSuccess, cudaStreamSynchronize(stream));); (4, CUDA, ASSERT_EQ(cudaSuccess, cudaStreamCreate(&stream));); (35, CUDA, ASSERT_EQ(cudaSuccess, cudaMemsetAsync(dstData->basePtr(), 0, dstBufSize * sizeof(T), stream));); (54, CUDA, ASSERT_EQ(cudaSuccess, cudaStreamDestroy(stream));)"}
{"predict": "(38, MPI, MPI_Comm_size(MPI_COMM_WORLD, &ranks);); (44, MPI, MPI_Allgather(&item_offset, 1, MPI_INT, rank_disps, 1, MPI_INT, MPI_COMM_WORLD);)", "label": "(38, MPI, MPI_Comm_size(MPI_COMM_WORLD, &ranks);); (44, MPI, MPI_Allgather(&item_offset, 1, MPI_INT, rank_disps, 1, MPI_INT, MPI_COMM_WORLD);); (80, MPI, reduce_start = MPI_Wtime();)"}
{"predict": "(58, OpenCL, error = clEnqueueNDRangeKernel( queue, kernel, 1, NULL, threads, localThreads, 0, NULL, NULL );); (46, OpenCL, error = clSetKernelArg(kernel, 0, sizeof( streams[0] ), &streams[0] );); (47, OpenCL, error = clSetKernelArg(kernel, 1, sizeof( streams[1] ), &streams[1] );); (59, OpenCL, error = clEnqueueReadBuffer( queue, streams[1], true, 0, sizeof( cl_double ) * TEST_SIZE, outData, 0, NULL, NULL );)", "label": "(58, OpenCL, error = clEnqueueNDRangeKernel( queue, kernel, 1, NULL, threads, localThreads, 0, NULL, NULL );); (46, OpenCL, error = clSetKernelArg( kernel, 0, sizeof( streams[ 0 ] ), &streams[0] );); (60, OpenCL, error = clEnqueueReadBuffer( queue, streams[1], true, 0, sizeof( cl_double ) * TEST_SIZE, outData, 0, NULL, NULL );); (46, OpenCL, error = clSetKernelArg( kernel, 1, sizeof( streams[ 1 ] ), &streams[1] );)"}
{"predict": "(26, CUDA, cudaMemcpy(d_A, A, m * k * sizeof(float), cudaMemcpyHostToDevice);); (56, CUDA, cudaFree(d_A);); (31, CUDA, cudaMemcpy(C, d_C, m * n * sizeof(float), cudaMemcpyDeviceToHost);); (55, CUDA, cudaFree(d_B);); (55, CUDA, cudaFree(d_C);); (17, CUDA, cudaMalloc((void **)&d_B, k * n * sizeof(float));); (15, CUDA, cudaMalloc((void **)&d_A, m * k * sizeof(float));); (16, CUDA, cudaMalloc((void **)&d_C, m * n * sizeof(float));); (20, CUDA, cudaMemcpy(d_C, C, m * n * sizeof(float), cudaMemcpyHostToDevice);); (18, CUDA, cudaMemcpy(d_B, B, k * n * sizeof(float), cudaMemcpyHostToDevice);)", "label": "(26, CUDA, cudaMemcpy(d_A, A, m * k * sizeof(float), cudaMemcpyHostToDevice);); (56, CUDA, cudaFree(d_A);); (31, CUDA, cudaMemcpy(C, d_C, m * n * sizeof(float), cudaMemcpyDeviceToHost);); (55, CUDA, cudaFree(d_B);); (55, CUDA, cudaFree(d_C);); (17, CUDA, cudaMalloc((void **)&d_B, k * n * sizeof(float));); (15, CUDA, cudaMalloc((void **)&d_A, m * k * sizeof(float));); (16, CUDA, cudaMalloc((void **)&d_C, m * n * sizeof(float));); (20, CUDA, cudaMemcpy(d_C, C, m * n * sizeof(float), cudaMemcpyHostToDevice);); (18, CUDA, cudaMemcpy(d_B, B, k * n * sizeof(float), cudaMemcpyHostToDevice);)"}
{"predict": "(36, CUDA, cudaCheck(cudaMalloc(&d_dinp, B * T * 3 * C * sizeof(float)));); (56, CUDA, cudaCheck(cudaMemset(d_dinp, 0, B * T * 3 * C * sizeof(float)));); (31, CUDA, cudaCheck(cudaMalloc(&d_qkvr, B * T * 3 * C * sizeof(float)));); (34, CUDA, cudaCheck(cudaMalloc(&d_dqkvr, B * T * 3 * C * sizeof(float)));); (37, CUDA, cudaCheck(cudaMalloc(&d_dpreatt, B * T * C * sizeof(float)));); (39, CUDA, cudaCheck(cudaMalloc(&d_datt, B * T * C * sizeof(float)));); (41, CUDA, cudaCheck(cudaMalloc(&d_scratch, (2 * NH + 1) * cudaCheck(cudaMalloc(&d_inp, B * T * 3 * C * sizeof(float)));); (27, CUDA, cudaCheck(cudaMalloc(&d_out, B * T * C * sizeof(float)));); (28, CUDA, cudaCheck(cudaMalloc(&d_preatt, B * T * C * sizeof(float)));); (30, CUDA, cudaCheck(cudaMalloc(&d_dout, B * T * C * sizeof(float)));); (25, CUDA, cudaCheck(cudaMalloc(&d_att, B * T * C * sizeof(float)));); (27, CUDA, cudaCheck(cudaMalloc(&d_datt, B * T * C * sizeof(float)));); (41, CUDA, cudaCheck(cudaMemset(d_dqkvr, 0, B * T * 3 * C * sizeof(float)));); (43, CUDA, cudaCheck(cudaMemcpy(d_inp, qkv, B * T * 3 * C * sizeof(float), cudaMemcpyHostToDevice));); (37, CUDA, cudaCheck(cudaMemset(d_dpreatt, 0, B * T * C * sizeof(float)));); (39, CUDA, cudaCheck(cudaMemcpy(d_dout, dout, B * T * C * sizeof(float), cudaMemcpyHostToDevice));); (24, CUDA, cudaCheck(cudaMalloc(&d_dinp, B * T * 3 * C * sizeof(float)));); (37, CUDA, cudaCheck(cudaMemcpy(d_att, d_inp, B * T * C", "label": "(45, CUDA, cudaCheck(cudaMemset(d_dinp, 0, B * T * 3 * C * sizeof(float)));); (47, CUDA, cudaCheck(cudaMalloc(&d_dpreatt, B * NH * T * T * sizeof(float)));); (99, CUDA, cudaCheck(cudaFree(d_inp));); (38, CUDA, cudaCheck(cudaMemset(d_att, 0, B * NH * T * T * sizeof(float)));); (105, CUDA, cudaCheck(cudaFree(d_dpreatt));); (102, CUDA, cudaCheck(cudaFree(d_dinp));); (102, CUDA, cudaCheck(cudaFree(d_dqkvr));); (28, CUDA, cudaCheck(cudaMemset(d_qkvr, 0, B * T * 3 * C * sizeof(float)));); (31, CUDA, cudaCheck(cudaMemset(d_preatt, 0, B * NH * T * T * sizeof(float)));); (93, CUDA, cudaCheck(cudaFree(d_qkvr));); (30, CUDA, cudaCheck(cudaMalloc(&d_att, B * NH * T * T * sizeof(float)));); (99, CUDA, cudaCheck(cudaFree(d_datt));); (35, CUDA, cudaCheck(cudaMemset(d_dqkvr, 0, B * T * 3 * C * sizeof(float)));); (24, CUDA, cudaCheck(cudaMemset(d_out, 0, B * T * C * sizeof(float)));); (90, CUDA, cudaCheck(cudaFree(d_preatt));); (27, CUDA, cudaCheck(cudaMalloc(&d_dout, B * T * C * sizeof(float)));); (18, CUDA, cudaCheck(cudaMalloc(&d_qkvr, B * T * 3 * C * sizeof(float)));); (16, CUDA, cudaCheck(cudaMemcpy(d_inp, qkv, B * T * 3 * C * sizeof(float), cudaMemcpyHostToDevice));); (35, CUDA, cudaCheck(cudaMemset(d_scratch, 0, B * T * C * sizeof(float)));); (19, CUDA, cudaCheck(cudaMalloc(&d_preatt, B * NH * T * T * sizeof(float)));); (91, CUDA, cudaCheck(cudaFree(d_scratch));); (22, CUDA, cudaCheck(cudaMemcpy(d_dout, dout, B * T * C * sizeof(float), cudaMemcpyHostToDevice));); (81, CUDA, cudaCheck(cudaFree(d_out));); (23, CUDA, cudaCheck(cudaMalloc(&d_dqkvr, B * T * 3 * C * sizeof(float)));); (20, CUDA, cudaCheck(cudaMalloc(&d_dinp, B * T * 3 * C * sizeof(float)));); (26, CUDA, cudaCheck(cudaMemset(d_datt, 0, B * NH * T * T * sizeof(float)));); (26, CUDA, cudaCheck(cudaMalloc(&d_scratch, B * T * C * sizeof(float)));); (9, CUDA, cudaCheck(cudaMalloc(&d_out, B * T * C * sizeof(float)));); (22, CUDA, cudaCheck(cudaMalloc(&d_datt, B * NH * T * T * sizeof(float)));); (3, CUDA, cudaCheck(cudaMalloc(&d_inp, B * T * 3 * C * sizeof(float)));); (75, CUDA, cudaCheck(cudaFree(d_att));); (18, CUDA, cudaCheck(cudaMemset(d_dpreatt, 0, B * NH * T * T * sizeof(float)));); (74, CUDA, cudaCheck(cudaFree(d_dout));)"}
{"predict": "(36, MPI, MPI_Recv(b, 10, MPI_INT, i, 27 + j, MPI_COMM_WORLD, &status);); (24, MPI, MPI_Waitall(1, &request, &status);); (15, MPI, MPI_Bcast_init(a, 10, MPI_INT, 0, MPI_COMM_WORLD, MPI_INFO_NULL, &request);); (6, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (6, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (14, MPI, MPI_Start(&request);); (37, MPI, MPI_Request_free(&request);)", "label": "(48, MPI, MPI_Buffer_detach(&bptr, &bl);); (17, MPI, MPI_Start(&request);); (27, MPI, MPI_Recv(b, 10, MPI_INT, i, 27 + j, MPI_COMM_WORLD, &status);); (8, MPI, MPI_Buffer_attach(buf, BUFSIZE);); (15, MPI, MPI_Wait(&request, &status);); (15, MPI, MPI_Request_free(&request);); (3, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (3, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (6, MPI, MPI_Bsend_init(a, 10, MPI_INT, 0, 27 + j, MPI_COMM_WORLD, &request);)"}
{"predict": "(44, MPI, ascent_opt[\"mpi_comm\"] = MPI_Comm_c2f(MPI_COMM_WORLD);); (31, MPI, auto err = MPI_Init_thread(&argc, &argv, MPI_THREAD_MULTIPLE, &provided);); (121, MPI, MPI_Finalize();); (37, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &mpi_rank);); (37, MPI, MPI_Comm_size(MPI_COMM_WORLD, &mpi_size);); (111, MPI, MPI_Reduce(&run_time, &max_run_time, 1, MPI_DOUBLE, MPI_MAX, 0, MPI_COMM_WORLD);)", "label": "(31, MPI, auto err = MPI_Init_thread(&argc, &argv, MPI_THREAD_MULTIPLE, &provided);); (119, MPI, MPI_Finalize();); (37, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &mpi_rank);); (40, MPI, ascent_opt[\"mpi_comm\"] = MPI_Comm_c2f(MPI_COMM_WORLD);); (111, MPI, MPI_Reduce(&run_time, &max_run_time, 1, MPI_DOUBLE, MPI_MAX, 0, MPI_COMM_WORLD);); (33, MPI, MPI_Comm_size(MPI_COMM_WORLD, &mpi_size);)"}
{"predict": "(15, CUDA, CUDASimulation cudaSimulation(model);)", "label": "(15, CUDA, CUDASimulation cudaSimulation(model);)"}
{"predict": "(6, TBB, c.set_core_type(tbb::info::core_types().back());); (3, TBB, tbb::task_arena::constraints c;); (43, TBB, double t2d_auto = pforTranspose2d<tbb::auto_partitioner>(N, a, b, gs);); (40, TBB, pforTranspose2d<tbb::auto_partitioner>(N, a, b, gs);); (2, TBB, c.set_numa_id(tbb::info::numa_nodes()[0]);); (31, TBB, double t1d_simple = pforTranspose<tbb::simple_partitioner>(N, a, b, gs);); (3, TBB, c.set_max_concurrency(std::min(8, tbb::info::default_concurrency(c)));); (34, TBB, pforTranspose<tbb::simple_partitioner>(N, a, b, gs);); (-1, TBB, tbb::task_arena a(c);); (40, TBB, double t2d_simple = pforTranspose2d<tbb::simple_partitioner>(N, a, b, gs);); (25, TBB, pforTranspose<tbb::auto_partitioner>(N, a, b, gs);); (18, TBB, double t1d_auto = pforTranspose<tbb::auto_partitioner>(N, a, b, gs);)", "label": "(47, TBB, double t2d_auto = pforTranspose2d<tbb::auto_partitioner>(N, a, b, gs);); (45, TBB, pforTranspose2d<tbb::auto_partitioner>(N, a, b, gs);); (4, TBB, c.set_core_type(tbb::info::core_types().back());); (1, TBB, tbb::task_arena::constraints c;); (48, TBB, double t2d_simple = pforTranspose2d<tbb::simple_partitioner>(N, a, b, gs);); (37, TBB, double t1d_simple = pforTranspose<tbb::simple_partitioner>(N, a, b, gs);); (-1, TBB, c.set_numa_id(tbb::info::numa_nodes()[0]);); (29, TBB, pforTranspose<tbb::auto_partitioner>(N, a, b, gs);); (29, TBB, double t1d_auto = pforTranspose<tbb::auto_partitioner>(N, a, b, gs);); (32, TBB, pforTranspose<tbb::simple_partitioner>(N, a, b, gs);); (-2, TBB, c.set_max_concurrency(std::min(8, tbb::info::default_concurrency(c)));); (-2, TBB, tbb::task_arena a(c);); (39, TBB, pforTranspose2d<tbb::simple_partitioner>(N, a, b, gs);)"}
{"predict": "(17, CUDA, __shared__ FP sDenom[Br];); (14, CUDA, __shared__ FP sV[Bc][dim];); (12, CUDA, __shared__ FP sMax[Br];); (10, CUDA, __shared__ FP sSafeE[Br][Bc];); (8, CUDA, __shared__ FP sO[Br][dim];); (6, CUDA, __shared__ FP sK[Bc][dim];); (118, CUDA, __shared__ FP sQK[Br][Bc];); (2, CUDA, __shared__ FP sQ[Br][dim];)", "label": "(12, CUDA, __shared__ FP sV[Bc][dim];); (19, CUDA, __shared__ FP sMax[Br];); (9, CUDA, __shared__ FP sK[Bc][dim];); (12, CUDA, __shared__ FP sQK[Br][Bc];); (13, CUDA, __shared__ FP sSafeE[Br][Bc];); (9, CUDA, __shared__ FP sO[Br][dim];); (4, CUDA, __shared__ FP sQ[Br][dim];); (12, CUDA, __shared__ FP sDenom[Br];)"}
{"predict": "(22, CUDA, CHECK_CUDA(cudaSetDevice(device_id_));)", "label": "(22, CUDA, CudaCheck(cudaSetDevice(device_id_));)"}
{"predict": "(7, OpenCL, void *mappedPtr = clEnqueueMapBuffer(cmdQ.get(), buffer.get(), CL_FALSE, CL_MAP_WRITE, offset, size, 0, nullptr, nullptr, nullptr);); (13, OpenCL, retVal = clEnqueueUnmapMemObject(cmdQ.get(), buffer.get(), mappedPtr, 0, nullptr, nullptr);)", "label": "(14, OpenCL, retVal = clEnqueueUnmapMemObject(cmdQ.get(), buffer.get(), mappedPtr, 0, nullptr, nullptr);); (6, OpenCL, void *mappedPtr = clEnqueueMapBuffer(cmdQ.get(), buffer.get(), CL_FALSE, CL_MAP_WRITE, offset, size, 0, nullptr, nullptr, nullptr);)"}
{"predict": "(43, OpenMP, #pragma omp for reduction(&& : argc, z)); (24, OpenMP, #pragma omp for reduction(+ : argc)); (28, OpenMP, #pragma omp for reduction(+ : argc) allocate , allocate(, allocate(omp_default , allocate(omp_default_mem_alloc, allocate(omp_default_mem_alloc:, allocate(omp_default_mem_alloc: argc, allocate(omp_default_mem_alloc: argv), allocate(argv)); (11, OpenMP, #pragma omp for reduction(-); (1, OpenMP, #pragma omp parallel); (44, OpenMP, #pragma omp for reduction(+ : a, b)); (13, OpenMP, #pragma omp for reduction()); (61, OpenMP, #pragma omp for reduction(+ : i)); (46, OpenMP, #pragma omp for reduction(+ : h, k)); (55, OpenMP, #pragma omp parallel private(i)); (22, OpenMP, #pragma omp for reduction(foo : argc); (35, OpenMP, #pragma omp for reduction(^ : S1)); (13, OpenMP, #pragma omp for reduction(| : argc,); (49, OpenMP, #pragma omp parallel reduction(min : i)); (58, OpenMP, #pragma omp for reduction(+ : j)); (39, OpenMP, #pragma omp for reduction(&& : C::cc)); (44, OpenMP, #pragma omp for reduction(max : h.b)); (23, OpenMP, #pragma omp for reduction(~ : argc)); (-3, OpenMP, #pragma omp for reduction(); (31, OpenMP, #pragma omp for reduction(& : e, g)); (52, OpenMP, #pragma omp parallel shared(i)); (-13, OpenMP, #pragma omp for reduction); (-11, OpenMP, #pragma omp for reduction +); (2, OpenMP, #pragma omp for reduction(\\)); (23, OpenMP, #pragma omp for reduction(min : a, b)); (47, OpenMP, #pragma omp for reduction(+ : i)); (56, OpenMP, #pragma omp for reduction(task, + : i)); (25, OpenMP, #pragma omp for reduction(* : argv[1], get()[0])); (8, OpenMP, #pragma omp for reduction(&& : argc)); (30,", "label": "(69, OpenMP, #pragma omp parallel private(i)); (42, OpenMP, #pragma omp master taskloop lastprivate(a, b)); (49, OpenMP, #pragma omp master taskloop lastprivate(z, e, g)); (16, OpenMP, #pragma omp master taskloop lastprivate(argc); (2, OpenMP, #pragma omp parallel); (18, OpenMP, #pragma omp master taskloop lastprivate(argc,); (25, OpenMP, #pragma omp master taskloop lastprivate(argc) allocate , allocate(, allocate(omp_default , allocate(omp_default_mem_alloc, allocate(omp_default_mem_alloc:, allocate(omp_default_mem_alloc: argc, allocate(omp_default_mem_alloc: argv), allocate(argv)); (0, OpenMP, #pragma omp master taskloop lastprivate); (47, OpenMP, #pragma omp master taskloop lastprivate(h)); (18, OpenMP, #pragma omp master taskloop lastprivate(argc > 0 ? argv[1] : argv[2])); (64, OpenMP, #pragma omp master taskloop lastprivate(i)); (51, OpenMP, #pragma omp master taskloop allocate(omp_thread_mem_alloc: i) lastprivate(i)); (27, OpenMP, #pragma omp master taskloop lastprivate(S1)); (57, OpenMP, #pragma omp master taskloop lastprivate(j)); (-3, OpenMP, #pragma omp master taskloop lastprivate(); (32, OpenMP, #pragma omp master taskloop lastprivate(argv[1])); (-1, OpenMP, #pragma omp master taskloop lastprivate()); (18, OpenMP, #pragma omp master taskloop lastprivate(conditional: argc) lastprivate(conditional:); (50, OpenMP, #pragma omp parallel shared(i))"}
{"predict": "(5, CUDA, cudaStream_t stream = at::cuda::getCurrentCUDAStream();)", "label": "(5, CUDA, cudaStream_t stream = at::cuda::getCurrentCUDAStream();)"}
{"predict": "(6, MPI, MPI_Issend(sbuf, size, MPI_DOUBLE, to, tagno, MPI_COMM_WORLD, &request);); (21, MPI, MPI_Wait(&request, MPI_STATUS_IGNORE);); (13, MPI, MPI_Send(NULL, 0, MPI_BYTE, from, 100, MPI_COMM_WORLD);); (3, MPI, MPI_Barrier(MPI_COMM_WORLD);); (8, MPI, MPI_Recv(NULL, 0, MPI_BYTE, to, 100, MPI_COMM_WORLD, MPI_STATUS_IGNORE);)", "label": "(13, MPI, MPI_Recv(NULL, 0, MPI_BYTE, to, 100, MPI_COMM_WORLD, MPI_STATUS_IGNORE);); (11, MPI, MPI_Send(NULL, 0, MPI_BYTE, from, 100, MPI_COMM_WORLD);); (4, MPI, MPI_Irecv(rbuf, size, MPI_BYTE, from, tagno, MPI_COMM_WORLD, &request);); (18, MPI, MPI_Send(sbuf, size, MPI_BYTE, to, tagno, MPI_COMM_WORLD);); (20, MPI, MPI_Wait(&request, MPI_STATUS_IGNORE);)"}
{"predict": "(13, MPI, MPI_Abort(MPI_COMM_WORLD, MPIT_result);); (14, MPI, MPIT_result = MPI_T_pvar_session_create(session);); (8, MPI, MPIT_result = MPI_T_init_thread(MPI_THREAD_SINGLE, &provided);)", "label": "(13, MPI, MPI_Abort(MPI_COMM_WORLD, MPIT_result);); (14, MPI, MPIT_result = MPI_T_pvar_session_create(session);); (8, MPI, MPIT_result = MPI_T_init_thread(MPI_THREAD_SINGLE, &provided);)"}
{"predict": "(4, OpenMP, #pragma omp parallel); (6, OpenMP, #pragma omp for schedule(MY_SCHEDULE)); (6, OpenMP, #pragma omp atomic)", "label": "(9, OpenMP, #pragma omp atomic); (3, OpenMP, #pragma omp parallel); (5, OpenMP, #pragma omp for schedule(MY_SCHEDULE))"}
{"predict": "(14, CUDA, cudaError_t error = cudaGetDeviceProperties(&props, 0);); (11, CUDA, CUDA_CHECK(cudaGetDevice(&current_device_id));); (11, CUDA, CUDA_CHECK(cudaGetDeviceProperties(&props, current_device_id));)", "label": "(14, CUDA, cudaError_t error = cudaGetDeviceProperties(&props, 0);); (11, CUDA, CUDA_CHECK(cudaGetDevice(&current_device_id));); (11, CUDA, CUDA_CHECK(cudaGetDeviceProperties(&props, current_device_id));)"}
{"predict": "(4, CUDA, cudaError_t err = cudaFree(handle->ws);); (8, CUDA, err = cudaStreamDestroy(handle->stream);)", "label": "(4, CUDA, auto err = cudaFree(handle->deviceWs);); (8, CUDA, err = cudaEventDestroy(handle->wsMutex);)"}
{"predict": "(18, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);)", "label": "(18, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);)"}
{"predict": "(10, OpenMP, comp_add_script_line(\"Func=DynamicFunc__append_keys1\\n\");); (28, OpenMP, comp_add_script_line(\"Func=DynamicFunc__append_input1\\n\");); (84, OpenMP, comp_add_script_line(\"TestString%d=%s\\n\", i, _p->pLine[i]);); (24, OpenMP, comp_add_script_line(\"Func=DynamicFunc__append_hash\\n\");); (0, OpenMP, comp_add_script_line(\"Func=DynamicFunc__append_1st_salt%s\\n\", side==2?\"2\":\"\");)", "label": "(39, OpenMP, comp_add_script_line(\"Func=DynamicFunc__\" #C \"_crypt_input%d_to_output1_FINAL\\n\",side);); (18, OpenMP, else                 comp_add_script_line(\"Func=DynamicFunc__append_salt%s\\n\", side==2?\"2\":\"\");); (9, OpenMP, comp_add_script_line(\"Func=DynamicFunc__clean_input2_kwik\\n\");); (61, OpenMP, comp_add_script_line(\"MaxInputLen=110\\n\");); (5, OpenMP, comp_add_script_line(\"Func=DynamicFunc__set_input_len_%d\\n\", keys_hex_len);)"}
{"predict": "(50, OpenCL, clReleaseEvent(event);)", "label": "(50, OpenCL, clReleaseEvent(event);)"}
{"predict": "(31, CUDA, ColorSpinorParam cudaParam(cpuParam, inv_param, QUDA_CUDA_FIELD_LOCATION);)", "label": "(17, CUDA, ColorSpinorParam cudaParam(cpuParam, inv_param, QUDA_CUDA_FIELD_LOCATION);)"}
{"predict": "(46, MPI, MPI_Waitall(num_req, request, status);); (41, MPI, MPI_Isend(&size_send, 1, MPI_INT, rank_send, 0, comm, &request[1]);); (26, MPI, MPI_Irecv(&size_recv, 1, MPI_INT, rank_recv, 0, comm, &request[0]);); (40, MPI, MPI_Waitall(num_req, request, status);)", "label": "(55, MPI, MPI_Irecv(buf_recv, size_recv, MPI_BYTE, rank_recv, 0, comm, &request[num_req]);); (25, MPI, MPI_Irecv(&size_recv, 1, MPI_INT, rank_recv, 0, comm, &request[num_req]);); (60, MPI, MPI_Isend(buf_send, size_send, MPI_BYTE, rank_send, 0, comm, &request[num_req]);); (38, MPI, MPI_Isend(&size_send, 1, MPI_INT, rank_send, 0, comm, &request[num_req]);); (41, MPI, MPI_Waitall(num_req, request, status);)"}
{"predict": "(3, CUDA, extern __shared__ float shared[];)", "label": "(3, CUDA, extern __shared__ float shared[];)"}
{"predict": "(4, OpenMP, #pragma omp parallel for)", "label": "(4, OpenMP, #pragma omp parallel for)"}
{"predict": "(40, OpenMP, #pragma omp distribute simd safelen ((ST > 0) ? 1 + ST : 2)); (27, OpenMP, #pragma omp distribute simd safelen (ST); (53, OpenMP, #pragma omp distribute simd safelen (S)); (63, OpenMP, #pragma omp distribute simd safelen (argv[1]=2)); (74, OpenMP, #pragma omp distribute simd safelen (N)); (6, OpenMP, #pragma omp distribute simd safelen (); (43, OpenMP, #pragma omp distribute simd safelen (foobool(argc)), safelen (true), safelen (-5)); (10, OpenMP, #pragma omp distribute simd safelen ()); (14, OpenMP, #pragma omp distribute simd safelen (argc); (63, OpenMP, #pragma omp distribute simd safelen (4)); (-5, OpenMP, #pragma omp distribute simd safelen); (-8, OpenMP, #pragma omp target); (22, OpenMP, #pragma omp distribute simd safelen (1))); (-9, OpenMP, #pragma omp teams)", "label": "(11, OpenMP, #pragma omp distribute simd safelen (); (71, OpenMP, #pragma omp distribute simd safelen (4)); (3, OpenMP, #pragma omp distribute simd safelen); (19, OpenMP, #pragma omp distribute simd safelen (argc); (51, OpenMP, #pragma omp distribute simd safelen (S)); (44, OpenMP, #pragma omp distribute simd safelen (foobool(argc)), safelen (true), safelen (-5)); (72, OpenMP, #pragma omp distribute simd safelen (N)); (27, OpenMP, #pragma omp distribute simd safelen (1))); (58, OpenMP, #pragma omp distribute simd safelen (argv[1]=2)); (-6, OpenMP, #pragma omp target); (18, OpenMP, #pragma omp distribute simd safelen (ST); (29, OpenMP, #pragma omp distribute simd safelen ((ST > 0) ? 1 + ST : 2)); (5, OpenMP, #pragma omp distribute simd safelen ()); (-9, OpenMP, #pragma omp teams)"}
{"predict": "(12, OpenMP, #pragma omp parallel for simd private()); (55, OpenMP, #pragma omp parallel private(i)); (40, OpenMP, #pragma omp parallel for simd private(h)); (45, OpenMP, #pragma omp parallel for simd private(i)); (2, OpenMP, #pragma omp parallel); (21, OpenMP, #pragma omp parallel for simd private(argc) allocate , allocate(, allocate(omp_default , allocate(omp_default_mem_alloc, allocate(omp_default_mem_alloc:, allocate(omp_default_mem_alloc: argc, allocate(omp_default_mem_alloc: argv), allocate(argv)); (24, OpenMP, #pragma omp parallel for simd private(S1)); (27, OpenMP, #pragma omp parallel for simd private(a, b)); (29, OpenMP, #pragma omp parallel for simd private(argv[1])); (45, OpenMP, #pragma omp parallel for simd private(j)); (30, OpenMP, #pragma omp parallel for simd private(e, g, z)); (42, OpenMP, #pragma omp parallel shared(i)); (5, OpenMP, #pragma omp parallel for simd private(argc); (8, OpenMP, #pragma omp parallel for simd private(argc,); (-3, OpenMP, #pragma omp parallel for simd private); (13, OpenMP, #pragma omp parallel for simd private(argc > 0 ? argv[1] : argv[2])); (43, OpenMP, #pragma omp parallel for simd private()", "label": "(33, OpenMP, #pragma omp parallel for simd private(argv[1])); (29, OpenMP, #pragma omp parallel for simd private(z, a, b)); (47, OpenMP, #pragma omp parallel for simd private(i)); (15, OpenMP, #pragma omp parallel for simd private(argc,); (23, OpenMP, #pragma omp parallel for simd private(S1)); (50, OpenMP, #pragma omp parallel shared(i)); (33, OpenMP, #pragma omp parallel for simd private(h)); (49, OpenMP, #pragma omp parallel private(i)); (-2, OpenMP, #pragma omp parallel); (12, OpenMP, #pragma omp parallel for simd private(argc > 0 ? argv[1] : argv[2])); (26, OpenMP, #pragma omp parallel for simd private(e, g)); (-2, OpenMP, #pragma omp parallel for simd private); (30, OpenMP, #pragma omp parallel for simd nowait); (44, OpenMP, #pragma omp parallel for simd private(j)); (10, OpenMP, #pragma omp parallel for simd private(argc) allocate , allocate(, allocate(omp_default , allocate(omp_default_mem_alloc, allocate(omp_default_mem_alloc:, allocate(omp_default_mem_alloc: argc, allocate(omp_default_mem_alloc: argv), allocate(argv)); (0, OpenMP, #pragma omp parallel for simd private(argc); (-4, OpenMP, #pragma omp parallel for simd private()"}
{"predict": "(3, OpenMP, #pragma omp parallel); (3, OpenMP, #pragma omp master taskloop)", "label": "(3, OpenMP, #pragma omp parallel); (3, OpenMP, #pragma omp master taskloop)"}
{"predict": "(25, MPI, MPI_Comm_rank(comm_row, &mycol);); (25, MPI, MPI_Comm_rank(comm_col, &myrow);); (25, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &my_ID);)", "label": "(25, MPI, MPI_Comm_rank(comm_row, &mycol);); (25, MPI, MPI_Comm_rank(comm_col, &myrow);); (25, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &my_ID);)"}
{"predict": "(56, OpenMP, #pragma omp simd)", "label": "(56, OpenMP, #pragma omp simd)"}
{"predict": "(54, MPI, MPI_Win_create(target.buf, target.maxbufsize, extent, MPI_INFO_NULL, comm, &win);); (50, MPI, MPI_Comm_size(comm, &size);); (62, MPI, MPI_Barrier(comm);); (70, MPI, MPI_Win_free(&win);); (26, MPI, MPI_Type_get_extent(dtp.DTP_base_type, &lb, &extent);); (46, MPI, MPI_Win_create(NULL, 0, 1, MPI_INFO_NULL, comm, &win);); (47, MPI, MPI_Comm_rank(comm, &rank);)", "label": "(52, MPI, MPI_Comm_size(comm, &size);); (62, MPI, MPI_Barrier(comm);); (52, MPI, MPI_Win_create(target.buf, target.maxbufsize, base_type_size, MPI_INFO_NULL, comm, &win);); (69, MPI, MPI_Win_free(&win);); (25, MPI, MPI_Type_get_extent(dtp.DTP_base_type, &lb, &extent);); (46, MPI, MPI_Comm_rank(comm, &rank);)"}
{"predict": "(1, CUDA, __shared__ float cache[threadsPerBlock];)", "label": "(1, CUDA, __shared__ float cache[threadsPerBlock];)"}
{"predict": "(116, OpenMP, plasma_time_t start = omp_get_wtime();); (117, OpenMP, plasma_time_t stop = omp_get_wtime();)", "label": "(117, OpenMP, plasma_time_t stop = omp_get_wtime();); (113, OpenMP, plasma_time_t start = omp_get_wtime();)"}
{"predict": "(7, CUDA, __shared__ float block_acc[32];)", "label": "(7, CUDA, __shared__ float block_acc[32];)"}
{"predict": "(3, OpenMP, #pragma omp for)", "label": "(3, OpenMP, #pragma omp for collapse(2) schedule(runtime))"}
{"predict": "(44, OpenMP, #pragma omp target parallel for simd linear(i)); (23, OpenMP, #pragma omp target parallel for simd linear(argc : 5) allocate , allocate(, allocate(omp_default , allocate(omp_default_mem_alloc, allocate(omp_default_mem_alloc:, allocate(omp_default_mem_alloc: argc, allocate(omp_default_mem_alloc: argv), allocate(argv)); (7, OpenMP, #pragma omp target parallel for simd linear(); (24, OpenMP, #pragma omp target parallel for simd linear(S1)); (47, OpenMP, #pragma omp target parallel for simd linear(v : i)); (10, OpenMP, #pragma omp target parallel for simd linear(argc); (15, OpenMP, #pragma omp target parallel for simd linear(argc > 0 ? argv[1] : argv[2])); (50, OpenMP, #pragma omp target parallel for simd linear(j)); (39, OpenMP, #pragma omp parallel); (26, OpenMP, #pragma omp target parallel for simd linear(argv[1])); (31, OpenMP, #pragma omp target parallel for simd linear(z, h)); (50, OpenMP, #pragma omp target parallel for simd linear(v : j)); (26, OpenMP, #pragma omp target parallel for simd allocate(omp_thread_mem_alloc: e) linear(e, g)); (-1, OpenMP, #pragma omp target parallel for simd linear()); (-8, OpenMP, #pragma omp target parallel for simd linear); (3, OpenMP, #pragma omp target parallel for simd linear(argc,); (16, OpenMP, #pragma omp target parallel for simd linear(a, b : B::ib))", "label": "(32, OpenMP, #pragma omp target parallel for simd linear(a, b : B::ib)); (23, OpenMP, #pragma omp target parallel for simd linear(argc : 5) allocate , allocate(, allocate(omp_default , allocate(omp_default_mem_alloc, allocate(omp_default_mem_alloc:, allocate(omp_default_mem_alloc: argc, allocate(omp_default_mem_alloc: argv), allocate(argv)); (4, OpenMP, #pragma omp target parallel for simd linear); (12, OpenMP, #pragma omp target parallel for simd linear(argc); (40, OpenMP, #pragma omp target parallel for simd linear(i)); (33, OpenMP, #pragma omp target parallel for simd linear(e, g, z)); (45, OpenMP, #pragma omp target parallel for simd linear(v : i)); (34, OpenMP, #pragma omp target parallel for simd linear(h)); (39, OpenMP, #pragma omp parallel); (12, OpenMP, #pragma omp target parallel for simd linear(argc > 0 ? argv[1] : argv[2])); (-1, OpenMP, #pragma omp target parallel for simd linear(); (7, OpenMP, #pragma omp target parallel for simd linear(argc,); (49, OpenMP, #pragma omp target parallel for simd linear(v : j)); (22, OpenMP, #pragma omp target parallel for simd linear(argv[1])); (13, OpenMP, #pragma omp target parallel for simd linear(S1)); (42, OpenMP, #pragma omp target parallel for simd linear(j)); (-4, OpenMP, #pragma omp target parallel for simd linear())"}
{"predict": "(25, OpenMP, #pragma omp parallel for)", "label": "(25, OpenMP, #pragma omp parallel for)"}
{"predict": "(18, OpenMP, #pragma omp target simd collapse(,); (40, OpenMP, #pragma omp target simd collapse(4, )); (3, OpenMP, #pragma omp target simd collapse); (67, OpenMP, #pragma omp target simd collapse(2.5)); (25, OpenMP, #pragma omp target simd collapse 4)); (4, OpenMP, #pragma omp target simd collapse(); (60, OpenMP, #pragma omp target simd collapse(4, 8)); (67, OpenMP, #pragma omp target simd collapse(foo())); (26, OpenMP, #pragma omp target simd collapse(4); (30, OpenMP, #pragma omp target simd collapse(4,); (72, OpenMP, #pragma omp target simd collapse(0)); (75, OpenMP, #pragma omp target simd collapse(5 - 5)); (34, OpenMP, #pragma omp target simd collapse(4 4)); (12, OpenMP, #pragma omp target simd collapse(, )); (43, OpenMP, #pragma omp target simd collapse(4, , 4)); (57, OpenMP, #pragma omp target simd collapse(-5)); (-1, OpenMP, #pragma omp target simd collapse()); (2, OpenMP, #pragma omp target simd collapse 4); (42, OpenMP, #pragma omp target simd collapse(4 0 4))", "label": "(41, OpenMP, #pragma omp target simd collapse(4, )); (12, OpenMP, #pragma omp target simd collapse()); (48, OpenMP, #pragma omp target simd collapse(4 4)); (63, OpenMP, #pragma omp target simd collapse(4, 8)); (82, OpenMP, #pragma omp target simd collapse(5 - 5)); (4, OpenMP, #pragma omp target simd collapse(); (15, OpenMP, #pragma omp target simd collapse(, )); (10, OpenMP, #pragma omp target simd collapse(,); (74, OpenMP, #pragma omp target simd collapse(0)); (36, OpenMP, #pragma omp target simd collapse(4)); (45, OpenMP, #pragma omp target simd collapse(4, , 4)); (63, OpenMP, #pragma omp target simd collapse(foo())); (66, OpenMP, #pragma omp target simd collapse(-5)); (23, OpenMP, #pragma omp target simd collapse(4,); (17, OpenMP, #pragma omp target simd collapse(4); (11, OpenMP, #pragma omp target simd collapse 4)); (-11, OpenMP, #pragma omp target simd collapse); (53, OpenMP, #pragma omp target simd collapse(2.5))"}
{"predict": "(97, OpenMP, nthreads = omp_get_num_threads();); (82, OpenMP, #pragma omp parallel firstprivate(niter) private(step)); (62, OpenMP, #pragma omp parallel); (85, OpenMP, #pragma omp master)", "label": "(97, OpenMP, nthreads = omp_get_num_threads();); (82, OpenMP, #pragma omp parallel firstprivate(niter) private(step)); (62, OpenMP, #pragma omp parallel); (85, OpenMP, #pragma omp master)"}
{"predict": "(35, OpenMP, iis3dhhc_offset_temp_comp_set(&dev_ctx, PROPERTY_ENABLE);)", "label": "(35, OpenMP, iis3dhhc_offset_temp_comp_set(&dev_ctx, PROPERTY_ENABLE);)"}
{"predict": "(47, OpenMP, #pragma omp target exit data nowait depend(in : argc,argv[i:argc],x[:]) map(from: a)); (34, OpenMP, #pragma omp target exit data map(from: c) nowait); (43, OpenMP, #pragma omp target exit data nowait map(from: c) map(release: d)); (40, OpenMP, #pragma omp target exit data nowait map(always,release: e)); (10, OpenMP, #pragma omp target exit data map(from: a) if(b>g)); (53, OpenMP, #pragma omp target exit data depend(in : argc,argv[i:argc],x[:]) map(release: c) nowait if(b>g)); (36, OpenMP, #pragma omp target exit data map(from: a) if(b>g) nowait); (57, OpenMP, #pragma omp target exit data nowait map(from: x[0:10],c) depend(in : argc,argv[i:argc],x[:])); (13, OpenMP, #pragma omp target exit data map(release: c) if(b>g)); (58, OpenMP, #pragma omp target exit data nowait map(from: c) depend(in : argc,argv[i:argc],x[:]) map(release: d)); (15, OpenMP, #pragma omp target exit data nowait map(from: a)); (36, OpenMP, #pragma omp target exit data nowait map(from: a) depend(in : argc,argv[i:argc],x[:]) if(target exit data: b)); (15, OpenMP, #pragma omp target exit data nowait map(from: a) if(target exit data: b)); (26, OpenMP, #pragma omp target exit data map(from: c) nowait if(b>g)); (18, OpenMP, #pragma omp target exit data nowait map(always,release: e)); (41, OpenMP, #pragma omp target exit data nowait depend(in : argc,argv[i:argc],x[:]) map(always,release: e)); (5, OpenMP, #pragma omp target exit data map(from: x[0:10], c)); (15, OpenMP, #pragma omp target exit data nowait map(from: c)); (8, OpenMP,", "label": "(72, OpenMP, #pragma omp target exit data depend(in : argc,argv[i:argc],x[:]) map(release: c) nowait if(b>g)); (17, OpenMP, #pragma omp target exit data map(release: c) if(b>g)); (52, OpenMP, #pragma omp target exit data nowait map(from: c) map(release: d)); (57, OpenMP, #pragma omp target exit data nowait depend(in : argc,argv[i:argc],x[:]) map(from: a)); (1, OpenMP, #pragma omp target exit data map(from: a)); (16, OpenMP, #pragma omp target exit data map(from: x[0:10], c)); (24, OpenMP, #pragma omp target exit data map(from: c) map(release: d)); (41, OpenMP, #pragma omp target exit data map(release: c) nowait if(b>g)); (58, OpenMP, #pragma omp target exit data map(from: a) if (b > g) nowait depend(in : argc,argv[i:argc],x[:])); (72, OpenMP, #pragma omp target exit data nowait depend(in : argc,argv[i:argc],x[:]) map(always,release: e)); (5, OpenMP, #pragma omp target exit data map(from: c)); (58, OpenMP, #pragma omp target exit data map(from: c) depend(in : argc,argv[i:argc],x[:]) nowait); (30, OpenMP, #pragma omp target exit data map(from: a) if (b > g) nowait); (38, OpenMP, #pragma omp target exit data nowait map(from: x[0:10], c)); (19, OpenMP, #pragma omp target exit data map(always,release: e)); (30, OpenMP, #pragma omp target exit data map(from: c) nowait); (62, OpenMP, #pragma omp target exit data nowait map(from: c) depend(in : argc,argv[i:argc],x[:]) map(release: d)); (58, OpenMP, #pragma omp target exit data nowait map(from: x[0:10], c) depend(in : argc,argv[i:argc],x[:])); (-6, OpenMP, #pragma omp target exit data map(from: a) if (b > g)); (5, OpenMP, #pragma omp target exit data map(delete: x[0:10])); (43, OpenMP, #pragma omp target exit data nowait map(from: a) depend(in : argc,argv[i:argc],x[:]) if (target exit data: b)); (36, OpenMP, #pragma omp target exit data nowait map(always,release: e)); (17, OpenMP, #pragma omp target exit data nowait map(from: a) if (target exit data: b)); (-14, OpenMP, #pragma omp target exit data map(from: a) if (target exit data: b)); (12, OpenMP, #pragma omp target exit data nowait map(from: a)); (2, OpenMP, #pragma omp target exit data map(always, delete: x[0:10]))"}
{"predict": "(63, OpenCL, TEST_OCL_CHECK(clReleaseCommandQueue(ocl_queue));); (54, OpenCL, TEST_OCL_CHECK(clWaitForEvents(1, &read_buffer_event));); (61, OpenCL, TEST_OCL_CHECK(clReleaseEvent(eltwise_event));); (58, OpenCL, TEST_OCL_CHECK(clReleaseEvent(write_buffer_event));)", "label": "(62, OpenCL, TEST_OCL_CHECK(clReleaseEvent(read_buffer_event));); (64, OpenCL, TEST_OCL_CHECK(clReleaseCommandQueue(ocl_queue));); (52, OpenCL, TEST_OCL_CHECK(clWaitForEvents(1, &read_buffer_event));); (61, OpenCL, TEST_OCL_CHECK(clReleaseEvent(eltwise_event));); (59, OpenCL, TEST_OCL_CHECK(clReleaseEvent(write_buffer_event));)"}
{"predict": "(4, CUDA, cudaExtent extent = make_cudaExtent(4, 5, 6);)", "label": "(10, CUDA, extent = make_cudaExtent(4, 5, 0);); (3, CUDA, cudaExtent extent = make_cudaExtent(4, 5, 6);)"}
{"predict": "(16, CUDA, cudaMalloc((void**)&device_array, num_bytes);); (36, CUDA, cudaDeviceSynchronize();); (43, CUDA, cudaError_t error = cudaGetLastError();); (65, CUDA, cudaFree(device_array);); (47, CUDA, printf(\"CUDA error: %s\\n\", cudaGetErrorString(error));)", "label": "(16, CUDA, cudaMalloc((void**)&device_array, num_bytes);); (49, CUDA, printf(\"CUDA Error: %s\\n\", cudaGetErrorString(error));); (35, CUDA, cudaThreadSynchronize();); (42, CUDA, cudaError_t error = cudaGetLastError();); (66, CUDA, cudaFree(device_array);); (54, CUDA, cudaMemcpy(host_array, device_array, num_bytes, cudaMemcpyDeviceToHost);)"}
{"predict": "(20, OpenMP, int numThreads = omp_get_max_threads();); (25, OpenMP, #pragma omp parallel for); (36, OpenMP, int threadId = omp_get_thread_num();)", "label": "(19, OpenMP, int numThreads = omp_get_max_threads();); (25, OpenMP, #pragma omp parallel for); (35, OpenMP, int threadId = omp_get_thread_num();)"}
{"predict": "(56, MPI, MPI_Finalize();); (22, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (30, MPI, MPI_Bcast(&params, 1, *params_type, root, MPI_COMM_WORLD);); (14, MPI, MPI_Abort(MPI_COMM_WORLD, 1);); (10, MPI, MPI_Init_thread(NULL, NULL, MPI_THREAD_FUNNELED, &thread_level);)", "label": "(56, MPI, MPI_Finalize();); (22, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (29, MPI, MPI_Bcast(&params, 1, *params_type, root, MPI_COMM_WORLD);); (14, MPI, MPI_Abort(MPI_COMM_WORLD, 1);); (10, MPI, MPI_Init_thread(NULL, NULL, MPI_THREAD_FUNNELED, &thread_level);)"}
{"predict": "(25, MPI, MPI_Bcast(fparams, 1, MPI_FLOAT, 0, MPI_COMM_WORLD);); (2, MPI, MPI_Bcast(iparams, num_int_params, MPI_INT, 0, MPI_COMM_WORLD);)", "label": "(23, MPI, MPI_Bcast(&fparams[0], 1, MPI_FLOAT, 0, MPI_COMM_WORLD);); (6, MPI, MPI_Bcast(&iparams[0], num_int_params, MPI_INT, 0, MPI_COMM_WORLD);)"}
{"predict": "(3, MPI, MPI_Init_thread(&argc, &argv, 1, &mpi_threads_provided);); (35, MPI, MPI_Finalize();); (2, MPI, MPI_Comm_size(MPI_COMM_WORLD, &nproc);); (0, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);)", "label": "(35, MPI, MPI_Finalize();); (2, MPI, MPI_Init_thread(&argc, &argv, MPI_THREAD_MULTIPLE, &mpi_threads_provided);); (3, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (3, MPI, MPI_Comm_size(MPI_COMM_WORLD, &nproc);)"}
{"predict": "(161, MPI, MPI_Bcast(out_starting_pos, 1, MPI_UINT64_T, ranks-1, MPI_COMM_WORLD);); (17, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (17, MPI, MPI_Comm_size(MPI_COMM_WORLD, &ranks);); (214, MPI, MPI_Bcast(out_offsets, *out_count, MPI_UINT64_T, ranks-1, MPI_COMM_WORLD);); (166, MPI, MPI_Bcast(out_count, 1, MPI_UINT64_T, ranks-1, MPI_COMM_WORLD);)", "label": "(141, MPI, MPI_Exscan(&max_offset, &starting_pos, 1, MPI_UINT64_T, MPI_MAX, MPI_COMM_WORLD);); (16, MPI, MPI_Comm_size(MPI_COMM_WORLD, &ranks);); (258, MPI, MPI_Allreduce(&pos, &max_pos, 1, MPI_UINT64_T, MPI_MAX, MPI_COMM_WORLD);); (13, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);)"}
{"predict": "(43, CUDA, cudaGetLastError();); (33, CUDA, cudaEventRecord(end, s);); (33, CUDA, cudaEventSynchronize(end);); (67, CUDA, cudaEventDestroy(end);); (43, CUDA, cudaEventDestroy(begin);); (3, CUDA, cudaStreamCreate(&s);); (25, CUDA, cudaEventRecord(begin, s);); (29, CUDA, cudaEventElapsedTime(&time, begin, end);); (3, CUDA, cudaEventCreate(&end);); (35, CUDA, cudaFree(ws_ptr);); (0, CUDA, cudaEventCreate(&begin);); (59, CUDA, cudaStreamDestroy(s);)", "label": "(72, CUDA, cudaStreamDestroy(s);); (5, CUDA, cudaStreamCreate(&s);); (31, CUDA, cudaEventRecord(end, s);); (31, CUDA, cudaEventSynchronize(end);); (23, CUDA, cudaEventRecord(begin, s);); (66, CUDA, cudaEventDestroy(end);); (3, CUDA, cudaEventCreate(&end);); (63, CUDA, cudaEventDestroy(begin);); (0, CUDA, cudaEventCreate(&begin);); (27, CUDA, cudaEventElapsedTime(&time, begin, end);)"}
{"predict": "(11, MPI, ::dray::dray::mpi_comm(MPI_Comm_c2f(comm));)", "label": "(11, MPI, ::dray::dray::mpi_comm(MPI_Comm_c2f(comm));)"}
{"predict": "(20, OpenMP, #pragma omp target parallel defaultmap(none:pointer)); (35, OpenMP, #pragma omp target defaultmap(none:pointer)); (29, OpenMP, #pragma omp target defaultmap(none:aggregate)); (3, OpenMP, #pragma omp target parallel defaultmap()); (8, OpenMP, #pragma omp target parallel defaultmap(tofrom,); (15, OpenMP, #pragma omp target parallel defaultmap(none:scalar) map(argc)); (-3, OpenMP, #pragma omp target parallel defaultmap(); (10, OpenMP, #pragma omp target parallel defaultmap(none:scalar)); (2, OpenMP, #pragma omp target parallel defaultmap(tofrom)); (20, OpenMP, #pragma omp target defaultmap(none:aggregate) defaultmap(none:scalar) map(argc)); (41, OpenMP, #pragma omp target defaultmap(none:pointer) map(bazPtr)); (1, OpenMP, #pragma omp target parallel defaultmap (tofrom:); (4, OpenMP, #pragma omp target parallel defaultmap (tofrom scalar:); (9, OpenMP, #pragma omp target parallel defaultmap(none:pointer) map(g)); (1, OpenMP, #pragma omp target parallel defaultmap (tofrom); (-10, OpenMP, #pragma omp target parallel defaultmap); (23, OpenMP, #pragma omp target defaultmap(none:aggregate) defaultmap(none:scalar) map(argc, arr[1])); (1, OpenMP, #pragma omp target parallel defaultmap (scalar:); (4, OpenMP, #pragma omp target parallel defaultmap (scalar); (-8, OpenMP, #pragma omp parallel); (8, OpenMP, #pragma omp target parallel defaultmap(none:scalar) map(g) map(argc)); (23, OpenMP, #pragma omp target defaultmap(none:pointer) map(baz.p)); (10, OpenMP, #pragma omp target parallel defaultmap(none:aggregate)); (15, OpenMP, #pragma omp target defaultmap(none:aggregate) defaultmap(none:scalar) map(argc) map(arr[1])); (3, OpenMP, #pragma omp target parallel defaultmap(alloc:pointer) defaultmap(tofrom:scalar)); (14, OpenMP, #pragma omp target defaultmap(none:scalar) map(g", "label": "(12, OpenMP, #pragma omp target parallel defaultmap(tofrom,); (1, OpenMP, #pragma omp target parallel defaultmap(); (14, OpenMP, #pragma omp target parallel defaultmap(tofrom, scalar); (24, OpenMP, #pragma omp target parallel defaultmap(none:pointer) defaultmap(none:scalar) map(g)); (35, OpenMP, #pragma omp target defaultmap(none:aggregate)); (26, OpenMP, #pragma omp target parallel defaultmap(none:aggregate) defaultmap(none:scalar) map(argc)); (8, OpenMP, #pragma omp target parallel defaultmap (scalar:); (47, OpenMP, #pragma omp target defaultmap(none:pointer)); (32, OpenMP, #pragma omp parallel); (14, OpenMP, #pragma omp target parallel defaultmap(none:pointer)); (0, OpenMP, #pragma omp target parallel defaultmap(tofrom)); (-7, OpenMP, #pragma omp target parallel defaultmap()); (7, OpenMP, #pragma omp target parallel defaultmap(tofrom:scalar) defaultmap(to:scalar)); (8, OpenMP, #pragma omp target parallel defaultmap(alloc:pointer) defaultmap(to:scalar) defaultmap(firstprivate:pointer)); (15, OpenMP, #pragma omp target parallel defaultmap(none:pointer) defaultmap(none:scalar) defaultmap(none:aggregate) map(g) firstprivate(argc)); (-7, OpenMP, #pragma omp target parallel defaultmap (tofrom:); (9, OpenMP, #pragma omp target parallel defaultmap(none:pointer) defaultmap(none:scalar) map(argc)); (-11, OpenMP, #pragma omp target parallel defaultmap(tofrom)"}
{"predict": "(57, MPI, MPI_Allreduce(&my_bytes, &max_bytes, 1, MPI_UNSIGNED_LONG, MPI_MAX, comm);)", "label": "(57, MPI, MPI_Allreduce(&my_bytes, &max_bytes, 1, MPI_UNSIGNED_LONG, MPI_MAX, comm);)"}
{"predict": "(15, CUDA, __shared__ typename BlockReduceT::TempStorage temp_storage;)", "label": "(15, CUDA, __shared__ typename BlockReduceT::TempStorage temp_storage;)"}
{"predict": "(7, OpenMP, int tid = omp_get_thread_num();)", "label": "(7, OpenMP, int tid = omp_get_thread_num();)"}
{"predict": "(14, OpenMP, return comp_by_var(lv, rv, by_number, ascendingly, casesensitively);)", "label": "(14, OpenMP, return comp_raw(lv, rv, by_number, ascendingly, casesensitively);)"}
{"predict": "(15, CUDA, cudaMalloc((void**)(&d_out), out_bytes);); (16, CUDA, cudaMemcpy(d_in1, in1.data(), in1_bytes, cudaMemcpyHostToDevice);); (13, CUDA, cudaMalloc((void**)(&d_in1), in1_bytes);); (16, CUDA, cudaMemcpy(d_in2, in2.data(), in2_bytes, cudaMemcpyHostToDevice);); (13, CUDA, cudaMalloc((void**)(&d_in2), in2_bytes);); (11, CUDA, cudaMemset(d_out, 0, out_bytes);); (90, CUDA, cudaFree(d_out);); (87, CUDA, cudaFree(d_in2);); (85, CUDA, cudaFree(d_in1);)", "label": "(27, CUDA, assert(cudaMemcpy(out.data(), d_out, out_bytes, cudaMemcpyDeviceToHost) == cudaSuccess);); (15, CUDA, cudaMalloc((void**)(&d_out), out_bytes);); (12, CUDA, cudaMalloc((void**)(&d_in1), in1_bytes);); (69, CUDA, assert(cudaMemcpyAsync(out.data(), d_out, out_bytes, cudaMemcpyDeviceToHost, context.device().stream()) == cudaSuccess);); (14, CUDA, cudaMemcpy(d_in1, in1.data(), in1_bytes, cudaMemcpyHostToDevice);); (10, CUDA, cudaMalloc((void**)(&d_in2), in2_bytes);); (67, CUDA, assert(cudaStreamSynchronize(context.device().stream()) == cudaSuccess);); (12, CUDA, cudaMemcpy(d_in2, in2.data(), in2_bytes, cudaMemcpyHostToDevice);)"}
{"predict": "(11, MPI, MPI_Comm_size(MPI_COMM_WORLD, &nprocs);); (11, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (16, MPI, MPI_Barrier(MPI_COMM_WORLD);); (13, MPI, MPI_Abort(MPI_COMM_WORLD, 1);); (4, MPI, MPI_Abort(MPI_COMM_WORLD, -1);)", "label": "(11, MPI, MPI_Comm_size(MPI_COMM_WORLD, &nprocs);); (11, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (19, MPI, MPI_Barrier(MPI_COMM_WORLD);); (13, MPI, MPI_Abort(MPI_COMM_WORLD, 1);); (4, MPI, MPI_Abort(MPI_COMM_WORLD, -1);)"}
{"predict": "(6, MPI, MPIDataCommunicator mpi_world_communicator(MPI_COMM_WORLD);)", "label": "(6, MPI, MPIDataCommunicator mpi_world_communicator(MPI_COMM_WORLD);)"}
{"predict": "(12, CUDA, __shared__ thrust::cuda_cub::core::uninitialized_array<T, 1024> tmp;)", "label": "(15, CUDA, __shared__ thrust::cuda_cub::core::uninitialized_array<T, 1024> tmp;)"}
{"predict": "(65, CUDA, cudaFree( outGPU );); (63, CUDA, cudaEventDestroy( evStop );); (64, CUDA, cudaFree( inGPU );); (60, CUDA, cudaEventDestroy( evStart );)", "label": "(65, CUDA, cudaFree( outGPU );); (63, CUDA, cudaEventDestroy( evStop );); (64, CUDA, cudaFree( inGPU );); (60, CUDA, cudaEventDestroy( evStart );)"}
{"predict": "(2, CUDA, __shared__ float siftPoint[128];); (3, CUDA, __shared__ float maxScore[FMC2H];); (3, CUDA, __shared__ float maxScor2[FMC2W];); (3, CUDA, __shared__ int maxIndex[FMC2W];)", "label": "(3, CUDA, __shared__ float maxScore[FMC2H];); (1, CUDA, __shared__ float siftPoint[128];); (2, CUDA, __shared__ float maxScor2[FMC2H];); (2, CUDA, __shared__ int maxIndex[FMC2H];)"}
{"predict": "(174, OpenMP, #pragma omp simd); (112, OpenMP, #pragma\tomp\ttaskloop private (lptr1,luptr1,nlb1,thread_id1,lsub1,lusup1,nsupr1,Linv,nn,lbstart,lbend,luptr_tmp1,nbrow,lb,lptr1_tmp,rtemp_loc,nbrow_ref,lptr,nbrow1,ik,rel,lk,iknsupc,il,i,irow,fmod_tmp,ikcol,p,ii,jj,t1,t2,j) untied); (229, OpenMP, #pragma omp simd lastprivate(irow))", "label": "(174, OpenMP, #pragma omp simd); (112, OpenMP, #pragma\tomp\ttaskloop private (lptr1,luptr1,nlb1,thread_id1,lsub1,lusup1,nsupr1,Linv,nn,lbstart,lbend,luptr_tmp1,nbrow,lb,lptr1_tmp,rtemp_loc,nbrow_ref,lptr,nbrow1,ik,rel,lk,iknsupc,il,i,irow,fmod_tmp,ikcol,p,ii,jj,t1,t2,j) untied); (229, OpenMP, #pragma omp simd lastprivate(irow))"}
{"predict": "(10, MPI, MPI_Comm_connect(port_name, MPI_INFO_NULL, 0, MPI_COMM_WORLD, &rc);); (12, MPI, MPI_Error_class(rc, &errclass);); (10, MPI, MPI_Comm_disconnect(&rc);)", "label": "(12, MPI, rc = MPI_Unpublish_name(serv_name, MPI_INFO_NULL, port_name);); (12, MPI, MPI_Error_class(rc, &errclass);); (8, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);)"}
{"predict": "(11, OpenMP, #pragma omp target enter data map(alloc : a [0:array_size], b [0:array_size])); (18, OpenMP, #pragma omp target teams distribute parallel for); (3, OpenMP, #pragma omp target map(tofrom : warp_size)); (98, OpenMP, #pragma omp target exit data map(release : a [0:array_size], b [0:array_size]))", "label": "(11, OpenMP, #pragma omp target enter data map(alloc : a [0:array_size], b [0:array_size])); (18, OpenMP, #pragma omp target teams distribute parallel for); (3, OpenMP, #pragma omp target map(tofrom : warp_size)); (98, OpenMP, #pragma omp target exit data map(release : a [0:array_size], b [0:array_size]))"}
{"predict": "(18, CUDA, thrust::device_vector<float> dev_B(Brow*Bcol);); (12, CUDA, thrust::host_vector<float>       A(Arow*Acol);); (14, CUDA, thrust::device_vector<float> dev_C(Crow*Ccol);); (32, CUDA, cudaDeviceSynchronize();); (10, CUDA, thrust::host_vector<float>       B(Brow*Bcol);); (10, CUDA, thrust::host_vector<float>       C(Crow*Ccol);); (11, CUDA, thrust::device_vector<float> dev_A(Arow*Acol);)", "label": "(18, CUDA, thrust::device_vector<float> dev_B(Brow*Bcol);); (12, CUDA, thrust::host_vector<float>       A(Arow*Acol);); (14, CUDA, thrust::device_vector<float> dev_C(Crow*Ccol);); (32, CUDA, cudaDeviceSynchronize();); (10, CUDA, thrust::host_vector<float>       B(Brow*Bcol);); (10, CUDA, thrust::host_vector<float>       C(Crow*Ccol);); (11, CUDA, thrust::device_vector<float> dev_A(Arow*Acol);)"}
{"predict": "(8, MPI, MPI_Comm_rank(comm, &comm_rank);); (9, MPI, MPI_Comm_size(comm, &comm_size);)", "label": "(8, MPI, MPI_Comm_rank(comm, &comm_rank);); (9, MPI, MPI_Comm_size(comm, &comm_size);)"}
{"predict": "(14, MPI, MPI_Init(&argc, &argv);); (203, MPI, err = MPI_File_close(&fh);); (12, MPI, MPI_Comm_size(MPI_COMM_WORLD, &nprocs);); (19, MPI, MPI_Finalize();); (57, MPI, err = MPI_Type_commit(&subType);); (10, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (52, MPI, err = MPI_Type_create_subarray(2, gsize, count, start, MPI_ORDER_C, MPI_BYTE, &subType);); (133, MPI, err = MPI_File_set_view(fh, 0, MPI_BYTE, filetype, \"native\", MPI_INFO_NULL);); (65, MPI, err = MPI_Type_free(&subType);); (192, MPI, err = MPI_File_write(fh, buf, buf_len, buftype, &status);); (21, MPI, MPI_Barrier(MPI_COMM_WORLD);); (195, MPI, err = MPI_File_sync(fh);); (46, MPI, err = MPI_Type_commit(&filetype);); (88, MPI, err = MPI_Type_commit(&buftype);); (42, MPI, err = MPI_Type_free(&filetype);); (12, MPI, MPI_Dims_create(nprocs, 2, psize);); (185, MPI, err = MPI_File_flush(fh);); (92, MPI, err = MPI_Type_free(&buftype);); (103, MPI, err = MPI_File_open(MPI_COMM_WORLD, filename, MPI_MODE_WRONLY | MPI_MODE_CREATE, MPI_INFO_NULL, &fh);)", "label": "(14, MPI, MPI_Init(&argc, &argv);); (130, MPI, err = MPI_File_iwrite_all(fh, buf, 1, buftype, &req);); (100, MPI, err = MPI_Type_commit(&buftype);); (56, MPI, err = MPI_Type_create_subarray(2, gsize, count, start, MPI_ORDER_C, MPI_BYTE, &subType);); (57, MPI, err = MPI_Type_commit(&subType);); (68, MPI, err = MPI_Type_commit(&filetype);); (69, MPI, err = MPI_Type_free(&subType);); (9, MPI, MPI_Comm_size(MPI_COMM_WORLD, &nprocs);); (7, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (115, MPI, err = MPI_File_write_all(fh, buf, 1, buftype, &status);); (125, MPI, err = MPI_File_read_all(fh, buf, 1, buftype, &status);); (129, MPI, err = MPI_File_iread_all(fh, buf, 1, buftype, &req);); (121, MPI, MPI_Wait(&req, &status);); (8, MPI, MPI_Finalize();); (106, MPI, err = MPI_File_set_view(fh, 0, MPI_BYTE, filetype, \"native\", MPI_INFO_NULL);); (134, MPI, err = MPI_Type_free(&buftype);); (131, MPI, err = MPI_Type_free(&filetype);); (127, MPI, MPI_File_close(&fh);); (10, MPI, err = MPI_Dims_create(nprocs, 2, psize);); (109, MPI, err = MPI_File_seek(fh, 0, MPI_SEEK_SET);)"}
{"predict": "(4, OpenMP, #pragma omp parallel sections); (5, OpenMP, #pragma omp section)", "label": "(5, OpenMP, #pragma omp sections); (3, OpenMP, #pragma omp parallel); (5, OpenMP, #pragma omp section)"}
{"predict": "(40, OpenMP, #pragma omp target update from(B[0:N])); (40, OpenMP, #pragma omp target update from(C[0:N])); (42, OpenMP, #pragma omp target data map(to: A[0:N]) map(tofrom: B[0:N]) map(to: C[0:N]))", "label": "(42, OpenMP, #pragma omp target); (42, OpenMP, #pragma omp target firstprivate(val))"}
{"predict": "(26, MPI, err = MPI_Alloc_mem(count, MPI_INFO_NULL, &ap);); (19, MPI, err = MPI_Alloc_mem(count, hints, &ap);); (9, MPI, MPI_Info_create(&hints);); (19, MPI, MPI_Error_class(err, &errclass);); (35, MPI, MPI_Info_free(&hints);); (6, MPI, MPI_Add_error_string(MPI_ERR_NO_MEM, (char *) \"out of memory\");); (31, MPI, MPI_Free_mem(ap);); (11, MPI, MPI_Info_set(hints, hintstrs[i], \"true\");)", "label": "(23, MPI, MPI_Error_class(err, &errclass);); (36, MPI, MPI_Free_mem(ap);); (16, MPI, MPI_Info_set(hints, \"mpich_buf_type\", hintstrs[i]);); (10, MPI, MPI_Info_set(hints, \"mpi_minimum_memory_alignment\", \"4096\");); (8, MPI, MPI_Info_create(&hints);); (20, MPI, err = MPI_Alloc_mem(count, MPI_INFO_NULL, &ap);); (3, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);); (35, MPI, MPI_Info_free(&hints);); (12, MPI, err = MPI_Alloc_mem(count, hints, &ap);)"}
{"predict": "(11, CUDA, cuda_safe_call(cudaGetDeviceCount(&ndevs));)", "label": "(24, CUDA, cuda_safe_call(cudaStreamSynchronize(stream));); (10, CUDA, cuda_safe_call(cudaGetDeviceCount(&ndevs));)"}
{"predict": "(2, CUDA, __shared__ float s[Ny][Nx];)", "label": "(2, CUDA, __shared__ float s[Ny][Nx];)"}
{"predict": "(136, OpenMP, #pragma omp distribute parallel for simd shared(i)); (75, OpenMP, #pragma omp distribute parallel for simd shared(ca)); (59, OpenMP, #pragma omp distribute parallel for simd shared(ba)); (103, OpenMP, #pragma omp distribute parallel for simd shared(h, B::x)); (116, OpenMP, #pragma omp parallel private(k)); (18, OpenMP, #pragma omp distribute parallel for simd shared()); (47, OpenMP, #pragma omp distribute parallel for simd shared(argv[1])); (117, OpenMP, #pragma omp distribute parallel for simd shared(i)); (62, OpenMP, #pragma omp distribute parallel for simd shared(da)); (9, OpenMP, #pragma omp distribute parallel for simd shared(); (95, OpenMP, #pragma omp distribute parallel for simd private(i), shared(i)); (23, OpenMP, #pragma omp distribute parallel for simd shared(argc,); (37, OpenMP, #pragma omp distribute parallel for simd shared(a, b, c, d, f)); (102, OpenMP, #pragma omp parallel); (122, OpenMP, #pragma omp distribute parallel for simd firstprivate(i), shared(i)); (86, OpenMP, #pragma omp distribute parallel for simd shared(e, g)); (114, OpenMP, #pragma omp distribute parallel for simd shared(fl)); (29, OpenMP, #pragma omp distribute parallel for simd shared(S1)); (109, OpenMP, #pragma omp parallel reduction(+ : fl)); (48, OpenMP, #pragma omp distribute parallel for simd shared(2 * 2)); (69, OpenMP, #pragma omp distribute parallel for simd shared(S2::S2s)); (73, OpenMP, #pragma omp distribute parallel for simd shared(S2::S2sc)); (12, OpenMP, #pragma omp distribute parallel for simd shared(argc > 0 ? argv[1] : argv[2])); (-7, OpenMP, #pragma omp target); (91, OpenMP, #pragma omp distribute parallel for simd firstprivate(i)); (76, OpenMP, #pragma omp distribute parallel for simd shared(p), shared(p)); (64, OpenMP, #pragma omp distribute parallel for simd shared(k)); (31, OpenMP,", "label": "(109, OpenMP, #pragma omp distribute parallel for simd reduction(^ : fl)); (118, OpenMP, #pragma omp distribute parallel for simd reduction(&& : S2::S2sc)); (132, OpenMP, #pragma omp distribute parallel for simd reduction(+ : z, o)); (21, OpenMP, #pragma omp distribute parallel for simd reduction(); (45, OpenMP, #pragma omp distribute parallel for simd reduction(foo : argc); (140, OpenMP, #pragma omp distribute parallel for simd reduction(+ : p), reduction(+ : p)); (6, OpenMP, #pragma omp target); (87, OpenMP, #pragma omp distribute parallel for simd reduction(+ : ba)); (131, OpenMP, #pragma omp distribute parallel for simd private(i), reduction(+ : j), reduction(+ : q)); (146, OpenMP, #pragma omp distribute parallel for simd reduction(+ : r)); (161, OpenMP, #pragma omp parallel reduction(* : fl)); (151, OpenMP, #pragma omp distribute parallel for simd reduction(max : j)); (112, OpenMP, #pragma omp distribute parallel for simd reduction(& : e, g)); (172, OpenMP, #pragma omp distribute parallel for simd reduction(task, + : m)); (166, OpenMP, #pragma omp distribute parallel for simd reduction(+ : m)); (127, OpenMP, #pragma omp parallel private(k)); (63, OpenMP, #pragma omp distribute parallel for simd reduction(+ : a, b, c, d, f)); (67, OpenMP, #pragma omp distribute parallel for simd reduction(min : a, b, c, d, f)); (71, OpenMP, #pragma omp distribute parallel for simd reduction(max : h.b)); (55, OpenMP, #pragma omp distribute parallel for simd reduction(^ : S1)); (109, OpenMP, #pragma omp distribute parallel for simd reduction(+ : h, k, B::x)); (48, OpenMP, #pragma omp distribute parallel for simd reduction(&& : argc) allocate , allocate(, allocate(omp_default , allocate(omp_default_mem_alloc, allocate(omp_default_mem_alloc:, allocate(omp_default_mem_alloc: argc, allocate(omp_default_mem_alloc: argv), allocate(argv)); (17, OpenMP, #pragma omp distribute parallel for simd reduction(*)); (136, OpenMP, #pragma omp parallel reduction(min : i)); (20, OpenMP, #pragma omp distribute parallel for simd reduction(\\)); (140, OpenMP, #pragma omp parallel private(fl)); (8, OpenMP, #pragma omp distribute parallel for simd reduction()); (72, OpenMP, #pragma omp distribute parallel for simd reduction(* : ca)); (140, OpenMP, #pragma omp distribute parallel for simd reduction(+ : fl)); (30, OpenMP, #pragma omp distribute parallel for simd reduction(|| : argc > 0 ? argv[1] : argv[2])); (-1, OpenMP, #pragma omp distribute parallel for simd reduction(-); (73, OpenMP, #pragma omp distribute parallel for simd reduction(- : da)); (-13, OpenMP, #pragma omp distribute parallel for simd reduction +); (-19, OpenMP, #pragma omp distribute parallel for simd reduction); (20, OpenMP, #pragma omp distribute parallel for simd reduction(| : argc,); (123, OpenMP, #pragma omp parallel shared(i)); (78, OpenMP, #pragma omp distribute parallel for simd reduction(&& : S2::S2s)); (27, OpenMP, #pragma omp distribute parallel for simd reduction(~ : argc)); (-25, OpenMP, #pragma omp teams)"}
{"predict": "(5, OpenCL, clReleaseMemObject(bufX);); (8, OpenCL, clReleaseMemObject(bufY);); (11, OpenCL, clReleaseMemObject(bufParam);)", "label": "(5, OpenCL, clReleaseMemObject(bufX);); (8, OpenCL, clReleaseMemObject(bufY);); (11, OpenCL, clReleaseMemObject(bufParam);)"}
{"predict": "(10, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (33, MPI, MPI_Topo_get(MPI_COMM_WORLD, 0, &newrank);); (16, MPI, MPI_Topo_get(MPI_COMM_WORLD, rank, &newrank);); (6, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (9, MPI, MPI_Cart_create(MPI_COMM_WORLD, 1, dims, periods, 0, &comm);); (43, MPI, MPI_Comm_free(&comm);); (24, MPI, MPI_Barrier(comm);)", "label": "(9, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (15, MPI, MPI_Cart_map(MPI_COMM_WORLD, 1, dims, periods, &newrank);); (8, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (29, MPI, MPI_Cart_map(MPI_COMM_WORLD, 0, dims, periods, &newrank);)"}
{"predict": "(14, OpenCL, auto status = clWaitForEvents(1, &event);); (25, OpenCL, status = clReleaseEvent(event);)", "label": "(26, OpenCL, status = clReleaseEvent(event);); (13, OpenCL, auto status = clWaitForEvents(1, &event);)"}
{"predict": "(24, TBB, tbb::parallel_for( tbb::blocked_range<int>( 0, N, 10000 ), ParallelScalarBody<T>( sums ) );); (40, TBB, tbb::parallel_for( tbb::blocked_range<int>( 0, N, 10000 ), ParallelScalarBodyCopyAssign<T>( assigned ) );); (27, TBB, tbb::combinable<T> finit_combinable(my_finit_decl);); (44, TBB, tbb::combinable<T> moved1(std::move(sums));); (20, TBB, tbb::combinable<T> sums;); (47, TBB, tbb::combinable<T> moved2;); (32, TBB, tbb::parallel_for( tbb::blocked_range<int>( 0, N, 10000 ), ParallelScalarBodyCopyConstructor<T>( copy_constructed ) );); (-1, TBB, tbb::task_scheduler_init init(t);); (36, TBB, tbb::combinable<T> copy_constructed(sums);); (16, TBB, tbb::task_scheduler_init init(1);); (38, TBB, tbb::combinable<T> assigned;)", "label": "(41, TBB, tbb::combinable<T> copy_constructed(sums);); (31, TBB, tbb::combinable<T> finit_combinable(my_finit_decl);); (31, TBB, tbb::parallel_for( tbb::blocked_range<int>( 0, N, 10000 ), ParallelScalarBodyNoInit<T>( finit_combinable ) );); (19, TBB, if (Verbose && t == 0) t0 = tbb::tick_count::now();); (22, TBB, tbb::parallel_for( tbb::blocked_range<int>( 0, N, 10000 ), ParallelScalarBody<T>( sums ) );); (40, TBB, tbb::combinable<T> assigned;); (-3, TBB, tbb::task_scheduler_init init(tbb::task_scheduler_init::deferred);); (44, TBB, tbb::combinable<T> moved1(std::move(sums));); (2, TBB, tbb::tick_count t0;); (16, TBB, tbb::combinable<T> sums;); (45, TBB, tbb::combinable<T> moved2;)"}
{"predict": "(119, OpenCL, clReleaseMemObject(streams[2]);); (117, OpenCL, clReleaseMemObject(streams[1]);); (93, OpenCL, error = clEnqueueNDRangeKernel( queue, kernel, 1, NULL, &threadSize, &groupSize, 0, NULL, NULL );); (80, OpenCL, error = clSetKernelArg( kernel, 0, sizeof( streams[0] ), &streams[0] );); (81, OpenCL, error = clSetKernelArg( kernel, 1, sizeof( streams[1] ), &streams[1] );); (95, OpenCL, error = clEnqueueReadBuffer( queue, streams[2], true, 0, outStride * count, outData, 0, NULL, NULL );); (113, OpenCL, clReleaseProgram(program);); (78, OpenCL, error = clSetKernelArg( kernel, 2, sizeof( streams[2] ), &streams[2] );); (113, OpenCL, clReleaseKernel(kernel);)", "label": "(119, OpenCL, clReleaseMemObject( streams[2] );); (80, OpenCL, error = clSetKernelArg(kernel, 0, sizeof( streams[0] ), &streams[0] );); (119, OpenCL, clReleaseProgram( program );); (82, OpenCL, error = clSetKernelArg(kernel, 2, sizeof( streams[2] ), &streams[2] );); (114, OpenCL, clReleaseMemObject( streams[1] );); (115, OpenCL, clReleaseKernel( kernel );); (77, OpenCL, error = clSetKernelArg(kernel, 1, sizeof( streams[1] ), &streams[1] );); (92, OpenCL, error = clEnqueueReadBuffer( queue, streams[2], CL_TRUE, 0, outStride * count, outData, 0, NULL, NULL );); (86, OpenCL, error = clEnqueueNDRangeKernel( queue, kernel, 1, NULL, &threadSize, &groupSize, 0, NULL, NULL );); (108, OpenCL, clReleaseMemObject( streams[0] );)"}
{"predict": "(25, MPI, MPI_Wait(&req, &status);); (12, MPI, MPI_Bcast_init(&a, 1, MPI_INT, 0, MPI_COMM_WORLD, MPI_INFO_NULL, &req);); (15, MPI, MPI_Test(&req, &flag, &status);); (25, MPI, MPI_Request_free(&req);)", "label": "(25, MPI, MPI_Wait(&req, &status);); (12, MPI, MPI_Bcast_init(&a, 1, MPI_INT, 0, MPI_COMM_WORLD, MPI_INFO_NULL, &req);); (15, MPI, MPI_Test(&req, &flag, &status);); (25, MPI, MPI_Request_free(&req);)"}
{"predict": "(10, OpenMP, #pragma omp parallel for); (32, OpenMP, #pragma omp atomic)", "label": "(10, OpenMP, #pragma omp parallel for); (32, OpenMP, #pragma omp atomic)"}
{"predict": "(25, OpenCL, clReleaseEvent(retEvent);); (25, OpenCL, clReleaseEvent(retEvent2);)", "label": "(25, OpenCL, clReleaseEvent(retEvent2);); (25, OpenCL, clReleaseEvent(retEvent);)"}
{"predict": "(17, MPI, MPI_Barrier(comm);); (3, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);)", "label": "(3, MPI, MPI_Barrier(MPI_COMM_WORLD);); (5, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (16, MPI, MPI_Comm_free(&comm);)"}
{"predict": "(31, MPI, MPI_Wait(&req, MPI_STATUS_IGNORE);); (95, MPI, MPI_Reduce_scatter_init(buf, recvbuf, recvcounts, MPI_INT, MPI_SUM, comm, info, &req);); (47, MPI, MPI_Allreduce(buf, recvbuf, COUNT, MPI_INT, MPI_SUM, comm);); (27, MPI, MPI_Ireduce(buf, recvbuf, COUNT, MPI_INT, MPI_SUM, root, comm, &req);); (59, MPI, MPI_Iallreduce(buf, recvbuf, COUNT, MPI_INT, MPI_SUM, comm, &req);); (2, MPI, MPI_Reduce(buf, recvbuf, COUNT, MPI_INT, MPI_SUM, root, comm);); (81, MPI, MPI_Reduce_scatter(buf, recvbuf, recvcounts, MPI_INT, MPI_SUM, comm);); (156, MPI, MPI_Allgatherv(buf, COUNT, MPI_INT, recvbuf, recvcounts, recvdisps, MPI_INT, comm);); (182, MPI, MPI_Reduce_scatter_block_init(buf, recvbuf, COUNT, MPI_INT, MPI_SUM, comm, info, &req);); (127, MPI, MPI_Gatherv(buf, COUNT, MPI_INT, recvbuf, recvcounts, recvdisps, MPI_INT, root, comm);); (15, MPI, MPI_Abort(MPI_COMM_WORLD, 1);); (174, MPI, MPI_Reduce_scatter_block_complete(req);); (164, MPI, MPI_Allgather(buf, COUNT, MPI_INT, recvbuf, COUNT, MPI_INT, comm);); (174, MPI, MPI_Reduce_scatter_complete(req);); (46, MPI, MPI_Iallreduce(buf, recvbuf, COUNT, MPI_INT, MPI_SUM, comm, MPI_STATUS_IGNORE);)", "label": "(169, MPI, MPI_Scan(buf, recvbuf, COUNT, MPI_INT, MPI_SUM, MPI_COMM_WORLD);); (28, MPI, MPI_Ireduce(buf, recvbuf, COUNT, MPI_INT, MPI_SUM, root, MPI_COMM_WORLD, &req);); (82, MPI, MPI_Reduce_scatter(buf, recvbuf, recvcounts, MPI_INT, MPI_SUM, MPI_COMM_WORLD);); (45, MPI, MPI_Allreduce(buf, recvbuf, COUNT, MPI_INT, MPI_SUM, MPI_COMM_WORLD);); (124, MPI, MPI_Reduce_scatter_block(buf, recvbuf, COUNT, MPI_INT, MPI_SUM, MPI_COMM_WORLD);); (59, MPI, MPI_Iallreduce(buf, recvbuf, COUNT, MPI_INT, MPI_SUM, MPI_COMM_WORLD, &req);); (100, MPI, MPI_Ireduce_scatter(buf, recvbuf, recvcounts, MPI_INT, MPI_SUM, MPI_COMM_WORLD, &req);); (23, MPI, MPI_Wait(&req, MPI_STATUS_IGNORE);); (3, MPI, MPI_Reduce(buf, recvbuf, COUNT, MPI_INT, MPI_SUM, root, MPI_COMM_WORLD);); (187, MPI, MPI_Exscan(buf, recvbuf, COUNT, MPI_INT, MPI_SUM, MPI_COMM_WORLD);); (139, MPI, MPI_Ireduce_scatter_block(buf, recvbuf, COUNT, MPI_INT, MPI_SUM, MPI_COMM_WORLD, &req);); (171, MPI, MPI_Iscan(buf, recvbuf, COUNT, MPI_INT, MPI_SUM, MPI_COMM_WORLD, &req);); (198, MPI, MPI_Iexscan(buf, recvbuf, COUNT, MPI_INT, MPI_SUM, MPI_COMM_WORLD, &req);)"}
{"predict": "(9, MPI, t = MPI_Wtime();); (11, MPI, t = MPI_Wtime() - t;)", "label": "(9, MPI, t = MPI_Wtime();); (11, MPI, t = MPI_Wtime() - t;)"}
{"predict": "(14, OpenMP, #pragma omp parallel for copyin(k); (16, OpenMP, #pragma omp parallel for copyin(argv[1])); (25, OpenMP, #pragma omp parallel for copyin(ST<int>::s, B::x)); (20, OpenMP, #pragma omp parallel for copyin(i)); (0, OpenMP, #pragma omp parallel for copyin(); (2, OpenMP, #pragma omp parallel for copyin()); (7, OpenMP, #pragma omp parallel for copyin(h,); (12, OpenMP, #pragma omp parallel for copyin(l)); (2, OpenMP, #pragma omp parallel for copyin(argc > 0 ? argv[1] : argv[2])); (-6, OpenMP, #pragma omp parallel for copyin); (17, OpenMP, #pragma omp parallel for copyin(m)); (7, OpenMP, #pragma omp parallel for copyin(argc)); (18, OpenMP, #pragma omp parallel for copyin(n))", "label": "(14, OpenMP, #pragma omp parallel for proc_bind(close), proc_bind(spread)); (10, OpenMP, #pragma omp parallel for proc_bind(master); (19, OpenMP, #pragma omp parallel for proc_bind(master)); (5, OpenMP, #pragma omp parallel for proc_bind()); (-2, OpenMP, #pragma omp parallel for proc_bind); (12, OpenMP, #pragma omp parallel for proc_bind(x)); (19, OpenMP, #pragma omp parallel proc_bind(close)); (19, OpenMP, #pragma omp parallel for proc_bind(spread)); (-3, OpenMP, #pragma omp parallel for proc_bind()"}
{"predict": "(6, MPI, MPI_Comm_size(MPI_COMM_WORLD, &comm_size);); (6, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (7, MPI, vtkh::SetMPICommHandle(MPI_Comm_c2f(MPI_COMM_WORLD));)", "label": "(6, MPI, MPI_Comm_size(MPI_COMM_WORLD, &comm_size);); (6, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (7, MPI, vtkh::SetMPICommHandle(MPI_Comm_c2f(MPI_COMM_WORLD));)"}
{"predict": "(16, CUDA, CUDASimulation cudaSimulation(model);)", "label": "(16, CUDA, CUDASimulation cudaSimulation(model);)"}
{"predict": "(46, OpenMP, #pragma omp distribute simd aligned(x, y)); (12, OpenMP, #pragma omp distribute simd aligned(,); (88, OpenMP, #pragma omp distribute simd aligned(x : 1)); (63, OpenMP, #pragma omp distribute simd aligned(x :)); (91, OpenMP, #pragma omp distribute simd aligned(x : 1, y, z : 1)); (20, OpenMP, #pragma omp distribute simd aligned()); (50, OpenMP, #pragma omp distribute simd aligned(x)); (95, OpenMP, #pragma omp distribute simd aligned(x : 1, y : 1, z)); (29, OpenMP, #pragma omp distribute simd aligned(0)); (8, OpenMP, #pragma omp distribute simd aligned(, )); (-5, OpenMP, #pragma omp target); (70, OpenMP, #pragma omp distribute simd aligned(x : 1, y)); (81, OpenMP, #pragma omp distribute simd aligned(x : 1, y : 2)); (110, OpenMP, #pragma omp distribute simd aligned(x) aligned(z, x)); (38, OpenMP, #pragma omp distribute simd aligned(x, y, z)); (-7, OpenMP, #pragma omp distribute simd aligned(); (29, OpenMP, #pragma omp distribute simd aligned(int)); (61, OpenMP, #pragma omp distribute simd aligned(x :, ))", "label": "(19, OpenMP, #pragma omp distribute simd aligned(, )); (75, OpenMP, #pragma omp distribute simd aligned(x :)); (80, OpenMP, #pragma omp distribute simd aligned(x :, )); (9, OpenMP, #pragma omp distribute simd aligned(,); (-2, OpenMP, #pragma omp target); (82, OpenMP, #pragma omp distribute simd aligned(x : 1)); (52, OpenMP, #pragma omp distribute simd aligned(x, y, z)); (24, OpenMP, #pragma omp distribute simd aligned(int)); (62, OpenMP, #pragma omp distribute simd aligned(z)); (-4, OpenMP, #pragma omp distribute simd aligned(); (40, OpenMP, #pragma omp distribute simd aligned(x, y)); (32, OpenMP, #pragma omp distribute simd aligned(x)); (80, OpenMP, #pragma omp distribute simd aligned(x : 2 * 2)); (12, OpenMP, #pragma omp distribute simd aligned()); (23, OpenMP, #pragma omp distribute simd aligned(0)); (83, OpenMP, #pragma omp distribute simd aligned(x : 1, y)); (88, OpenMP, #pragma omp distribute simd aligned(x : 1, y, z : 1)); (108, OpenMP, #pragma omp distribute simd aligned(x) aligned(z, x)); (116, OpenMP, #pragma omp distribute simd aligned(x, y, z) aligned(y, z)); (-16, OpenMP, #pragma omp teams)"}
{"predict": "(13, OpenMP, #pragma omp target teams distribute parallel for collapse(2) map(tofrom: data[0:100][0:100]))", "label": "(14, OpenMP, #pragma omp parallel for collapse(2)); (12, OpenMP, #pragma omp target map(tofrom: data))"}
{"predict": "(78, CUDA, CUDA_CHECK(cudaFree(d_C));); (63, CUDA, CUDA_CHECK(cudaStreamSynchronize(stream));); (46, CUDA, CUDA_CHECK(cudaMalloc(reinterpret_cast<void **>(&d_B), sizeof(data_type) * B.size()));); (74, CUDA, CUDA_CHECK(cudaFree(d_B));); (45, CUDA, CUDA_CHECK(cudaMalloc(reinterpret_cast<void **>(&d_C), sizeof(data_type) * C.size()));); (79, CUDA, CUDA_CHECK(cudaDeviceReset());); (76, CUDA, CUDA_CHECK(cudaStreamDestroy(stream));); (40, CUDA, CUDA_CHECK(cudaMalloc(reinterpret_cast<void **>(&d_A), sizeof(data_type) * A.size()));); (68, CUDA, CUDA_CHECK(cudaFree(d_A));); (34, CUDA, CUDA_CHECK(cudaStreamCreateWithFlags(&stream, cudaStreamNonBlocking));)", "label": "(78, CUDA, CUDA_CHECK(cudaFree(d_C));); (63, CUDA, CUDA_CHECK(cudaStreamSynchronize(stream));); (46, CUDA, CUDA_CHECK(cudaMalloc(reinterpret_cast<void **>(&d_B), sizeof(data_type) * B.size()));); (74, CUDA, CUDA_CHECK(cudaFree(d_B));); (45, CUDA, CUDA_CHECK(cudaMalloc(reinterpret_cast<void **>(&d_C), sizeof(data_type) * C.size()));); (79, CUDA, CUDA_CHECK(cudaDeviceReset());); (76, CUDA, CUDA_CHECK(cudaStreamDestroy(stream));); (40, CUDA, CUDA_CHECK(cudaMalloc(reinterpret_cast<void **>(&d_A), sizeof(data_type) * A.size()));); (68, CUDA, CUDA_CHECK(cudaFree(d_A));); (34, CUDA, CUDA_CHECK(cudaStreamCreateWithFlags(&stream, cudaStreamNonBlocking));)"}
{"predict": "(7, OpenCL, err = clGetDeviceInfo(device, CL_DEVICE_IL_VERSION, 0, NULL, &str_size);)", "label": "(7, OpenCL, err = clGetDeviceInfo(device, CL_DEVICE_IL_VERSION, 0, NULL, &str_size);)"}
{"predict": "(10, OpenMP, #pragma omp parallel for reduction(min:minval)); (5, OpenMP, #pragma omp parallel for reduction(min:fminval))", "label": "(10, OpenMP, #pragma omp target teams distribute parallel for map(tofrom:minval) reduction(min:minval))"}
{"predict": "(145, MPI, MPI_Comm_free(&intercomm);); (65, MPI, MPI_Comm_rank(intracomm, &icrank);); (135, MPI, MPI_Comm_split(intercomm, 0, rand(), &intracomm3);); (25, MPI, MPI_Comm_rank(intercomm, &rank);); (23, MPI, MPI_Comm_remote_size(intercomm, &rsize);); (54, MPI, MPI_Comm_size(intracomm, &icsize);); (13, MPI, MPI_Comm_get_parent(&parentcomm);); (81, MPI, MPI_Comm_free(&intracomm);); (15, MPI, MPI_Comm_size(intercomm, &size);); (108, MPI, MPI_Comm_size(intracomm2, &csize);); (140, MPI, MPI_Comm_free(&intracomm3);); (54, MPI, MPI_Recv(&i, 1, MPI_INT, i, 0, intercomm, &status);); (160, MPI, MPI_Comm_free(&parentcomm);); (86, MPI, MPI_Comm_rank(intracomm2, &icrank);); (155, MPI, MPI_Send(&i, 1, MPI_INT, i, 0, intercomm);); (77, MPI, MPI_Comm_rank(intracomm3, &icrank);); (109, MPI, MPI_Comm_split(intercomm, 0, 0, &intracomm2);); (31, MPI, MPI_Send(&i, 1, MPI_INT, i, 0, intercomm);); (109, MPI, MPI_Comm_free(&intracomm2);); (41, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &wrank);); (118, MPI, MPI_Comm_free(&intercomm);); (51, MPI, MPI_Comm_size(intracomm2, &icsize);); (89, MPI, MPI_Comm_size(intracomm3, &csize);); (131, MPI, MPI_Comm_split(intercomm, 0, rank, &intracomm2);); (118, MPI, MPI_Comm_rank(intracomm2, &icrank);); (36, MPI, MPI_Comm_split(intercomm, 0, rank", "label": "(65, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &wrank);); (56, MPI, MPI_Intercomm_merge(intercomm, isChild, &intracomm);); (161, MPI, MPI_Comm_free(&intracomm3);); (95, MPI, MPI_Comm_rank(intracomm2, &icrank);); (12, MPI, MPI_Comm_get_parent(&parentcomm);); (34, MPI, MPI_Send(&i, 1, MPI_INT, i, 0, intercomm);); (141, MPI, MPI_Ssend(&errs, 1, MPI_INT, 0, 1, intercomm);); (56, MPI, MPI_Comm_size(intracomm, &icsize);); (146, MPI, MPI_Recv(&err, 1, MPI_INT, i, 1, intercomm, MPI_STATUS_IGNORE);); (117, MPI, MPI_Intercomm_merge(intercomm, 0, &intracomm3);); (65, MPI, MPI_Comm_remote_size(parentcomm, &psize);); (80, MPI, MPI_Intercomm_merge(intercomm, !isChild, &intracomm2);); (149, MPI, MPI_Comm_free(&intracomm);); (102, MPI, MPI_Comm_remote_size(intercomm, &csize);); (83, MPI, MPI_Comm_size(intracomm2, &icsize);); (49, MPI, MPI_Comm_rank(intracomm, &icrank);); (150, MPI, MPI_Comm_free(&intercomm);); (32, MPI, MPI_Recv(&i, 1, MPI_INT, 0, 0, intercomm, &status);); (114, MPI, MPI_Comm_rank(intracomm3, &icrank);); (10, MPI, MPI_Comm_rank(intercomm, &rank);); (7, MPI, MPI_Comm_remote_size(intercomm, &rsize);); (7, MPI, MPI_Comm_size(intercomm, &size);); (109, MPI, MPI_Comm_size(intracomm3, &icsize);); (139, MPI, MPI_Comm_free(&intracomm2);); (150, MPI, MPI_Finalize();)"}
{"predict": "(109, CUDA, cudaStat1 = cudaMemcpy(d_csrRowPtrA, csrRowPtrA, sizeof(int)*(m + 1), cudaMemcpyHostToDevice);); (244, CUDA, if (d_csrColIndC) cudaFree(d_csrColIndC);); (219, CUDA, cudaStat1 = cudaMemcpy(csrRowPtrC, d_csrRowPtrC, sizeof(int)*(m + 1), cudaMemcpyDeviceToHost);); (102, CUDA, cudaStat1 = cudaMalloc((void**)&d_csrRowPtrC, sizeof(int)*(m + 1));); (97, CUDA, cudaStat1 = cudaMalloc((void**)&d_csrValA, sizeof(float)*nnzA);); (112, CUDA, cudaStat1 = cudaMemcpy(d_csrValA, csrValA, sizeof(float)*nnzA, cudaMemcpyHostToDevice);); (231, CUDA, if (d_csrRowPtrA) cudaFree(d_csrRowPtrA);); (248, CUDA, if (stream) cudaStreamDestroy(stream);); (235, CUDA, if (d_csrRowPtrC) cudaFree(d_csrRowPtrC);); (177, CUDA, cudaStat1 = cudaMalloc((void**)&d_csrValC, sizeof(float) * nnzC);); (237, CUDA, if (d_csrValC) cudaFree(d_csrValC);); (159, CUDA, cudaStat1 = cudaDeviceSynchronize();); (81, CUDA, cudaStat1 = cudaMalloc((void**)&d_csrRowPtrA, sizeof(int)*(m + 1));); (212, CUDA, cudaStat1 = cudaMemcpy(csrColIndC, d_csrColIndC, sizeof(int)*nnzC, cudaMemcpyDeviceToHost);); (83, CUDA, cudaStat1 = cudaMalloc((void**)&d_csrColIndA, sizeof(int)*nnzA);); (40, CUDA, cudaStat1 = cudaStreamCreateWithFlags(&stream, cudaStreamNonBlocking);); (97, CUDA, cudaStat1 = cudaMemcpy(d_csrColIndA, csrColIndA, sizeof(int)*nnzA, cudaMemcpyHostToDevice);); (129, CUDA, cudaStat1 = cudaMalloc((void**)&", "label": "(106, CUDA, cudaStat1 = cudaMemcpy(d_csrRowPtrA, csrRowPtrA, sizeof(int)*(m + 1), cudaMemcpyHostToDevice);); (234, CUDA, if (d_csrColIndC) cudaFree(d_csrColIndC);); (211, CUDA, cudaStat1 = cudaMemcpy(csrRowPtrC, d_csrRowPtrC, sizeof(int)*(m + 1), cudaMemcpyDeviceToHost);); (99, CUDA, cudaStat1 = cudaMalloc((void**)&d_csrRowPtrC, sizeof(int)*(m + 1));); (94, CUDA, cudaStat1 = cudaMalloc((void**)&d_csrValA, sizeof(float)*nnzA);); (109, CUDA, cudaStat1 = cudaMemcpy(d_csrValA, csrValA, sizeof(float)*nnzA, cudaMemcpyHostToDevice);); (221, CUDA, if (d_csrRowPtrA) cudaFree(d_csrRowPtrA);); (237, CUDA, if (stream) cudaStreamDestroy(stream);); (225, CUDA, if (d_csrRowPtrC) cudaFree(d_csrRowPtrC);); (170, CUDA, cudaStat1 = cudaMalloc((void**)&d_csrValC, sizeof(float) * nnzC);); (227, CUDA, if (d_csrValC) cudaFree(d_csrValC);); (154, CUDA, cudaStat1 = cudaDeviceSynchronize();); (78, CUDA, cudaStat1 = cudaMalloc((void**)&d_csrRowPtrA, sizeof(int)*(m + 1));); (204, CUDA, cudaStat1 = cudaMemcpy(csrColIndC, d_csrColIndC, sizeof(int)*nnzC, cudaMemcpyDeviceToHost);); (80, CUDA, cudaStat1 = cudaMalloc((void**)&d_csrColIndA, sizeof(int)*nnzA);); (41, CUDA, cudaStat1 = cudaStreamCreateWithFlags(&stream, cudaStreamNonBlocking);); (94, CUDA, cudaStat1 = cudaMemcpy(d_csrColIndA, csrColIndA, sizeof(int)*nnzA, cudaMemcpyHostToDevice);); (125, CUDA, cudaStat1 = cudaMalloc((void**)&d_work, lworkInBytes);); (211, CUDA, if (d_csrColIndA) cudaFree(d_csrColIndA);); (202, CUDA, cudaStat1 = cudaMemcpy(csrValC, d_csrValC, sizeof(float)*nnzC, cudaMemcpyDeviceToHost);); (155, CUDA, cudaStat1 = cudaMalloc((void**)&d_csrColIndC, sizeof(int) * nnzC);); (210, CUDA, if (d_csrValA) cudaFree(d_csrValA);); (228, CUDA, cudaDeviceReset();)"}
{"predict": "(81, OpenMP, test_comp_vlen_strings(COMP_VL_STRS_FILE, \"group\", 1);); (81, OpenMP, test_comp_vlen_strings(COMP_VL_STRS_FILE, \"group_copy\", 0);)", "label": "(81, OpenMP, test_comp_vlen_strings(COMP_VL_STRS_FILE, \"group\", 1);); (81, OpenMP, test_comp_vlen_strings(COMP_VL_STRS_FILE, \"group_copy\", 0);)"}
{"predict": "(14, OpenMP, #pragma omp critical)", "label": "(26, OpenCL, clReleaseContext(knode->key.context);); (24, OpenCL, clReleaseProgram(kern->program);)"}
{"predict": "(13, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &wrank);); (33, MPI, MPI_Barrier(MPI_COMM_WORLD);); (56, MPI, t1 = MPI_Wtime();); (53, MPI, MPI_Irecv(rbuf, len, MPI_BYTE, partner, k, MPI_COMM_WORLD, &rreq);); (56, MPI, MPI_Wait(&rreq, MPI_STATUS_IGNORE);); (56, MPI, t1 = MPI_Wtime() - t1;); (9, MPI, MPI_Comm_size(MPI_COMM_WORLD, &wsize);); (51, MPI, MPI_Send(sbuf, len, MPI_BYTE, partner, k, MPI_COMM_WORLD);); (14, MPI, MPI_Abort(MPI_COMM_WORLD, 1);); (26, MPI, MPI_Sendrecv(MPI_BOTTOM, 0, MPI_BYTE, partner, 0, MPI_BOTTOM, 0, MPI_BYTE, partner, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);)", "label": "(13, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &wrank);); (60, MPI, MPI_Irecv(rbuf, len, MPI_BYTE, partner, k, MPI_COMM_WORLD, &rreq);); (57, MPI, t1 = MPI_Wtime();); (60, MPI, MPI_Wait(&rreq, MPI_STATUS_IGNORE);); (146, MPI, MPI_Recv(rbuf, len, MPI_BYTE, partner, k, MPI_COMM_WORLD, MPI_STATUS_IGNORE);); (57, MPI, MPI_Send(sbuf, len, MPI_BYTE, partner, k, MPI_COMM_WORLD);); (6, MPI, MPI_Comm_size(MPI_COMM_WORLD, &wsize);); (34, MPI, MPI_Barrier(MPI_COMM_WORLD);); (57, MPI, t1 = MPI_Wtime() - t1;); (8, MPI, MPI_Abort(MPI_COMM_WORLD, 1);); (24, MPI, MPI_Abort(MPI_COMM_WORLD, 2);)"}
{"predict": "(1, TBB, using namespace tbb::flow;)", "label": "(1, TBB, using namespace tbb::flow;)"}
{"predict": "(36, OpenMP, #pragma omp teams distribute parallel for simd safelen (foobool(argc)), safelen (true), safelen (-5)); (1, OpenMP, #pragma omp teams distribute parallel for simd safelen); (26, OpenMP, #pragma omp teams distribute parallel for simd safelen (foobool(1) > 0 ? 1 : 2)); (38, OpenMP, #pragma omp teams distribute parallel for simd safelen (S1)); (8, OpenMP, #pragma omp teams distribute parallel for simd safelen ()); (12, OpenMP, #pragma omp teams distribute parallel for simd safelen (4); (51, OpenMP, #pragma omp teams distribute parallel for simd safelen(safelen(tmain<int, char, -1, -2>(argc, argv)); (15, OpenMP, #pragma omp teams distribute parallel for simd safelen (2+2))); (-7, OpenMP, #pragma omp target); (-2, OpenMP, #pragma omp teams distribute parallel for simd safelen (); (41, OpenMP, #pragma omp teams distribute parallel for simd safelen (argv[1]=2))", "label": "(7, OpenMP, #pragma omp teams distribute parallel for simd safelen (); (21, OpenMP, #pragma omp teams distribute parallel for simd safelen (2+2))); (10, OpenMP, #pragma omp teams distribute parallel for simd safelen ()); (54, OpenMP, #pragma omp teams distribute parallel for simd safelen(safelen(tmain<int, char, -1, -2>(argc, argv)); (37, OpenMP, #pragma omp teams distribute parallel for simd safelen (S1)); (12, OpenMP, #pragma omp teams distribute parallel for simd safelen (4); (45, OpenMP, #pragma omp teams distribute parallel for simd safelen (argv[1]=2)); (21, OpenMP, #pragma omp teams distribute parallel for simd safelen (foobool(1) > 0 ? 1 : 2)); (28, OpenMP, #pragma omp teams distribute parallel for simd safelen (foobool(argc)), safelen (true), safelen (-5)); (-8, OpenMP, #pragma omp target); (-8, OpenMP, #pragma omp teams distribute parallel for simd safelen)"}
{"predict": "(24, MPI, MPI_Finalize();); (12, MPI, MPI_Init(&argc,&argv);)", "label": "(24, MPI, MPI_Finalize();); (12, MPI, MPI_Init(&argc,&argv);)"}
{"predict": "(20, TBB, tbb::flow::make_edge( n, r[i] );); (54, TBB, tbb::flow::remove_edge( n, r[i] );); (1, TBB, tbb::flow::write_once_node<R> n(g);); (-1, TBB, tbb::flow::graph g;)", "label": "(20, TBB, tbb::flow::make_edge( n, r[i] );); (54, TBB, tbb::flow::remove_edge( n, r[i] );); (1, TBB, tbb::flow::write_once_node<R> n(g);); (-1, TBB, tbb::flow::graph g;)"}
{"predict": "(46, OpenMP, #pragma omp distribute parallel for schedule (guided, foobool(argc)), schedule (static, true), schedule (dynamic, -5)); (54, OpenMP, #pragma omp distribute parallel for schedule (static, argv[1]=2)); (30, OpenMP, #pragma omp distribute parallel for schedule (guided, 4); (47, OpenMP, #pragma omp distribute parallel for schedule (guided, S1)); (8, OpenMP, #pragma omp distribute parallel for schedule ()); (11, OpenMP, #pragma omp distribute parallel for schedule (auto); (34, OpenMP, #pragma omp distribute parallel for schedule (dynamic, foobool(1) > 0 ? 1 : 2 -z)); (1, OpenMP, #pragma omp distribute parallel for schedule (); (20, OpenMP, #pragma omp distribute parallel for schedule (runtime, 3)); (27, OpenMP, #pragma omp distribute parallel for schedule (static, 2+2))); (51, OpenMP, #pragma omp distribute parallel for schedule(dynamic, schedule(tmain<int, char, -1, -2>(argc, argv)); (-7, OpenMP, #pragma omp distribute parallel for schedule); (12, OpenMP, #pragma omp distribute parallel for schedule (auto,); (-11, OpenMP, #pragma omp target); (6, OpenMP, #pragma omp distribute parallel for schedule (auto_dynamic); (-12, OpenMP, #pragma omp teams)", "label": "(16, OpenMP, #pragma omp distribute parallel for schedule (auto); (45, OpenMP, #pragma omp distribute parallel for schedule (guided, foobool(argc)), schedule (static, true), schedule (dynamic, -5)); (48, OpenMP, #pragma omp distribute parallel for schedule (guided, S1)); (52, OpenMP, #pragma omp distribute parallel for schedule (static, argv[1]=2)); (0, OpenMP, #pragma omp distribute parallel for schedule); (31, OpenMP, #pragma omp distribute parallel for schedule (static, 2+2))); (2, OpenMP, #pragma omp distribute parallel for schedule (); (5, OpenMP, #pragma omp distribute parallel for schedule ()); (32, OpenMP, #pragma omp distribute parallel for schedule (dynamic, foobool(1) > 0 ? 1 : 2 - z)); (23, OpenMP, #pragma omp distribute parallel for schedule (guided, 4); (51, OpenMP, #pragma omp distribute parallel for schedule(dynamic, schedule(tmain<int, char, -1, -2>(argc, argv)); (17, OpenMP, #pragma omp distribute parallel for schedule (runtime, 3)); (-10, OpenMP, #pragma omp target); (11, OpenMP, #pragma omp distribute parallel for schedule (auto,); (6, OpenMP, #pragma omp distribute parallel for schedule (auto_dynamic); (-12, OpenMP, #pragma omp teams)"}
{"predict": "(24, CUDA, cuda_safe_call(cudaStreamSynchronize(stream));)", "label": "(18, CUDA, cuda_safe_call(cudaGetLastError());)"}
{"predict": "(98, CUDA, cudaFree(deviceDiagonalResult);); (20, CUDA, cudaMalloc((void**)&deviceMatrix, width * height * sizeof(float));); (95, CUDA, cudaFree(deviceSymmetricResult);); (35, CUDA, cudaMemcpy(deviceMatrix, hostMatrix, width * height * sizeof(float), cudaMemcpyHostToDevice);); (18, CUDA, cudaMalloc((void**)&deviceToeplitzResult, sizeof(bool));); (47, CUDA, cudaMemcpy(hostToeplitzResult, deviceToeplitzResult, sizeof(bool), cudaMemcpyDeviceToHost);); (18, CUDA, cudaMalloc((void**)&deviceDiagonalResult, sizeof(bool));); (87, CUDA, cudaFree(deviceMatrix);); (41, CUDA, cudaMemcpy(hostDiagonalResult, deviceDiagonalResult, sizeof(bool), cudaMemcpyDeviceToHost);); (92, CUDA, cudaFree(deviceSkewSymmetricResult);); (42, CUDA, cudaMemcpy(hostSymmetricResult, deviceSymmetricResult, sizeof(bool), cudaMemcpyDeviceToHost);); (12, CUDA, cudaMalloc((void**)&deviceSkewSymmetricResult, sizeof(bool));); (42, CUDA, cudaMemcpy(hostSkewSymmetricResult, deviceSkewSymmetricResult, sizeof(bool), cudaMemcpyDeviceToHost);); (81, CUDA, cudaFree(deviceToeplitzResult);); (10, CUDA, cudaMalloc((void**)&deviceSymmetricResult, sizeof(bool));); (34, CUDA, cudaMemcpy(hostIdempotentResult, deviceIdempotentResult, sizeof(bool), cudaMemcpyDeviceToHost);); (7, CUDA, cudaMalloc((void**)&deviceIdempotentResult, sizeof(bool));)", "label": "(21, CUDA, cudaMalloc((void**)&deviceDiagonalResult, sizeof(bool));); (55, CUDA, cudaMemcpy(hostDiagonalResult, deviceDiagonalResult, sizeof(bool), cudaMemcpyDeviceToHost);); (99, CUDA, cudaFree(deviceSymmetricResult);); (20, CUDA, cudaMalloc((void**)&deviceSkewSymmetricResult, sizeof(bool));); (54, CUDA, cudaMemcpy(hostSkewSymmetricResult, deviceSkewSymmetricResult, sizeof(bool), cudaMemcpyDeviceToHost);); (17, CUDA, cudaMalloc((void**)&deviceSymmetricResult, sizeof(bool));); (33, CUDA, cudaMemcpy(deviceMatrix, hostMatrix, width * height * sizeof(float), cudaMemcpyHostToDevice);); (37, CUDA, cudaMemcpy(deviceIdempotentResult, hostIdempotentResult, sizeof(bool), cudaMemcpyHostToDevice);); (11, CUDA, cudaMalloc((void**)&deviceMatrix, width * height * sizeof(float));); (31, CUDA, cudaMemcpy(deviceToeplitzResult, hostToeplitzResult, sizeof(bool), cudaMemcpyHostToDevice);); (49, CUDA, cudaMemcpy(hostIdempotentResult, deviceIdempotentResult, sizeof(bool), cudaMemcpyDeviceToHost);); (91, CUDA, cudaFree(deviceSkewSymmetricResult);); (31, CUDA, cudaMemcpy(deviceSkewSymmetricResult, hostSkewSymmetricResult, sizeof(bool), cudaMemcpyHostToDevice);); (44, CUDA, cudaMemcpy(hostSymmetricResult, deviceSymmetricResult, sizeof(bool), cudaMemcpyDeviceToHost);); (28, CUDA, cudaMemcpy(deviceSymmetricResult, hostSymmetricResult, sizeof(bool), cudaMemcpyHostToDevice);); (85, CUDA, cudaFree(deviceDiagonalResult);); (4, CUDA, cudaMalloc((void**)&deviceToeplitzResult, sizeof(bool));); (82, CUDA, cudaFree(deviceToeplitzResult);); (85, CUDA, cudaFree(deviceIdempotentResult);); (36, CUDA, cudaMemcpy(hostToeplitzResult, deviceToeplitzResult, sizeof(bool), cudaMemcpyDeviceToHost);); (78, CUDA, cudaFree(deviceMatrix);); (20, CUDA, cudaMemcpy(deviceDiagonalResult, hostDiagonalResult, sizeof(bool), cudaMemcpyHostToDevice);); (2, CUDA, cudaMalloc((void**)&deviceIdempotentResult, sizeof(bool));)"}
{"predict": "(67, OpenCL, err = clWaitForEvents( 1, &writeEvent );); (55, OpenCL, err = clEnqueueWriteBuffer( queue, streams[ii], true, 0, ptrSizes[i]*num_elements, inptr[i], 0, NULL, &writeEvent );); (198, OpenCL, clReleaseEvent(readEvent);); (171, OpenCL, err = clSetKernelArg( kernel[i], 1, sizeof( cl_mem ), (void *)&streams[ii+1] );); (245, OpenCL, clReleaseMemObject(streams[i]);); (163, OpenCL, err = clSetKernelArg( kernel[i], 0, sizeof( cl_mem ), (void *)&streams[ii] );); (230, OpenCL, err = clEnqueueNDRangeKernel(queue, kernel[i], 1, NULL, threads, NULL, 0, NULL, NULL );); (245, OpenCL, clReleaseMemObject(streams[i+1]);); (213, OpenCL, err = clEnqueueReadBuffer( queue, streams[ii+1], true, 0, outPtrSizes[i]*num_elements, outptr[i], 0, NULL, &readEvent );); (61, OpenCL, clReleaseEvent(writeEvent);); (233, OpenCL, clReleaseProgram(program[i]);); (237, OpenCL, clReleaseKernel(kernel[i]);); (175, OpenCL, err_count += test_error( err, \"clSetKernelArg failed\" );); (229, OpenCL, err = clWaitForEvents( 1, &readEvent );); (54, OpenCL, clReleaseMemObject( streams[ii] );); (54, OpenCL, clReleaseMemObject( streams[ii+1] );); (164, OpenCL, err = clSetKernelArg( kernel[i], 2, sizeof( int ), (void *)&num_elements );); (227, OpenCL, clReleaseEvent(readEvent);); (43, OpenCL, clReleaseMemObject( streams[i+1] );); (156, OpenCL, err = clSetKernelArg( kernel[i], 3, sizeof( int ), (void *)&fn );); (217, OpenCL, err_count", "label": "(57, OpenCL, err = clEnqueueWriteBuffer( queue, streams[ii], false, 0, ptrSizes[i]*num_elements, inptr[i], 0, NULL, &writeEvent );); (132, OpenCL, err = clSetKernelArg( kernel[i], 0, sizeof( cl_mem ), (void *)&streams[ii] );); (49, OpenCL, clReleaseMemObject(streams[ii]);); (135, OpenCL, clReleaseProgram( program[i] );); (123, OpenCL, clReleaseMemObject(streams[ii+1]);); (55, OpenCL, clReleaseMemObject( streams[ii+1] );); (140, OpenCL, err = clEnqueueNDRangeKernel( queue, kernel[i], 1, NULL, threads, NULL, 0, NULL, NULL );); (52, OpenCL, clReleaseMemObject( streams[ii] );); (64, OpenCL, clReleaseEvent(writeEvent);); (59, OpenCL, err = clWaitForEvents( 1, &writeEvent );); (127, OpenCL, clReleaseKernel( kernel[i] );); (123, OpenCL, err |= clSetKernelArg( kernel[i], 1, sizeof( cl_mem ), (void *)&streams[ii+1] );); (148, OpenCL, err = clEnqueueReadBuffer( queue, streams[ii+1], true, 0, outPtrSizes[i]*num_elements, outptr[i], 0, NULL, NULL );)"}
{"predict": "(15, OpenMP, #pragma omp target teams distribute parallel for simd linear (); (10, OpenMP, #pragma omp target teams distribute parallel for simd linear); (26, OpenMP, #pragma omp target teams distribute parallel for simd linear (argc,); (37, OpenMP, #pragma omp target teams distribute parallel for simd linear (a, b)); (40, OpenMP, #pragma omp target teams distribute parallel for simd linear (argv[1])); (16, OpenMP, #pragma omp target teams distribute parallel for simd linear ()); (30, OpenMP, #pragma omp target teams distribute parallel for simd linear (argc)); (37, OpenMP, #pragma omp target teams distribute parallel for simd linear (S1)); (19, OpenMP, #pragma omp target teams distribute parallel for simd linear (argc); (43, OpenMP, #pragma omp target teams distribute parallel for simd linear(h, C::x)); (12, OpenMP, #pragma omp target teams distribute parallel for simd linear (argc); (30, OpenMP, #pragma omp target teams distribute parallel for simd linear (argc > 0 ? argv[1] : argv[2])); (36, OpenMP, #pragma omp target teams distribute parallel for simd linear(e, g)); (22, OpenMP, #pragma omp target teams distribute parallel for simd linear (argc)); (14, OpenMP, #pragma omp target teams distribute parallel for simd linear (argc /); (-4, OpenMP, #pragma omp target teams distribute parallel for simd linear (ref())); (35, OpenMP, #pragma omp target teams distribute parallel for simd linear(i)); (28, OpenMP, #pragma omp target teams distribute parallel for simd linear (argv[1])); (14, OpenMP, #pragma omp target teams distribute parallel for simd linear (S2::S2s)); (16, OpenMP, #pragma omp target teams distribute parallel for simd linear (argc)); (16, OpenMP, #pragma omp target teams distribute parallel for simd linear (argc))", "label": "(15, OpenMP, #pragma omp target teams distribute parallel for simd linear (); (11, OpenMP, #pragma omp target teams distribute parallel for simd linear); (34, OpenMP, #pragma omp target teams distribute parallel for simd linear (S1)); (37, OpenMP, #pragma omp target teams distribute parallel for simd linear (a, b)); (39, OpenMP, #pragma omp target teams distribute parallel for simd linear (argv[1])); (44, OpenMP, #pragma omp target teams distribute parallel for simd linear(h, C::x)); (23, OpenMP, #pragma omp target teams distribute parallel for simd linear (argc > 0 ? argv[1] : argv[2])); (15, OpenMP, #pragma omp target teams distribute parallel for simd linear (argc); (10, OpenMP, #pragma omp target teams distribute parallel for simd linear ()); (24, OpenMP, #pragma omp target teams distribute parallel for simd linear (argc)); (36, OpenMP, #pragma omp target teams distribute parallel for simd linear(e, g)); (15, OpenMP, #pragma omp target teams distribute parallel for simd linear (argc,)"}
{"predict": "(56, OpenCL, err = clEnqueueWriteBuffer(queue, bufY, CL_TRUE, 0, (lenY*sizeof(cl_float)), Y, 0, NULL, NULL);); (82, OpenCL, clReleaseMemObject(bufX);); (44, OpenCL, clReleaseCommandQueue(queue);); (28, OpenCL, printf( \"clCreateContext() failed with %d\\n\", err );); (75, OpenCL, clReleaseEvent(event);); (32, OpenCL, printf( \"clCreateCommandQueue() failed with %d\\n\", err );); (29, OpenCL, queue = clCreateCommandQueue(ctx, device, 0, &err);); (46, OpenCL, bufY = clCreateBuffer(ctx, CL_MEM_READ_WRITE, (lenY*sizeof(cl_float)), NULL, &err);); (30, OpenCL, clReleaseContext(ctx);); (73, OpenCL, clReleaseMemObject(bufY);); (45, OpenCL, err = clEnqueueWriteBuffer(queue, bufX, CL_TRUE, 0, (lenX*sizeof(cl_float)), X, 0, NULL, NULL);); (18, OpenCL, ctx = clCreateContext(props, 1, &device, NULL, NULL, &err);); (40, OpenCL, bufX = clCreateBuffer(ctx, CL_MEM_READ_WRITE, (lenX*sizeof(cl_float)), NULL, &err);); (53, OpenCL, err = clWaitForEvents(1, &event);)", "label": "(56, OpenCL, err = clEnqueueWriteBuffer(queue, bufY, CL_TRUE, 0, (lenY*sizeof(cl_float)), Y, 0, NULL, NULL);); (82, OpenCL, clReleaseMemObject(bufX);); (44, OpenCL, clReleaseCommandQueue(queue);); (28, OpenCL, printf( \"clCreateContext() failed with %d\\n\", err );); (75, OpenCL, clReleaseEvent(event);); (32, OpenCL, printf( \"clCreateCommandQueue() failed with %d\\n\", err );); (29, OpenCL, queue = clCreateCommandQueue(ctx, device, 0, &err);); (46, OpenCL, bufY = clCreateBuffer(ctx, CL_MEM_READ_WRITE, (lenY*sizeof(cl_float)), NULL, &err);); (30, OpenCL, clReleaseContext(ctx);); (73, OpenCL, clReleaseMemObject(bufY);); (42, OpenCL, bufX = clCreateBuffer(ctx, CL_MEM_READ_ONLY, (lenX*sizeof(cl_float)), NULL, &err);); (44, OpenCL, err = clEnqueueWriteBuffer(queue, bufX, CL_TRUE, 0, (lenX*sizeof(cl_float)), X, 0, NULL, NULL);); (17, OpenCL, ctx = clCreateContext(props, 1, &device, NULL, NULL, &err);); (53, OpenCL, err = clWaitForEvents(1, &event);)"}
{"predict": "(62, CUDA, CUDA_CHECK(cudaStreamDestroy(stream));); (6, CUDA, CUDA_CHECK(cudaStreamCreate(&stream));); (46, CUDA, CUDA_CHECK(cudaGetLastError());); (52, CUDA, CUDA_CHECK(cudaStreamSynchronize(stream));)", "label": "(62, CUDA, CUDA_CHECK(cudaStreamDestroy(stream));); (6, CUDA, CUDA_CHECK(cudaStreamCreate(&stream));); (46, CUDA, CUDA_CHECK(cudaGetLastError());); (52, CUDA, CUDA_CHECK(cudaStreamSynchronize(stream));)"}
{"predict": "(7, SYCL, EasyCL *cl = EasyCL::createForFirstGpuOtherwiseCpu();)", "label": "(7, SYCL, EasyCL *cl = EasyCL::createForFirstGpuOtherwiseCpu();)"}
{"predict": "(12, CUDA, cudaSetDevice(devs[devi]);)", "label": "(11, OpenMP, #pragma omp parallel for)"}
{"predict": "(9, OpenCL, clReleaseMemObject(objB);); (4, OpenCL, clReleaseMemObject(objA);); (11, OpenCL, clReleaseMemObject(objC);)", "label": "(5, OpenCL, clReleaseMemObject(objA);); (8, OpenCL, clReleaseMemObject(objB);); (11, OpenCL, clReleaseMemObject(objC);)"}
{"predict": "(6, OpenMP, #pragma omp parallel shared(nthreads)); (10, OpenMP, #pragma omp single); (12, OpenMP, nthreads = omp_get_num_threads();); (3, OpenMP, my_dev = omp_get_default_device();)", "label": "(7, OpenMP, #pragma omp parallel); (7, OpenMP, #pragma omp single); (3, OpenMP, my_dev = omp_get_initial_device();); (6, OpenMP, nthreads = omp_get_num_threads();); (10, OpenMP, #pragma omp parallel shared(nthreads))"}
{"predict": "(6, CUDA, __shared__ float sdata2[THREAD_PER_BLOCK];); (29, CUDA, float scale;)", "label": "(7, CUDA, __shared__ float scale;); (5, CUDA, __shared__ float sdata2[THREAD_PER_BLOCK];)"}
{"predict": "(54, OpenMP, #pragma omp teams shared(h, B::x)); (34, OpenMP, #pragma omp teams shared (S1)); (27, OpenMP, #pragma omp teams shared (argc > 0 ? argv[1] : argv[2])); (36, OpenMP, #pragma omp teams shared (a, b, c, d, f)); (15, OpenMP, #pragma omp teams shared (argc); (60, OpenMP, #pragma omp teams shared(i)); (26, OpenMP, #pragma omp teams shared (argv[1])); (7, OpenMP, #pragma omp teams shared (); (48, OpenMP, #pragma omp teams shared(i)); (15, OpenMP, #pragma omp teams shared (argc,); (9, OpenMP, #pragma omp teams shared ()); (41, OpenMP, #pragma omp teams private(i)); (51, OpenMP, #pragma omp teams shared(j)); (16, OpenMP, #pragma omp teams shared (S2::S2s)); (23, OpenMP, #pragma omp teams shared(ca)); (9, OpenMP, #pragma omp teams shared (argc)); (-6, OpenMP, #pragma omp target); (35, OpenMP, #pragma omp teams shared(e, g)); (22, OpenMP, #pragma omp teams shared(da)); (-5, OpenMP, #pragma omp teams shared); (12, OpenMP, #pragma omp teams shared (b)); (37, OpenMP, #pragma omp teams firstprivate(i), shared(i)); (13, OpenMP, #pragma omp teams shared (argv[1], z))", "label": "(8, OpenMP, #pragma omp teams shared); (61, OpenMP, #pragma omp teams shared(i)); (45, OpenMP, #pragma omp teams shared(e, g, z)); (4, OpenMP, #pragma omp target); (13, OpenMP, #pragma omp teams shared (argc); (51, OpenMP, #pragma omp teams firstprivate(i), shared(i)); (17, OpenMP, #pragma omp teams shared (argc > 0 ? argv[1] : argv[2])); (22, OpenMP, #pragma omp teams shared (S1)); (18, OpenMP, #pragma omp teams shared (argc)); (35, OpenMP, #pragma omp teams shared(da)); (31, OpenMP, #pragma omp teams shared(ca)); (54, OpenMP, #pragma omp teams shared(j)); (23, OpenMP, #pragma omp teams shared (argv[1])); (37, OpenMP, #pragma omp teams shared(h, B::x)); (39, OpenMP, #pragma omp teams private(i)); (-1, OpenMP, #pragma omp teams shared ()); (22, OpenMP, #pragma omp teams shared(ba)); (3, OpenMP, #pragma omp teams shared (argc,); (14, OpenMP, #pragma omp teams shared (a, b, c, d, f)); (-8, OpenMP, #pragma omp teams shared (); (48, OpenMP, #pragma omp teams firstprivate(i))"}
{"predict": "(13, OpenMP, #pragma omp target map(l_val)); (8, OpenMP, #pragma omp task); (3, OpenMP, #pragma omp parallel); (9, OpenMP, #pragma omp teams distribute num_teams(1) thread_limit(1024))", "label": "(15, OpenMP, #pragma omp target map(l_val)); (9, OpenMP, #pragma omp task); (3, OpenMP, #pragma omp parallel); (4, OpenMP, #pragma omp single)"}
{"predict": "(8, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (6, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (40, MPI, mpi_errno = MPI_Comm_free(&stream_comm);); (13, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);)", "label": "(8, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (41, MPI, mpi_errno = MPI_Comm_free(&stream_comm);); (5, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (13, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);)"}
{"predict": "(58, MPI, MPI_Type_commit(file_realm_types);); (56, MPI, MPI_Type_contiguous_c((max_end_offset - min_st_offset + 1), MPI_BYTE, file_realm_types);)", "label": "(58, MPI, MPI_Type_commit(file_realm_types);); (56, MPI, MPI_Type_contiguous_c((max_end_offset - min_st_offset + 1), MPI_BYTE, file_realm_types);)"}
{"predict": "(25, OpenCL, status = clBuildProgram(program, 1, &device, NULL, NULL, NULL);)", "label": "(25, OpenCL, OCL_ASSERT(clBuildProgram(program, 1, &device, NULL, NULL, NULL) == CL_SUCCESS);); (26, OpenCL, kernel = clCreateKernel(program, \"compiler_ceil\", &status);)"}
{"predict": "(4, CUDA, CudaCheckError();)", "label": "(4, CUDA, CudaCheckError();); (49, CUDA, dynamics.freeCudaMem();)"}
{"predict": "(18, CUDA, CUDA_CHECK(cudaGetLastError());)", "label": "(18, CUDA, CUDA_CHECK(cudaGetLastError());)"}
{"predict": "(74, CUDA, ASSERT_EQ(cudaSuccess, cudaStreamSynchronize(stream));); (39, CUDA, ASSERT_EQ(cudaSuccess, cudaMemcpy(inData->basePtr(), inVec.data(), inBufSize, cudaMemcpyHostToDevice));); (52, CUDA, ASSERT_EQ(cudaSuccess, cudaStreamCreate(&stream));); (70, CUDA, ASSERT_EQ(cudaSuccess, cudaStreamDestroy(stream));)", "label": "(39, CUDA, ASSERT_EQ(cudaSuccess, cudaMemcpy(inData->basePtr(), inVec.data(), inBufSize, cudaMemcpyHostToDevice));); (71, CUDA, ASSERT_EQ(cudaSuccess, cudaStreamSynchronize(stream));); (71, CUDA, ASSERT_EQ(cudaSuccess, cudaStreamDestroy(stream));); (51, CUDA, ASSERT_EQ(cudaSuccess, cudaStreamCreate(&stream));)"}
{"predict": "(8, CUDA, CheckCudaErrors(cudaMemGetInfo(&freeCUDAMem, &totalCUDAMem));)", "label": "(5, CUDA, cudaSetDevice(0);); (8, CUDA, cudaMemGetInfo(&freeCUDAMem, &totalCUDAMem);)"}
{"predict": "(48, OpenMP, std::cout << \"Number of threads    = \" << omp_get_max_threads() << std::endl;)", "label": "(48, OpenMP, std::cout << \"Number of threads    = \" << omp_get_max_threads() << std::endl;)"}
{"predict": "(24, MPI, merr = MPI_Publish_name(serv_name, MPI_INFO_NULL, port_name);); (33, MPI, merr = MPI_Unpublish_name(serv_name, MPI_INFO_NULL, port_name);); (24, MPI, MPI_Barrier(MPI_COMM_WORLD);); (8, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (40, MPI, merr = MPI_Lookup_name(serv_name, MPI_INFO_NULL, port_name_out);); (23, MPI, MPI_Error_string(merr, errmsg, &msglen);); (64, MPI, MPI_Error_class(merr, &mclass);); (54, MPI, MPI_Unpublish_name(serv_name, MPI_INFO_NULL, port_name);); (35, MPI, MPI_Publish_name(serv_name, MPI_INFO_NULL, port_name);)", "label": "(35, MPI, merr = MPI_Unpublish_name(serv_name, MPI_INFO_NULL, port_name);); (24, MPI, merr = MPI_Publish_name(serv_name, MPI_INFO_NULL, port_name);); (10, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (25, MPI, MPI_Error_string(merr, errmsg, &msglen);); (41, MPI, merr = MPI_Lookup_name(serv_name, MPI_INFO_NULL, port_name_out);); (64, MPI, MPI_Error_class(merr, &mclass);); (16, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);); (25, MPI, MPI_Barrier(MPI_COMM_WORLD);)"}
{"predict": "(2, OpenMP, #pragma omp parallel for)", "label": "(13, OpenMP, __kmpc_omp_task(nullptr, gtid, task1);); (1, OpenMP, #pragma omp parallel for); (18, OpenMP, __kmpc_omp_task(nullptr, gtid, task2);)"}
{"predict": "(56, TBB, tbb::concurrent_bounded_queue<int> iq4;); (22, TBB, tbb::concurrent_bounded_queue<int> iq2;); (36, TBB, tbb::concurrent_bounded_queue<int> iq3;); (2, TBB, tbb::concurrent_bounded_queue<int> iq1;)", "label": "(55, TBB, tbb::concurrent_bounded_queue<int> iq4;); (22, TBB, tbb::concurrent_bounded_queue<int> iq2;); (35, TBB, tbb::concurrent_bounded_queue<int> iq3;); (3, TBB, tbb::concurrent_bounded_queue<int> iq1;)"}
{"predict": "(22, CUDA, cudaFree(res_dev);); (15, CUDA, cudaMemcpy(&res_host, res_dev, sizeof(bool), cudaMemcpyDeviceToHost);); (11, CUDA, cudaMalloc(&res_dev, sizeof(bool));)", "label": "(22, CUDA, cudaFree(res_dev);); (15, CUDA, cudaMemcpy(&res_host, res_dev, sizeof(bool), cudaMemcpyDeviceToHost);); (11, CUDA, cudaMalloc(&res_dev, sizeof(bool));)"}
{"predict": "(27, OpenMP, auto start_clock = omp_get_wtime();); (44, OpenMP, auto stop_clock = omp_get_wtime();)", "label": "(27, OpenMP, auto start_clock = omp_get_wtime();); (44, OpenMP, auto stop_clock = omp_get_wtime();)"}
{"predict": "(4, OpenMP, #pragma omp target teams distribute simd firstprivate(g, g1, sivar))", "label": "(4, OpenMP, #pragma omp target teams distribute simd firstprivate(g, g1, sivar))"}
{"predict": "(19, CUDA, ASSERT_EQ(cudaGetLastError(), cudaSuccess) << \"Kernel launch error.\");)", "label": "(19, CUDA, ASSERT_EQ(cudaGetLastError(), cudaSuccess) << \"Kernel launch error.\";)"}
{"predict": "(21, OpenCL, status = clBuildProgram(program, 1, &device, NULL, NULL, NULL);)", "label": "(23, OpenCL, kernel = clCreateKernel(program, \"simplemov\", &status);); (20, OpenCL, OCL_ASSERT(clBuildProgram(program, 1, &device, NULL, NULL, NULL) == CL_SUCCESS);)"}
{"predict": "(13, CUDA, cudaGraphicsUnmapResources(1, &cuda_pbo_resource, 0);); (4, CUDA, cudaGraphicsMapResources(1, &cuda_pbo_resource, 0);)", "label": "(2, CUDA, cudaGraphicsMapResources(1, &cuda_pbo_resource, 0);); (7, CUDA, cudaGraphicsUnmapResources(1, &cuda_pbo_resource, 0);)"}
{"predict": "(3, OpenMP, #pragma omp target map(tofrom: threadCount)); (4, OpenMP, #pragma omp metadirective)", "label": "(3, OpenMP, #pragma omp target map(tofrom: threadCount)); (4, OpenMP, #pragma omp metadirective)"}
{"predict": "(5, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (14, MPI, double end = MPI_Wtime();); (2, MPI, MPI_Barrier(MPI_COMM_WORLD);); (0, MPI, double start = MPI_Wtime();)", "label": "(5, MPI, MPI_Barrier(MPI_COMM_WORLD);); (5, MPI, double start = MPI_Wtime();); (12, MPI, double end = MPI_Wtime();); (0, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);)"}
{"predict": "(9, MPI, MPI_Init(&argc, &argv);); (18, MPI, MPI_Finalize();); (9, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (31, MPI, MPI_Wait(&recv_request, &status);); (8, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (17, MPI, MPI_Isend(&send_value, 1, MPI_INT, (rank + 1) % size, 4711, MPI_COMM_WORLD, &send_request);); (27, MPI, MPI_Wait(&send_request, &status);)", "label": "(9, MPI, MPI_Init(&argc, &argv);); (18, MPI, MPI_Finalize();); (9, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (31, MPI, MPI_Wait(&recv_request, &status);); (8, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (17, MPI, MPI_Isend(&send_value, 1, MPI_INT, (rank + 1) % size, 4711, MPI_COMM_WORLD, &send_request);); (27, MPI, MPI_Wait(&send_request, &status);)"}
{"predict": "(33, OpenCL, clReleaseEvent(retEvent);)", "label": "(33, OpenCL, clReleaseEvent(retEvent);)"}
{"predict": "(7, CUDA, ensemble = new flamegpu::CUDAEnsemble(model);); (15, CUDA, ensemble = new flamegpu::CUDAEnsemble(model, 2, argv);)", "label": "(16, CUDA, EXPECT_NO_THROW(ensemble = new flamegpu::CUDAEnsemble(model, sizeof(argv) / sizeof(char*), argv));); (6, CUDA, EXPECT_NO_THROW(ensemble = new flamegpu::CUDAEnsemble(model, 0, nullptr));)"}
{"predict": "(2, MPI, MPI_Comm cComm = MPI_Comm_f2c(*comm);); (4, MPI, MPI_Comm_size(MPI_COMM_WORLD, &wSize);); (4, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &wRank);); (5, MPI, MPI_Comm_rank(cComm, &cRank);); (3, MPI, MPI_Comm_size(cComm, &cSize);)", "label": "(2, MPI, MPI_Comm cComm = MPI_Comm_f2c(*comm);); (4, MPI, MPI_Comm_size(MPI_COMM_WORLD, &wSize);); (4, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &wRank);); (5, MPI, MPI_Comm_rank(cComm, &cRank);); (3, MPI, MPI_Comm_size(cComm, &cSize);)"}
{"predict": "(105, CUDA, cudaError_t cudaErr = cudaStreamCreate(&streamArray[i]);); (447, CUDA, cudaErr = cudaMemcpy(ptr, devPtrA[i], sizeof(T_ELEM), cudaMemcpyDeviceToHost);); (454, CUDA, cudaErr = cudaMemcpy(ptr, devPtrC[i], sizeof(T_ELEM), cudaMemcpyDeviceToHost);); (441, CUDA, cudaErr = cudaMemcpy(ptr, devPtrB[i], sizeof(T_ELEM), cudaMemcpyDeviceToHost);); (508, CUDA, cudaFree(devPtrC_dev);); (510, CUDA, cudaFreeHost(h);); (459, CUDA, cudaErr = cudaMemcpy(ptr, devPtrB_dev, sizeof(T_ELEM), cudaMemcpyDeviceToHost);); (445, CUDA, cudaErr = cudaMemcpy(ptr, devPtrA_dev, sizeof(T_ELEM), cudaMemcpyDeviceToHost);); (503, CUDA, cudaFree(devPtrA_dev);); (504, CUDA, cudaFree(devPtrB_dev);); (447, CUDA, cudaErr = cudaMemcpy(ptr, devPtrC_dev, sizeof(T_ELEM), cudaMemcpyDeviceToHost);); (389, CUDA, cudaMallocHost((void **)&h, sizeof(T_ELEM));); (441, CUDA, cudaErr = cudaMemcpy(ptr, devPtrA, sizeof(T_ELEM), cudaMemcpyDeviceToHost);); (447, CUDA, cudaErr = cudaMemcpy(ptr, devPtrC, sizeof(T_ELEM), cudaMemcpyDeviceToHost);); (453, CUDA, cudaErr = cudaMemcpy(ptr, devPtrB, sizeof(T_ELEM), cudaMemcpyDeviceToHost);); (501, CUDA, cudaFree(devPtrA);); (502, CUDA, cudaFree(devPtrB);); (503, CUDA, cudaFree(devPtrC);); (383, CUDA, cudaMalloc((void **)&ptr, sizeof(T_ELEM));); (443, CUDA, cudaErr = cudaMemcpy(ptr, devPtrA_dev, sizeof(T_ELEM), cudaMemcpyHostToDevice);); (502, CUDA, cudaFreeHost(h);); (448, CUDA, cudaErr = cudaMemcpy(ptr, devPtrB_dev, sizeof(T_ELEM), cudaMemcpyHostToDevice);); (453, CUDA, cudaErr = cudaMemcpy(ptr, devPtrC_dev, sizeof(T_ELEM), cudaMemcpyHostToDevice);); (443, CUDA, cuda", "label": "(193, CUDA, cudaError_t cudaStatus = cudaDeviceSynchronize();); (103, CUDA, cudaError_t cudaErr = cudaStreamCreate(&streamArray[i]);); (163, CUDA, cudaError_t cudaStatus = cudaGetLastError();)"}
{"predict": "(20, MPI, *ierr = MPI_Info_get_valuelen( (MPI_Info)(*v1), p2, v3, &l4 );)", "label": "(19, MPI, *ierr = MPI_Info_get_valuelen( (MPI_Info)(*v1), p2, v3, &l4 );)"}
{"predict": "(167, MPI, MPI_Waitall(nprocs_send, send_req, statuses);); (29, MPI, MPI_Alltoall(recv_size, 1, MPI_COUNT, count, 1, MPI_COUNT, fd->comm);); (64, MPI, MPI_Type_commit(recv_types + j);)", "label": "(65, MPI, MPI_Type_commit(recv_types + j);); (30, MPI, MPI_Alltoall(recv_size, 1, MPI_COUNT, send_size, 1, MPI_COUNT, fd->comm);)"}
{"predict": "(7, CUDA, cudaDeviceSynchronize();)", "label": "(3, CUDA, cudaFree( 0 );)"}
{"predict": "(52, CUDA, CHECK_CUDA(cudaFreeHost(hIndices));); (15, CUDA, CHECK_CUDA(cudaMallocHost(&hIndicesRef, ySize * sizeof(uint32_t)));); (19, CUDA, CHECK_CUDA(cudaMalloc(&dx, xSize * sizeof(float)));); (50, CUDA, CHECK_CUDA(cudaFreeHost(hIndicesRef));); (8, CUDA, CHECK_CUDA(cudaMallocHost(&hx, xSize * sizeof(float)));); (-3, CUDA, CHECK_HIEDNN(hiednnCreateCudaHandle(&handle));); (44, CUDA, CHECK_CUDA(cudaFreeHost(hx));); (42, CUDA, CHECK_CUDA(cudaFree(dIndices));); (40, CUDA, CHECK_CUDA(cudaFree(dx));); (4, CUDA, CHECK_CUDA(cudaMallocHost(&hyRef, ySize * sizeof(float)));); (5, CUDA, CHECK_CUDA(cudaMallocHost(&hIndices, ySize * sizeof(uint32_t)));); (40, CUDA, CHECK_CUDA(cudaFreeHost(hyRef));); (11, CUDA, CHECK_CUDA(cudaMalloc(&dIndices, ySize * sizeof(uint32_t)));)", "label": "(52, CUDA, CHECK_CUDA(cudaFreeHost(hIndices));); (15, CUDA, CHECK_CUDA(cudaMallocHost(&hIndicesRef, ySize * sizeof(uint32_t)));); (19, CUDA, CHECK_CUDA(cudaMalloc(&dx, xSize * sizeof(float)));); (50, CUDA, CHECK_CUDA(cudaFreeHost(hIndicesRef));); (8, CUDA, CHECK_CUDA(cudaMallocHost(&hx, xSize * sizeof(float)));); (-3, CUDA, CHECK_HIEDNN(hiednnCreateCudaHandle(&handle));); (44, CUDA, CHECK_CUDA(cudaFreeHost(hx));); (42, CUDA, CHECK_CUDA(cudaFree(dIndices));); (40, CUDA, CHECK_CUDA(cudaFree(dx));); (4, CUDA, CHECK_CUDA(cudaMallocHost(&hyRef, ySize * sizeof(float)));); (5, CUDA, CHECK_CUDA(cudaMallocHost(&hIndices, ySize * sizeof(uint32_t)));); (40, CUDA, CHECK_CUDA(cudaFreeHost(hyRef));); (11, CUDA, CHECK_CUDA(cudaMalloc(&dIndices, ySize * sizeof(uint32_t)));)"}
{"predict": "(3, CUDA, cudaExtent extent = make_cudaExtent(4, 5, 6);)", "label": "(4, CUDA, cudaExtent extent = make_cudaExtent(4, 5, 6);)"}
{"predict": "(39, SYCL, sycl::accessor A(d_A, h);); (39, SYCL, sycl::accessor B(d_B, h);); (82, SYCL, prk::SYCL::print_exception_details(e);); (38, SYCL, sycl::accessor C(d_C, h);)", "label": "(39, SYCL, sycl::accessor B(d_B, h, sycl::read_only);); (37, SYCL, sycl::accessor A(d_A, h);); (38, SYCL, sycl::accessor C(d_C, h, sycl::read_only);); (81, SYCL, prk::SYCL::print_exception_details(e);)"}
{"predict": "(2, CUDA, LogDebug(LOG_PY_UTILS \"PyCudaMemory_New()\\n\");)", "label": "(2, CUDA, LogDebug(LOG_PY_UTILS \"PyCudaMemory_New()\\n\");)"}
{"predict": "(3, MPI, MPI_Init(nullptr, nullptr);); (100, MPI, MPI_Finalize();); (3, MPI, dray::dray::mpi_comm(MPI_Comm_c2f(comm));)", "label": "(3, MPI, MPI_Init(nullptr, nullptr);); (100, MPI, MPI_Finalize();); (3, MPI, dray::dray::mpi_comm(MPI_Comm_c2f(comm));)"}
{"predict": "(9, SYCL, sycl::queue handle = getSYCLDefaultDeviceDefaultQueue();)", "label": "(9, SYCL, sycl::queue handle = getSYCLDefaultDeviceDefaultQueue();)"}
{"predict": "(29, OpenMP, #pragma omp target teams distribute parallel for map(tofrom:dbl_min[0:1],dbl_max[0:1])); (49, OpenMP, #pragma omp target teams distribute parallel for map(tofrom:min[0:1],max[0:1])); (53, OpenMP, #pragma omp target teams distribute parallel for  ); (64, OpenMP, omp_target_free(min, omp_get_default_device() );); (64, OpenMP, omp_target_free(max, omp_get_default_device() );); (64, OpenMP, omp_target_free(dbl_min, omp_get_default_device() );); (64, OpenMP, omp_target_free(dbl_max, omp_get_default_device() );); (29, OpenMP, #pragma omp atomic compare hint(ompx_fast_fp_atomics)); (34, OpenMP, #pragma omp atomic compare); (-2, OpenMP, #pragma omp target enter data map(alloc: int_array[0:N],dbl_array[0:N])); (-3, OpenMP, #pragma omp target map(tofrom: int_array[:], dbl_array[:]) device(0))", "label": "(24, OpenMP, double *dbl_min = (double*) omp_target_alloc(sizeof(double)*1, omp_get_default_device() );); (22, OpenMP, int *max = (int*) omp_target_alloc(sizeof(int)*1, omp_get_default_device() );); (23, OpenMP, double *dbl_max = (double*) omp_target_alloc(sizeof(double)*1, omp_get_default_device() );); (33, OpenMP, #pragma omp atomic compare); (6, OpenMP, #pragma omp target teams distribute parallel for); (38, OpenMP, #pragma omp atomic compare hint(ompx_fast_fp_atomics)); (50, OpenMP, #pragma omp target teams distribute parallel for  map(tofrom:min2,max2))"}
{"predict": "(249, CUDA, result.error = cudaEventRecord(events[0]);); (260, CUDA, std::cerr << \"cudaEventSynchronize() failed: \" << cudaGetErrorString(result.error) << std::endl;); (267, CUDA, std::cerr << \"cudaEventElapsed() failed: \" << cudaGetErrorString(result.error) << std::endl;); (248, CUDA, std::cerr << \"cudaEventRecord() failed: \" << cudaGetErrorString(result.error) << std::endl;); (258, CUDA, result.error = cudaEventRecord(events[1]);); (274, CUDA, (void)cudaEventDestroy(event);); (237, CUDA, std::cerr << \"cudaEventCreate() failed: \" << cudaGetErrorString(result.error) << std::endl;); (263, CUDA, result.error = cudaEventElapsedTime(&runtime_ms, events[0], events[1]);); (254, CUDA, result.error = cudaEventSynchronize(events[1]);); (232, CUDA, result.error = cudaEventCreate(&event);)", "label": "(202, CUDA, result.error = cudaEventRecord(events[0]);); (223, CUDA, std::cerr << \"cudaEventSynchronize() failed: \" << cudaGetErrorString(result.error) << std::endl;); (230, CUDA, std::cerr << \"cudaEventElapsed() failed: \" << cudaGetErrorString(result.error) << std::endl;); (201, CUDA, std::cerr << \"cudaEventRecord() failed: \" << cudaGetErrorString(result.error) << std::endl;); (211, CUDA, result.error = cudaEventRecord(events[1]);); (237, CUDA, (void)cudaEventDestroy(event);); (190, CUDA, std::cerr << \"cudaEventCreate() failed: \" << cudaGetErrorString(result.error) << std::endl;); (223, CUDA, result.error = cudaEventElapsedTime(&runtime_ms, events[0], events[1]);); (214, CUDA, result.error = cudaEventSynchronize(events[1]);); (185, CUDA, result.error = cudaEventCreate(&event);)"}
{"predict": "(9, MPI, MPI_Init(&argc, &argv);); (27, MPI, MPI_Finalize();); (9, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (35, MPI, MPI_Wait(&send_request, &status);); (37, MPI, MPI_Wait(&recv_request, &status);); (8, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (29, MPI, MPI_Send(&send_value, 9, MPI_INT, (rank + 1) % size, 4711, MPI_COMM_WORLD);); (19, MPI, MPI_Abort(MPI_COMM_WORLD, 200);)", "label": "(9, MPI, MPI_Init(&argc, &argv);); (25, MPI, MPI_Finalize();); (9, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (9, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (30, MPI, MPI_Isend(&send_value, 9, MPI_INT, (rank + 1) % size, 4711, MPI_COMM_WORLD, &send_request);); (34, MPI, MPI_Wait(&recv_request, &status);); (32, MPI, MPI_Wait(&send_request, &status);)"}
{"predict": "(54, MPI, MPI_Comm_size(fd->comm, &nprocs);); (43, MPI, MPI_Type_size_x(fd->filetype, &filetype_size);); (59, MPI, MPI_Type_get_extent(datatype, &lb, &buftype_extent);); (40, MPI, MPI_Type_size_x(datatype, &buftype_size);); (29, MPI, MPI_Comm_rank(fd->comm, &rank);)", "label": "(44, MPI, MPI_Type_size_x(fd->filetype, &filetype_size);); (52, MPI, MPI_Comm_rank(fd->comm, &rank);); (52, MPI, MPI_Comm_size(fd->comm, &nprocs);); (56, MPI, MPI_Type_get_extent(datatype, &lb, &buftype_extent);); (54, MPI, MPI_Type_size_x(datatype, &buftype_size);)"}
{"predict": "(144, MPI, MPI_Bcast(&size2,      1, MPI_LONG_LONG_INT, root, MPI_COMM_WORLD);); (144, MPI, MPI_Bcast(&radius,     1, MPI_INT,           root, MPI_COMM_WORLD);); (304, MPI, MPI_Finalize();); (139, MPI, MPI_Bcast(&lsize2,     1, MPI_INT,           root, MPI_COMM_WORLD);); (137, MPI, MPI_Bcast(&lsize,      1, MPI_INT,           root, MPI_COMM_WORLD);); (138, MPI, MPI_Bcast(&size,       1, MPI_LONG_LONG_INT, root, MPI_COMM_WORLD);); (278, MPI, MPI_Reduce(&vector_sum, &check_sum, 1, MPI_DOUBLE, MPI_SUM, root, MPI_COMM_WORLD);); (44, MPI, MPI_Init(&argc,&argv);); (229, MPI, MPI_Barrier(MPI_COMM_WORLD);); (44, MPI, MPI_Comm_size(MPI_COMM_WORLD, &Num_procs);); (136, MPI, MPI_Bcast(&iterations, 1, MPI_INT,           root, MPI_COMM_WORLD);); (41, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &my_ID);)", "label": "(146, MPI, MPI_Bcast(&size2,      1, MPI_LONG_LONG_INT, root, MPI_COMM_WORLD);); (146, MPI, MPI_Bcast(&radius,     1, MPI_INT,           root, MPI_COMM_WORLD);); (303, MPI, MPI_Finalize();); (141, MPI, MPI_Bcast(&lsize2,     1, MPI_INT,           root, MPI_COMM_WORLD);); (139, MPI, MPI_Bcast(&lsize,      1, MPI_INT,           root, MPI_COMM_WORLD);); (140, MPI, MPI_Bcast(&size,       1, MPI_LONG_LONG_INT, root, MPI_COMM_WORLD);); (277, MPI, MPI_Reduce(&vector_sum, &check_sum, 1, MPI_DOUBLE, MPI_SUM, root, MPI_COMM_WORLD);); (44, MPI, MPI_Init(&argc,&argv);); (230, MPI, MPI_Barrier(MPI_COMM_WORLD);); (44, MPI, MPI_Comm_size(MPI_COMM_WORLD, &Num_procs);); (138, MPI, MPI_Bcast(&iterations, 1, MPI_INT,           root, MPI_COMM_WORLD);); (41, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &my_ID);)"}
{"predict": "(173, OpenMP, #pragma omp parallel for)", "label": "(251, OpenMP, #pragma omp parallel for shared(curdat, inc, m_count))"}
{"predict": "(18, OpenMP, #pragma omp target parallel for simd collapse(,); (40, OpenMP, #pragma omp target parallel for simd collapse(4, )); (3, OpenMP, #pragma omp target parallel for simd collapse); (67, OpenMP, #pragma omp target parallel for simd collapse(2.5)); (27, OpenMP, #pragma omp target parallel for simd collapse(4); (4, OpenMP, #pragma omp target parallel for simd collapse(); (60, OpenMP, #pragma omp target parallel for simd collapse(4, 8)); (67, OpenMP, #pragma omp target parallel for simd collapse(foo())); (28, OpenMP, #pragma omp target parallel for simd collapse(4,); (41, OpenMP, #pragma omp target parallel for simd collapse(4 4)); (74, OpenMP, #pragma omp target parallel for simd collapse(0)); (45, OpenMP, #pragma omp target parallel for simd collapse(4, , 4)); (12, OpenMP, #pragma omp target parallel for simd collapse 4)); (76, OpenMP, #pragma omp target parallel for simd collapse(2) firstprivate(i)); (70, OpenMP, #pragma omp target parallel for simd collapse(-5)); (55, OpenMP, #pragma omp target parallel for simd collapse(4, 0, 4)); (-1, OpenMP, #pragma omp target parallel for simd collapse()); (25, OpenMP, #pragma omp target parallel for simd collapse(4, ))", "label": "(21, OpenMP, #pragma omp target parallel for simd collapse(, )); (54, OpenMP, #pragma omp target parallel for simd collapse(4, , 4)); (34, OpenMP, #pragma omp target parallel for simd collapse(4,); (79, OpenMP, #pragma omp target parallel for simd collapse(0)); (46, OpenMP, #pragma omp target parallel for simd collapse(4 4)); (85, OpenMP, #pragma omp target parallel for simd collapse(2) firstprivate(i)); (72, OpenMP, #pragma omp target parallel for simd collapse(-5)); (6, OpenMP, #pragma omp target parallel for simd collapse()); (-3, OpenMP, #pragma omp target parallel for simd collapse); (57, OpenMP, #pragma omp target parallel for simd collapse(4, 8)); (7, OpenMP, #pragma omp target parallel for simd collapse(,); (63, OpenMP, #pragma omp target parallel for simd collapse(foo())); (74, OpenMP, #pragma omp target parallel for simd collapse(5 - 5)); (57, OpenMP, #pragma omp target parallel for simd collapse(2.5)); (17, OpenMP, #pragma omp target parallel for simd collapse(4); (11, OpenMP, #pragma omp target parallel for simd collapse 4)); (-7, OpenMP, #pragma omp target parallel for simd collapse(); (24, OpenMP, #pragma omp target parallel for simd collapse(4, )); (27, OpenMP, #pragma omp target parallel for simd collapse(4))"}
{"predict": "(7, SYCL, EasyCL *cl = EasyCL::createForFirstGpuOtherwiseCpu();)", "label": "(7, SYCL, EasyCL *cl = EasyCL::createForFirstGpuOtherwiseCpu();)"}
{"predict": "(83, CUDA, cudaDeviceSynchronize();); (14, CUDA, checkCudaErrors(cudaMalloc((void **)&d_in_signal, mem_size));); (73, CUDA, checkCudaErrors(cufftExecZ2Z(plan, (cufftDoubleComplex *)d_in_signal, (cufftDoubleComplex *)d_output_signal, direction));); (18, CUDA, checkCudaErrors(cudaMalloc((void **)&d_output_signal, mem_size));); (165, CUDA, checkCudaErrors(cufftDestroy(plan));); (175, CUDA, cudaDeviceReset();); (66, CUDA, checkCudaErrors(cufftExecC2C(plan, (cufftComplex *)d_in_signal, (cufftComplex *)d_output_signal, direction));); (178, CUDA, cudaFree(d_in_signal);); (179, CUDA, cudaFree(d_output_signal);); (8, CUDA, checkCudaErrors(cudaMalloc((void **)&d_in_signal, mem_size));); (12, CUDA, checkCudaErrors(cudaMalloc((void **)&d_output_signal, mem_size));); (162, CUDA, cudaFreeHost(h_in_signal);); (164, CUDA, cudaFreeHost(h_output_signal);); (65, CUDA, cudaDeviceSynchronize();); (-2, CUDA, checkCudaErrors(cudaSetDevice(0));); (164, CUDA, cudaDeviceReset();)", "label": "(83, CUDA, cudaDeviceSynchronize();); (20, CUDA, checkCudaErrors(cudaMalloc((void **)&d_output_signal, mem_size));); (73, CUDA, checkCudaErrors(cufftExecZ2Z(plan, (cufftDoubleComplex *)d_in_signal, (cufftDoubleComplex *)d_output_signal, direction));); (69, CUDA, checkCudaErrors(cufftExecC2C(plan, (cufftComplex *)d_in_signal, (cufftComplex *)d_output_signal, direction));); (155, CUDA, checkCudaErrors(cufftDestroy(plan));); (9, CUDA, checkCudaErrors(cudaMalloc((void **)&d_in_signal, mem_size));); (163, CUDA, cudaDeviceReset();)"}
{"predict": "(51, CUDA, CHECK(cudaFree(d_y));); (26, CUDA, CHECK(cudaMemcpy(d_x, h_x, M, cudaMemcpyHostToDevice));); (44, CUDA, CHECK(cudaFree(d_z));); (35, CUDA, CHECK(cudaMemcpy(h_z, d_z, M, cudaMemcpyDeviceToHost));); (17, CUDA, CHECK(cudaMalloc((void**)&d_x, M));); (17, CUDA, CHECK(cudaMalloc((void**)&d_y, M));); (40, CUDA, CHECK(cudaFree(d_x));); (16, CUDA, CHECK(cudaMalloc((void**)&d_z, M));); (27, CUDA, CHECK(cudaGetLastError());); (27, CUDA, CHECK(cudaDeviceSynchronize());); (19, CUDA, CHECK(cudaMemcpy(d_y, h_y, M, cudaMemcpyHostToDevice));)", "label": "(48, CUDA, CHECK(cudaFree(d_y));); (26, CUDA, CHECK(cudaMemcpy(d_x, h_x, M, cudaMemcpyHostToDevice));); (47, CUDA, CHECK(cudaFree(d_z));); (35, CUDA, CHECK(cudaMemcpy(h_z, d_z, M, cudaMemcpyDeviceToHost));); (18, CUDA, CHECK(cudaMalloc((void**)&d_x, M));); (18, CUDA, CHECK(cudaMalloc((void**)&d_y, M));); (41, CUDA, CHECK(cudaFree(d_x));); (17, CUDA, CHECK(cudaMalloc((void**)&d_z, M));); (26, CUDA, CHECK(cudaGetLastError());); (26, CUDA, CHECK(cudaDeviceSynchronize());); (18, CUDA, CHECK(cudaMemcpy(d_y, h_y, M, cudaMemcpyHostToDevice));)"}
{"predict": "(5, MPI, MPI_Init(&argc, &argv);); (123, MPI, MPI_Finalize();); (3, MPI, MPI_Get_library_version(version, &versionlen);)", "label": "(5, MPI, MPI_Get_library_version(version, &versionlen);)"}
{"predict": "(4, OpenMP, #pragma omp parallel); (5, OpenMP, #pragma omp single)", "label": "(6, OpenMP, #pragma omp for reduction(+:count) lastprivate(obj)); (9, OpenMP, #pragma omp cancel for); (2, OpenMP, #pragma omp parallel private(i) num_threads(1))"}
{"predict": "(31, CUDA, CUDA_CHECK_AND_EXIT(cudaMalloc(&device_buffer, size_bytes));); (32, CUDA, CUDA_CHECK_AND_EXIT(cudaMemcpy(device_buffer, input.data(), size_bytes, cudaMemcpyHostToDevice));); (41, CUDA, CUDA_CHECK_AND_EXIT(cudaFree(device_buffer));); (35, CUDA, CUDA_CHECK_AND_EXIT(cudaDeviceSynchronize());); (33, CUDA, CUDA_CHECK_AND_EXIT(cudaPeekAtLastError());); (37, CUDA, CUDA_CHECK_AND_EXIT(cudaMemcpy(output.data(), device_buffer, size_bytes, cudaMemcpyDeviceToHost));)", "label": "(31, CUDA, CUDA_CHECK_AND_EXIT(cudaMalloc(&device_buffer, size_bytes));); (32, CUDA, CUDA_CHECK_AND_EXIT(cudaMemcpy(device_buffer, input.data(), size_bytes, cudaMemcpyHostToDevice));); (41, CUDA, CUDA_CHECK_AND_EXIT(cudaFree(device_buffer));); (35, CUDA, CUDA_CHECK_AND_EXIT(cudaDeviceSynchronize());); (33, CUDA, CUDA_CHECK_AND_EXIT(cudaPeekAtLastError());); (37, CUDA, CUDA_CHECK_AND_EXIT(cudaMemcpy(output.data(), device_buffer, size_bytes, cudaMemcpyDeviceToHost));)"}
{"predict": "(101, MPI, MPI_Allgather(st_end_offset, 2, ADIO_OFFSET, all_st_end_offsets, 2, ADIO_OFFSET, fd->comm);); (146, MPI, MPI_Comm_size(fd->comm, &nprocs);); (286, MPI, MPI_Type_free(&client_comm_dtype_arr[i]);); (139, MPI, MPI_Type_size_x(datatype, &size);); (454, MPI, MPI_Type_free(&fd->file_realm_types[0]);); (278, MPI, MPI_Type_free(&agg_comm_dtype_arr[i]);); (63, MPI, MPI_Comm_rank(fd->comm, &myrank);); (451, MPI, MPI_Type_free(&fd->file_realm_types[i]);); (281, MPI, MPI_Free_mem(cb_buf);); (218, MPI, MPI_Type_size_x(agg_dtype, &agg_size);); (271, MPI, MPI_Request_free(&client_comm_requests[i]);); (269, MPI, MPI_Status_free(&client_comm_statuses[i]);); (211, MPI, MPI_Type_create_resized(datatype, 0, count * extent, &resized_dtype);); (505, MPI, MPI_Type_free(&resized_dtype);); (446, MPI, MPI_Request_free(&agg_comm_requests[i]);); (443, MPI, MPI_Status_free(&agg_comm_statuses[i]);); (264, MPI, MPI_Request_free(&agg_comm_requests[aggs_client_count]);); (440, MPI, MPI_Type_free(&client_comm_dtype_arr[aggs_client_count]);); (258, MPI, MPI_Type_free(&agg_dtype);); (211, MPI, MPI_Type_get_extent(datatype, &lb, &extent);); (435, MPI, MPI_Type_free(&fd->file_realm_type);); (206, MPI, MPI_Type_dup(datatype, &agg_dtype);); (262, MPI, MPI_Free_mem(agg_file_view_state_arr);); (259, MPI, MPI_Free_mem(client_file_view_state_arr);); (261, MPI, MPI_Free_mem(my_mem_view_state_arr);); (437, MPI, MPI_Type_free(&client_comm_sz_arr[i]);); (399, MPI, MPI_Type_free", "label": "(101, MPI, MPI_Allgather(st_end_offset, 2, ADIO_OFFSET, all_st_end_offsets, 2, ADIO_OFFSET, fd->comm);); (66, MPI, MPI_Comm_rank(fd->comm, &myrank);); (522, MPI, MPI_Type_free(&client_comm_dtype_arr[i]);); (582, MPI, MPI_Type_free(&fd->file_realm_types[0]);); (62, MPI, MPI_Comm_size(fd->comm, &nprocs);); (584, MPI, MPI_Type_free(&fd->file_realm_types[i]);); (150, MPI, MPI_Type_get_extent(datatype, &lb, &extent);); (302, MPI, MPI_Type_size_x(agg_comm_dtype_arr[i], &size);); (296, MPI, MPI_Type_free(&agg_dtype);)"}
{"predict": "(13, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);)", "label": "(13, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);)"}
{"predict": "(9, MPI, MPI_Win_unlock(0, win);); (11, MPI, MPI_Accumulate(one, nlevels, MPI_INT, 0, 0, 1, get_type, MPI_SUM, win);); (7, MPI, MPI_Win_lock(MPI_LOCK_EXCLUSIVE, 0, 0, win);)", "label": "(12, MPI, MPI_Win_unlock(0, win);); (9, MPI, MPI_Accumulate(one, nlevels, MPI_INT, 0, 0, 1, acc_type, MPI_SUM, win);); (9, MPI, MPI_Get(get_array, nlevels, MPI_INT, 0, 0, 1, get_type, win);); (6, MPI, MPI_Win_lock(MPI_LOCK_EXCLUSIVE, 0, 0, win);)"}
{"predict": "(58, OpenMP, #pragma omp barrier); (86, OpenMP, #pragma omp target exit data map(delete: A[0:length]) map(from: B[0:length], C[0:length])); (55, OpenMP, #pragma omp target enter data map(alloc: A[0:length]) map(to: B[0:length], C[0:length]))", "label": "(31, OpenMP, std::cout << \"OpenMP default device = \" << omp_get_default_device() << std::endl;)"}
{"predict": "(18, CUDA, cudaFree(res_dev);); (8, CUDA, cudaMalloc(&res_dev, sizeof(float));); (10, CUDA, cudaMemcpy(&res_host, res_dev, sizeof(float), cudaMemcpyDeviceToHost);)", "label": "(18, CUDA, cudaFree(res_dev);); (8, CUDA, cudaMalloc(&res_dev, sizeof(float));); (10, CUDA, cudaMemcpy(&res_host, res_dev, sizeof(float), cudaMemcpyDeviceToHost);)"}
{"predict": "(31, TBB, serial_time = (tbb::tick_count::now() - t0).seconds();); (37, TBB, reduce_time = (tbb::tick_count::now() - t0).seconds();); (43, TBB, graph_time = (tbb::tick_count::now() - t0).seconds();)", "label": "(29, TBB, tbb::tick_count t0 = tbb::tick_count::now();); (37, TBB, reduce_time = (tbb::tick_count::now() - t0).seconds();); (43, TBB, graph_time = (tbb::tick_count::now() - t0).seconds();); (28, TBB, serial_time = (tbb::tick_count::now() - t0).seconds();)"}
{"predict": "(12, CUDA, thrust::fill(dev_ptr, dev_ptr + N, 0);); (5, CUDA, cudaMalloc(&raw_ptr, N * sizeof(int));); (16, CUDA, cudaFree(raw_ptr);); (7, CUDA, thrust::device_ptr<int> dev_ptr(raw_ptr);)", "label": "(6, CUDA, cudaMalloc((void**) &raw_ptr, N * sizeof(int));); (11, CUDA, thrust::fill(dev_ptr, dev_ptr + N, (int) 0);); (7, CUDA, thrust::device_ptr<int> dev_ptr = thrust::device_pointer_cast(raw_ptr);); (15, CUDA, cudaFree(raw_ptr);)"}
{"predict": "(19, CUDA, cudaMemcpy(poscellh,poscell+pini,sizeof(float4)*np,cudaMemcpyDeviceToHost);); (19, CUDA, cudaMemcpy(checkh,check+pini,sizeof(byte)*np,cudaMemcpyDeviceToHost);)", "label": "(19, CUDA, cudaMemcpy(poscellh,poscell+pini,sizeof(float4)*np,cudaMemcpyDeviceToHost);); (19, CUDA, cudaMemcpy(checkh,check+pini,sizeof(byte)*np,cudaMemcpyDeviceToHost);)"}
{"predict": "(28, MPI, Mpi.SignalProgress();)", "label": "(29, MPI, Mpi.SignalProgress();)"}
{"predict": "(3, OpenMP, #pragma omp parallel for default(none) private(idx) shared(count, sapH_cur_salt, saved_plain, crypt_key))", "label": "(3, OpenMP, #pragma omp parallel for default(none) private(idx) shared(count, sapH_cur_salt, saved_plain, crypt_key))"}
{"predict": "(32, MPI, MPI_Finalize();); (7, MPI, rc = MPI_Init(&argc, &argv);); (23, MPI, rc = MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (8, MPI, MPI_Abort(MPI_COMM_WORLD, 1);)", "label": "(23, MPI, rc = MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (32, MPI, MPI_Finalize();); (6, MPI, rc = MPI_Init(NULL, NULL);)"}
{"predict": "(18, CUDA, YAKSURI_CUDAI_CUDA_ERR_CHKANDJUMP(cerr, rc, fn_fail);); (8, CUDA, uintptr_t iov_unpack_threshold = yaksuri_cudai_get_iov_unpack_threshold(info);); (28, CUDA, cudaMemcpyAsync(iov[i].iov_base, sbuf, iov[i].iov_len, cudaMemcpyDefault, stream);); (52, CUDA, cerr = cudaSetDevice(cur_device);); (42, CUDA, cerr = cudaGetDevice(&cur_device);); (32, CUDA, rc = yaksuri_cudai_md_alloc(type);); (43, CUDA, cerr = cudaSetDevice(target);)", "label": "(9, CUDA, uintptr_t iov_unpack_threshold = yaksuri_cudai_get_iov_unpack_threshold(info);); (29, CUDA, cudaMemcpyAsync(iov[i].iov_base, sbuf, iov[i].iov_len, cudaMemcpyDefault, stream);); (16, CUDA, YAKSURI_CUDAI_CUDA_ERR_CHKANDJUMP(cerr, rc, fn_fail);); (52, CUDA, cerr = cudaSetDevice(cur_device);); (42, CUDA, cerr = cudaGetDevice(&cur_device);); (32, CUDA, rc = yaksuri_cudai_md_alloc(type);); (43, CUDA, cerr = cudaSetDevice(target);)"}
{"predict": "(15, OpenMP, #pragma omp target teams distribute parallel for)", "label": "(15, OpenMP, #pragma omp target parallel for)"}
{"predict": "(4, CUDA, extern __shared__ float shared[];)", "label": "(4, CUDA, extern __shared__ float shared[];)"}
{"predict": "(17, OpenMP, KRATOS_ERROR_IF(timer.ElapsedSeconds() > 0.1) << \"SparseGraphContiguousRow generation time is suspiciously high: \" << timer.ElapsedSeconds() << std::endl;); (11, OpenMP, const auto timer = BuiltinTimer();)", "label": "(13, OpenMP, #pragma omp parallel for)"}
{"predict": "(26, TBB, generate_test<parallel_test, tbb::flow::tuple<float, double, int, double, double, long, int, float, long> >::do_test();); (17, TBB, generate_test<parallel_test, tbb::flow::tuple<float, int, double, float, long, float, long> >::do_test();); (11, TBB, generate_test<serial_test, tbb::flow::tuple<double, double, int, int, short> >::do_test();); (21, TBB, generate_test<parallel_test, tbb::flow::tuple<double, double, int, int, short> >::do_test();); (3, TBB, generate_test<serial_test, tbb::flow::tuple<float, double> >::do_test();); (14, TBB, generate_test<serial_test, tbb::flow::tuple<float, double, int, double, double, float, long, int, float, long> >::do_test();); (5, TBB, generate_test<serial_test, tbb::flow::tuple<float, double, int, long> >::do_test();); (22, TBB, generate_test<parallel_test, tbb::flow::tuple<double, double, double, int, long, float, long> >::do_test();); (6, TBB, generate_test<serial_test, tbb::flow::tuple<double, double, int, long, int, short> >::do_test();); (-2, TBB, generate_test<serial_test, tbb::flow::tuple<double, double, long, int, int, short> >::do_test();); (8, TBB, generate_test<parallel_test, tbb::flow::tuple<float, int, long> >::do_test();)", "label": "(31, TBB, generate_test<parallel_test, tbb::flow::tuple<float, double, int, double, double, long, int, float, long> >::do_test();); (27, TBB, generate_test<parallel_test, tbb::flow::tuple<float, int, double, float, long, float, long> >::do_test();); (23, TBB, generate_test<parallel_test, tbb::flow::tuple<double, double, int, int, short> >::do_test();); (15, TBB, generate_test<serial_test, tbb::flow::tuple<float, double, int, double, double, float, long, int, float, long> >::do_test();); (3, TBB, generate_test<serial_test, tbb::flow::tuple<float, double> >::do_test();); (4, TBB, generate_test<serial_test, tbb::flow::tuple<float, double, int, long> >::do_test();); (16, TBB, generate_test<parallel_test, tbb::flow::tuple<float, int, long> >::do_test();); (5, TBB, generate_test<serial_test, tbb::flow::tuple<double, double, int, long, int, short> >::do_test();); (7, TBB, generate_test<serial_test, tbb::flow::tuple<float, double, double, double, float, int, float, long> >::do_test();)"}
{"predict": "(13, MPI, MPI_Comm_size(comm, &nproc);); (24, MPI, MPI_Waitall(nproc, reqs, MPI_STATUSES_IGNORE);); (21, MPI, MPI_Isend(in_buf + i * elems, elems, MPI_FLOAT, rank, i, comm, &reqs[nproc + i]);); (17, MPI, MPI_Irecv(out_buf + i * elems, elems, MPI_FLOAT, rank, i, comm, &reqs[i]);); (25, MPI, MPI_Comm_set_errhandler(comm, MPI_ERRORS_ARE_FATAL);); (7, MPI, MPI_Comm_rank(comm, &rank);)", "label": "(25, MPI, MPI_Isend(&out_buf[elems * i], elems, MPI_FLOAT, i, 0, comm, &reqs[i + nproc]);); (20, MPI, MPI_Irecv(&in_buf[elems * i], elems, MPI_FLOAT, i, 0, comm, &reqs[i]);); (11, MPI, MPI_Comm_size(comm, &nproc);); (9, MPI, MPI_Comm_rank(comm, &rank);); (24, MPI, MPI_Waitall(nproc * 2, reqs, MPI_STATUSES_IGNORE);)"}
{"predict": "(28, CUDA, PyErr_SetString(PyExc_Exception, LOG_PY_UTILS \"cudaOverlay() input and output image formats are different\");); (32, CUDA, PYCUDA_ASSERT_NOGIL(cudaOverlay(input->base.ptr, output->base.ptr, x, y, input->width, input->height, input->format, stream));); (21, CUDA, PyErr_SetString(PyExc_Exception, LOG_PY_UTILS \"cudaOverlay() failed to get input/output image pointers (should be cudaImage)\");)", "label": "(22, CUDA, PyErr_SetString(PyExc_Exception, LOG_PY_UTILS \"cudaOverlay() failed to get input/output image pointers (should be cudaImage)\");); (32, CUDA, PYCUDA_ASSERT_NOGIL(cudaOverlay(input->base.ptr, input->width, input->height, output->base.ptr, output->width, output->height, output->format, x, y, stream));); (26, CUDA, PyErr_SetString(PyExc_Exception, LOG_PY_UTILS \"cudaOverlay() input and output image formats are different\");)"}
{"predict": "(3, CUDA, __shared__ float local[threads];)", "label": "(3, CUDA, __shared__ float local[threads];)"}
{"predict": "(33, OpenMP, #pragma omp atomic); (15, OpenMP, #pragma omp target teams distribute parallel for private(dx, dy, dz, r, ig2))", "label": "(33, OpenMP, #pragma omp atomic); (15, OpenMP, #pragma omp target teams distribute parallel for collapse(2) private(dx, dy, dz, r, ig2))"}
{"predict": "(20, OpenMP, #pragma omp for private(k)); (37, OpenMP, #pragma omp for private(j,k)); (54, OpenMP, #pragma omp for private(j))", "label": "(19, OpenMP, #pragma omp for private(k)); (37, OpenMP, #pragma omp for private ( k)); (66, OpenMP, #pragma omp for private (k))"}
{"predict": "(7, MPI, t1 = MPI_Wtime();); (38, MPI, tick = MPI_Wtick();); (7, MPI, t2 = MPI_Wtime();)", "label": "(8, MPI, t1 = MPI_Wtime();); (6, MPI, MPI_Init(&argc, &argv);); (38, MPI, MPI_Finalize();); (31, MPI, tick = MPI_Wtick();); (5, MPI, t2 = MPI_Wtime();)"}
{"predict": "(30, OpenCL, err = clGetDeviceInfo(device, CL_DEVICE_EXTENSIONS, 0, NULL, &len);); (43, OpenCL, err = clGetDeviceInfo(device, CL_DEVICE_EXTENSIONS, len, extensions, NULL);); (55, OpenCL, err = clGetDeviceInfo(device, CL_DEVICE_DOUBLE_FP_CONFIG, sizeof(cl_int), error, NULL);)", "label": "(29, OpenCL, err = clGetDeviceInfo(device, CL_DEVICE_EXTENSIONS, 0, NULL, &len);); (42, OpenCL, err = clGetDeviceInfo(device, CL_DEVICE_EXTENSIONS, len, extensions, NULL);)"}
{"predict": "(4, MPI, MPI_Finalize();); (136, MPI, MPI_Send(x.data(), chunk, MPI_DOUBLE, 0, 42, comm);); (0, MPI, MPI_Init_thread(&argc, &argv, MPI_THREAD_MULTIPLE, &provided);); (1, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (1, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);)", "label": "(2, MPI, MPI_Init_thread(&argc, &argv, MPI_THREAD_MULTIPLE, &provided);); (136, MPI, MPI_Send(x.data(), chunk, MPI_DOUBLE, 0, 42, comm);); (2, MPI, MPI_Finalize();); (65, MPI, MPI_Allgather(&chunk, 1, MPI_INT, &domain[1], 1, MPI_INT, comm);)"}
{"predict": "(120, MPI, MPI_Comm_free(&dup_comm_world);); (113, MPI, MPI_Attr_put(lo_comm, key_1, &value);); (123, MPI, MPI_Comm_free(&rev_comm);); (135, MPI, MPI_Keyval_free(&key_1);); (90, MPI, MPI_Comm_rank(lo_comm, &rank);); (112, MPI, MPI_Attr_put(world_comm, key_3, &value);); (8, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);); (108, MPI, MPI_Attr_put(lo_comm, key_3, &value);); (118, MPI, MPI_Comm_free(&lo_comm);); (100, MPI, MPI_Keyval_create(MPI_NULL_COPY_FN, MPI_NULL_DELETE_FN, &key_3, &vvalue);); (114, MPI, MPI_Comm_free(&split_comm);); (12, MPI, MPI_Group_free(&world_group);); (41, MPI, MPI_Comm_group(dup_comm_world, &rev_group);); (35, MPI, MPI_Comm_size(world_comm, &size);); (100, MPI, MPI_Comm_dup(lo_comm, &dup_comm);); (15, MPI, MPI_Comm_create(world_comm, rev_group, &rev_comm);); (101, MPI, MPI_Comm_split(world_comm, color, world_rank, &split_comm);); (57, MPI, MPI_Group_free(&world_group);); (30, MPI, MPI_Comm_rank(world_comm, &rank);); (113, MPI, MPI_Keyval_free(&key_3);); (22, MPI, MPI_Comm_create(world_comm, lo_group, &world_comm);); (95, MPI, MPI_Keyval_create(copy_fn, delete_fn, &key_1, &vvalue);); (36, MPI, MPI_Barrier(world_comm);); (24, MPI, MPI_Group_range_incl(world_group, 1, ranges, &rev_group);); (-3, MPI, MPI_Comm_size(MPI_COMM_WORLD, &world_size);); (55, MPI, MPI_Comm_free(&dup_comm);); (94, MPI, MPI_Attr_put(world_comm, key_1, &value);); (11, MPI, MPI_Comm_dup(dup_comm", "label": "(172, MPI, MPI_Comm_split(dup_comm_world, color, key, &split_comm);); (120, MPI, MPI_Attr_put(lo_comm, key_1, (void *) (MPI_Aint) world_rank);); (111, MPI, MPI_Keyval_create(copy_fn, delete_fn, &key_1, &value);); (142, MPI, MPI_Abort(MPI_COMM_WORLD, 3005);); (118, MPI, MPI_Attr_put(lo_comm, key_3, (void *) 0);); (238, MPI, MPI_Comm_free(&split_comm);); (210, MPI, MPI_Comm_compare(world_comm, rev_comm, &result);); (28, MPI, MPI_Comm_create(dup_comm_world, world_group, &world_comm);); (28, MPI, MPI_Comm_rank(world_comm, &rank);); (2, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);); (114, MPI, MPI_Comm_dup(lo_comm, &dup_comm);); (146, MPI, MPI_Keyval_free(&key_3);); (230, MPI, MPI_Comm_free(&rev_comm);); (135, MPI, MPI_Attr_get(dup_comm, key_3, (void **) &vvalue, &flag);); (210, MPI, MPI_Comm_compare(world_comm, lo_comm, &result);); (190, MPI, MPI_Abort(MPI_COMM_WORLD, 3011);); (71, MPI, MPI_Abort(MPI_COMM_WORLD, 3003);); (228, MPI, MPI_Group_free(&world_group);); (155, MPI, MPI_Comm_size(split_comm, &size);); (-7, MPI, MPI_Comm_size(MPI_COMM_WORLD, &world_size);); (194, MPI, MPI_Comm_create(world_comm, rev_group, &rev_comm);); (135, MPI, MPI_Keyval_free(&key_1);); (157, MPI, MPI_Abort(MPI_COMM_WORLD, 3009);); (190, MPI, MPI_Group_range_incl(world_group, 1, ranges, &rev_group);); (92, MPI, MPI_Keyval_create(MPI_NULL_COPY_FN, MPI_NULL_DELETE_FN, &key_3, &value);); (129, MPI, MPI_Abort(MPI_COMM_WORLD, 3008);); (148, MPI, MPI_Comm_rank(split_comm, &rank);); (201, MPI, MPI_Abort(MPI_COMM_WORLD, 3013);); (173, MPI, MPI_Comm_compare(lo_comm, dup_comm, &result);); (47, MPI, MPI_Abort(MPI_COMM_WORLD, 3002);); (152, MPI, MPI_Barrier(split_comm);); (40, MPI, MPI_Comm_rank(lo_comm, &rank);); (106, MPI, MPI_Abort(MPI_COMM_WORLD, 3004);); (213, MPI, MPI_Group_free(&rev_group);); (163, MPI, MPI_Abort(MPI_COMM_WORLD, 3010);); (205, MPI, MPI_Comm_free(&dup_comm_world);); (4, MPI, MPI_Abort(MPI_COMM_WORLD, 3001);); (213, MPI, MPI_Comm_free(&dup_comm);); (41, MPI, MPI_Barrier(lo_comm);); (210, MPI, MPI_Comm_free(&lo_comm);); (91, MPI, MPI_Attr_get(dup_comm, key_1, (void **) &vvalue, &flag);); (179, MPI, MPI_Abort(MPI_COMM_WORLD, 3012);)"}
{"predict": "(23, CUDA, extern __shared__ __align__(sizeof(float2)) char smem_[];)", "label": "(16, CUDA, extern __shared__ __align__(sizeof(float2)) char smem_[];)"}
{"predict": "(203, OpenMP, double stop = omp_get_wtime();); (78, CUDA, CUDA_RT_CALL(cudaDeviceSynchronize());); (29, CUDA, CUDA_RT_CALL(cudaFree(0));); (89, CUDA, CUDA_RT_CALL(cudaDeviceCanAccessPeer(&canAccessPeer, dev_id, top));); (247, CUDA, CUDA_RT_CALL(cudaFreeHost(a_h));); (30, CUDA, CUDA_RT_CALL(cudaMallocHost(&a_ref_h, nx * ny * sizeof(float)));); (72, CUDA, CUDA_RT_CALL(cudaGetLastError());); (92, CUDA, CUDA_RT_CALL(cudaDeviceCanAccessPeer(&canAccessPeer, dev_id, bottom));); (93, CUDA, CUDA_RT_CALL(cudaDeviceEnablePeerAccess(bottom, 0));); (232, CUDA, CUDA_RT_CALL(cudaStreamDestroy(push_bottom_stream[dev_id]));); (84, CUDA, CUDA_RT_CALL(cudaDeviceEnablePeerAccess(top, 0));); (75, CUDA, CUDA_RT_CALL(cudaMalloc(l2_norm_d + dev_id, sizeof(float)));); (45, CUDA, CUDA_RT_CALL(cudaMalloc(a + dev_id, nx * (chunk_size[dev_id] + 2) * sizeof(float)));); (47, CUDA, CUDA_RT_CALL(cudaMemset(a[dev_id], 0, nx * (chunk_size[dev_id] + 2) * sizeof(float)));); (12, CUDA, CUDA_RT_CALL(cudaGetDeviceCount(&num_devices));); (227, CUDA, CUDA_RT_CALL(cudaStreamDestroy(push_top_stream[dev_id]));); (14, CUDA, CUDA_RT_CALL(cudaSetDevice(dev_id));); (41, CUDA, CUDA_RT_CALL(cudaMalloc(a_new + dev_id, nx * (chunk_size[dev_id] + 2) * sizeof(float)));); (227, CUDA, CUDA_RT_CALL(cudaFreeHost(l2_norm_h[dev_id]));); (229, CUDA, CUDA_RT_CALL(cudaFree(a_new[dev_id]));); (62, CUDA, CUDA_RT_CALL(cudaStreamCreate(compute_stream + dev_id));); (63, CUDA, CUDA_RT_CALL(cudaStreamCreate(push_bottom_stream + dev_id));); (39, CUDA, CUDA_RT_CALL(cudaMemset(a_new[dev_id], 0, nx * (chunk_size[dev_id] +", "label": "(207, OpenMP, double stop = omp_get_wtime();); (146, CUDA, CUDA_RT_CALL(cudaStreamSynchronize(push_top_stream[bottom]));); (77, CUDA, CUDA_RT_CALL(cudaDeviceSynchronize());); (28, CUDA, CUDA_RT_CALL(cudaFree(0));); (88, CUDA, CUDA_RT_CALL(cudaDeviceCanAccessPeer(&canAccessPeer, dev_id, top));); (250, CUDA, CUDA_RT_CALL(cudaFreeHost(a_h));); (29, CUDA, CUDA_RT_CALL(cudaMallocHost(&a_ref_h, nx * ny * sizeof(float)));); (71, CUDA, CUDA_RT_CALL(cudaGetLastError());); (91, CUDA, CUDA_RT_CALL(cudaDeviceCanAccessPeer(&canAccessPeer, dev_id, bottom));); (92, CUDA, CUDA_RT_CALL(cudaDeviceEnablePeerAccess(bottom, 0));); (235, CUDA, CUDA_RT_CALL(cudaStreamDestroy(push_bottom_stream[dev_id]));); (83, CUDA, CUDA_RT_CALL(cudaDeviceEnablePeerAccess(top, 0));); (74, CUDA, CUDA_RT_CALL(cudaMalloc(l2_norm_d + dev_id, sizeof(float)));); (44, CUDA, CUDA_RT_CALL(cudaMalloc(a + dev_id, nx * (chunk_size[dev_id] + 2) * sizeof(float)));); (157, CUDA, CUDA_RT_CALL(cudaStreamSynchronize(compute_stream[dev_id]));); (45, CUDA, CUDA_RT_CALL(cudaMemset(a[dev_id], 0, nx * (chunk_size[dev_id] + 2) * sizeof(float)));); (132, CUDA, CUDA_RT_CALL(cudaStreamSynchronize(push_bottom_stream[top]));); (9, CUDA, CUDA_RT_CALL(cudaGetDeviceCount(&num_devices));); (228, CUDA, CUDA_RT_CALL(cudaStreamDestroy(push_top_stream[dev_id]));); (11, CUDA, CUDA_RT_CALL(cudaSetDevice(dev_id));); (38, CUDA, CUDA_RT_CALL(cudaMalloc(a_new + dev_id, nx * (chunk_size[dev_id] + 2) * sizeof(float)));); (228, CUDA, CUDA_RT_CALL(cudaFreeHost(l2_norm_h[dev_id]));); (230, CUDA, CUDA_RT_CALL(cudaFree(a_new[dev_id]));); (59, CUDA, CUDA_RT_CALL(cudaStreamCreate(compute_stream + dev_id));); (60, CUDA, CUDA_RT_CALL(cudaStreamCreate(push_bottom_stream + dev_id));); (36, CUDA, CUDA_RT_CALL(cudaMemset(a_new[dev_id], 0, nx * (chunk_size[dev_id] + 2) * sizeof(float)));); (230, CUDA, CUDA_RT_CALL(cudaFreeHost(a_ref_h));); (9, CUDA, CUDA_RT_CALL(cudaMallocHost(&a_h, nx * ny * sizeof(float)));); (219, CUDA, CUDA_RT_CALL(cudaStreamDestroy(compute_stream[dev_id]));); (102, OpenMP, double start = omp_get_wtime();); (57, CUDA, CUDA_RT_CALL(cudaMallocHost(l2_norm_h + dev_id, sizeof(float)));); (222, CUDA, CUDA_RT_CALL(cudaFree(a[dev_id]));); (218, CUDA, CUDA_RT_CALL(cudaFree(l2_norm_d[dev_id]));); (50, CUDA, CUDA_RT_CALL(cudaStreamCreate(push_top_stream + dev_id));)"}
{"predict": "(129, CUDA, cudaMemcpy(z_cu, z, shape.Z_len * sizeof(DT), cudaMemcpyHostToDevice);); (221, CUDA, cudaFree(x_cu);); (122, CUDA, cudaMalloc(&x_cu, shape.X_len * sizeof(ST));); (125, CUDA, cudaMemcpy(y_cu, y, shape.Y_len * sizeof(ST), cudaMemcpyHostToDevice);); (123, CUDA, cudaMemcpy(x_cu, x, shape.X_len * sizeof(ST), cudaMemcpyHostToDevice);); (218, CUDA, cudaFree(y_cu);); (120, CUDA, cudaMalloc(&z_cu, shape.Z_len * sizeof(DT));); (118, CUDA, cudaMalloc(&y_cu, shape.Y_len * sizeof(ST));); (128, CUDA, CHECK_HIEDNN(hiednnCreateCudaHandle(&handle));); (220, CUDA, CHECK_HIEDNN(hiednnDestroyCudaHandle(handle));); (214, CUDA, cudaFree(z_cu);)", "label": "(129, CUDA, cudaMemcpy(z_cu, z, shape.Z_len * sizeof(DT), cudaMemcpyHostToDevice);); (221, CUDA, cudaFree(x_cu);); (122, CUDA, cudaMalloc(&x_cu, shape.X_len * sizeof(ST));); (125, CUDA, cudaMemcpy(y_cu, y, shape.Y_len * sizeof(ST), cudaMemcpyHostToDevice);); (123, CUDA, cudaMemcpy(x_cu, x, shape.X_len * sizeof(ST), cudaMemcpyHostToDevice);); (218, CUDA, cudaFree(y_cu);); (120, CUDA, cudaMalloc(&z_cu, shape.Z_len * sizeof(DT));); (118, CUDA, cudaMalloc(&y_cu, shape.Y_len * sizeof(ST));); (128, CUDA, CHECK_HIEDNN(hiednnCreateCudaHandle(&handle));); (220, CUDA, CHECK_HIEDNN(hiednnDestroyCudaHandle(handle));); (214, CUDA, cudaFree(z_cu);)"}
{"predict": "(23, CUDA, __shared__ float Bs[BLOCK_SIZE][BLOCK_SIZE];); (21, CUDA, __shared__ float As[BLOCK_SIZE][BLOCK_SIZE];)", "label": "(22, CUDA, __shared__ float Bs[BLOCK_SIZE][BLOCK_SIZE];); (20, CUDA, __shared__ float As[BLOCK_SIZE][BLOCK_SIZE];)"}
{"predict": "(149, CUDA, checkCuda(cudaMemcpyAsync(A_gpu->scubufs[streamId].xsup, xsup, (npcol + 1) * sizeof(int_t), cudaMemcpyHostToDevice, FunCallStream));); (92, CUDA, cudaDeviceSynchronize();); (143, CUDA, checkCuda(cudaMemcpyAsync(A_gpu->scubufs[streamId].indirectJ1, indirectJ1, MAX_SUPER_SIZE * sizeof(int_t), cudaMemcpyHostToDevice, FunCallStream));); (143, CUDA, checkCuda(cudaMemcpyAsync(A_gpu->scubufs[streamId].indirectJ2, indirectJ2, MAX_SUPER_SIZE * sizeof(int_t), cudaMemcpyHostToDevice, FunCallStream));); (143, CUDA, checkCuda(cudaMemcpyAsync(A_gpu->scubufs[streamId].indirectJ3, indirectJ3, nnz_col * sizeof(int_t), cudaMemcpyHostToDevice, FunCallStream));); (135, CUDA, checkCuda(cudaMemcpyAsync(A_gpu->scubufs[streamId].Ublock_info_host, A_gpu->scubufs[streamId].Ublock_info, mcb * sizeof(Ublock_info_t), cudaMemcpyDeviceToHost, FunCallStream));); (133, CUDA, checkCuda(cudaMemcpyAsync(A_gpu->scubufs[streamId].xsup_host, A_gpu->scubufs[streamId].xsup, (npcol + 1) * sizeof(int_t), cudaMemcpyDeviceToHost, FunCallStream));); (87, CUDA, cudaProfilerStart();); (133, CUDA, checkCuda(cudaMemcpyAsync(A_gpu->scubufs[streamId].indirectJ1_host, A_gpu->scubufs[streamId].indirectJ1, MAX_SUPER_SIZE * sizeof(int_t), cudaMemcpyDeviceToHost, FunCallStream));); (134, CUDA, checkCuda(cudaMemcpyAsync(A_gpu->scubufs[streamId].lbuff_host, A_gpu->scubufs[streamId].Remain_L_buff, Remain_lbuf_send_size * sizeof(double), cudaMemcpyDeviceToHost, FunCallStream));); (133, CUDA, checkCuda(cudaMemcpyAsync(A_gpu->scubufs[streamId].bub_host, A_gpu->scubufs[streamId].bigU, bigu_send_size * sizeof", "label": "(93, CUDA, cudaEventRecord(A_gpu->ePCIeH2D[k0], FunCallStream);); (231, CUDA, cudaEventRecord(A_gpu->GemmStart[k0], FunCallStream);); (239, CUDA, cudaStreamSynchronize(FunCallStream);)"}
{"predict": "(6, OpenMP, #pragma omp atomic  hint(AMD_safe_fp_atomics)); (34, OpenMP, #pragma omp atomic  hint(AMD_unsafe_fp_atomics)); (2, OpenMP, #pragma omp target teams distribute parallel for map(tofrom:sum)); (17, OpenMP, #pragma omp atomic  hint(AMD_fast_fp_atomics))", "label": "(6, OpenMP, #pragma omp atomic  hint(AMD_safe_fp_atomics)); (34, OpenMP, #pragma omp atomic  hint(AMD_unsafe_fp_atomics)); (2, OpenMP, #pragma omp target teams distribute parallel for map(tofrom:sum)); (17, OpenMP, #pragma omp atomic  hint(AMD_fast_fp_atomics))"}
{"predict": "(4, CUDA, extern __shared__ float entire_buffer[];)", "label": "(6, CUDA, extern __shared__ float entire_buffer[];)"}
{"predict": "(13, CUDA, CHECK(cudaMalloc(&d_y, M));); (13, CUDA, CHECK(cudaMalloc(&d_z, M));); (35, CUDA, CHECK(cudaFree(d_y));); (35, CUDA, CHECK(cudaFree(d_z));); (9, CUDA, CHECK(cudaMalloc(&d_x, M));); (31, CUDA, CHECK(cudaFree(d_x));)", "label": "(37, CUDA, CHECK(cudaFree(d_y));); (14, CUDA, CHECK(cudaMemcpy(d_x, h_x, M, cudaMemcpyHostToDevice));); (36, CUDA, CHECK(cudaFree(d_z));); (10, CUDA, CHECK(cudaMalloc(&d_y, M));); (8, CUDA, CHECK(cudaMalloc(&d_x, M));); (31, CUDA, CHECK(cudaFree(d_x));); (8, CUDA, CHECK(cudaMalloc(&d_z, M));); (9, CUDA, CHECK(cudaMemcpy(d_y, h_y, M, cudaMemcpyHostToDevice));)"}
{"predict": "(10, CUDA, cudaDeviceSynchronize();); (5, CUDA, cudaMalloc((void **)&sm_o, sizeof(float) * m * m);); (35, CUDA, cudaFree(sm_o);)", "label": "(10, CUDA, cudaDeviceSynchronize();); (5, CUDA, cudaMalloc((void **)&sm_o, sizeof(float) * m * m);); (35, CUDA, cudaFree(sm_o);)"}
{"predict": "(47, MPI, MPI_Win_unlock(1, win);); (40, MPI, MPI_Win_lock(MPI_LOCK_SHARED, 1, 0, win);); (9, MPI, MPI_Alloc_mem(sizeof(long_double_int_t) * DATA_SIZE, MPI_INFO_NULL, &orig_buf);); (81, MPI, MPI_Free_mem(orig_buf);); (66, MPI, MPI_Win_free(&win);); (7, MPI, MPI_Comm_size(MPI_COMM_WORLD, &nproc);); (5, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (62, MPI, MPI_Free_mem(tar_buf);); (35, MPI, MPI_Type_free(&vector_dtp);); (38, MPI, MPI_Accumulate(orig_buf, 1, vector_dtp, 1, 0, 1, vector_dtp, MPI_SUM, win);); (39, MPI, MPI_Barrier(MPI_COMM_WORLD);)", "label": "(49, MPI, MPI_Win_unlock(1, win);); (32, MPI, MPI_Win_unlock(rank, win);); (45, MPI, MPI_Win_lock(MPI_LOCK_SHARED, 1, 0, win);); (68, MPI, MPI_Type_free(&vector_dtp);); (8, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (6, MPI, MPI_Comm_size(MPI_COMM_WORLD, &nproc);); (64, MPI, MPI_Win_free(&win);); (41, MPI, MPI_Accumulate(orig_buf, 1, vector_dtp, 1, 0, 1, vector_dtp, MPI_MAXLOC, win);); (14, MPI, MPI_Type_commit(&vector_dtp);); (64, MPI, MPI_Free_mem(orig_buf);); (65, MPI, MPI_Free_mem(tar_buf);); (17, MPI, MPI_Win_lock(MPI_LOCK_SHARED, rank, 0, win);); (22, MPI, MPI_Barrier(MPI_COMM_WORLD);); (1, MPI, MPI_Alloc_mem(sizeof(long_double_int_t) * DATA_SIZE, MPI_INFO_NULL, &orig_buf);)"}
{"predict": "(2, CUDA, __shared__ int hist[256];)", "label": "(2, CUDA, __shared__ int hist[256];)"}
{"predict": "(73, CUDA, ASSERT_EQ(cudaSuccess, cudaMemcpy(test.data(), dstDev->basePtr(), test.size(), cudaMemcpyDeviceToHost));); (66, CUDA, ASSERT_EQ(cudaSuccess, cudaStreamSynchronize(stream));); (50, CUDA, ASSERT_EQ(cudaSuccess, cudaMemcpy(srcDev->basePtr(), srcVec.data(), srcVec.size(), cudaMemcpyHostToDevice));); (60, CUDA, ASSERT_EQ(cudaSuccess, cudaStreamCreate(&stream));); (64, CUDA, ASSERT_EQ(cudaSuccess, cudaStreamDestroy(stream));)", "label": "(74, CUDA, ASSERT_EQ(cudaSuccess, cudaMemcpy(test.data(), dstDev->basePtr(), test.size(), cudaMemcpyDeviceToHost));); (66, CUDA, ASSERT_EQ(cudaSuccess, cudaStreamSynchronize(stream));); (50, CUDA, ASSERT_EQ(cudaSuccess, cudaMemcpy(srcDev->basePtr(), srcVec.data(), srcVec.size(), cudaMemcpyHostToDevice));); (60, CUDA, ASSERT_EQ(cudaSuccess, cudaStreamCreate(&stream));); (64, CUDA, ASSERT_EQ(cudaSuccess, cudaStreamDestroy(stream));)"}
{"predict": "(18, OpenCL, clCreateCommandQueueWithProperties_StubWithCallback(clCreateCommandQueueWithProperties_testCommandQueueFromSpecifiedContext);)", "label": "(18, OpenCL, clCreateCommandQueueWithProperties_StubWithCallback(clCreateCommandQueueWithProperties_testCommandQueueFromSpecifiedContext);)"}
{"predict": "(25, OpenCL, clReleaseEvent(outEvent);)", "label": "(25, OpenCL, clReleaseEvent(outEvent);)"}
{"predict": "(142, OpenCL, error = clSetKernelArg(kernel, 1, sizeof(tinfo->inBuf), &tinfo->inBuf);)", "label": "(142, OpenCL, error = clSetKernelArg(kernel, 1, sizeof(tinfo->inBuf), &tinfo->inBuf);)"}
{"predict": "(13, CUDA, __shared__ int32_t smemExpertCount[NumThreads];); (31, CUDA, __shared__ typename Scan::TempStorage tempStorage;); (28, CUDA, __shared__ int32_t clusterArrived[NumBlocksPerCluster];)", "label": "(10, CUDA, __shared__ typename Scan::TempStorage tempStorage;); (33, CUDA, cudaGridDependencySynchronize();); (4, CUDA, __shared__ int32_t __attribute((aligned(128))) smemExpertCount[NumThreads];); (4, CUDA, __shared__ int32_t __attribute((aligned(128))) smemExpertOffset[NumThreads];)"}
{"predict": "(147, MPI, t1 = MPI_Wtime();); (94, MPI, MPI_Type_size(MPI_DOUBLE,&dsize);); (191, MPI, MPI_Type_free(&stride_dt);); (4, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &me);); (92, MPI, MPI_Type_hvector(block_order, 1, dsize, stride_dt, &trans_dt);); (187, MPI, MPI_Type_free(&trans_dt);); (1, MPI, MPI_Comm_size(MPI_COMM_WORLD, &np);); (97, MPI, t0 = MPI_Wtime();); (75, MPI, MPI_Abort(MPI_COMM_WORLD,99);); (-5, MPI, if (provided < requested) MPI_Abort(MPI_COMM_WORLD,provided);); (18, MPI, MPI_Finalize();); (85, MPI, MPI_Type_vector(block_order, 1, block_order, MPI_DOUBLE, &stride_dt);); (58, MPI, MPI_Barrier(MPI_COMM_WORLD);); (-10, MPI, MPI_Init_thread(&argc, &argv, requested, &provided);); (179, MPI, MPI_Allreduce(MPI_IN_PLACE, &abserr, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);); (53, MPI, MPI_Abort(MPI_COMM_WORLD,1);)", "label": "(9, MPI, MPI_Comm_size(MPI_COMM_WORLD, &np);); (142, MPI, t1 = MPI_Wtime();); (20, MPI, MPI_Finalize();); (98, MPI, MPI_Type_commit(&trans_dt);); (144, MPI, MPI_Type_free(&stride_dt);); (159, MPI, MPI_Allreduce(MPI_IN_PLACE, &abserr, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);); (2, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &me);); (90, MPI, MPI_Type_size(MPI_DOUBLE,&dsize);); (141, MPI, MPI_Type_free(&trans_dt);); (70, MPI, MPI_Abort(MPI_COMM_WORLD,99);); (-5, MPI, if (provided < requested) MPI_Abort(MPI_COMM_WORLD,provided);); (89, MPI, MPI_Type_hvector(block_order, 1, dsize, stride_dt, &trans_dt);); (83, MPI, MPI_Type_vector(block_order, 1, block_order, MPI_DOUBLE, &stride_dt);); (54, MPI, MPI_Barrier(MPI_COMM_WORLD);); (96, MPI, t0 = MPI_Wtime();); (-11, MPI, MPI_Init_thread(&argc, &argv, requested, &provided);)"}
{"predict": "(55, CUDA, cudaMalloc((void**)&result_data, axis_size * sizeof(float));); (52, CUDA, cudaMalloc((void**)&result_data, tensor->size * sizeof(float));)", "label": "(55, CUDA, cudaMalloc((void**)&result_data, axis_size * sizeof(float));); (52, CUDA, cudaMalloc((void**)&result_data, tensor->size * sizeof(float));)"}
{"predict": "(8, OpenCL, cl_status = clGetPlatformInfo(id, param_name, param_size, some_info, NULL);)", "label": "(8, OpenCL, cl_status = clGetPlatformInfo(id, param_name, param_size, some_info, NULL);)"}
{"predict": "(30, MPI, MPI_Comm_create(MPI_COMM_WORLD, comm_group, &comm_hdls[i]);); (27, MPI, mpi_errno = MPI_Comm_create(MPI_COMM_WORLD, comm_group, &comm_hdls[i]);); (9, MPI, MPI_Comm_size(MPI_COMM_WORLD, &nproc);); (7, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (9, MPI, MPI_Comm_group(MPI_COMM_WORLD, &world_group);); (44, MPI, MPI_Group_free(&world_group);); (26, MPI, MPI_Comm_set_errhandler(comm_hdls[i], MPI_ERRORS_RETURN);)", "label": "(37, MPI, MPI_Group_free(&comm_group);); (29, MPI, mpi_errno = MPI_Comm_create(MPI_COMM_WORLD, comm_group, &comm_hdls[i]);); (9, MPI, MPI_Comm_size(MPI_COMM_WORLD, &nproc);); (7, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (8, MPI, MPI_Comm_group(MPI_COMM_WORLD, &world_group);); (45, MPI, MPI_Group_free(&world_group);); (8, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);)"}
{"predict": "(6, MPI, MPI_Comm_size(comm, &size);); (6, MPI, MPI_Comm_rank(comm, &rank);)", "label": "(6, MPI, MPI_Comm_size(comm, &size);); (4, MPI, MPI_Comm_rank(comm, &rank);)"}
{"predict": "(15, CUDA, __shared__ float kk[TILE_T][N], rr[TILE_T][N];)", "label": "(15, CUDA, __shared__ float rr[TILE_T][N], kk[TILE_T][N];)"}
{"predict": "(51, MPI, MPI_T_category_get_pvars(i, numPvars, pvarIndex);); (28, MPI, MPI_T_category_get_cvars(i, numCvars, cvarIndex);); (3, MPI, MPI_T_category_get_num(&numCat);); (72, MPI, MPI_T_category_get_categories(i, numSubcat, subcatIndex);)", "label": "(51, MPI, MPI_T_category_get_pvars(i, numPvars, pvarIndex);); (28, MPI, MPI_T_category_get_cvars(i, numCvars, cvarIndex);); (3, MPI, MPI_T_category_get_num(&numCat);); (72, MPI, MPI_T_category_get_categories(i, numSubcat, subcatIndex);)"}
{"predict": "(13, CUDA, CUDASimulation cudaSimulation(model);)", "label": "(13, CUDA, CUDASimulation cudaSimulation(model);)"}
{"predict": "(34, MPI, MPI_Bcast( rowind, nnz, mpi_int_t,  0, grid->comm );); (31, MPI, MPI_Bcast( &nnz,   1,   mpi_int_t,  0, grid->comm );); (45, MPI, MPI_Bcast( colptr,  n+1, mpi_int_t,  0, grid->comm );); (43, MPI, MPI_Bcast( rowind,  nnz, mpi_int_t,  0, grid->comm );); (34, MPI, MPI_Bcast( &m,   1,   mpi_int_t,  0, grid->comm );); (26, MPI, MPI_Bcast( &n,     1,   mpi_int_t,  0, grid->comm );); (24, MPI, MPI_Bcast( &m,     1,   mpi_int_t,  0, grid->comm );); (33, MPI, MPI_Bcast( &nnz, 1,   mpi_int_t,  0, grid->comm );); (27, MPI, MPI_Bcast( colptr, n+1, mpi_int_t,  0, grid->comm );); (24, MPI, MPI_Bcast( nzval,  nnz, MPI_FLOAT, 0, grid->comm );); (29, MPI, MPI_Bcast( &n,   1,   mpi_int_t,  0, grid->comm );); (34, MPI, MPI_Bcast( nzval,   nnz, MPI_FLOAT, 0, grid->comm );)", "label": "(33, MPI, MPI_Bcast( nzval,  nnz, MPI_FLOAT, 0, grid->comm );); (33, MPI, MPI_Bcast( rowind, nnz, mpi_int_t,  0, grid->comm );); (45, MPI, MPI_Bcast( colptr,  n+1, mpi_int_t,  0, grid->comm );); (43, MPI, MPI_Bcast( rowind,  nnz, mpi_int_t,  0, grid->comm );); (34, MPI, MPI_Bcast( &m,   1,   mpi_int_t,  0, grid->comm );); (26, MPI, MPI_Bcast( &n,     1,   mpi_int_t,  0, grid->comm );); (24, MPI, MPI_Bcast( &m,     1,   mpi_int_t,  0, grid->comm );); (33, MPI, MPI_Bcast( &nnz, 1,   mpi_int_t,  0, grid->comm );); (27, MPI, MPI_Bcast( colptr, n+1, mpi_int_t,  0, grid->comm );); (23, MPI, MPI_Bcast( &nnz,   1,   mpi_int_t,  0, grid->comm );); (29, MPI, MPI_Bcast( &n,   1,   mpi_int_t,  0, grid->comm );); (34, MPI, MPI_Bcast( nzval,   nnz, MPI_FLOAT, 0, grid->comm );)"}
{"predict": "(8, TBB, tbb::task_scheduler_handle schBlock1;); (10, TBB, bool ok = tbb::finalize(schBlock1, std::nothrow);); (2, TBB, tbb::task_scheduler_handle schBlock;); (2, TBB, bool ok = tbb::finalize(schBlock, std::nothrow);)", "label": "(15, TBB, bool ok = tbb::finalize(schBlock, std::nothrow);); (11, TBB, bool ok = tbb::finalize(schBlock1, std::nothrow);); (4, TBB, tbb::task_scheduler_handle schBlock1;)"}
{"predict": "(10, OpenMP, DTCMP_Op_free(&(c->parts[0]));); (10, OpenMP, DTCMP_Op_free(&(c->parts[1]));)", "label": "(9, MPI, MPI_Type_free(&(c->key));)"}
{"predict": "(10, OpenMP, #pragma omp dispatch); (57, OpenMP, #pragma omp dispatch ret = o2.disp_method1();); (43, OpenMP, #pragma omp dispatch ret = o3->disp_method1();); (27, OpenMP, #pragma omp dispatch ret = o1.disp_method1();); (33, OpenMP, #pragma omp dispatch ret = o2.disp_method1();); (47, OpenMP, #pragma omp dispatch ret = Obj::disp_method2();); (63, OpenMP, #pragma omp dispatch o = foo_obj();)", "label": "(2, OpenMP, #pragma omp dispatch)"}
{"predict": "(16, OpenCL, status = clSetKernelArg(global_check, 0, sizeof(cl_mem), &buffer);)", "label": "(16, OpenCL, status = clSetKernelArg(global_check, 0, sizeof(cl_mem), &buffer);)"}
{"predict": "(61, OpenMP, #pragma omp master taskloop simd reduction(* : ca)); (72, OpenMP, #pragma omp master taskloop simd reduction(+ : h, k, B::x)); (45, OpenMP, #pragma omp master taskloop simd reduction(^ : S1)); (4, OpenMP, #pragma omp master taskloop simd reduction); (62, OpenMP, #pragma omp master taskloop simd reduction(^ : fl)); (68, OpenMP, #pragma omp master taskloop simd reduction(&& : S2::S2sc)); (89, OpenMP, #pragma omp master taskloop simd reduction(+ : r)); (95, OpenMP, #pragma omp master taskloop simd reduction(+ : fl)); (53, OpenMP, #pragma omp master taskloop simd reduction(max : z, a, b, c, d, f)); (58, OpenMP, #pragma omp master taskloop simd reduction(min : a, b, c, d, f)); (32, OpenMP, #pragma omp master taskloop simd reduction(~ : argc)); (35, OpenMP, #pragma omp master taskloop simd reduction(&& : argc, z)); (100, OpenMP, #pragma omp master taskloop simd reduction(task, + : fl)); (1, OpenMP, #pragma omp master taskloop simd reduction(-); (6, OpenMP, #pragma omp master taskloop simd reduction()); (20, OpenMP, #pragma omp master taskloop simd reduction(| : argc,); (77, OpenMP, #pragma omp parallel private(k)); (82, OpenMP, #pragma omp master taskloop simd reduction(max : j)); (92, OpenMP, #pragma omp master taskloop simd reduction(+ : fl)); (14, OpenMP, #pragma omp master taskloop simd reduction(|| : argc > 0 ? argv[1] : argv[2])); (62, OpenMP, #pragma omp master taskloop simd reduction(& : e, g)); (55, OpenMP, #pragma omp master taskloop simd reduction(&& : S2::S2s)); (78, OpenMP, #pragma omp parallel reduction(min : i)); (86, OpenMP, #pragma omp master taskloop simd reduction(+ : fl)); (18, OpenMP, #pragma omp master taskloop simd reduction(+ :", "label": "(45, OpenMP, #pragma omp master taskloop simd reduction(&& : argc, z)); (101, OpenMP, #pragma omp master taskloop simd reduction(max : j)); (67, OpenMP, #pragma omp master taskloop simd reduction(^ : fl)); (111, OpenMP, #pragma omp master taskloop simd reduction(+ : m)); (20, OpenMP, #pragma omp master taskloop simd reduction()); (46, OpenMP, #pragma omp master taskloop simd reduction(+ : a, b, c, d, f)); (48, OpenMP, #pragma omp master taskloop simd reduction(min : a, b, c, d, f)); (53, OpenMP, #pragma omp master taskloop simd reduction(+ : ba)); (34, OpenMP, #pragma omp master taskloop simd reduction(~ : argc)); (100, OpenMP, #pragma omp parallel reduction(* : fl)); (17, OpenMP, #pragma omp master taskloop simd reduction(*)); (1, OpenMP, #pragma omp master taskloop simd reduction); (63, OpenMP, #pragma omp master taskloop simd reduction(&& : S2::S2sc)); (68, OpenMP, #pragma omp master taskloop simd reduction(+ : h, k, B::x)); (106, OpenMP, #pragma omp master taskloop simd reduction(task, + : m)); (75, OpenMP, #pragma omp parallel private(k)); (62, OpenMP, #pragma omp master taskloop simd reduction(& : e, g)); (67, OpenMP, #pragma omp master taskloop simd reduction(+ : o)); (-3, OpenMP, #pragma omp master taskloop simd reduction +); (72, OpenMP, #pragma omp master taskloop simd reduction(+ : p), reduction(+ : p)); (43, OpenMP, #pragma omp master taskloop simd reduction(* : ca)); (9, OpenMP, #pragma omp master taskloop simd reduction(\\)); (14, OpenMP, #pragma omp master taskloop simd reduction(| : argc,); (78, OpenMP, #pragma omp parallel reduction(min : i)); (81, OpenMP, #pragma omp parallel private(fl)); (72, OpenMP, #pragma omp master taskloop simd reduction(+ : r)); (46, OpenMP, #pragma omp master taskloop simd reduction(&& : S2::S2s)); (30, OpenMP, #pragma omp master taskloop simd reduction(max : h.b)); (20, OpenMP, #pragma omp master taskloop simd reduction(^ : S1)); (10, OpenMP, #pragma omp master taskloop simd reduction(|| : argc > 0 ? argv[1] : argv[2])); (-12, OpenMP, #pragma omp master taskloop simd reduction(); (56, OpenMP, #pragma omp master taskloop simd private(i), reduction(+ : j), reduction(+ : q)); (85, OpenMP, #pragma omp master taskloop simd reduction(+ : m) nogroup); (-12, OpenMP, #pragma omp master taskloop simd reduction(-); (66, OpenMP, #pragma omp parallel shared(i)); (-2, OpenMP, #pragma omp master taskloop simd reduction(foo : argc); (30, OpenMP, #pragma omp master taskloop simd reduction(- : da)); (69, OpenMP, #pragma omp master taskloop simd reduction(+ : fl))"}
{"predict": "(34, CUDA, cudaFree(d_out_min);); (17, CUDA, cudaMemcpy(d_in, in.data(), in_bytes, cudaMemcpyHostToDevice);); (31, CUDA, cudaFree(d_in);); (12, CUDA, cudaMalloc((void**)(&d_in), in_bytes);); (25, CUDA, assert(cudaStreamSynchronize(gpu_device.stream()) == cudaSuccess);); (11, CUDA, cudaMalloc((void**)(&d_out_min), out_bytes);); (22, CUDA, assert(cudaMemcpyAsync(out_min.data(), d_out_min, out_bytes, cudaMemcpyDeviceToHost, gpu_device.stream()) == cudaSuccess);)", "label": "(18, CUDA, cudaMemcpy(d_in, in.data(), in_bytes, cudaMemcpyHostToDevice);); (32, CUDA, cudaFree(d_in);); (13, CUDA, cudaMalloc((void**)(&d_in), in_bytes);); (13, CUDA, cudaMalloc((void**)(&d_out_min), out_bytes);); (25, CUDA, assert(cudaStreamSynchronize(gpu_device.stream()) == cudaSuccess);); (23, CUDA, assert(cudaMemcpyAsync(out_min.data(), d_out_min, out_bytes, cudaMemcpyDeviceToHost, gpu_device.stream()) == cudaSuccess);); (28, CUDA, cudaFree(d_out_min);)"}
{"predict": "(3, CUDA, cudaExtent extent = make_cudaExtent(10, 20, 0);)", "label": "(3, CUDA, cudaExtent extent = make_cudaExtent(10, 20, 0);)"}
{"predict": "(7, CUDA, err = cudaMemcpy( dst, src, sz, type );)", "label": "(7, CUDA, err = cudaMemcpy( dst, src, sz, type );); (10, CUDA, ss << cudaGetErrorString(err) << endl;)"}
{"predict": "(4, MPI, MPI_Comm_size(MPI_COMM_WORLD, &ntasks);); (4, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (11, MPI, MPI_Recv(&t, 1, MPI_DOUBLE, i, 11, MPI_COMM_WORLD, MPI_STATUS_IGNORE);); (3, MPI, MPI_Send(&t, 1, MPI_DOUBLE, 0, 11, MPI_COMM_WORLD);)", "label": "(4, MPI, MPI_Comm_size(MPI_COMM_WORLD, &ntasks);); (9, MPI, MPI_Recv(&t, 1, MPI_DOUBLE, i, 11, MPI_COMM_WORLD, MPI_STATUS_IGNORE);); (1, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (11, MPI, MPI_Send(&t, 1, MPI_DOUBLE, 0, 11, MPI_COMM_WORLD);)"}
{"predict": "(42, MPI, MPI_Recv(&array[0][1], 1, columntype, 0, 1, MPI_COMM_WORLD, MPI_STATUS_IGNORE);); (48, MPI, MPI_Type_free(&columntype);); (7, MPI, MPI_Init(&argc, &argv);); (61, MPI, MPI_Finalize();); (6, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (34, MPI, MPI_Type_commit(&columntype);); (32, MPI, MPI_Type_create_hvector(8, 1, 8 * sizeof(int), MPI_INT, &columntype);); (37, MPI, MPI_Send(&array[0][1], 1, columntype, 1, 1, MPI_COMM_WORLD);)", "label": "(39, MPI, MPI_Type_commit(&columntype);); (7, MPI, MPI_Init(&argc, &argv);); (61, MPI, MPI_Finalize();); (6, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (34, MPI, MPI_Type_vector(8, 1, 8, MPI_INT, &columntype);); (45, MPI, MPI_Type_free(&columntype);); (37, MPI, MPI_Send(&array[0][1], 1, columntype, 1, 1, MPI_COMM_WORLD);)"}
{"predict": "(43, SYCL, sycl::platform Plt = Ctx.get_platform();)", "label": "(41, SYCL, sycl::platform Plt = Dev.get_platform();)"}
{"predict": "(41, OpenMP, #pragma omp teams distribute parallel for simd aligned (argv[1])); (19, OpenMP, #pragma omp teams distribute parallel for simd aligned (argc); (6, OpenMP, #pragma omp teams distribute parallel for simd aligned); (27, OpenMP, #pragma omp teams distribute parallel for simd aligned (*argc > 0 ? argv[1] : argv[2])); (41, OpenMP, #pragma omp teams distribute parallel for simd aligned(e, g)); (44, OpenMP, #pragma omp teams distribute parallel for simd aligned(h)); (50, OpenMP, #pragma omp parallel); (5, OpenMP, #pragma omp teams distribute parallel for simd aligned (); (45, OpenMP, #pragma omp teams distribute parallel for simd aligned(i)); (64, OpenMP, #pragma omp teams distribute parallel for simd aligned(f:j)); (14, OpenMP, #pragma omp teams distribute parallel for simd aligned (argc,); (52, OpenMP, #pragma omp teams distribute parallel for simd aligned(v:16)); (3, OpenMP, #pragma omp teams distribute parallel for simd aligned ()); (-5, OpenMP, #pragma omp target); (53, OpenMP, #pragma omp teams distribute parallel for simd aligned(f)); (17, OpenMP, #pragma omp teams distribute parallel for simd aligned (S1)); (4, OpenMP, #pragma omp teams distribute parallel for simd aligned (argc : 5))", "label": "(45, OpenMP, #pragma omp teams distribute parallel for simd aligned(e, g)); (7, OpenMP, #pragma omp teams distribute parallel for simd aligned); (14, OpenMP, #pragma omp teams distribute parallel for simd aligned ()); (9, OpenMP, #pragma omp teams distribute parallel for simd aligned (); (45, OpenMP, #pragma omp teams distribute parallel for simd aligned(h)); (51, OpenMP, #pragma omp parallel); (18, OpenMP, #pragma omp teams distribute parallel for simd aligned (argc,); (66, OpenMP, #pragma omp teams distribute parallel for simd aligned(f:j)); (33, OpenMP, #pragma omp teams distribute parallel for simd aligned (argv[1])); (24, OpenMP, #pragma omp teams distribute parallel for simd aligned (argc : 5)); (43, OpenMP, #pragma omp teams distribute parallel for simd aligned(i)); (56, OpenMP, #pragma omp teams distribute parallel for simd aligned(f)); (17, OpenMP, #pragma omp teams distribute parallel for simd aligned (*argc > 0 ? argv[1] : argv[2])); (-6, OpenMP, #pragma omp target); (47, OpenMP, #pragma omp teams distribute parallel for simd aligned(v:16)); (22, OpenMP, #pragma omp teams distribute parallel for simd aligned (S1)); (4, OpenMP, #pragma omp teams distribute parallel for simd aligned (argc)"}
{"predict": "(1, TBB, using ScopedColor1 = tbb::scoped_enum_class<enum_color, tbb::atomic<int>>;); (7, TBB, using ScopedColor2 = tbb::scoped_enum_class<enum_color, tbb::atomic<enum_color> >;)", "label": "(10, TBB, __TBB_STATIC_ASSERT( !HasImplicitConversionToInt< tbb::atomic<ScopedColor1> >::value, \"The implicit conversion is not expected.\" );); (12, TBB, __TBB_STATIC_ASSERT( sizeof(tbb::atomic<ScopedColor2>) == sizeof(ScopedColor2), \"tbb::atomic instantiated with scoped enum should have the same size as scoped enum.\" );); (10, TBB, __TBB_STATIC_ASSERT( sizeof(tbb::atomic<ScopedColor1>) == sizeof(ScopedColor1), \"tbb::atomic instantiated with scoped enum should have the same size as scoped enum.\" );)"}
{"predict": "(26, OpenMP, #pragma omp parallel for)", "label": "(18, OpenMP, #pragma omp threadprivate (ident))"}
{"predict": "(1, OpenMP, #pragma omp task); (4, OpenMP, #pragma omp parallel for)", "label": "(17, OpenMP, #pragma omp taskwait); (0, OpenMP, #pragma omp task); (2, OpenMP, #pragma omp parallel for)"}
{"predict": "(7, MPI, MPI_Init(&argc, &argv);); (64, MPI, MPI_Finalize();); (6, MPI, MPI_Comm_size(MPI_COMM_WORLD, &ntasks);); (40, MPI, MPI_Type_vector(8, 1, 6, MPI_INT, &vector);); (40, MPI, MPI_Type_commit(&vector);); (46, MPI, MPI_Type_free(&vector);); (3, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);)", "label": "(52, MPI, MPI_Type_free(&vector);); (6, MPI, MPI_Init(&argc, &argv);); (42, MPI, MPI_Type_create_resized(vector, 0, sizeof(int), &vector);); (6, MPI, MPI_Comm_size(MPI_COMM_WORLD, &ntasks);); (64, MPI, MPI_Finalize();); (3, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (37, MPI, MPI_Type_vector(8, 1, 6, MPI_INT, &vector);); (38, MPI, MPI_Type_commit(&vector);); (57, MPI, MPI_Barrier(MPI_COMM_WORLD);)"}
{"predict": "(66, CUDA, CUDA_CHECK(cudaFree(d_C));); (52, CUDA, CUDA_CHECK(cudaStreamSynchronize(stream));); (37, CUDA, CUDA_CHECK(cudaMalloc(reinterpret_cast<void **>(&d_C), sizeof(data_type) * C.size()));); (69, CUDA, CUDA_CHECK(cudaDeviceReset());); (66, CUDA, CUDA_CHECK(cudaStreamDestroy(stream));); (33, CUDA, CUDA_CHECK(cudaMalloc(reinterpret_cast<void **>(&d_A), sizeof(data_type) * A.size()));); (59, CUDA, CUDA_CHECK(cudaFree(d_A));); (27, CUDA, CUDA_CHECK(cudaStreamCreateWithFlags(&stream, cudaStreamNonBlocking));)", "label": "(66, CUDA, CUDA_CHECK(cudaFree(d_C));); (52, CUDA, CUDA_CHECK(cudaStreamSynchronize(stream));); (37, CUDA, CUDA_CHECK(cudaMalloc(reinterpret_cast<void **>(&d_C), sizeof(data_type) * C.size()));); (69, CUDA, CUDA_CHECK(cudaDeviceReset());); (66, CUDA, CUDA_CHECK(cudaStreamDestroy(stream));); (33, CUDA, CUDA_CHECK(cudaMalloc(reinterpret_cast<void **>(&d_A), sizeof(data_type) * A.size()));); (59, CUDA, CUDA_CHECK(cudaFree(d_A));); (27, CUDA, CUDA_CHECK(cudaStreamCreateWithFlags(&stream, cudaStreamNonBlocking));)"}
{"predict": "(7, MPI, MPI_Comm_rank(team.comm, &rank);)", "label": "(7, MPI, MPI_Comm_rank(team.comm, &rank);)"}
{"predict": "(54, MPI, double end_time = MPI_Wtime();); (6, MPI, MPI_Init(&argc, &argv);); (54, MPI, MPI_Finalize();); (5, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (34, MPI, MPI_Recv(recv_buff, msg_size, MPI_INT, 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);); (48, MPI, MPI_Send(send_buff, msg_size, MPI_INT, 0, 0, MPI_COMM_WORLD);); (3, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (28, MPI, MPI_Send(send_buff, msg_size, MPI_INT, 1, 0, MPI_COMM_WORLD);); (39, MPI, MPI_Recv(recv_buff, msg_size, MPI_INT, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);); (-1, MPI, MPI_Abort(MPI_COMM_WORLD, EXIT_FAILURE);); (21, MPI, double start_time = MPI_Wtime();)", "label": "(59, MPI, double end_time = MPI_Wtime();); (60, MPI, MPI_Finalize();); (47, MPI, MPI_Recv(recv_buff, msg_size, MPI_INT, 1, TAG, MPI_COMM_WORLD, MPI_STATUS_IGNORE);); (5, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (17, MPI, MPI_Bcast(&msg_size, 1, MPI_INT, 0, MPI_COMM_WORLD);); (2, MPI, MPI_Init(NULL, NULL);); (3, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (13, MPI, MPI_Bcast(&nr_msgs, 1, MPI_INT, 0, MPI_COMM_WORLD);); (48, MPI, MPI_Ssend(send_buff, msg_size, MPI_INT, 0, TAG, MPI_COMM_WORLD);); (24, MPI, double start_time = MPI_Wtime();); (31, MPI, MPI_Recv(recv_buff, msg_size, MPI_INT, 0, TAG, MPI_COMM_WORLD, MPI_STATUS_IGNORE);); (28, MPI, MPI_Ssend(send_buff, msg_size, MPI_INT, 1, TAG, MPI_COMM_WORLD);); (0, MPI, MPI_Abort(MPI_COMM_WORLD, EXIT_FAILURE);)"}
{"predict": "(19, CUDA, thrust::complex<Q> Bi;)", "label": "(5, CUDA, thrust::complex<Q> Bi;)"}
{"predict": "(51, CUDA, cudaError_t result = cudaGetLastError();)", "label": "(51, CUDA, cudaError_t result = cudaGetLastError();)"}
{"predict": "(1, TBB, tbb::concurrent_bounded_queue<Foo> queue;)", "label": "(4, TBB, tbb::concurrent_queue<Foo> queue;)"}
{"predict": "(46, CUDA, CUDA_CHECK (cudaMalloc ((void **) &tmp_ptr, nsupers * sizeof(int)));); (54, CUDA, CUDA_CHECK (cudaMallocHost ((void **) &tmp_ptr, n * sizeof(int)));); (135, CUDA, CUDA_CHECK (cudaEventCreate(&A_gpu->GemmEnd[nsupers-1]));); (132, CUDA, CUDA_CHECK (cudaEventCreate(&A_gpu->ScatterEnd[nsupers-1]));); (126, CUDA, CUDA_CHECK (cudaEventCreate(&A_gpu->ePCIeD2H_Start[nsupers-1]));); (126, CUDA, CUDA_CHECK (cudaEventCreate(&A_gpu->ePCIeD2H_End[nsupers-1]));); (123, CUDA, CUDA_CHECK (cudaEventCreate(&A_gpu->ePCIeH2D[nsupers-1]));); (85, CUDA, CUDA_CHECK (cudaMallocHost ((void **) &tmp_ptr, remain_l_max * sizeof(double)));); (91, CUDA, CUDA_CHECK (cudaMallocHost ((void **) &tmp_ptr, A_host->bufmax[2] * sizeof(int)));); (45, CUDA, CUDA_CHECK (cudaMallocHost ((void **) &tmp_ptr, nsupers * sizeof(int)));); (84, CUDA, CUDA_CHECK (cudaMallocHost ((void **) &tmp_ptr, mcb * sizeof(Ublock_info_t)));); (85, CUDA, CUDA_CHECK (cudaMallocHost ((void **) &tmp_ptr, mrb * sizeof(Remain_info_t)));); (54, CUDA, CUDA_CHECK (cudaMalloc ((void **) &tmp_ptr, remain_l_max * sizeof(double)));); (108, CUDA, CUDA_CHECK (cudaEventCreate(&A_gpu->GemmStart[nsupers-1]));)", "label": "(61, CUDA, checkCudaErrors(cudaMallocHost(  &tmp_ptr,  remain_l_max * sizeof(double) )) ;); (50, CUDA, checkCudaErrors(cudaMallocHost(  &tmp_ptr, (n) * sizeof(int_t) )) ;); (256, CUDA, checkCudaErrors(cudaMemcpy( (A_gpu->local_u_blk_infoVec), local_u_blk_infoVec, cum_num_u_blocks * sizeof(local_u_blk_info_t), cudaMemcpyHostToDevice)) ;); (476, CUDA, checkCudaErrors(cudaMemcpy( (A_gpu->UrowindVec), indtemp1, u_ind_len * sizeof(int_t), cudaMemcpyHostToDevice)) ;); (62, CUDA, checkCudaErrors(cudaMallocHost ( &tmp_ptr, sizeof(double) * (A_host->bufmax[1])));); (67, CUDA, checkCudaErrors(cudaMallocHost ( &tmp_ptr, sizeof(int_t) * (A_host->bufmax[2])));); (81, CUDA, checkCudaErrors(cudaMalloc(  &tmp_ptr,  buffer_size * sizeof(double))) ;); (179, CUDA, checkCudaErrors(cudaMemcpy( (A_gpu->local_l_blk_infoVec), local_l_blk_infoVec, cum_num_l_blocks * sizeof(local_l_blk_info_t), cudaMemcpyHostToDevice)) ;); (51, CUDA, checkCudaErrors(cudaMallocHost(  &tmp_ptr, mcb * sizeof(Ublock_info_t) )) ;); (174, CUDA, checkCudaErrors(cudaMalloc(  &tmp_ptr,  cum_num_l_blocks * sizeof(local_l_blk_info_t))) ;); (477, CUDA, checkCudaErrors(cudaMemcpy( (A_gpu->UrowindPtr), temp_UrowindPtr, u_k * sizeof(int_t), cudaMemcpyHostToDevice))"}
{"predict": "(5, CUDA, extern __shared__ uint64_t s_qiHat_mod_pj[];)", "label": "(5, CUDA, extern __shared__ uint64_t s_qiHat_mod_pj[];)"}
{"predict": "(54, OpenMP, #pragma omp teams distribute shared(e, g)); (15, OpenMP, #pragma omp teams distribute shared (argc); (44, OpenMP, #pragma omp teams distribute shared (argv[1])); (18, OpenMP, #pragma omp teams distribute shared (argc,); (55, OpenMP, #pragma omp teams distribute shared(i)); (20, OpenMP, #pragma omp teams distribute shared (argc > 0 ? argv[1] : argv[2])); (0, OpenMP, #pragma omp target); (22, OpenMP, #pragma omp teams distribute shared (argc)); (35, OpenMP, #pragma omp teams distribute shared(ca)); (47, OpenMP, #pragma omp teams distribute shared(h, B::x)); (15, OpenMP, #pragma omp teams distribute shared (S1)); (25, OpenMP, #pragma omp teams distribute shared (a, b, c, d, f)); (51, OpenMP, #pragma omp teams distribute private(i), shared(i)); (33, OpenMP, #pragma omp teams distribute shared(da)); (-2, OpenMP, #pragma omp teams distribute shared (); (37, OpenMP, #pragma omp teams distribute shared(e)); (-12, OpenMP, #pragma omp teams distribute shared); (-2, OpenMP, #pragma omp teams distribute shared ()); (47, OpenMP, #pragma omp teams distribute firstprivate(i), shared(i)); (16, OpenMP, #pragma omp teams distribute shared (argc) allocate , allocate(, allocate(omp_default , allocate(omp_default_mem_alloc, allocate(omp_default_mem_alloc:, allocate(omp_default_mem_alloc: argc, allocate(omp_default_mem_alloc: argv), allocate(argv))", "label": "(26, OpenMP, #pragma omp teams distribute shared (argc)); (22, OpenMP, #pragma omp teams distribute shared (argc > 0 ? argv[1] : argv[2])); (39, OpenMP, #pragma omp teams distribute shared(ca)); (41, OpenMP, #pragma omp teams distribute shared(da)); (16, OpenMP, #pragma omp teams distribute shared (argc,); (3, OpenMP, #pragma omp teams distribute shared); (5, OpenMP, #pragma omp teams distribute shared (); (49, OpenMP, #pragma omp teams distribute firstprivate(i), shared(i)); (27, OpenMP, #pragma omp teams distribute shared (argv[1])); (-2, OpenMP, #pragma omp target); (55, OpenMP, #pragma omp teams distribute shared(j)); (57, OpenMP, #pragma omp teams distribute firstprivate(i)); (17, OpenMP, #pragma omp teams distribute shared (S1)); (37, OpenMP, #pragma omp teams distribute shared(h, B::x)); (18, OpenMP, #pragma omp teams distribute shared (a, b, c, d, f)); (2, OpenMP, #pragma omp teams distribute shared (argc); (46, OpenMP, #pragma omp teams distribute shared(i)); (21, OpenMP, #pragma omp teams distribute shared(ba)); (35, OpenMP, #pragma omp teams distribute private(i), shared(i)); (28, OpenMP, #pragma omp teams distribute shared(e, g)); (39, OpenMP, #pragma omp teams distribute private(i)); (-7, OpenMP, #pragma omp teams distribute shared ())"}
{"predict": "(55, CUDA, cudaFree(fn_d);); (35, CUDA, cudaMalloc((void**) &fn_d, NX*NY*NZ*sizeof(FLOAT));); (37, OpenMP, start_computation_time = omp_get_wtime();); (52, OpenMP, elapsed_computation_time = omp_get_wtime() - start_computation_time;); (29, CUDA, cudaMalloc((void**) &f_d, NX*NY*NZ*sizeof(FLOAT));); (47, CUDA, cudaDeviceSynchronize();); (29, CUDA, cudaMemcpy(f_d,f, NX*NY*NZ*sizeof(FLOAT), cudaMemcpyHostToDevice);); (18, OpenMP, start_time_total = omp_get_wtime();); (47, CUDA, cudaMemcpy(fn,fn_d, NX*NY*NZ*sizeof(FLOAT), cudaMemcpyDeviceToHost);); (17, CUDA, elapsed_time_total = omp_get_wtime() - start_time_total;)", "label": "(33, CUDA, cudaMalloc( (void**) &fn_d,  XYZ_SIZE*sizeof(FLOAT));); (30, OpenMP, start_time_total = omp_get_wtime();); (55, OpenMP, elapsed_time_total = omp_get_wtime() - start_time_total;); (33, OpenMP, start_computation_time = omp_get_wtime();); (50, OpenMP, elapsed_computation_time = omp_get_wtime() - start_computation_time;); (29, CUDA, cudaMemcpy(f_d,f,XYZ_SIZE*sizeof(FLOAT), cudaMemcpyHostToDevice);); (50, CUDA, cudaMemcpy(f, f_d,XYZ_SIZE*sizeof(FLOAT), cudaMemcpyDeviceToHost);); (25, CUDA, cudaMalloc( (void**) &f_d,  XYZ_SIZE*sizeof(FLOAT));); (51, CUDA, cudaFree(fn_d);); (49, CUDA, cudaFree(f_d);)"}
{"predict": "(12, OpenMP, #pragma omp master); (9, OpenMP, #pragma omp parallel default(shared))", "label": "(12, OpenMP, #pragma omp master); (9, OpenMP, #pragma omp parallel default(shared))"}
{"predict": "(13, MPI, MPI_Allreduce(buf, buf, N, MPIX_BFLOAT16, MPI_SUM, MPI_COMM_WORLD);); (23, MPI, MPI_Allreduce(buf_f16, buf_f16, N, MPIX_C_FLOAT16, MPI_SUM, MPI_COMM_WORLD);)", "label": "(10, MPI, MPI_Allreduce(MPI_IN_PLACE, buf, N, MPIX_BFLOAT16, MPI_SUM, comm);); (20, MPI, MPI_Allreduce(MPI_IN_PLACE, buf_f16, N, MPIX_C_FLOAT16, MPI_SUM, comm);)"}
{"predict": "(32, CUDA, CUDA_CHECK(cudaStreamSynchronize(stream));); (34, CUDA, CUDA_CHECK(cudaFree(d_data));)", "label": "(32, CUDA, CUDA_CHECK(cudaStreamSynchronize(stream));); (34, CUDA, CUDA_CHECK(cudaFree(d_data));)"}
{"predict": "(132, MPI, MPI_Waitall(k, request, status);); (91, MPI, MPI_Reduce_local(recvbuf, tempbuf, count, type, op);)", "label": "(133, MPI, MPI_Waitall(k, request, status);); (90, MPI, MPI_Reduce_local(recvbuf, tempbuf, count, type, op);)"}
{"predict": "(25, MPI, MPI_Allreduce(bufin, bufout, count, dtype, MPI_SUM, comm);); (16, MPI, MPI_Abort(MPI_COMM_WORLD, 1);); (9, MPI, MPI_Comm_size(comm, &size);)", "label": "(10, MPI, MPI_Comm_size(comm, &size);); (15, MPI, MPI_Abort(MPI_COMM_WORLD, 1);); (22, MPI, MPI_Allreduce(bufin, bufout, count, dtype, MPI_SUM, comm);)"}
{"predict": "(68, CUDA, checkCudaErrors(cudaMemset(d_Kernel, 0, DATA_SIZE));); (109, CUDA, checkCudaErrors(cudaFree(d_Kernel));); (40, CUDA, findCudaDevice(argc, (const char **)argv);); (71, CUDA, checkCudaErrors(cudaDeviceSynchronize());); (49, CUDA, checkCudaErrors(cudaMalloc((void **)&d_Kernel, DATA_SIZE));); (104, CUDA, checkCudaErrors(cudaFree(d_Data));); (48, CUDA, checkCudaErrors(cudaMalloc((void **)&d_Data, DATA_SIZE));)", "label": "(68, CUDA, checkCudaErrors(cudaMemset(d_Kernel, 0, DATA_SIZE));); (110, CUDA, checkCudaErrors(cudaFree(d_Kernel));); (40, CUDA, findCudaDevice(argc, (const char **)argv);); (72, CUDA, checkCudaErrors(cudaDeviceSynchronize());); (49, CUDA, checkCudaErrors(cudaMalloc((void **)&d_Kernel, DATA_SIZE));); (105, CUDA, checkCudaErrors(cudaFree(d_Data));); (48, CUDA, checkCudaErrors(cudaMalloc((void **)&d_Data, DATA_SIZE));)"}
{"predict": "(37, MPI, const char* mpierrstr = MPI_Error_string(mpirc);); (71, MPI, mpirc = MPI_File_close(&fh);); (32, MPI, int mpirc = MPI_File_set_view(fh, disp, MPI_UINT64_T, MPI_UINT64_T, datarep, MPI_INFO_NULL);); (41, MPI, mpirc = MPI_File_read(fh, &version_packed, 1, MPI_UINT64_T, &status);); (20, MPI, mpirc = MPI_File_open(MPI_COMM_WORLD, (char*)name, amode, MPI_INFO_NULL, &fh);); (5, MPI, double start_read = MPI_Wtime();); (93, MPI, MPI_Barrier(MPI_COMM_WORLD);); (23, MPI, MPI_Error_string(mpirc, mpierrstr, &mpierrlen);); (6, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (74, MPI, double end_read = MPI_Wtime();)", "label": "(39, MPI, MPI_Error_string(mpirc, mpierrstr, &mpierrlen);); (98, MPI, MPI_Barrier(MPI_COMM_WORLD);); (22, MPI, int mpirc = MPI_File_open(MPI_COMM_WORLD, (char*)name, amode, MPI_INFO_NULL, &fh);); (9, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (79, MPI, double end_read = MPI_Wtime();); (3, MPI, double start_read = MPI_Wtime();); (67, MPI, mpirc = MPI_File_close(&fh);); (30, MPI, mpirc = MPI_File_set_view(fh, disp, MPI_BYTE, MPI_BYTE, datarep, MPI_INFO_NULL);); (47, MPI, MPI_Bcast(&version, 1, MPI_UINT64_T, 0, MPI_COMM_WORLD);); (36, MPI, mpirc = MPI_File_read_at(fh, 0, &version_packed, 8, MPI_BYTE, &status);)"}
{"predict": "(262, MPI, MPI_Allreduce(&tmp_error, error_code, 1, MPI_INT, MPI_MAX, fd->comm);); (65, MPI, MPI_Comm_size(fd->comm, &nprocs);); (93, MPI, MPI_Allgather(&end_offset, 1, ADIO_OFFSET, end_offsets, 1, ADIO_OFFSET, fd->comm);); (91, MPI, MPI_Allgather(&start_offset, 1, ADIO_OFFSET, st_offsets, 1, ADIO_OFFSET, fd->comm);); (62, MPI, MPI_Comm_rank(fd->comm, &myrank);); (255, MPI, MPI_Type_size_x(datatype, &size);)", "label": "(191, MPI, MPI_Allreduce(&tmp_error, error_code, 1, MPI_INT, MPI_MAX, fd->comm);); (65, MPI, MPI_Comm_size(fd->comm, &nprocs);); (93, MPI, MPI_Allgather(&end_offset, 1, ADIO_OFFSET, end_offsets, 1, ADIO_OFFSET, fd->comm);); (91, MPI, MPI_Allgather(&start_offset, 1, ADIO_OFFSET, st_offsets, 1, ADIO_OFFSET, fd->comm);); (63, MPI, MPI_Comm_rank(fd->comm, &myrank);); (210, MPI, MPI_Type_size_x(datatype, &size);)"}
{"predict": "(17, CUDA, CHECK(cudaMalloc((void**)&atom->g_NN, MN * sizeof(real)));); (25, CUDA, CHECK(cudaMalloc((void**)&atom->g_pe, N * sizeof(real)));); (26, CUDA, CHECK(cudaMalloc((void**)&atom->g_fx, N * sizeof(real)));); (26, CUDA, CHECK(cudaMalloc((void**)&atom->g_fy, N * sizeof(real)));); (26, CUDA, CHECK(cudaMalloc((void**)&atom->g_fz, N * sizeof(real)));); (23, CUDA, CHECK(cudaMalloc((void**)&atom->g_y, N * sizeof(real)));); (20, CUDA, CHECK(cudaMalloc((void**)&atom->g_x, N * sizeof(real)));); (17, CUDA, CHECK(cudaMalloc((void**)&atom->g_N, N * sizeof(real)));); (24, CUDA, CHECK(cudaMalloc((void**)&atom->g_z, N * sizeof(real)));); (21, CUDA, CHECK(cudaMalloc((void**)&atom->g_vy, N * sizeof(real)));); (18, CUDA, CHECK(cudaMalloc((void**)&atom->g_vx, N * sizeof(real)));); (20, CUDA, CHECK(cudaMalloc((void**)&atom->g_vz, N * sizeof(real)));)", "label": "(23, CUDA, CHECK(cudaMalloc((void**)&atom->g_fz, sizeof(real) * N));); (19, CUDA, CHECK(cudaMalloc((void**)&atom->g_z, sizeof(real) * N));); (17, CUDA, CHECK(cudaMalloc((void**)&atom->g_y, sizeof(real) * N));); (21, CUDA, CHECK(cudaMalloc((void**)&atom->g_pe, sizeof(real) * N));); (14, CUDA, CHECK(cudaMalloc((void**)&atom->g_x, sizeof(real) * N));); (12, CUDA, CHECK(cudaMalloc((void**)&atom->g_NL, sizeof(int) * N * MN));); (16, CUDA, CHECK(cudaMalloc((void**)&atom->g_fy, sizeof(real) * N));); (9, CUDA, CHECK(cudaMalloc((void**)&atom->g_NN, sizeof(int) * N));); (13, CUDA, CHECK(cudaMalloc((void**)&atom->g_fx, sizeof(real) * N));)"}
{"predict": "(25, OpenCL, err = clEnqueueWriteBuffer( queue, buf[1], CL_TRUE, 0, sizeof(int), &dim_arg_global, 0, NULL, NULL);)", "label": "(25, OpenCL, err = clEnqueueWriteBuffer( queue, buf[1], CL_TRUE, 0, sizeof(int), &dim_arg_global, 0, NULL, NULL);)"}
{"predict": "(53, OpenMP, #pragma omp for firstprivate(numElemReg)); (36, OpenMP, #pragma omp parallel); (66, OpenMP, #pragma omp for nowait firstprivate(numElemReg)); (38, OpenMP, #pragma omp for firstprivate(numElemReg))", "label": "(106, OpenMP, #pragma omp parallel for firstprivate(numElemReg)); (53, OpenMP, #pragma omp for firstprivate(numElemReg)); (65, OpenMP, #pragma omp for nowait firstprivate(numElemReg, eosvmin)); (34, OpenMP, #pragma omp parallel); (74, OpenMP, #pragma omp for nowait firstprivate(numElemReg, eosvmax)); (36, OpenMP, #pragma omp for nowait firstprivate(numElemReg))"}
{"predict": "(13, CUDA, PYCUDA_ASSERT_NOGIL(cudaStreamCreateWithPriority(&stream, flags, priority));)", "label": "(13, CUDA, PYCUDA_ASSERT_NOGIL(cudaStreamCreateWithPriority(&stream, flags, priority));)"}
{"predict": "(38, CUDA, cudaFree(res_dev);); (31, CUDA, cudaMalloc(&res_dev, sizeof(float));); (33, CUDA, cudaMemcpy(&res_host, res_dev, sizeof(float), cudaMemcpyDeviceToHost);)", "label": "(38, CUDA, cudaFree(res_dev);); (31, CUDA, cudaMalloc(&res_dev, sizeof(float));); (33, CUDA, cudaMemcpy(&res_host, res_dev, sizeof(float), cudaMemcpyDeviceToHost);)"}
{"predict": "(42, MPI, MPI_Comm_size(comm, &mpi_size);); (45, MPI, rc = MPI_Bcast_error_code(error_code, comm);); (32, MPI, MPI_Comm_set_errhandler(comm, MPI_ERRORS_RETURN);)", "label": "(40, MPI, MPI_Error_class(*error_code, &rc);); (12, MPI, MPI_Comm_size(comm, &mpi_size);); (42, MPI, MPI_Bcast(&rc, 1, MPI_INT, 0, comm);)"}
{"predict": "(17, CUDA, thrust::host_vector<Element> h_S(size(tensor_shape));); (25, CUDA, thrust::device_vector<Element> d_D = h_D;); (78, CUDA, cudaError result = cudaDeviceSynchronize();); (26, CUDA, Tensor tensor_S = make_tensor(make_gmem_ptr(thrust::raw_pointer_cast(d_S.data())), make_layout(tensor_shape));); (14, CUDA, thrust::host_vector<Element> h_D(size(tensor_shape));); (22, CUDA, thrust::device_vector<Element> d_S = h_S;); (25, CUDA, Tensor tensor_D = make_tensor(make_gmem_ptr(thrust::raw_pointer_cast(d_D.data())), make_layout(tensor_shape));)", "label": "(81, CUDA, cudaError result = cudaDeviceSynchronize();); (30, CUDA, Tensor tensor_S = make_tensor(make_gmem_ptr(thrust::raw_pointer_cast(d_S.data())), make_layout(tensor_shape));); (14, CUDA, thrust::host_vector<Element> h_S(size(tensor_shape));); (22, CUDA, thrust::device_vector<Element> d_D = h_D;); (79, CUDA, std::cerr << \"CUDA Runtime error: \" << cudaGetErrorString(result) << std::endl;); (12, CUDA, thrust::host_vector<Element> h_D(size(tensor_shape));); (26, CUDA, Tensor tensor_D = make_tensor(make_gmem_ptr(thrust::raw_pointer_cast(d_D.data())), make_layout(tensor_shape));); (17, CUDA, thrust::device_vector<Element> d_S = h_S;)"}
{"predict": "(2, CUDA, extern __shared__ float siftParts1[];); (2, CUDA, extern __shared__ float siftParts2[];)", "label": "(3, CUDA, __shared__ float siftParts2[16*64];); (1, CUDA, __shared__ float siftParts1[17*64];)"}
{"predict": "(12, TBB, tbb::cache_aligned_allocator<padded_private_worker>().allocate(my_thread_array, my_n_thread);)", "label": "(12, TBB, my_thread_array = tbb::cache_aligned_allocator<padded_private_worker>().allocate( my_n_thread );)"}
{"predict": "(77, CUDA, __shared__ bool isAccepted;); (77, CUDA, __shared__ T sSumVal;)", "label": "(52, CUDA, __shared__ bool isAccepted;); (52, CUDA, __shared__ T sSumVal;)"}
{"predict": "(54, MPI, MPI_Free_mem(dst_buf);); (51, MPI, MPI_Win_free(&dst_win);); (15, MPI, MPI_Win_lock(MPI_LOCK_EXCLUSIVE, me, 0, dst_win);); (22, MPI, MPI_Win_unlock(me, dst_win);); (16, MPI, MPI_Barrier(MPI_COMM_WORLD);); (4, MPI, MPI_Alloc_mem(sizeof(double) * nproc * MAXELEMS, MPI_INFO_NULL, &dst_buf);)", "label": "(54, MPI, MPI_Free_mem(dst_buf);); (9, MPI, MPI_Alloc_mem(sizeof(double) * nproc * MAXELEMS, MPI_INFO_NULL, &dst_buf);); (30, MPI, MPI_Win_lock(MPI_LOCK_EXCLUSIVE, target, 0, dst_win);); (50, MPI, MPI_Win_free(&dst_win);); (13, MPI, MPI_Win_lock(MPI_LOCK_EXCLUSIVE, me, 0, dst_win);); (17, MPI, MPI_Win_unlock(me, dst_win);); (18, MPI, MPI_Barrier(MPI_COMM_WORLD);); (28, MPI, MPI_Win_unlock(target, dst_win);)"}
{"predict": "(8, OpenMP, #pragma omp parallel); (9, OpenMP, #pragma omp for); (4, OpenMP, int numThreads = omp_get_max_threads();); (21, OpenMP, omp_set_lock(&l);); (22, OpenMP, omp_unset_lock(&l);); (1, OpenMP, omp_init_lock(&l);)", "label": "(7, OpenMP, omp_init_lock(&l);); (27, OpenMP, omp_destroy_lock(&l);); (7, OpenMP, #pragma omp parallel); (14, OpenMP, omp_set_lock(&l);); (21, OpenMP, omp_unset_lock(&l);); (-1, OpenMP, auto numThreads = omp_get_max_threads();)"}
{"predict": "(19, OpenMP, #pragma omp target parallel for simd private(argc,); (37, OpenMP, #pragma omp target parallel for simd private(h, B::x)); (21, OpenMP, #pragma omp target parallel for simd private(argc > 0 ? argv[1] : argv[2])); (44, OpenMP, #pragma omp target parallel for simd private(i)); (30, OpenMP, #pragma omp target parallel for simd private(argv[1])); (36, OpenMP, #pragma omp parallel); (46, OpenMP, #pragma omp parallel private(i)); (19, OpenMP, #pragma omp target parallel for simd private(argc)); (22, OpenMP, #pragma omp target parallel for simd private(a, b)); (36, OpenMP, #pragma omp target parallel for simd private(j)); (47, OpenMP, #pragma omp target parallel for simd private(m)); (10, OpenMP, #pragma omp target parallel for simd private(argc); (37, OpenMP, #pragma omp parallel shared(i)); (0, OpenMP, #pragma omp target parallel for simd private(); (4, OpenMP, #pragma omp target parallel for simd private(argc); (18, OpenMP, #pragma omp target parallel for simd private(S1)); (-5, OpenMP, #pragma omp target parallel for simd private); (22, OpenMP, #pragma omp target parallel for simd private(e, g))", "label": "(22, OpenMP, #pragma omp target parallel for simd private(argc > 0 ? argv[1] : argv[2])); (36, OpenMP, #pragma omp target parallel for simd private(e, g)); (44, OpenMP, #pragma omp target parallel for simd private(i)); (49, OpenMP, #pragma omp target parallel for simd private(j)); (47, OpenMP, #pragma omp parallel private(i)); (54, OpenMP, #pragma omp target parallel for simd private(m)); (4, OpenMP, #pragma omp target parallel for simd private(); (36, OpenMP, #pragma omp parallel); (32, OpenMP, #pragma omp target parallel for simd private(h, B::x)); (22, OpenMP, #pragma omp target parallel for simd private(a, b)); (24, OpenMP, #pragma omp target parallel for simd private(argv[1])); (17, OpenMP, #pragma omp target parallel for simd private(S1)); (38, OpenMP, #pragma omp parallel shared(i)); (12, OpenMP, #pragma omp target parallel for simd private(argc, z)); (2, OpenMP, #pragma omp target parallel for simd private(argc); (-2, OpenMP, #pragma omp target parallel for simd private()); (-9, OpenMP, #pragma omp target parallel for simd private); (2, OpenMP, #pragma omp target parallel for simd private(argc,)"}
{"predict": "(81, MPI, MPI_Finalize();)", "label": "(81, MPI, MPI_Finalize();)"}
{"predict": "(13, MPI, MPI_Wait(&req, MPI_STATUS_IGNORE);); (11, MPI, MPI_Iscan_c(sendbuf, recvbuf, count, datatype, MPI_SUM, comm, &req);); (7, MPI, MPI_Scan_c(sendbuf, recvbuf, count, datatype, MPI_SUM, comm);)", "label": "(9, MPI, MPI_Scan_c(sendbuf, recvbuf, count, datatype, MPI_SUM, comm);); (12, MPI, MPI_Wait(&req, MPI_STATUS_IGNORE);); (10, MPI, MPI_Iscan_c(sendbuf, recvbuf, count, datatype, MPI_SUM, comm, &req);)"}
{"predict": "(17, OpenMP, #pragma omp task shared (argc > 0 ? argv[1] : argv[2])); (22, OpenMP, #pragma omp task shared (argv[1])); (36, OpenMP, #pragma omp task shared(i)); (28, OpenMP, #pragma omp task shared(e, g)); (3, OpenMP, #pragma omp task shared); (4, OpenMP, #pragma omp task shared (); (27, OpenMP, #pragma omp task private(i), shared(i)); (33, OpenMP, #pragma omp task firstprivate(i), shared(i)); (25, OpenMP, #pragma omp task shared(h, B::x)); (14, OpenMP, #pragma omp task shared (a, b, c, d, f)); (0, OpenMP, #pragma omp task shared ()); (16, OpenMP, #pragma omp task shared(ca)); (31, OpenMP, #pragma omp task shared(j)); (18, OpenMP, #pragma omp task shared(da)); (-4, OpenMP, #pragma omp task shared (argc); (2, OpenMP, #pragma omp task shared (argc)); (17, OpenMP, #pragma omp task shared(e, f)); (-6, OpenMP, #pragma omp task shared (argc,); (22, OpenMP, #pragma omp task firstprivate(i)); (4, OpenMP, #pragma omp task shared(ba)); (-8, OpenMP, #pragma omp task shared (argc) allocate , allocate(, allocate(omp_default , allocate(omp_default_mem_alloc, allocate(omp_default_mem_alloc:, allocate(omp_default_mem_alloc: argc, allocate(omp_default_mem_alloc: argv), allocate(argv))", "label": "(45, OpenMP, #pragma omp parallel firstprivate(i)); (40, OpenMP, #pragma omp parallel private(i)); (17, OpenMP, #pragma omp task shared(argc, z)); (39, OpenMP, #pragma omp task shared(i)); (7, OpenMP, #pragma omp task shared()); (20, OpenMP, #pragma omp task shared(argv[1])); (29, OpenMP, #pragma omp task shared(h, B::x)); (26, OpenMP, #pragma omp task shared(e, g)); (31, OpenMP, #pragma omp task firstprivate(i), shared(i)); (34, OpenMP, #pragma omp task shared(j)); (17, OpenMP, #pragma omp task shared(ba)); (6, OpenMP, #pragma omp task shared(argc > 0 ? argv[1] : argv[2])); (-5, OpenMP, #pragma omp task shared); (-4, OpenMP, #pragma omp task shared(); (23, OpenMP, #pragma omp task private(i), shared(i)); (0, OpenMP, #pragma omp task shared(argc,); (7, OpenMP, #pragma omp task shared(a, b, c, d, f)); (4, OpenMP, #pragma omp task shared(S1)); (13, OpenMP, #pragma omp task shared(da)); (-6, OpenMP, #pragma omp task shared(argc); (9, OpenMP, #pragma omp task shared(ca))"}
{"predict": "(46, OpenMP, #pragma omp target parallel map(ps->a, ps->b)); (7, OpenMP, #pragma omp target parallel map(); (37, OpenMP, #pragma omp target parallel map(ps->i[0:1], ps->s)); (47, OpenMP, #pragma omp target parallel map(ps->s[0:1])); (15, OpenMP, #pragma omp target parallel map(from: i[0:0])); (36, OpenMP, #pragma omp target parallel map(ps->i[0:1])); (6, OpenMP, #pragma omp target parallel map(to: i[0:0])); (14, OpenMP, #pragma omp target parallel map(from: s.b)); (36, OpenMP, #pragma omp target parallel map(ps->a, ps->b, ps->c)); (43, OpenMP, #pragma omp target parallel map(ps->arr[0:1])); (6, OpenMP, #pragma omp target parallel map(from: i[0:0])); (13, OpenMP, #pragma omp target parallel map(to: s.b)); (34, OpenMP, #pragma omp target parallel map(ps->s)); (1, OpenMP, #pragma omp target parallel map(to: i[0:0])); (17, OpenMP, #pragma omp target parallel map(i[0:1])); (42, OpenMP, #pragma omp target parallel map(ps->arr)); (7, OpenMP, #pragma omp target parallel map(to: s.a)); (22, OpenMP, #pragma omp target parallel map(ps)); (31, OpenMP, #pragma omp target parallel map(ps->a)); (15, OpenMP, #pragma omp target parallel map(s)); (18, OpenMP, #pragma omp target parallel map(a, b, c, d)); (38, OpenMP, #pragma omp target parallel map(ps->ptr[0:1])); (2, OpenMP, #pragma omp target parallel map(s.a)); (-11, OpenMP, #pragma omp target parallel map); (23, OpenMP, #pragma omp target parallel map(ps->ptr)); (30, OpenMP, #pragma omp target parallel map(ps->b)); (17, OpenMP, #pragma omp target parallel map(present: s.c)); (32, OpenMP,", "label": "(14, OpenMP, #pragma omp target map(p)); (51, OpenMP, #pragma omp target map(from: ps->ps->ps)); (38, OpenMP, #pragma omp target map(ps->i)); (31, OpenMP, #pragma omp target map(s.ps->ps->ps)); (32, OpenMP, #pragma omp target map(to: s.ps->ps->s.f[:22])); (27, OpenMP, #pragma omp target map(to: s.ps->ps)); (20, OpenMP, #pragma omp target map(to: s.p[:22])); (17, OpenMP, #pragma omp target map(s.p)); (2, OpenMP, #pragma omp target map(i)); (37, OpenMP, #pragma omp target map(to: ps->p[:22])); (18, OpenMP, #pragma omp target map(s.ps)); (27, OpenMP, #pragma omp target map(ps)); (30, OpenMP, #pragma omp target map(ps->s.f)); (41, OpenMP, #pragma omp target map(ps->ps->ps->ps)); (8, OpenMP, #pragma omp target map(s.s.f)); (-3, OpenMP, #pragma omp target map(i[1:23])); (-8, OpenMP, #pragma omp target map(d)); (3, OpenMP, #pragma omp target map(s.i)); (26, OpenMP, #pragma omp target map(from: ps->p)); (41, OpenMP, #pragma omp target map(from: s.f[:22]) map(to: ps->p[:33])); (38, OpenMP, #pragma omp target map(to: s.f[:22]) map(from: s.p[:33])); (41, OpenMP, #pragma omp target map(from: s.f[:22], s.s) map(to: ps->p[:33])); (-4, OpenMP, #pragma omp target map(s)); (25, OpenMP, #pragma omp target map(ps->ps)); (6, OpenMP, #pragma omp target map(from: s.ps->s.i)); (31, OpenMP, #pragma omp target map(to: ps->ps->ps->s.f[:22])); (-10, OpenMP, #pragma omp target map(p[1:24])); (23, OpenMP, #pragma omp target map(from: ps->ps->s.i))"}
{"predict": "(20, CUDA, getLastCudaError(\"generateSampleRanks<0><<<>>> failed\\n\");); (14, CUDA, getLastCudaError(\"generateSampleRanks<1><<<>>> failed\\n\");)", "label": "(15, CUDA, getLastCudaError(\"generateSampleRanksKernel<1U><<<>>> failed\\n\");); (19, CUDA, getLastCudaError(\"generateSampleRanksKernel<0U><<<>>> failed\\n\");)"}
{"predict": "(13, MPI, MPI_Comm_size(comm, &ranks);); (11, MPI, MPI_Comm_rank(comm, &rank);)", "label": "(13, MPI, MPI_Comm_size(comm, &ranks);); (11, MPI, MPI_Comm_rank(comm, &rank);)"}
{"predict": "(8, OpenCL, cl_kernel init_kernel = clCreateKernel(program, \"kernel_init\", &rc); CLERR;); (23, OpenCL, rc = clSetKernelArg(check_kernel, 2, sizeof(TYPE), &p2); CLERR;); (24, OpenCL, rc = clSetKernelArg(check_kernel, 4, sizeof(cl_mem), &mc->err_count); CLERR;); (25, OpenCL, rc = clEnqueueNDRangeKernel(queue, check_kernel, 1, NULL, global_work_size, local_work_size, 0, NULL, NULL);CLERR;); (31, OpenCL, clReleaseKernel(move_kernel);); (16, OpenCL, rc = clSetKernelArg(check_kernel, 0, sizeof(cl_mem), &mc->device_mem); CLERR;); (0, OpenCL, cl_kernel move_kernel = clCreateKernel(program, \"kernel_move\", &rc); CLERR;); (11, OpenCL, rc = clSetKernelArg(check_kernel, 1, sizeof(cl_ulong), &offset); CLERR;); (24, OpenCL, clReleaseKernel(check_kernel);); (5, OpenCL, rc = clSetKernelArg(move_kernel, 1, sizeof(cl_ulong), &offset); CLERR;); (5, OpenCL, rc = clSetKernelArg(move_kernel, 2, sizeof(TYPE), &p1); CLERR;); (28, OpenCL, clReleaseKernel(init_kernel);); (5, OpenCL, rc = clSetKernelArg(move_kernel, 3, sizeof(TYPE), &p2); CLERR;); (1, OpenCL, rc = clEnqueueNDRangeKernel(queue, move_kernel, 1, NULL, global_work_size, local_work_size, 0, NULL, NULL); CLERR;); (3, OpenCL, rc = clSetKernelArg(move_kernel, 4, sizeof(cl_mem), &mc->err_count); CLERR;); (-5, OpenCL, cl_kernel check_kernel = clCreateKernel(program, \"kernel_check\", &rc); CLERR;)", "label": "(18, OpenCL, rc = clEnqueueNDRangeKernel(queue, write_kernel, 1, NULL, global_work_size, local_work_size, 0, NULL, NULL); CLERR;); (23, OpenCL, rc = clSetKernelArg(read_kernel, 4, sizeof(TYPE), &p2); CLERR;); (35, OpenCL, clReleaseKernel(read_kernel);); (28, OpenCL, rc = clEnqueueNDRangeKernel(queue, read_kernel, 1, NULL, global_work_size, local_work_size, 0, NULL, NULL);CLERR;); (5, OpenCL, cl_kernel read_kernel = clCreateKernel(program, \"kernel_modtest_read\", &rc); CLERR;); (20, OpenCL, rc = clSetKernelArg(read_kernel, 5, sizeof(cl_mem), &mc->err_count); CLERR;); (14, OpenCL, rc = clSetKernelArg(read_kernel, 0, sizeof(cl_mem), &mc->device_mem); CLERR;); (22, OpenCL, rc = clSetKernelArg(read_kernel, 9, sizeof(cl_mem), &mc->err_second_read); CLERR;); (0, OpenCL, cl_kernel write_kernel = clCreateKernel(program, \"kernel_modtest_write\", &rc); CLERR;); (8, OpenCL, rc = clSetKernelArg(write_kernel, 4, sizeof(TYPE), &p2); CLERR;); (11, OpenCL, rc = clSetKernelArg(read_kernel, 1, sizeof(cl_ulong), &mc->mem_size); CLERR;); (3, OpenCL, rc = clSetKernelArg(write_kernel, 1, sizeof(cl_ulong), &mc->mem_size); CLERR;); (14, OpenCL, rc = clSetKernelArg(read_kernel, 6, sizeof(cl_mem), &mc->err_addr); CLERR;); (0, OpenCL, rc = clSetKernelArg(write_kernel, 0, sizeof(cl_mem), &mc->device_mem); CLERR;); (22, OpenCL, clReleaseKernel(write_kernel);); (7, OpenCL, rc = clSetKernelArg(read_kernel, 2, sizeof(unsigned int), &offset); CLERR;); (0, OpenCL, rc = clSetKernelArg(write_kernel, 3, sizeof(TYPE), &p1); CLERR;); (6, OpenCL, rc = clSetKernelArg(read_kernel, 3, sizeof(TYPE), &p1); CLERR;); (-3, OpenCL, rc = clSetKernelArg(write_kernel, 2, sizeof(unsigned int), &offset); CLERR;); (9, OpenCL, rc = clSetKernelArg(read_kernel, 8, sizeof(cl_mem), &mc->err_current); CLERR;); (7, OpenCL, rc = clSetKernelArg(read_kernel, 7, sizeof(cl_mem), &mc->err_expect); CLERR;)"}
{"predict": "(210, MPI, MPI_Reduce(&total, &total_sum, 1, MPI_INT, MPI_SUM, root, MPI_COMM_WORLD);); (233, MPI, MPI_Finalize();); (83, MPI, MPI_Bcast(&iterations,    1, MPI_INT, root, MPI_COMM_WORLD);); (25, MPI, MPI_Init(&argc,&argv);); (80, MPI, MPI_Bcast(&vector_length, 1, MPI_INT, root, MPI_COMM_WORLD);); (81, MPI, MPI_Bcast(&btype,         1, MPI_INT, root, MPI_COMM_WORLD);); (97, MPI, MPI_Barrier(MPI_COMM_WORLD);); (23, MPI, MPI_Comm_size(MPI_COMM_WORLD, &Num_procs);); (21, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &my_ID);)", "label": "(211, MPI, MPI_Reduce(&total, &total_sum, 1, MPI_INT, MPI_SUM, root, MPI_COMM_WORLD);); (234, MPI, MPI_Finalize();); (83, MPI, MPI_Bcast(&iterations,    1, MPI_INT, root, MPI_COMM_WORLD);); (25, MPI, MPI_Init(&argc,&argv);); (80, MPI, MPI_Bcast(&vector_length, 1, MPI_INT, root, MPI_COMM_WORLD);); (81, MPI, MPI_Bcast(&btype,         1, MPI_INT, root, MPI_COMM_WORLD);); (97, MPI, MPI_Barrier(MPI_COMM_WORLD);); (23, MPI, MPI_Comm_size(MPI_COMM_WORLD, &Num_procs);); (21, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &my_ID);)"}
{"predict": "(24, MPI, MPI_Alltoall(recv_size, 1, MPI_COUNT, send_size, 1, MPI_COUNT, fd->comm);); (78, MPI, MPI_Barrier(fd->comm);); (132, MPI, MPI_Get_address(write_buf + off + i, &addr);); (203, MPI, MPI_Get_count(&status, MPI_BYTE, &nbytes);); (198, MPI, MPI_Isend(write_buf + off + i, count[i], MPI_BYTE, done_to_proc[i], i, fd->comm, &send_req[i]);); (235, MPI, MPI_Abort(MPI_COMM_WORLD, *error_code);); (201, MPI, MPI_Waitall(nprocs_recv, send_req, MPI_STATUSES_IGNORE);); (194, MPI, MPI_Irecv(all_recv_buf + rdispls[i], count[i], MPI_BYTE, i, i, fd->comm, &send_req[i]);); (143, MPI, MPI_Get_address(read_buf + off + i, &addr);)", "label": "(121, MPI, gpfsmpio_prof_cw[GPFSMPIO_CIO_T_DEXCH_SORT] += MPI_Wtime() - io_time;); (90, MPI, gpfsmpio_prof_cw[GPFSMPIO_CIO_T_DEXCH_NET] += MPI_Wtime() - io_time;); (23, MPI, int ret = MPI_Alltoall(recv_size, 1, MPI_COUNT, send_size, 1, MPI_COUNT, fd->comm);); (19, MPI, io_time = MPI_Wtime();); (24, MPI, gpfsmpio_prof_cw[GPFSMPIO_CIO_T_DEXCH_RECV_EXCH] += MPI_Wtime() - io_time;); (132, MPI, gpfsmpio_prof_cw[GPFSMPIO_CIO_T_DEXCH_SIEVE] += MPI_Wtime() - io_time;); (75, MPI, gpfsmpio_prof_cw[GPFSMPIO_CIO_T_DEXCH_SETUP] += MPI_Wtime() - io_time;)"}
{"predict": "(10, CUDA, __shared__ float v[_N_], gy[_N_];)", "label": "(10, CUDA, __shared__ float v[_N_], gy[_N_];)"}
{"predict": "(12, CUDA, cudaDeviceSynchronize();); (12, CUDA, cudaMemcpy(&count,listp+fluidnum,sizeof(unsigned),cudaMemcpyDeviceToHost);); (6, CUDA, cudaMemset(listp+fluidnum,0,sizeof(unsigned));)", "label": "(14, CUDA, cudaDeviceSynchronize();); (12, CUDA, cudaMemcpy(&count,listp+fluidnum,sizeof(unsigned),cudaMemcpyDeviceToHost);); (6, CUDA, cudaMemset(listp+fluidnum,0,sizeof(unsigned));)"}
{"predict": "(6, CUDA, st = cudaMalloc(&ptr, TEST_ALLOC_SIZE);); (26, CUDA, cudaFree(ptr);); (7, CUDA, cudaGetLastError();)", "label": "(6, CUDA, st = cudaMalloc(&test_ptr, TEST_ALLOC_SIZE);); (25, CUDA, cudaFree(test_ptr);)"}
{"predict": "(36, MPI, MPI_Recv(b, 10, MPI_INT, i, 27 + j, MPI_COMM_WORLD, &status);); (23, MPI, MPI_Waitall(size, &request, MPI_STATUSES_IGNORE);); (14, MPI, MPI_Bcast_init(a, 10, MPI_INT, 0, MPI_COMM_WORLD, MPI_INFO_NULL, &request);); (5, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (5, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (13, MPI, MPI_Startall(size, &request);)", "label": "(45, MPI, MPI_Buffer_detach(&bptr, &bl);); (25, MPI, MPI_Recv(b, 10, MPI_INT, i, 27 + j, MPI_COMM_WORLD, &status);); (8, MPI, MPI_Buffer_attach(buf, BUFSIZE);); (14, MPI, MPI_Wait(&request, &status);); (12, MPI, MPI_Ibsend(a, 10, MPI_INT, 0, 27 + j, MPI_COMM_WORLD, &request);); (3, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (3, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);)"}
{"predict": "(28, OpenMP, #pragma omp for lastprivate(argc > 0 ? argv[1] : argv[2])); (74, OpenMP, #pragma omp parallel private(i)); (46, OpenMP, #pragma omp for lastprivate(argv[1])); (59, OpenMP, #pragma omp for lastprivate(i)); (48, OpenMP, #pragma omp for lastprivate(e, g)); (17, OpenMP, #pragma omp for lastprivate(argc,); (61, OpenMP, #pragma omp parallel shared(i)); (3, OpenMP, #pragma omp parallel); (10, OpenMP, #pragma omp for lastprivate(argc); (48, OpenMP, #pragma omp for lastprivate(h)); (36, OpenMP, #pragma omp for lastprivate(S1)); (18, OpenMP, #pragma omp for lastprivate(argc)); (20, OpenMP, #pragma omp for lastprivate(argc, k)); (-2, OpenMP, #pragma omp for lastprivate(); (61, OpenMP, #pragma omp for lastprivate(j)); (34, OpenMP, #pragma omp for lastprivate(a, b)); (21, OpenMP, #pragma omp for lastprivate(S2::S2s)); (7, OpenMP, #pragma omp for lastprivate(argc < 0 ? argv[1] : argv[2])); (-9, OpenMP, #pragma omp for lastprivate); (23, OpenMP, #pragma omp for lastprivate(S2::S2sc)); (37, OpenMP, #pragma omp for lastprivate(k); (32, OpenMP, #pragma omp for lastprivate(in)); (17, OpenMP, #pragma omp for lastprivate(conditional: s,argc) lastprivate(conditional:); (47, OpenMP, #pragma omp for lastprivate)", "label": "(32, OpenMP, #pragma omp for lastprivate(argc) allocate , allocate(, allocate(omp_default , allocate(omp_default_mem_alloc, allocate(omp_default_mem_alloc:, allocate(omp_default_mem_alloc: argc, allocate(omp_default_mem_alloc: argv), allocate(argv)); (73, OpenMP, #pragma omp parallel private(i)); (22, OpenMP, #pragma omp for lastprivate(argc,); (45, OpenMP, #pragma omp for lastprivate(a, b)); (12, OpenMP, #pragma omp for lastprivate()); (2, OpenMP, #pragma omp parallel); (69, OpenMP, #pragma omp for lastprivate(j)); (60, OpenMP, #pragma omp for lastprivate(i)); (4, OpenMP, #pragma omp for lastprivate(); (11, OpenMP, #pragma omp for lastprivate(argc); (30, OpenMP, #pragma omp for lastprivate(foo:argc)); (-3, OpenMP, #pragma omp for lastprivate); (32, OpenMP, #pragma omp for lastprivate(conditional: argc,s) lastprivate(conditional:); (15, OpenMP, #pragma omp for lastprivate(argc > 0 ? argv[1] : argv[2])); (46, OpenMP, #pragma omp for lastprivate(h)); (37, OpenMP, #pragma omp for lastprivate(argv[1])); (40, OpenMP, #pragma omp for lastprivate(k, e, g)); (56, OpenMP, #pragma omp parallel shared(i)); (18, OpenMP, #pragma omp for lastprivate(S1))"}
{"predict": "(30, CUDA, cudaCheck(cudaGetLastError());)", "label": "(30, CUDA, cudaCheck(cudaGetLastError());)"}
{"predict": "(8, MPI, MPI_Finalize();); (0, MPI, MPI_Init(&argc,&argv);)", "label": "(8, MPI, MPI_Finalize();); (0, MPI, MPI_Init(&argc,&argv);)"}
{"predict": "(23, CUDA, Sema::CUDAVarTarget UserTarget = SemaRef.getCUDAVarUserTarget(Var, Loc);); (21, CUDA, Sema::CUDAVarTarget VarTarget = SemaRef.getCUDAVarTarget(Var);)", "label": "(25, CUDA, auto UserTarget = SemaRef.IdentifyCUDATarget(FD);); (23, CUDA, auto VarTarget = SemaRef.IdentifyCUDATarget(Var);)"}
{"predict": "(35, CUDA, CHECK_CUDA(cudaMalloc((void**)&imgs_dev, img_N * 3 * img_w * img_h * sizeof(uchar)));)", "label": "(35, CUDA, CHECK_CUDA(cudaMalloc((void**)&imgs_dev, img_N * 3 * img_w * img_h * sizeof(uchar)));)"}
{"predict": "(15, MPI, MPI_Win_create(data, sizeof(twoint_t), sizeof(twoint_t), MPI_INFO_NULL, MPI_COMM_WORLD, &win);); (34, MPI, MPI_Win_fence(MPI_MODE_NOPRECEDE, win);); (77, MPI, MPI_Win_fence(MPI_MODE_NOSUCCEED, win);); (111, MPI, MPI_Win_free(&win);); (5, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &me);); (28, MPI, MPI_Accumulate(&mine, 1, MPI_2INT, 0, 0, 1, MPI_2INT, MPI_MAXLOC, win);); (3, MPI, MPI_Comm_size(MPI_COMM_WORLD, &nproc);); (47, MPI, MPI_Accumulate(&mine, 1, MPI_2INT, 0, 0, 1, MPI_2INT, MPI_MINLOC, win);); (7, MPI, MPI_Alloc_mem(sizeof(twoint_t), MPI_INFO_NULL, &data);); (108, MPI, MPI_Free_mem(data);); (23, MPI, MPI_Win_unlock(0, win);); (20, MPI, MPI_Win_lock(MPI_LOCK_SHARED, 0, MPI_MODE_NOCHECK, win);); (4, MPI, MPI_Barrier(MPI_COMM_WORLD);)", "label": "(119, MPI, MPI_Free_mem(data);); (30, MPI, MPI_Win_fence(0, win);); (73, MPI, MPI_Win_fence(MPI_MODE_NOSUCCEED, win);); (7, MPI, MPI_Comm_size(MPI_COMM_WORLD, &nproc);); (5, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &me);); (12, MPI, MPI_Win_fence(MPI_MODE_NOPRECEDE, win);); (110, MPI, MPI_Win_free(&win);); (28, MPI, MPI_Accumulate(&mine, 1, MPI_2INT, 0, 0, 1, MPI_2INT, MPI_MAXLOC, win);); (5, MPI, MPI_Alloc_mem(sizeof(twoint_t), MPI_INFO_NULL, &data);); (71, MPI, MPI_Win_lock(MPI_LOCK_SHARED, 0, MPI_MODE_NOCHECK, win);); (72, MPI, MPI_Win_unlock(0, win);); (73, MPI, MPI_Barrier(MPI_COMM_WORLD);); (4, MPI, MPI_Win_create(data, me == 0 ? sizeof(twoint_t) : 0, 1, MPI_INFO_NULL, MPI_COMM_WORLD, &win);); (41, MPI, MPI_Accumulate(&mine, 1, MPI_2INT, 0, 0, 1, MPI_2INT, MPI_MINLOC, win);)"}
{"predict": "(5, MPI, MPI_Init(&argc, &argv);); (60, MPI, MPI_Finalize();); (6, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (36, MPI, MPI_Recv(&message, 1, MPI_INT, prev, tag, MPI_COMM_WORLD, MPI_STATUS_IGNORE);); (5, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (20, MPI, MPI_Send(&message, 1, MPI_INT, next, tag, MPI_COMM_WORLD);)", "label": "(6, MPI, MPI_Init(&argc, &argv);); (25, MPI, MPI_Send(&message, 1, MPI_INT, next, tag, MPI_COMM_WORLD);); (60, MPI, MPI_Finalize();); (4, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (4, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (34, MPI, MPI_Recv(&message, 1, MPI_INT, prev, tag, MPI_COMM_WORLD, MPI_STATUS_IGNORE);)"}
{"predict": "(11, CUDA, CUCH(cudaMalloc(&ptr, plan_size * sizeof(int32_t)), mhcudaMemoryError);)", "label": "(12, CUDA, CUCH(cudaMalloc(&ptr, plan_size * sizeof(int32_t)), mhcudaMemoryAllocationFailure);); (6, CUDA, CUCH(cudaSetDevice(devs[devi]), mhcudaNoSuchDevice);)"}
{"predict": "(9, MPI, MPI_Comm_rank(comm, &comm_rank);); (10, MPI, MPI_Comm_size(comm, &comm_size);)", "label": "(9, MPI, MPI_Comm_rank(comm, &comm_rank);); (10, MPI, MPI_Comm_size(comm, &comm_size);)"}
{"predict": "(52, SYCL, double *d_A = sycl::malloc_device<double>(length, q);); (52, SYCL, double *d_B = sycl::malloc_device<double>(length, q);); (31, SYCL, prk::SYCL::print_device_platform(q);); (76, SYCL, sycl::free(d_B, q);); (74, SYCL, sycl::free(d_A, q);); (48, SYCL, double *d_C = sycl::malloc_device<double>(length, q);); (74, SYCL, sycl::free(d_C, q);); (26, SYCL, sycl::queue q(sycl::default_selector_v);)", "label": "(80, SYCL, sycl::free(d_A, q);); (32, SYCL, prk::SYCL::print_device_platform(q);); (51, SYCL, double *d_C = sycl::malloc_device<double>(length, q);); (76, SYCL, sycl::free(d_B, q);); (74, SYCL, sycl::free(d_C, q);); (47, SYCL, double *d_B = sycl::malloc_device<double>(length, q);); (26, SYCL, sycl::queue q(sycl::default_selector_v);); (44, SYCL, double *d_A = sycl::malloc_device<double>(length, q);)"}
{"predict": "(147, CUDA, checkCudaRuntime(cudaMemcpyAsync(image_device, image.data, size_image, cudaMemcpyHostToDevice, preprocess_stream));); (173, CUDA, checkCudaRuntime(cudaStreamDestroy(preprocess_stream));); (68, CUDA, checkCudaRuntime(cudaStreamSynchronize(mono->get_stream()));)", "label": "(151, CUDA, checkCudaRuntime(cudaMemcpyAsync(image_device, image_host, size_image, cudaMemcpyHostToDevice, preprocess_stream));); (125, CUDA, checkCudaRuntime(cudaStreamCreate(&preprocess_stream));); (67, CUDA, checkCudaRuntime(cudaStreamSynchronize(mono->get_stream()));)"}
{"predict": "(85, CUDA, EXPECT_EQ(cudaDeviceSynchronize(), cudaSuccess);); (51, CUDA, EXPECT_EQ(primaryPoolPtr->size(), primaryPoolSize);); (51, CUDA, EXPECT_EQ(secondaryPoolPtr->size(), secondaryPoolSize);)", "label": "(114, CUDA, EXPECT_EQ(cudaMemset(block2Ptr->data(), 0, blockSize * sizeof(T)), cudaSuccess);); (74, CUDA, EXPECT_EQ(cudaDeviceSynchronize(), cudaSuccess);)"}
{"predict": "(25, CUDA, cudaMemcpy(hostFloats2, gpuFloats2, 4 * sizeof(float), cudaMemcpyDeviceToHost);); (25, CUDA, cudaMemcpy(hostFloats3, gpuFloats3, 4 * sizeof(float), cudaMemcpyDeviceToHost);); (5, CUDA, cudaMalloc((void**)(&gpuFloats2), N * sizeof(float));); (37, CUDA, cudaFree(gpuFloats3);); (21, CUDA, cudaMemcpy(hostFloats1, gpuFloats1, 4 * sizeof(float), cudaMemcpyDeviceToHost);); (34, CUDA, cudaFree(gpuFloats2);); (32, CUDA, cudaFree(gpuFloats1);); (-1, CUDA, cudaMalloc((void**)(&gpuFloats1), N * sizeof(float));); (6, CUDA, cudaMalloc((void**)(&gpuFloats3), N * sizeof(float));)", "label": "(25, CUDA, cudaMemcpy(hostFloats2, gpuFloats2, 4 * sizeof(float), cudaMemcpyDeviceToHost);); (37, CUDA, cudaFree(gpuFloats1);); (8, CUDA, cudaMalloc((void**)(&gpuFloats2), N * sizeof(float));); (21, CUDA, cudaMemcpy(hostFloats1, gpuFloats1, 4 * sizeof(float), cudaMemcpyDeviceToHost);); (3, CUDA, cudaMalloc((void**)(&gpuFloats1), N * sizeof(float));); (35, CUDA, cudaFree(gpuFloats3);); (20, CUDA, cudaMemcpy(hostFloats3, gpuFloats3, 4 * sizeof(float), cudaMemcpyDeviceToHost);); (32, CUDA, cudaFree(gpuFloats2);); (5, CUDA, cudaMalloc((void**)(&gpuFloats3), N * sizeof(float));)"}
{"predict": "(28, CUDA, CUDASimulation cudaSimulation(model);)", "label": "(28, CUDA, CUDASimulation cudaSimulation(model);)"}
{"predict": "(10, CUDA, __shared__ cuda::barrier<cuda::thread_scope_block> barrier;)", "label": "(9, CUDA, __shared__ cuda::barrier<cuda::thread_scope_block> barrier;)"}
{"predict": "(6, CUDA, auto points_geometry_it = thrust::make_counting_iterator(0);); (8, CUDA, auto linestring_geometry_it  = thrust::make_counting_iterator(0);)", "label": "(6, CUDA, auto points_geometry_it = thrust::make_counting_iterator(0);); (8, CUDA, auto linestring_geometry_it  = thrust::make_counting_iterator(0);)"}
{"predict": "(19, OpenMP, #pragma omp target teams map (alloc: frct, rsd, rtmp_G, utmp_G, rho_i, flux_G, qs, u)); (26, OpenMP, #pragma omp distribute parallel for collapse(3)); (51, OpenMP, #pragma omp target teams map (alloc: rsd, flux_G)); (81, OpenMP, #pragma omp distribute parallel for collapse(2)); (100, OpenMP, #pragma omp distribute parallel for collapse(2) private (k, j, i, tmp, u21i, u31i, u41i, u51i, u21im1, u31im1, u41im1, u51im1))", "label": "(569, OpenMP, #pragma omp teams distribute parallel for collapse(3) private(i,j,k) num_teams(jend - jst)); (26, OpenMP, #pragma omp distribute parallel for collapse (3) private(tmp)); (106, OpenMP, #pragma omp simd simdlen(32) private (tmp, u21i, u31i, u41i, u51i, u21im1, u31im1, u41im1, u51im1)); (21, OpenMP, #pragma omp target teams); (15, OpenMP, #pragma omp target data); (59, OpenMP, #pragma omp distribute)"}
{"predict": "(11, CUDA, extern __shared__ char shared_mem[];)", "label": "(11, CUDA, extern __shared__ char shared_mem[];)"}
{"predict": "(59, CUDA, CHECK_CUDA(cudaMalloc((void**)&ibuf[i].pixel_data[c], sz));); (56, CUDA, CHECK_CUDA(cudaFree(ibuf[i].pixel_data[c]));)", "label": "(59, CUDA, CHECK_CUDA(cudaMalloc((void**)&ibuf[i].pixel_data[c], sz));); (56, CUDA, CHECK_CUDA(cudaFree(ibuf[i].pixel_data[c]));)"}
{"predict": "(93, MPI, ascent_opts[\"mpi_comm\"] = MPI_Comm_c2f(comm);); (99, MPI, MPI_Barrier(comm);); (16, MPI, MPI_Comm_rank(comm, &par_rank);); (16, MPI, MPI_Comm_size(comm, &par_size);)", "label": "(93, MPI, ascent_opts[\"mpi_comm\"] = MPI_Comm_c2f(comm);); (99, MPI, MPI_Barrier(comm);); (16, MPI, MPI_Comm_rank(comm, &par_rank);); (16, MPI, MPI_Comm_size(comm, &par_size);)"}
{"predict": "(10, OpenMP, f = test_cholesky_decomp_dim(&p3, 1024.0 * GSL_DBL_EPSILON);)", "label": "(10, OpenMP, f = test_choleskyc_decomp_dim(&p3.matrix, 2 * 8.0 * GSL_DBL_EPSILON);)"}
{"predict": "(sycl::queue *)sycl_queue);); (45, SYCL, std::vector<sycl::device> sycl_devices(1);)", "label": "(54, SYCL, std::vector<sycl::device> sycl_devices(1);); (3, SYCL, sycl::queue sycl_queue;)"}
{"predict": "(15, TBB, tbb::enumerable_thread_specific<size_t> num_high_degree_nodes(0);)", "label": "(15, TBB, tbb::enumerable_thread_specific<size_t> num_high_degree_nodes(0);)"}
{"predict": "(156, OpenMP, ism303dac_mg_offset_temp_comp_set(&dev_ctx_mg, PROPERTY_ENABLE);)", "label": "(162, OpenMP, ism303dac_mg_offset_temp_comp_set(&dev_ctx_mg, PROPERTY_ENABLE);)"}
{"predict": "(3, OpenMP, #pragma omp parallel); (3, OpenMP, #pragma omp master taskloop simd)", "label": "(4, OpenMP, #pragma omp master taskloop simd); (2, OpenMP, #pragma omp parallel)"}
{"predict": "(7, MPI, MPI_Info_get(info, key, MPI_MAX_INFO_VAL, buf, &flag);)", "label": "(7, MPI, MPI_Info_get(info, key, MPI_MAX_INFO_VAL, buf, &flag);)"}
{"predict": "(36, CUDA, __shared__ _VOLATILE_ float bSmem[16][128+4];); (34, CUDA, __shared__ _VOLATILE_ float aSmem[16][128+4];)", "label": "(36, CUDA, __shared__ _VOLATILE_ float bSmem[16][128+4];); (34, CUDA, __shared__ _VOLATILE_ float aSmem[16][128+4];)"}
{"predict": "(14, OpenMP, #pragma omp teams distribute parallel for simd shared ()); (34, OpenMP, #pragma omp teams distribute parallel for simd shared (argv[1])); (51, OpenMP, #pragma omp teams distribute parallel for simd private(i), shared(i)); (37, OpenMP, #pragma omp teams distribute parallel for simd shared(ca)); (44, OpenMP, #pragma omp teams distribute parallel for simd shared(e, g)); (15, OpenMP, #pragma omp teams distribute parallel for simd shared (argc); (20, OpenMP, #pragma omp teams distribute parallel for simd shared (argc,); (4, OpenMP, #pragma omp teams distribute parallel for simd shared (); (0, OpenMP, #pragma omp target); (49, OpenMP, #pragma omp teams distribute parallel for simd shared(i)); (52, OpenMP, #pragma omp teams distribute parallel for simd firstprivate(i), shared(i)); (12, OpenMP, #pragma omp teams distribute parallel for simd shared (argc > 0 ? argv[1] : argv[2])); (9, OpenMP, #pragma omp teams distribute parallel for simd shared (argc)); (53, OpenMP, #pragma omp teams distribute parallel for simd shared(j)); (18, OpenMP, #pragma omp teams distribute parallel for simd shared (a, b, c, d, f)); (25, OpenMP, #pragma omp teams distribute parallel for simd shared(ba)); (43, OpenMP, #pragma omp teams distribute parallel for simd firstprivate(i)); (1, OpenMP, #pragma omp teams distribute parallel for simd shared (argc,); (26, OpenMP, #pragma omp teams distribute parallel for simd shared(da))", "label": "(11, OpenMP, #pragma omp teams distribute simd shared (); (43, OpenMP, #pragma omp teams distribute simd shared(da)); (30, OpenMP, #pragma omp teams distribute simd shared (a, b, c, d, f)); (5, OpenMP, #pragma omp teams distribute simd shared); (34, OpenMP, #pragma omp teams distribute simd shared(ba)); (2, OpenMP, #pragma omp target); (35, OpenMP, #pragma omp teams distribute simd shared(ca)); (55, OpenMP, #pragma omp teams distribute simd shared(i)); (57, OpenMP, #pragma omp teams distribute simd shared(j)); (17, OpenMP, #pragma omp teams distribute simd shared (argc)); (43, OpenMP, #pragma omp teams distribute simd private(i), shared(i)); (24, OpenMP, #pragma omp teams distribute simd shared (argv[1])); (17, OpenMP, #pragma omp teams distribute simd shared (S1)); (43, OpenMP, #pragma omp teams distribute simd firstprivate(i), shared(i)); (9, OpenMP, #pragma omp teams distribute simd shared (argc > 0 ? argv[1] : argv[2])); (35, OpenMP, #pragma omp teams distribute simd shared(h, B::x)); (43, OpenMP, #pragma omp teams distribute simd private(i)); (51, OpenMP, #pragma omp teams distribute simd firstprivate(i)); (2, OpenMP, #pragma omp teams distribute simd shared (argc,); (28, OpenMP, #pragma omp teams distribute simd shared(e, g, z)); (-6, OpenMP, #pragma omp teams distribute simd shared ()); (-4, OpenMP, #pragma omp teams distribute simd shared (argc)"}
{"predict": "(25, MPI, MPI_Init(&argc, &argv);); (250, MPI, MPI_Finalize();); (25, MPI, MPI_Comm_size(MPI_COMM_WORLD, &num_procs);); (23, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &myid);)", "label": "(25, MPI, MPI_Init(&argc, &argv);); (79, MPI, MPI_Finalize();); (25, MPI, MPI_Comm_size(MPI_COMM_WORLD, &num_procs);); (23, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &myid);)"}
{"predict": "(13, TBB, make_edge(input, tbb::flow::input_port<0>(join));); (13, TBB, make_edge(squarer, tbb::flow::input_port<1>(join));); (10, TBB, make_edge(doubler, tbb::flow::input_port<0>(join));); (12, TBB, make_edge(cuber, tbb::flow::input_port<2>(join));); (21, TBB, make_edge(summer, input.decrementer());); (-1, TBB, tbb::flow::graph g;)", "label": "(1, TBB, using namespace oneapi::tbb::flow;)"}
{"predict": "(3, CUDA, __shared__ float homo[64];); (3, CUDA, __shared__ int cnts[512];)", "label": "(3, CUDA, __shared__ float homo[8*TESTHOMO_LOOPS];); (3, CUDA, __shared__ int cnts[TESTHOMO_TESTS*TESTHOMO_LOOPS];)"}
{"predict": "(50, OpenMP, #pragma omp teams distribute parallel for simd firstprivate(ba)); (37, OpenMP, #pragma omp teams distribute parallel for simd firstprivate (S1)); (7, OpenMP, #pragma omp target); (7, OpenMP, #pragma omp teams distribute parallel for simd firstprivate); (87, OpenMP, #pragma omp teams distribute parallel for simd lastprivate(argc), firstprivate(argc)); (53, OpenMP, #pragma omp teams distribute parallel for simd firstprivate(da, z)); (68, OpenMP, #pragma omp teams distribute parallel for simd private(i), firstprivate(i)); (78, OpenMP, #pragma omp teams distribute parallel for simd firstprivate(j)); (55, OpenMP, #pragma omp teams distribute parallel for simd firstprivate(S2::S2s)); (47, OpenMP, #pragma omp teams distribute parallel for simd firstprivate(ca)); (57, OpenMP, #pragma omp teams distribute parallel for simd firstprivate(S2::S2sc)); (36, OpenMP, #pragma omp teams distribute parallel for simd firstprivate (argv[1])); (68, OpenMP, #pragma omp teams distribute parallel for simd firstprivate(i)); (0, OpenMP, #pragma omp teams distribute parallel for simd firstprivate (); (2, OpenMP, #pragma omp teams distribute parallel for simd firstprivate ()); (26, OpenMP, #pragma omp teams distribute parallel for simd firstprivate (a, b, c, d, f)); (71, OpenMP, #pragma omp teams distribute parallel for simd firstprivate(argc) map(argc)); (16, OpenMP, #pragma omp teams distribute parallel for simd firstprivate (argc) allocate , allocate(, allocate(omp_default , allocate(omp_default_mem_alloc, allocate(omp_default_mem_alloc:, allocate(omp_default_mem_alloc: argc, allocate(omp_default_mem_alloc: argv), allocate(argv)); (3, OpenMP, #pragma omp teams distribute parallel for simd firstprivate (argc); (26, OpenMP, #pragma omp teams distribute parallel for simd firstprivate (S3::S3sc)); (16, OpenMP, #pragma omp teams distribute parallel for simd firstprivate (argc > 0 ? argv[1] : argv[2])); (31, OpenMP, #pragma omp teams distribute parallel for simd firstprivate (argv[1])); (6", "label": "(34, OpenMP, #pragma omp teams distribute parallel for simd firstprivate (argc) allocate , allocate(, allocate(omp_default , allocate(omp_default_mem_alloc, allocate(omp_default_mem_alloc:, allocate(omp_default_mem_alloc: argc, allocate(omp_default_mem_alloc: argv), allocate(argv)); (85, OpenMP, #pragma omp teams distribute parallel for simd firstprivate(j)); (7, OpenMP, #pragma omp target); (59, OpenMP, #pragma omp teams distribute parallel for simd firstprivate(S2::S2s)); (10, OpenMP, #pragma omp teams distribute parallel for simd firstprivate (); (21, OpenMP, #pragma omp teams distribute parallel for simd firstprivate (argc,); (36, OpenMP, #pragma omp teams distribute parallel for simd firstprivate (a, b, c, d, f)); (47, OpenMP, #pragma omp teams distribute parallel for simd firstprivate(ca)); (66, OpenMP, #pragma omp teams distribute parallel for simd private(i), firstprivate(i)); (13, OpenMP, #pragma omp teams distribute parallel for simd firstprivate (argc); (40, OpenMP, #pragma omp teams distribute parallel for simd firstprivate(ba, z)); (59, OpenMP, #pragma omp teams distribute parallel for simd firstprivate(h)); (26, OpenMP, #pragma omp teams distribute parallel for simd firstprivate (S1)); (33, OpenMP, #pragma omp teams distribute parallel for simd firstprivate (argv[1])); (52, OpenMP, #pragma omp teams distribute parallel for simd firstprivate(S2::S2sc)); (63, OpenMP, #pragma omp teams distribute parallel for simd firstprivate(i)); (2, OpenMP, #pragma omp teams distribute parallel for simd firstprivate ()); (-7, OpenMP, #pragma omp teams distribute parallel for simd firstprivate); (40, OpenMP, #pragma omp teams distribute parallel for simd firstprivate(da)); (72, OpenMP, #pragma omp teams distribute parallel for simd lastprivate(argc), firstprivate(argc)); (10, OpenMP, #pragma omp teams distribute parallel for simd firstprivate (argc > 0 ? argv[1] : argv[2]))"}
{"predict": "(4, MPI, MPI_Init(&argc, &argv);); (47, MPI, MPI_Win_free(&win[i]);); (43, MPI, MPI_Free_mem(base_ptr[i]);); (8, MPI, MPI_Comm_rank(node, &rank);); (45, MPI, MPI_Comm_free(&node);); (34, MPI, MPI_Barrier(node);); (-2, MPI, MPI_Comm_split_type(MPI_COMM_WORLD, MPI_COMM_TYPE_SHARED, 0, MPI_INFO_NULL, &node);); (17, MPI, s[i] = MPI_Win_allocate_shared((rank==0?99:0)*sizeof(char), 1, MPI_INFO_NULL, node, &base_ptr[i], &win[i]);)", "label": "(25, MPI, s[i] = MPI_Win_allocate_shared((rank==0?99:0)*sizeof(char), 1, MPI_INFO_NULL, node, &base_ptr[i], &win[i]);); (36, MPI, MPI_Barrier(node);); (-1, MPI, MPI_Init(&argc, &argv);); (44, MPI, if(win[i] != MPI_WIN_NULL) MPI_Win_free(&win[i]);); (46, MPI, MPI_Finalize();); (2, MPI, MPI_Comm_rank(node, &rank);); (16, MPI, int sam = MPI_Alloc_mem((rank==0?99:0)*sizeof(char), MPI_INFO_NULL, &base_ptr[i]);); (25, MPI, MPI_Win_shared_query(win[i], 0, &size[i], &a[i], &ptr[i]);); (-5, MPI, int ss = MPI_Comm_split_type(MPI_COMM_WORLD, MPI_COMM_TYPE_SHARED, 0, MPI_INFO_NULL, &node);)"}
{"predict": "(20, MPI, tim::settings::mpi_init()       = false;); (20, MPI, tim::settings::mpi_finalize()   = false;)", "label": "(20, MPI, tim::settings::mpi_init()       = false;); (20, MPI, tim::settings::mpi_finalize()   = false;)"}
{"predict": "(47, SYCL, sycl::free(cd, queue);)", "label": "(9, SYCL, const bool doHalfs = dev.has(sycl::aspect::fp16);); (47, SYCL, sycl::free(cd, queue);); (12, SYCL, const bool doDoubles = dev.has(sycl::aspect::fp64);)"}
{"predict": "(42, CUDA, __shared__ float Bs[BLOCK_SIZE][BLOCK_SIZE];); (37, CUDA, __shared__ float As[BLOCK_SIZE][BLOCK_SIZE];)", "label": "(42, CUDA, __shared__ float Bs[BLOCK_SIZE][BLOCK_SIZE];); (37, CUDA, __shared__ float As[BLOCK_SIZE][BLOCK_SIZE];)"}
{"predict": "(8, CUDA, cudaStreamSynchronize(LuH->A_gpu.cuStreams[0]);)", "label": "(8, CUDA, cudaStreamSynchronize(LuH->A_gpu.cuStreams[0]);)"}
{"predict": "(2, OpenMP, #pragma omp target device); (24, OpenMP, #pragma omp target device (ancestor)); (5, OpenMP, #pragma omp target device (z-argc))); (14, OpenMP, #pragma omp target device (argc), device (argc+1)); (16, OpenMP, #pragma omp target device (-2)); (8, OpenMP, #pragma omp target device (device_num : argc > 0 ? argv[1] : argv[2])); (9, OpenMP, #pragma omp target device (argc: argc + argc)); (16, OpenMP, #pragma omp target device (-10u)); (13, OpenMP, #pragma omp target device (3.14)); (-3, OpenMP, #pragma omp target device (argc); (-6, OpenMP, #pragma omp target device (); (-3, OpenMP, #pragma omp target device (argc:); (-6, OpenMP, #pragma omp target device ())", "label": "(8, OpenMP, #pragma omp target teams device (argc); (5, OpenMP, #pragma omp target teams device ()); (10, OpenMP, #pragma omp target teams device (argc > 0 ? argv[1] : argv[2])); (15, OpenMP, #pragma omp target teams device (S1)); (12, OpenMP, #pragma omp target teams device (argc), device (argc+1)); (15, OpenMP, #pragma omp target teams device (-2)); (8, OpenMP, #pragma omp target teams device (argc + argc + z)); (15, OpenMP, #pragma omp target teams device (-10u)); (2, OpenMP, #pragma omp target teams device (argc))); (-7, OpenMP, #pragma omp target teams device); (14, OpenMP, #pragma omp target teams device (3.14)); (-7, OpenMP, #pragma omp target teams device ()"}
{"predict": "(32, CUDA, checkCudaErrors(cudaMallocHost(&b, N_ROWS * sizeof(double)));); (27, CUDA, int dev = findCudaDevice(argc, (const char **)argv);); (67, CUDA, checkCudaErrors(cudaMalloc(&d_A, sizeof(float) * N_ROWS * N_ROWS));); (100, CUDA, checkCudaErrors(cudaFree(d_x_new));); (98, CUDA, checkCudaErrors(cudaFree(d_A));); (65, CUDA, checkCudaErrors(cudaMalloc(&d_x, sizeof(double) * N_ROWS));); (94, CUDA, checkCudaErrors(cudaFree(d_b));); (95, CUDA, checkCudaErrors(cudaFree(d_x));); (60, CUDA, checkCudaErrors(cudaMalloc(&d_b, sizeof(double) * N_ROWS));); (60, CUDA, checkCudaErrors(cudaMalloc(&d_x_new, sizeof(double) * N_ROWS));); (59, CUDA, checkCudaErrors(cudaStreamCreateWithFlags(&stream1, cudaStreamNonBlocking));); (62, CUDA, checkCudaErrors(cudaMemsetAsync(d_x, 0, sizeof(double) * N_ROWS, stream1));); (21, CUDA, checkCudaErrors(cudaMallocHost(&A, N_ROWS * N_ROWS * sizeof(float)));); (92, CUDA, checkCudaErrors(cudaFreeHost(b));); (90, CUDA, checkCudaErrors(cudaFreeHost(A));)", "label": "(32, CUDA, checkCudaErrors(cudaMallocHost(&b, N_ROWS * sizeof(double)));); (27, CUDA, int dev = findCudaDevice(argc, (const char **)argv);); (67, CUDA, checkCudaErrors(cudaMalloc(&d_A, sizeof(float) * N_ROWS * N_ROWS));); (99, CUDA, checkCudaErrors(cudaFree(d_x_new));); (101, CUDA, checkCudaErrors(cudaFreeHost(b));); (95, CUDA, checkCudaErrors(cudaFree(d_A));); (64, CUDA, checkCudaErrors(cudaMalloc(&d_x, sizeof(double) * N_ROWS));); (92, CUDA, checkCudaErrors(cudaFree(d_b));); (93, CUDA, checkCudaErrors(cudaFree(d_x));); (59, CUDA, checkCudaErrors(cudaMalloc(&d_b, sizeof(double) * N_ROWS));); (57, CUDA, checkCudaErrors(cudaStreamCreateWithFlags(&stream1, cudaStreamNonBlocking));); (60, CUDA, checkCudaErrors(cudaMalloc(&d_x_new, sizeof(double) * N_ROWS));); (61, CUDA, checkCudaErrors(cudaMemsetAsync(d_x, 0, sizeof(double) * N_ROWS, stream1));); (21, CUDA, checkCudaErrors(cudaMallocHost(&A, N_ROWS * N_ROWS * sizeof(float)));); (90, CUDA, checkCudaErrors(cudaFreeHost(A));)"}
{"predict": "(27, OpenMP, #pragma omp single private(i)); (8, OpenMP, #pragma omp single private(); (34, OpenMP, #pragma omp single private(j)); (29, OpenMP, #pragma omp parallel private(i)); (5, OpenMP, #pragma omp single private); (22, OpenMP, #pragma omp single private(h, B::x)); (35, OpenMP, #pragma omp single private(m)); (7, OpenMP, #pragma omp single private(argc); (3, OpenMP, #pragma omp single private()); (7, OpenMP, #pragma omp single private(argc,); (22, OpenMP, #pragma omp single shared(i)); (8, OpenMP, #pragma omp single private(argc > 0 ? argv[1] : argv[2])); (-3, OpenMP, #pragma omp single private(argc); (30, OpenMP, #pragma omp single private(i)); (14, OpenMP, #pragma omp single private(e, g)); (8, OpenMP, #pragma omp single private(argv[1])); (22, OpenMP, #pragma omp parallel); (23, OpenMP, #pragma omp single private(i + i)); (0, OpenMP, #pragma omp single private(argc)); (24, OpenMP, #pragma omp single private)", "label": "(11, OpenMP, #pragma omp single private()); (39, OpenMP, #pragma omp parallel private(i)); (21, OpenMP, #pragma omp single private(a, b)); (16, OpenMP, #pragma omp single private(argc)); (23, OpenMP, #pragma omp single private(e, g)); (2, OpenMP, #pragma omp single private); (19, OpenMP, #pragma omp single private(argv[1])); (26, OpenMP, #pragma omp parallel); (9, OpenMP, #pragma omp single private(argc > 0 ? argv[1] : argv[2])); (20, OpenMP, #pragma omp single private(h, B::x)); (11, OpenMP, #pragma omp single private(S1)); (2, OpenMP, #pragma omp single private(argc); (34, OpenMP, #pragma omp single private(m)); (2, OpenMP, #pragma omp single private(argc,); (27, OpenMP, #pragma omp single private(j)); (16, OpenMP, #pragma omp single shared(i)); (-7, OpenMP, #pragma omp single private(); (22, OpenMP, #pragma omp parallel shared(i)); (18, OpenMP, #pragma omp single private(i))"}
{"predict": "(90, MPI, MPI_Allreduce( &problem, &any_problem, 1, MPI_INT, MPI_LOR, smpi->world() );)", "label": "(96, MPI, MPI_Finalize();); (88, MPI, MPI_Allreduce( &problem, &any_problem, 1, MPI_INT, MPI_LOR, smpi->world() );)"}
{"predict": "(37, OpenMP, #pragma omp target teams distribute parallel for simd is_device_ptr(raa)); (48, OpenMP, #pragma omp target teams distribute parallel for simd is_device_ptr(rh)); (29, OpenMP, #pragma omp target teams distribute parallel for simd is_device_ptr(aa)); (16, OpenMP, #pragma omp target teams distribute parallel for simd is_device_ptr(k)); (39, OpenMP, #pragma omp target teams distribute parallel for simd is_device_ptr(h)); (20, OpenMP, #pragma omp target teams distribute parallel for simd is_device_ptr(z)); (49, OpenMP, #pragma omp target teams distribute parallel for simd is_device_ptr(da))", "label": "(37, OpenMP, #pragma omp target teams distribute parallel for simd is_device_ptr(raa)); (48, OpenMP, #pragma omp target teams distribute parallel for simd is_device_ptr(rh)); (41, OpenMP, #pragma omp target teams distribute parallel for simd is_device_ptr(h)); (28, OpenMP, #pragma omp target teams distribute parallel for simd is_device_ptr(aa)); (51, OpenMP, #pragma omp target teams distribute parallel for simd is_device_ptr(da)); (20, OpenMP, #pragma omp target teams distribute parallel for simd is_device_ptr(z)); (13, OpenMP, #pragma omp target teams distribute parallel for simd is_device_ptr(k))"}
{"predict": "(34, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);)", "label": "(34, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);)"}
{"predict": "(24, MPI, MPI_Send(unzval, lenv, MPI_DOUBLE, receiver, k, grid3d->zscp.comm);)", "label": "(24, MPI, MPI_Send(unzval, lenv, MPI_DOUBLE, receiver, k, grid3d->zscp.comm);)"}
{"predict": "(4, CUDA, __shared__ float4 buffer2[M7H*NUM];); (2, CUDA, __shared__ float4 buffer1[M7W*NDIM/4];)", "label": "(5, CUDA, __shared__ float4 buffer2[M7H*NUM];); (3, CUDA, __shared__ float4 buffer1[M7W*NDIM/4];)"}
{"predict": "(103, CUDA, CUDA_CHECK(cudaStreamSynchronize(stream));); (73, CUDA, CUDA_CHECK(cudaStreamCreate(&stream));); (13, CUDA, CUDA_CHECK(cudaGetDeviceCount(&ndevices));); (13, CUDA, CUDA_CHECK(cudaSetDevice(rank % ndevices));); (0, MPI, MPI_Init(&argc, &argv);); (198, CUDA, CUDA_CHECK(cudaStreamDestroy(stream));); (113, MPI, MPI_Barrier(comm);); (198, MPI, MPI_Finalize();); (1, MPI, MPI_Comm_rank(comm, &rank);); (86, MPI, MPI_Allreduce(&my_io_max, &global_io_max, 1, MPI_UNSIGNED_LONG_LONG, MPI_MAX, comm);); (-2, MPI, MPI_Comm_size(comm, &size);); (93, CUDA, CUDA_CHECK(cudaMemcpy(src, src_host.data(), my_io_max * sizeof(int), cudaMemcpyDefault));); (184, CUDA, CUDA_CHECK(cudaFree(dst));); (92, CUDA, CUDA_CHECK(cudaMemset(dst, 0, my_io_max * sizeof(int)));); (181, CUDA, CUDA_CHECK(cudaFree(src));)", "label": "(15, CUDA, CUDA_CHECK(cudaGetDeviceCount(&ndevices));); (77, CUDA, CUDA_CHECK(cudaStreamCreate(&stream));); (5, MPI, MPI_Comm_size(comm, &size);); (119, CUDA, CUDA_CHECK(cudaStreamSynchronize(stream));); (12, CUDA, CUDA_CHECK(cudaSetDevice(rank % ndevices));); (-3, MPI, MPI_Init(&argc, &argv);); (90, MPI, MPI_Allreduce(&my_io_max, &global_io_max, 1, MPI_UNSIGNED_LONG_LONG, MPI_MAX, comm);); (116, CUDA, CUDA_CHECK(cudaMemcpy(dst_host.data(), dst, dst_host_expected.size() * sizeof(int), cudaMemcpyDefault));); (139, MPI, MPI_Finalize();); (118, CUDA, CUDA_CHECK(cudaStreamDestroy(stream));); (94, CUDA, CUDA_CHECK(cudaMemsetAsync(dst, 0, dst_host_expected.size(), stream));); (92, CUDA, CUDA_CHECK(cudaMemcpyAsync(src, src_host.data(), src_host.size() * sizeof(int), cudaMemcpyDefault, stream));); (-6, MPI, MPI_Comm_rank(comm, &rank);)"}
{"predict": "(11, TBB, tbb::flow::multifunction_node< InputType, OutputType > exe_node( g, lc, cf );); (49, TBB, tbb::flow::remove_edge( tbb::flow::output_port<0>(exe_node), *receivers[r] );); (58, TBB, inc_functor body_copy = tbb::flow::copy_body<inc_functor>( exe_node );); (63, TBB, g.reset(tbb::flow::rf_reset_bodies);); (18, TBB, tbb::flow::make_edge( tbb::flow::output_port<0>(exe_node), *receivers[r] );); (25, TBB, tbb::flow::make_edge( *senders.back(), exe_node );); (-2, TBB, tbb::flow::graph g;); (56, TBB, body_copy = tbb::flow::copy_body<inc_functor>( exe_node );)", "label": "(66, TBB, g.reset(tbb::flow::rf_reset_bodies);); (20, TBB, tbb::flow::make_edge( exe_node, *receivers[r] );); (58, TBB, inc_functor body_copy = tbb::flow::copy_body<inc_functor>( exe_node );); (64, TBB, body_copy = tbb::flow::copy_body<inc_functor>( exe_node );); (1, TBB, tbb::flow::graph g;); (45, TBB, tbb::flow::remove_edge( exe_node, *receivers[r] );); (24, TBB, tbb::flow::make_edge( *senders.back(), exe_node );); (4, TBB, tbb::flow::function_node< InputType, OutputType > exe_node( g, lc, cf );)"}
{"predict": "(23, MPI, MPI_CommSplit(PCUObj->GetMPIComm(), group, self, &groupComm);); (31, MPI, MPI_CommFree(&groupComm);)", "label": "(23, MPI, MPI_Comm_split(expandedPCU->GetMPIComm(), group, groupRank, &groupComm);); (31, MPI, MPI_Comm_free(&groupComm);)"}
{"predict": "(23, CUDA, cudaFree(du_new_dev);)", "label": "(19, CUDA, CudaCheckError();); (23, CUDA, cudaFree(du_new_dev);)"}
{"predict": "(44, OpenCL, clReleaseCommandQueue(queue);); (28, OpenCL, printf( \"clCreateContext() failed with %d\\n\", err );); (81, OpenCL, clReleaseEvent(event);); (84, OpenCL, clReleaseMemObject(bufX);); (31, OpenCL, printf( \"clCreateCommandQueue() failed with %d\\n\", err );); (28, OpenCL, queue = clCreateCommandQueue(ctx, device, 0, &err);); (30, OpenCL, clReleaseContext(ctx);); (20, OpenCL, ctx = clCreateContext(props, 1, &device, NULL, NULL, &err);); (64, OpenCL, err = clWaitForEvents(1, &event);); (77, OpenCL, clReleaseMemObject(bufA);); (79, OpenCL, clReleaseMemObject(bufY);)", "label": "(87, OpenCL, clReleaseMemObject(bufX);); (43, OpenCL, clReleaseCommandQueue(queue);); (27, OpenCL, printf( \"clCreateContext() failed with %d\\n\", err );); (85, OpenCL, clReleaseMemObject(bufA);); (79, OpenCL, clReleaseEvent(event);); (30, OpenCL, printf( \"clCreateCommandQueue() failed with %d\\n\", err );); (27, OpenCL, queue = clCreateCommandQueue(ctx, device, 0, &err);); (29, OpenCL, clReleaseContext(ctx);); (78, OpenCL, clReleaseMemObject(bufY);); (18, OpenCL, ctx = clCreateContext(props, 1, &device, NULL, NULL, &err);); (63, OpenCL, err = clWaitForEvents(1, &event);)"}
{"predict": "(47, OpenMP, #pragma omp master taskloop simd nogroup grainsize(argc) simdlen(4)); (24, OpenMP, #pragma omp master taskloop simd priority(argc)); (111, OpenMP, #pragma omp master taskloop simd if(argc) shared(argc, argv) collapse(2) num_tasks(4) safelen(32)); (28, OpenMP, #pragma omp master taskloop simd priority(argc) dynamic)", "label": "(4, OpenMP, #pragma omp task); (25, OpenMP, #pragma omp master taskloop priority(argc)); (46, OpenMP, #pragma omp master taskloop); (71, OpenMP, #pragma omp master taskloop if(argc) shared(argc, argv) collapse(2) num_tasks(4)); (87, OpenMP, #pragma omp cancel taskgroup); (87, OpenMP, #pragma omp cancellation point taskgroup)"}
{"predict": "(68, CUDA, cudaFree(B);); (54, CUDA, cudaEventRecord(stop);); (54, CUDA, cudaEventSynchronize(stop);); (66, CUDA, cudaFree(C);); (44, CUDA, cudaEventRecord(start);); (30, CUDA, cudaGetDeviceCount(&num_of_total_devices);); (19, CUDA, cudaEventCreate(&stop);); (53, CUDA, cudaEventElapsedTime(&elapsedTime, start, stop);); (16, CUDA, cudaEventCreate(&start);); (58, CUDA, cudaFree(A);)", "label": "(67, CUDA, cudaFree(B);); (54, CUDA, cudaEventRecord(stop);); (54, CUDA, cudaEventSynchronize(stop);); (65, CUDA, cudaFree(C);); (44, CUDA, cudaEventRecord(start);); (29, CUDA, cudaGetDeviceCount(&num_of_total_devices);); (18, CUDA, cudaEventCreate(&stop);); (53, CUDA, cudaEventElapsedTime(&elapsedTime, start, stop);); (15, CUDA, cudaEventCreate(&start);); (57, CUDA, cudaFree(A);)"}
{"predict": "(11, CUDA, cudaMalloc((void**)(&d_out), out_bytes);); (9, CUDA, cudaMalloc((void**)(&d_in1), in1_bytes);); (11, CUDA, cudaMemcpy(d_in1, in1.data(), in1_bytes, cudaMemcpyHostToDevice);); (31, CUDA, cudaFree(d_out);); (23, CUDA, assert(cudaStreamSynchronize(gpu_device.stream()) == cudaSuccess);); (28, CUDA, cudaFree(d_in1);)", "label": "(11, CUDA, cudaMalloc((void**)(&d_out), out_bytes);); (9, CUDA, cudaMalloc((void**)(&d_in1), in1_bytes);); (11, CUDA, cudaMemcpy(d_in1, in1.data(), in1_bytes, cudaMemcpyHostToDevice);); (31, CUDA, cudaFree(d_out);); (23, CUDA, assert(cudaStreamSynchronize(gpu_device.stream()) == cudaSuccess);); (28, CUDA, cudaFree(d_in1);)"}
{"predict": "(7, OpenMP, #pragma omp parallel master taskloop simd linear (); (16, OpenMP, #pragma omp parallel master taskloop simd linear (S1)); (22, OpenMP, #pragma omp parallel master taskloop simd linear (argv[1])); (29, OpenMP, #pragma omp parallel master taskloop simd linear(ref(e, g))); (34, OpenMP, #pragma omp parallel master taskloop simd linear(uval(j))); (23, OpenMP, #pragma omp parallel master taskloop simd linear(h, z)); (8, OpenMP, #pragma omp parallel master taskloop simd linear (argc,); (15, OpenMP, #pragma omp parallel master taskloop simd linear (argc : 5) allocate , allocate(, allocate(omp_default , allocate(omp_default_mem_alloc, allocate(omp_default_mem_alloc:, allocate(omp_default_mem_alloc: argc, allocate(omp_default_mem_alloc: argv), allocate(argv)); (19, OpenMP, #pragma omp parallel master taskloop simd linear (a, b:B::ib)); (25, OpenMP, #pragma omp parallel master taskloop simd linear(val(i))); (-2, OpenMP, #pragma omp parallel); (30, OpenMP, #pragma omp parallel master taskloop simd linear(ref(j))); (-3, OpenMP, #pragma omp parallel master taskloop simd linear); (5, OpenMP, #pragma omp parallel master taskloop simd linear (argc > 0 ? argv[1] : argv[2])); (24, OpenMP, #pragma omp parallel master taskloop simd linear(v:j)); (6, OpenMP, #pragma omp parallel master taskloop simd linear (argc :); (31, OpenMP, #pragma omp parallel master taskloop simd linear(i))", "label": "(17, OpenMP, #pragma omp parallel for simd linear (argc : 5) allocate , allocate(, allocate(omp_default , allocate(omp_default_mem_alloc, allocate(omp_default_mem_alloc:, allocate(omp_default_mem_alloc: argc, allocate(omp_default_mem_alloc: argv), allocate(argv)); (39, OpenMP, #pragma omp parallel for simd linear(j)); (41, OpenMP, #pragma omp parallel for simd linear(v:j)); (34, OpenMP, #pragma omp parallel for simd linear(v:i)); (27, OpenMP, #pragma omp parallel for simd linear(i, z)); (4, OpenMP, #pragma omp parallel for simd linear ()); (13, OpenMP, #pragma omp parallel for simd linear (S1)); (6, OpenMP, #pragma omp parallel for simd linear (argc,); (-3, OpenMP, #pragma omp parallel); (36, OpenMP, #pragma omp parallel for simd linear(i)); (17, OpenMP, #pragma omp parallel for simd linear(e, g)); (12, OpenMP, #pragma omp parallel for simd linear (a, b:B::ib)); (-1, OpenMP, #pragma omp parallel for simd linear (argc); (12, OpenMP, #pragma omp parallel for simd linear (argv[1])); (15, OpenMP, #pragma omp parallel for simd linear(h)); (-8, OpenMP, #pragma omp parallel for simd linear (); (-1, OpenMP, #pragma omp parallel for simd linear (argc > 0 ? argv[1] : argv[2]))"}
{"predict": "(8, OpenMP, #pragma omp parallel for schedule (static) if(n>OMP_LIMIT_COMPUTESTEP))", "label": "(8, OpenMP, #pragma omp parallel for schedule (guided))"}
{"predict": "(9, SYCL, sycl::queue q = get_queue();); (36, SYCL, sycl::free(data, q);); (8, SYCL, int* data = sycl::malloc_device<int>(1,q);)", "label": "(9, SYCL, sycl::queue q = get_queue();); (36, SYCL, sycl::free(data, q);); (8, SYCL, int* data = sycl::malloc_device<int>(1,q);)"}
{"predict": "(4, CUDA, cudaGetDeviceCount( &count );); (6, CUDA, cudaGetDeviceProperties( &prop, i );)", "label": "(6, CUDA, HANDLE_ERROR( cudaGetDeviceProperties( &prop, i ) );); (3, CUDA, HANDLE_ERROR( cudaGetDeviceCount( &count ) );)"}
{"predict": "(49, MPI, MPI_Allreduce(MPI_IN_PLACE,&n,1,mpi_int_t,MPI_MAX,grid->comm);); (47, MPI, MPI_Allreduce(MPI_IN_PLACE,&nnzL,1,mpi_int_t,MPI_SUM,grid->comm);)", "label": "(49, MPI, MPI_Allreduce(MPI_IN_PLACE,&n,1,mpi_int_t,MPI_MAX,grid->comm);); (47, MPI, MPI_Allreduce(MPI_IN_PLACE,&nnzL,1,mpi_int_t,MPI_SUM,grid->comm);)"}
{"predict": "(17, MPI, MPI_Comm_size(MPI_COMM_WORLD,&totpes);); (39, MPI, MPI_Cart_create(MPI_COMM_WORLD,3,numpes,isperiodic,reorder,&comm_cart);); (39, MPI, MPI_Comm_rank(comm_cart,&mype);); (19, MPI, MPI_Finalize();); (14, MPI, MPI_Comm_rank(MPI_COMM_WORLD,&rank);); (72, MPI, MPI_Barrier(comm_cart);); (36, MPI, MPI_Cart_coords(comm_cart,mype,3,pe_coords);); (94, MPI, MPI_Allreduce(rates_l,rates_g,4,MPI_DOUBLE,MPI_MIN,comm_cart);); (31, MPI, MPI_Dims_create(totpes,3,numpes);); (18, MPI, MPI_Bcast(filename, 256, MPI_CHAR, 0, MPI_COMM_WORLD);); (114, MPI, MPI_Allreduce(MPI_IN_PLACE, &nerrs, 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);); (4, MPI, MPI_Init(&argc,&argv);); (101, MPI, MPI_Comm_free(&comm_cart);); (105, MPI, MPI_Reduce(&malloc_size, &sum_size, 1, MPI_OFFSET, MPI_SUM, 0, MPI_COMM_WORLD);)", "label": "(17, MPI, MPI_Comm_size(MPI_COMM_WORLD,&totpes);); (39, MPI, MPI_Cart_create(MPI_COMM_WORLD,3,numpes,isperiodic,reorder,&comm_cart);); (39, MPI, MPI_Comm_rank(comm_cart,&mype);); (19, MPI, MPI_Finalize();); (14, MPI, MPI_Comm_rank(MPI_COMM_WORLD,&rank);); (72, MPI, MPI_Barrier(comm_cart);); (36, MPI, MPI_Cart_coords(comm_cart,mype,3,pe_coords);); (94, MPI, MPI_Allreduce(t, t_g, 20, MPI_DOUBLE, MPI_MAX, comm_cart);); (31, MPI, MPI_Dims_create(totpes,3,numpes);); (18, MPI, MPI_Bcast(filename, 256, MPI_CHAR, 0, MPI_COMM_WORLD);); (115, MPI, MPI_Allreduce(MPI_IN_PLACE, &nerrs, 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);); (5, MPI, MPI_Init(&argc,&argv);); (102, MPI, MPI_Comm_free(&comm_cart);); (87, MPI, MPI_Allreduce(rates_l, rates_g, 4, MPI_DOUBLE, MPI_MIN, comm_cart);); (105, MPI, MPI_Reduce(&malloc_size, &sum_size, 1, MPI_OFFSET, MPI_SUM, 0, MPI_COMM_WORLD);)"}
{"predict": "(10, TBB, tbb::flow::make_edge( lim, r );); (22, TBB, tbb::flow::limiter_node< T > lim_copy( lim );); (3, TBB, tbb::flow::graph g;); (3, TBB, tbb::flow::limiter_node< T > lim(g, i);); (4, TBB, tbb::atomic<int> accept_count;)", "label": "(10, TBB, tbb::flow::make_edge( lim, r );); (22, TBB, tbb::flow::limiter_node< T > lim_copy( lim );); (3, TBB, tbb::flow::graph g;); (3, TBB, tbb::flow::limiter_node< T > lim(g, i);); (4, TBB, tbb::atomic<int> accept_count;)"}
{"predict": "(13, OpenMP, #pragma omp loop); (19, OpenMP, #pragma omp parallel for reduction(+ : fail)); (25, OpenMP, #pragma omp loop order(concurrent))", "label": "(15, OpenMP, #pragma omp loop); (19, OpenMP, #pragma omp target teams distribute parallel for map(MTX) reduction(*:EMTX)); (11, OpenMP, #pragma omp target teams loop map(MTX) reduction(*:MTX))"}
{"predict": "(67, TBB, tbb::task_group tg;)", "label": "(67, TBB, tbb::task_group tg;)"}
{"predict": "(27, OpenMP, #pragma omp atomic capture); (8, OpenMP, #pragma omp parallel); (4, OpenMP, #pragma omp target map(tofrom:counts1)); (22, OpenMP, #pragma omp target teams map(tofrom:counts2)); (4, OpenMP, #pragma omp atomic)", "label": "(26, OpenMP, #pragma omp for reduction(+:counts_team)); (8, OpenMP, #pragma omp for); (15, OpenMP, #pragma omp target teams map(from:counts2)); (4, OpenMP, #pragma omp parallel); (0, OpenMP, #pragma omp target teams map(from:counts1)); (17, OpenMP, #pragma omp allocate(counts_team) allocator(omp_pteam_mem_alloc))"}
{"predict": "(116, MPI, MPI_Type_commit(&mpi_word);); (123, MPI, MPI_Allgather(iterstring,1,mpi_word, catstring,1,mpi_word, MPI_COMM_WORLD);); (155, MPI, MPI_Finalize();); (65, MPI, MPI_Bcast(&iterations, 1, MPI_INT, root, MPI_COMM_WORLD);); (110, MPI, MPI_Type_contiguous(proc_length,MPI_CHAR, &mpi_word);); (18, MPI, MPI_Init(&argc,&argv);); (62, MPI, MPI_Bcast(&length,     1, MPI_LONG, root, MPI_COMM_WORLD);); (111, MPI, MPI_Barrier(MPI_COMM_WORLD);); (17, MPI, MPI_Comm_size(MPI_COMM_WORLD, &Num_procs);); (15, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &my_ID);)", "label": "(115, MPI, MPI_Type_commit(&mpi_word);); (122, MPI, MPI_Allgather(iterstring,1,mpi_word, catstring,1,mpi_word, MPI_COMM_WORLD);); (154, MPI, MPI_Finalize();); (63, MPI, MPI_Bcast(&iterations, 1, MPI_INT, root, MPI_COMM_WORLD);); (110, MPI, MPI_Type_contiguous(proc_length,MPI_CHAR, &mpi_word);); (17, MPI, MPI_Init(&argc,&argv);); (61, MPI, MPI_Bcast(&length,     1, MPI_LONG, root, MPI_COMM_WORLD);); (110, MPI, MPI_Barrier(MPI_COMM_WORLD);); (16, MPI, MPI_Comm_size(MPI_COMM_WORLD, &Num_procs);); (14, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &my_ID);)"}
{"predict": "(13, MPI, MPI_Allreduce(MPI_IN_PLACE,data,n*sizeof(bool),MPI_C_BOOL,MPI_LAND,ADDA_COMM_WORLD);); (9, MPI, MPI_Barrier(ADDA_COMM_WORLD);)", "label": "(10, MPI, MPI_Barrier(MPI_COMM_WORLD);); (12, MPI, MPI_Allreduce(data,gr_comm_buf,n,mpi_bool,MPI_LAND,MPI_COMM_WORLD);)"}
{"predict": "(16, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);)", "label": "(16, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);)"}
{"predict": "(18, TBB, tbb::flow::buffer_node<int> buffer2(g);); (18, TBB, tbb::flow::buffer_node<int> buffer3(g);); (37, TBB, tbb::flow::make_edge(buffer2, tbb::flow::input_port<1>(join_node));); (37, TBB, tbb::flow::make_edge(buffer3, tbb::flow::input_port<2>(join_node));); (14, TBB, tbb::flow::buffer_node<int> buffer1(g);); (34, TBB, tbb::flow::make_edge(buffer1, tbb::flow::input_port<0>(join_node));); (36, TBB, tbb::flow::make_edge(join_node, function);); (-3, TBB, tbb::task_arena arena(1);); (5, TBB, tbb::flow::join_node<tuple_type, tbb::flow::reserving> join_node(g);); (-4, TBB, tbb::flow::graph g;)", "label": "(42, TBB, tbb::flow::make_edge(buffer2, tbb::flow::input_port<1>(join));); (43, TBB, tbb::flow::make_edge(join, function);); (19, TBB, tbb::flow::join_node<tuple_type, tbb::flow::reserving> join(g);); (38, TBB, tbb::flow::make_edge(buffer1, tbb::flow::input_port<0>(join));); (-3, TBB, tbb::task_arena arena(1);); (-1, TBB, tbb::flow::graph g;); (11, TBB, tbb::flow::queue_node<int> buffer1(g);); (12, TBB, tbb::flow::queue_node<int> buffer3(g);); (35, TBB, tbb::flow::make_edge(buffer3, tbb::flow::input_port<2>(join));); (9, TBB, tbb::flow::queue_node<int> buffer2(g);)"}
{"predict": "(6, MPI, MPI_Init(&argc, &argv);); (49, MPI, MPI_Finalize();); (5, MPI, MPI_Comm_size(MPI_COMM_WORLD, &ntasks);); (5, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (44, MPI, MPI_Recv(&localpi, 1, MPI_DOUBLE, i, 22, MPI_COMM_WORLD, &status);); (35, MPI, MPI_Send(&localpi, 1, MPI_DOUBLE, 0, 22, MPI_COMM_WORLD);)", "label": "(42, MPI, MPI_Recv(&localpi, 1, MPI_DOUBLE, MPI_ANY_SOURCE, 0, MPI_COMM_WORLD, &status);); (47, MPI, MPI_Send(&localpi, 1, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD);); (4, MPI, MPI_Init(&argc, &argv);); (48, MPI, MPI_Finalize();); (3, MPI, MPI_Comm_size(MPI_COMM_WORLD, &ntasks);); (3, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);)"}
{"predict": "(13, CUDA, CP_host->freeCudaMem();)", "label": "(13, CUDA, CP_host->freeCudaMem();)"}
{"predict": "(14, TBB, ASSERT( GetSseMode() == sse_mode, NULL );)", "label": "(12, TBB, tbb::parallel_for( 0, N, 1, RoundingModeCheckBody(mode, sse_mode) );); (10, TBB, tbb::task_scheduler_init init;)"}
{"predict": "(18, OpenMP, varLimit[i] = omp_get_var_limit(1024);); (12, OpenMP, #pragma omp target teams distribute thread_limit(27)); (43, OpenMP, constLimitHuge[i] = omp_get_const_limit(1024);); (25, OpenMP, varLimitHuge[i] = omp_get_var_limit(1024);); (33, OpenMP, constLimit[i] = omp_get_const_limit(256);); (11, OpenMP, #pragma omp target teams distribute thread_limit(1024)); (39, OpenMP, omp_get_const_limit(1024);); (14, OpenMP, omp_get_var_limit(1024);)", "label": "(13, OpenMP, fprintf(stderr, \"#pragma omp target teams distribute thread_limit(thdLim) 27\\n\");); (43, OpenMP, #pragma omp target teams distribute thread_limit(1024)); (22, OpenMP, fprintf(stderr, \"#pragma omp target teams distribute thread_limit(thdLim) 1024\\n\");); (31, OpenMP, #pragma omp target teams distribute thread_limit(27)); (34, OpenMP, constLimit[i] = omp_get_num_threads();); (9, OpenMP, #pragma omp target teams distribute thread_limit(thdLim)); (42, OpenMP, constLimitHuge[i] = omp_get_num_threads();); (21, OpenMP, varLimitHuge[i] = omp_get_num_threads();); (9, OpenMP, varLimit[i] = omp_get_num_threads();)"}
{"predict": "(49, CUDA, cudaFreeHost( foutHost );); (47, CUDA, cudaFreeArray( array );)", "label": "(50, CUDA, cudaFreeHost( foutHost );); (27, CUDA, CUDART_CHECK(surf1Dmemset( array, 3.141592654f, 0, NUM_VALUES ));)"}
{"predict": "(72, OpenMP, #pragma omp target data map(h_x [0:nconf * numatm], h_y [0:nconf * numatm], h_z [0:nconf * numatm], h_g2 [0:nbin]))", "label": "(72, OpenMP, #pragma omp target data map(h_x [0:nconf * numatm], h_y [0:nconf * numatm], h_z [0:nconf * numatm], h_g2 [0:nbin]))"}
{"predict": "(6, OpenMP, #pragma omp parallel for)", "label": "(6, OpenMP, #pragma omp parallel for)"}
{"predict": "(3, SYCL, int* data = sycl::malloc_shared<int>(7, q);); (2, SYCL, sycl::queue q = get_queue();); (17, SYCL, hipsycl::rt::runtime_keep_alive_token rt;); (67, SYCL, sycl::free(data, q);)", "label": "(4, SYCL, int* data = sycl::malloc_shared<int>(7, q);); (19, SYCL, hipsycl::rt::runtime_keep_alive_token rt;); (1, SYCL, sycl::queue q = get_queue();); (67, SYCL, sycl::free(data, q);)"}
{"predict": "(28, MPI, MPI_Gather( vecin, 1, vec, vecout, n, MPI_DOUBLE, root, MPI_COMM_WORLD );); (44, MPI, MPI_Gather( NULL, 0, MPI_BYTE, NULL, 0, MPI_BYTE, 0, MPI_COMM_WORLD );); (9, MPI, MPI_Comm_size( comm, &size );); (19, MPI, MPI_Type_vector( n, 1, stride, MPI_DOUBLE, &vec );); (8, MPI, MPI_Comm_rank( comm, &rank );); (37, MPI, MPI_Type_free( &vec );); (17, MPI, MPI_Type_commit( &vec );)", "label": "(13, MPI, MPI_Comm_size( comm, &size );); (22, MPI, MPI_Type_commit( &vec );); (26, MPI, MPI_Gather( vecin, 1, vec, vecout, n, MPI_DOUBLE, root, comm );); (46, MPI, MPI_Finalize();); (5, MPI, MPI_Init( &argc, &argv );); (35, MPI, MPI_Type_free( &vec );); (6, MPI, MPI_Comm_rank( comm, &rank );); (15, MPI, MPI_Type_vector( n, 1, stride, MPI_DOUBLE, &vec );); (39, MPI, MPI_Gather( NULL, 0, MPI_BYTE, NULL, 0, MPI_BYTE, 0, MPI_COMM_WORLD );)"}
{"predict": "(15, MPI, MPI_Init(&argc, &argv);); (38, MPI, MPI_Finalize();); (14, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (12, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (14, MPI, MPI_Dims_create(size, NR_DIMS, dims);); (27, MPI, MPI_Barrier(MPI_COMM_WORLD);); (30, MPI, MPI_Allreduce(&sum, &avg, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);); (17, MPI, MPI_Cart_coords(cart_comm, rank, NR_DIMS, cart_coords);); (34, MPI, MPI_Comm_free(&cart_comm);); (11, MPI, MPI_Abort(MPI_COMM_WORLD, 1);)", "label": "(34, OpenMP, #pragma omp for reduction(+:sum)); (32, OpenMP, printf(\"rank %d:%d has %d threads\\n\", rank, thread_num, omp_get_num_threads());); (11, MPI, MPI_Init(&argc, &argv);); (42, MPI, MPI_Finalize();); (26, OpenMP, #pragma omp parallel); (36, MPI, MPI_Reduce(&sum, &avg, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);); (8, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (25, OpenMP, int thread_num = omp_get_thread_num();); (7, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (7, MPI, MPI_Dims_create(size, NR_DIMS, dims);); (13, MPI, MPI_Cart_coords(cart_comm, rank, NR_DIMS, cart_coords);); (10, MPI, MPI_Abort(MPI_COMM_WORLD, 1);)"}
{"predict": "(7, OpenCL, clReleaseKernel_ExpectAndReturn(make_kernel(0), CL_SUCCESS);)", "label": "(8, OpenCL, clReleaseKernel_ExpectAndReturn(make_kernel(0), CL_SUCCESS);); (6, OpenCL, clReleaseDevice_ExpectAndReturn(make_device_id(0), CL_SUCCESS);)"}
{"predict": "(40, CUDA, CUDA_SAFE_CALL(cudaFree(x.data()));); (38, CUDA, CUDA_SAFE_CALL(cudaFree(A.data()));); (36, CUDA, CUDA_SAFE_CALL(cudaDeviceSynchronize());); (38, CUDA, CUDA_SAFE_CALL(cudaFree(y.data()));)", "label": "(40, CUDA, CUDA_SAFE_CALL(cudaFree(x.data()));); (38, CUDA, CUDA_SAFE_CALL(cudaFree(A.data()));); (36, CUDA, CUDA_SAFE_CALL(cudaDeviceSynchronize());); (38, CUDA, CUDA_SAFE_CALL(cudaFree(y.data()));)"}
{"predict": "(22, MPI, *w = MPI_Wtime();)", "label": "(22, MPI, *w = MPI_Wtime();)"}
{"predict": "(2, CUDA, extern __shared__ half hs[][256];)", "label": "(2, CUDA, extern __shared__ half  hs[][256];)"}
{"predict": "(7, TBB, tbb::task_scheduler_init init( p );)", "label": "(7, TBB, tbb::task_scheduler_init init( p );)"}
{"predict": "(13, CUDA, CUDASimulation cudaSimulation(model);)", "label": "(13, CUDA, CUDASimulation cudaSimulation(model);)"}
{"predict": "(21, MPI, MPI_Comm_rank(shm_comm, &shm_rank);); (18, MPI, MPI_Comm_split_type(MPI_COMM_WORLD, MPI_COMM_TYPE_SHARED, rank, MPI_INFO_NULL, &shm_comm);); (11, MPI, MPI_Comm_size(MPI_COMM_WORLD, &nproc);); (9, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (61, MPI, MPI_Free_mem(base);); (38, MPI, MPI_Win_lock_all(MPI_MODE_NOCHECK, shm_win);); (58, MPI, MPI_Win_unlock_all(shm_win);); (59, MPI, MPI_Win_free(&shm_win);); (56, MPI, MPI_Comm_free(&shm_comm);); (16, MPI, MPI_Alloc_mem(sizeof(int) * ELEM_PER_PROC, MPI_INFO_NULL, &base);); (22, MPI, MPI_Win_shared_query(shm_win, MPI_PROC_NULL, &size, &disp_unit, &base);); (12, MPI, MPI_Comm_size(shm_comm, &shm_nproc);); (34, MPI, MPI_Barrier(shm_comm);); (39, MPI, MPI_Win_sync(shm_win);)", "label": "(18, MPI, MPI_Comm_rank(shm_comm, &shm_rank);); (41, MPI, MPI_Win_lock_all(MPI_MODE_NOCHECK, shm_win);); (24, MPI, MPI_Win_shared_query(shm_win, MPI_PROC_NULL, &size, &disp_unit, &base);); (13, MPI, MPI_Comm_split_type(MPI_COMM_WORLD, MPI_COMM_TYPE_SHARED, rank, MPI_INFO_NULL, &shm_comm);); (10, MPI, MPI_Comm_size(MPI_COMM_WORLD, &nproc);); (8, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (58, MPI, MPI_Win_unlock_all(shm_win);); (58, MPI, MPI_Win_free(&shm_win);); (58, MPI, MPI_Comm_free(&shm_comm);); (10, MPI, MPI_Comm_size(shm_comm, &shm_nproc);); (40, MPI, MPI_Barrier(shm_comm);); (38, MPI, MPI_Win_sync(shm_win);)"}
{"predict": "(67, CUDA, CUDA_CHECK_AND_EXIT(cudaFree(b));); (51, CUDA, CUDA_CHECK_AND_EXIT(cudaMemcpy(a, host_a.data(), global_a_size * sizeof(TA), cudaMemcpyDefault));); (38, CUDA, CUDA_CHECK_AND_EXIT(cudaMallocManaged(&b, global_b_size * sizeof(TB)));); (36, CUDA, CUDA_CHECK_AND_EXIT(cudaMallocManaged(&a, global_a_size * sizeof(TA)));); (52, CUDA, CUDA_CHECK_AND_EXIT(cudaDeviceSynchronize());); (63, CUDA, CUDA_CHECK_AND_EXIT(cudaFree(a));); (47, CUDA, CUDA_CHECK_AND_EXIT(cudaMemcpy(c, host_c.data(), global_c_size * sizeof(TC), cudaMemcpyDefault));); (34, CUDA, CUDA_CHECK_AND_EXIT(cudaMallocManaged(&c, global_c_size * sizeof(TC)));); (57, CUDA, CUDA_CHECK_AND_EXIT(cudaMemcpy(host_output.data(), c, global_c_size * sizeof(TC), cudaMemcpyDefault));); (43, CUDA, CUDA_CHECK_AND_EXIT(cudaMemcpy(b, host_b.data(), global_b_size * sizeof(TB), cudaMemcpyDefault));); (59, CUDA, CUDA_CHECK_AND_EXIT(cudaFree(c));)", "label": "(41, CUDA, CUDA_CHECK_AND_EXIT(cudaMallocManaged(&b, global_b_size * sizeof(TB)));); (71, CUDA, CUDA_CHECK_AND_EXIT(cudaFree(c));); (68, CUDA, CUDA_CHECK_AND_EXIT(cudaFree(a));); (37, CUDA, CUDA_CHECK_AND_EXIT(cudaMallocManaged(&a, global_a_size * sizeof(TA)));); (47, CUDA, CUDA_CHECK_AND_EXIT(cudaMemcpy(a, host_a.data(), global_a_size * sizeof(TA), cudaMemcpyHostToDevice));); (49, CUDA, CUDA_CHECK_AND_EXIT(cudaDeviceSynchronize());); (47, CUDA, CUDA_CHECK_AND_EXIT(cudaMemcpy(c, host_c.data(), global_a_size * sizeof(TC), cudaMemcpyHostToDevice));); (45, CUDA, CUDA_CHECK_AND_EXIT(cudaMemcpy(b, host_b.data(), global_a_size * sizeof(TB), cudaMemcpyHostToDevice));); (58, CUDA, CUDA_CHECK_AND_EXIT(cudaMemcpy(host_output.data(), c, global_c_size * sizeof(TC), cudaMemcpyDeviceToHost));); (33, CUDA, CUDA_CHECK_AND_EXIT(cudaMallocManaged(&c, global_c_size * sizeof(TC)));); (61, CUDA, CUDA_CHECK_AND_EXIT(cudaFree(b));)"}
{"predict": "(65, CUDA, cudaFree( ddata );)", "label": "(62, CUDA, cudaFree( ddata );)"}
{"predict": "(10, CUDA, cudaStreamSynchronize(LU_v1->A_gpu.cuStreams[0]);)", "label": "(10, CUDA, cudaStreamSynchronize(LU_v1->A_gpu.cuStreams[0]);)"}
{"predict": "(2, OpenMP, omp_autotune(self, OMP_SCALE);)", "label": "(2, OpenMP, omp_autotune(self, OMP_SCALE);)"}
{"predict": "(15, CUDA, cudaMalloc((void**)&dB_buff, sizeof(float**) * batch_num);); (17, CUDA, cudaMemcpy(dC_buff, C_buff, sizeof(float*) * batch_num, cudaMemcpyHostToDevice);); (27, CUDA, cudaFree(dA_buff);); (12, CUDA, cudaMalloc((void**)&dC_buff, sizeof(float**) * batch_num);); (26, CUDA, cudaFree(dB_buff);); (12, CUDA, cudaMemcpy(dA_buff, A_buff, sizeof(float*) * batch_num, cudaMemcpyHostToDevice);); (25, CUDA, cudaFree(dC_buff);); (8, CUDA, cudaMalloc((void**)&dA_buff, sizeof(float**) * batch_num);)", "label": "(18, CUDA, cudaMemcpy(dB_buff, B_buff, sizeof(float*) * batch_num, cudaMemcpyHostToDevice);); (12, CUDA, cudaMalloc(&dA_buff, sizeof(float*) * batch_num);); (31, CUDA, cudaFree(dC_buff);); (29, CUDA, cudaFree(dB_buff);); (27, CUDA, cudaFree(dA_buff);); (12, CUDA, cudaMemcpy(dA_buff, A_buff, sizeof(float*) * batch_num, cudaMemcpyHostToDevice);); (8, CUDA, cudaMalloc(&dB_buff, sizeof(float*) * batch_num);); (12, CUDA, cudaMemcpy(dC_buff, C_buff, sizeof(float*) * batch_num, cudaMemcpyHostToDevice);); (7, CUDA, cudaMalloc(&dC_buff, sizeof(float*) * batch_num);)"}
{"predict": "(12, CUDA, cudaFree(buffer_fp32);); (5, CUDA, cudaMalloc(&buffer, length * sizeof(T));); (5, CUDA, cudaMalloc(&buffer_fp32, length * sizeof(float));)", "label": "(7, CUDA, cudaMalloc((void **)&buffer_fp32, length * sizeof(float));); (9, CUDA, cudaMalloc((void **)&buffer, length * sizeof(T));); (10, CUDA, cudaFree(buffer_fp32);)"}
{"predict": "(23, OpenMP, #pragma omp teams distribute parallel for if(cond) firstprivate(fp) reduction(+:rd)); (15, OpenMP, #pragma omp target)", "label": "(16, OpenMP, #pragma omp target); (22, OpenMP, #pragma omp teams distribute parallel for if(cond) firstprivate(fp) reduction(+:rd))"}
{"predict": "(19, CUDA, cudaMemcpy(resf,dat,sizeof(unsigned)*2,cudaMemcpyDeviceToHost);)", "label": "(19, CUDA, cudaMemcpy(resf,dat,sizeof(unsigned)*2,cudaMemcpyDeviceToHost);)"}
{"predict": "(51, CUDA, cudaFreeArray( texArray );); (28, CUDA, CUDART_CHECK(tex2D_time( &ms, texArray, 3.141592654f, threadWidth, threadHeight ));)", "label": "(29, CUDA, CUDART_CHECK(surf2DmemsetArray_time( &ms, texArray, 3.141592654f, threadWidth, threadHeight ));); (50, CUDA, cudaFreeArray( texArray );)"}
{"predict": "(107, CUDA, printf(\"cudaGetDeviceProperties returned %d\\n-> %s\\n\", (int)error_id, cudaGetErrorString(error_id));); (56, CUDA, cudaError_t error_id = cudaGetDeviceCount(&deviceCount);); (100, CUDA, checkCudaErrors(cudaSetDevice(currentDevice));); (89, CUDA, cudaError_t error_id = cudaGetDeviceProperties(&deviceProp, currentDevice);); (97, CUDA, printf(\"cudaSetDevice returned %d\\n-> %s\\n\", (int)error_id, cudaGetErrorString(error_id));)", "label": "(267, CUDA, cudaSetDevice(nDevice);); (108, CUDA, printf(\"cudaGetDeviceProperties returned %d\\n-> %s\\n\", (int)error_id, cudaGetErrorString(error_id));); (54, CUDA, cudaError_t error_id = cudaGetDeviceCount(&deviceCount);); (98, CUDA, fprintf(stderr, \"Error: device is running in <Compute Mode Prohibited>, no threads can use ::cudaSetDevice().\\n\");); (56, CUDA, printf(\"cudaGetDeviceCount returned %d\\n-> %s\\n\", (int)error_id, cudaGetErrorString(error_id));); (88, CUDA, cudaError_t error_id = cudaGetDeviceProperties(&deviceProp, currentDevice);); (96, CUDA, checkCudaErrors(cudaSetDevice(currentDevice));)"}
{"predict": "(6, CUDA, extern __shared__ float cache[];)", "label": "(5, CUDA, extern __shared__ float cache[];)"}
{"predict": "(16, OpenMP, int id = omp_get_thread_num();); (12, OpenMP, #pragma omp parallel); (20, OpenMP, check1[id] += omp_get_num_threads() + omp_in_parallel();); (6, OpenMP, #pragma omp target map(inParallel, numThreads, threadNum, check1[:], check2[:])); (15, OpenMP, check2[id] += omp_get_num_threads() + omp_in_parallel();); (74, OpenMP, #pragma omp atomic); (6, OpenMP, inParallel = omp_in_parallel();); (6, OpenMP, numThreads = omp_get_num_threads();); (6, OpenMP, threadNum = omp_get_thread_num();)", "label": "(77, OpenMP, #pragma omp parallel num_threads(NumThreads1)); (14, OpenMP, #pragma omp parallel); (26, OpenMP, int nestedThreadNum = omp_get_thread_num();); (7, OpenMP, inParallel = omp_in_parallel();); (22, OpenMP, int nestedNumThreads = omp_get_num_threads();); (19, OpenMP, int nestedInParallel = omp_in_parallel();); (12, OpenMP, check1[id] += omp_get_num_threads() + omp_in_parallel();); (4, OpenMP, numThreads = omp_get_num_threads();); (21, OpenMP, #pragma omp atomic); (3, OpenMP, threadNum = omp_get_thread_num();); (-2, OpenMP, #pragma omp target map(inParallel, numThreads, threadNum, check1[:], check2[:])); (6, OpenMP, int id = omp_get_thread_num();)"}
{"predict": "(11, CUDA, float *dptr = thrust::raw_pointer_cast(&dsums[0]);); (15, CUDA, double gpu_sum = thrust::reduce(dsums.begin(),dsums.end());); (9, CUDA, thrust::device_vector<float> dsums(steps);)", "label": "(11, CUDA, float *dptr = thrust::raw_pointer_cast(&dsums[0]);); (14, CUDA, double gpu_sum = thrust::reduce(dsums.begin(),dsums.end());); (8, CUDA, thrust::device_vector<float> dsums(steps);)"}
{"predict": "(27, OpenMP, #pragma omp parallel for)", "label": "(12, OpenMP, #pragma omp parallel for)"}
{"predict": "(12, TBB, my_thread_array = tbb::cache_aligned_allocator<padded_private_worker>().allocate( my_n_thread );)", "label": "(12, TBB, my_thread_array = tbb::cache_aligned_allocator<padded_private_worker>().allocate( my_n_thread );)"}
{"predict": "(40, CUDA, cudaFree(d_inPtr);); (24, CUDA, cudaMalloc((void**)&d_outPtr, size * sizeof(float));); (30, CUDA, cudaMemcpy(&result_gpu, &d_outPtr[0], sizeof(float), cudaMemcpyDeviceToHost);); (24, CUDA, cudaMemcpy(d_inPtr, h_inPtr, size * sizeof(float), cudaMemcpyHostToDevice);); (35, CUDA, cudaFree(d_outPtr);); (19, CUDA, cudaMalloc((void**)& d_inPtr, size * sizeof(float));)", "label": "(40, CUDA, cudaFree(d_inPtr);); (24, CUDA, cudaMalloc((void**)&d_outPtr, size * sizeof(float));); (30, CUDA, cudaMemcpy(&result_gpu, &d_outPtr[0], sizeof(float), cudaMemcpyDeviceToHost);); (24, CUDA, cudaMemcpy(d_inPtr, h_inPtr, size * sizeof(float), cudaMemcpyHostToDevice);); (35, CUDA, cudaFree(d_outPtr);); (19, CUDA, cudaMalloc((void**)& d_inPtr, size * sizeof(float));)"}
{"predict": "(85, CUDA, cudaEventDestroy(start);); (78, CUDA, err = cudaEventSynchronize(stop);); (81, CUDA, err = cudaEventElapsedTime(elapsed_time, start, stop);); (70, CUDA, err = cudaFree(d_A);); (21, CUDA, err = cudaMalloc(&d_B, length);); (35, CUDA, err = cudaMemcpy(d_B, B, length, cudaMemcpyHostToDevice);); (63, CUDA, err = cudaGetLastError();); (76, CUDA, err = cudaEventRecord(stop, 0);); (15, CUDA, err = cudaMalloc(&d_A, length);); (81, CUDA, cudaEventDestroy(stop);); (64, CUDA, err = cudaMemcpy(C, d_C, length, cudaMemcpyDeviceToHost);); (68, CUDA, err = cudaFree(d_C);); (3, CUDA, err = cudaEventRecord(start, 0);); (64, CUDA, err = cudaFree(d_B);); (73, CUDA, cudaEventDestroy(elapsed_time);); (-3, CUDA, cudaEventCreate(&stop);); (-5, CUDA, cudaEventCreate(&start);); (24, CUDA, err = cudaMemcpy(d_A, A, length, cudaMemcpyHostToDevice);); (10, CUDA, err = cudaMalloc(&d_C, length);)", "label": "(88, CUDA, cudaEventSynchronize(stop);); (70, CUDA, err = cudaGetLastError();); (19, CUDA, err = cudaMalloc(&d_A, length);); (12, CUDA, cudaEventRecord(start, 0);); (78, CUDA, err = cudaFree(d_C);); (87, CUDA, cudaEventDestroy(start);); (74, CUDA, err = cudaFree(d_B);); (21, CUDA, err = cudaMalloc(&d_B, length);); (78, CUDA, cudaEventRecord(stop, 0);); (32, CUDA, err = cudaMemcpy(d_A, A, length, cudaMemcpyHostToDevice);); (80, CUDA, cudaEventElapsedTime(elapsed_time, start, stop);); (1, CUDA, cudaEventCreate(&start);); (66, CUDA, err = cudaFree(d_A);); (30, CUDA, err = cudaMemcpy(d_B, B, length, cudaMemcpyHostToDevice);); (16, CUDA, err = cudaMalloc(&d_C, length);); (78, CUDA, cudaEventDestroy(stop);); (-3, CUDA, cudaEventCreate(&stop);); (57, CUDA, err = cudaMemcpy(C, d_C, length, cudaMemcpyDeviceToHost);)"}
{"predict": "(12, OpenMP, #pragma omp target parallel proc_bind(spread)); (15, OpenMP, #pragma omp target parallel proc_bind(primary)); (16, OpenMP, #pragma omp target parallel proc_bind(close)); (18, OpenMP, #pragma omp target parallel proc_bind(x)); (2, OpenMP, #pragma omp target parallel proc_bind()); (7, OpenMP, #pragma omp target parallel proc_bind(master); (-1, OpenMP, #pragma omp target parallel proc_bind); (1, OpenMP, #pragma omp target parallel proc_bind(); (9, OpenMP, #pragma omp target parallel proc_bind(ST)); (4, OpenMP, #pragma omp target parallel proc_bind(master)); (-5, OpenMP, #pragma omp target parallel proc_bind()", "label": "(16, OpenMP, #pragma omp target defaultmap (scalar:); (3, OpenMP, #pragma omp target defaultmap(); (10, OpenMP, #pragma omp target defaultmap(tofrom)); (11, OpenMP, #pragma omp target defaultmap(tofrom,); (16, OpenMP, #pragma omp target defaultmap(tofrom:scalar) defaultmap(tofrom:scalar)); (-3, OpenMP, #pragma omp target defaultmap); (19, OpenMP, #pragma omp target defaultmap(tofrom: something)); (11, OpenMP, #pragma omp target defaultmap(tofrom, scalar); (2, OpenMP, #pragma omp target defaultmap (tofrom:); (-3, OpenMP, #pragma omp target defaultmap()); (-2, OpenMP, #pragma omp target defaultmap(tofrom)"}
{"predict": "(29, CUDA, CUDA_CALL(cudaDeviceSynchronize());); (7, CUDA, CUDA_CALL(cudaMalloc((void**)&data, size * sizeof(T)));); (49, CUDA, CUDA_CALL(cudaFree(data));)", "label": "(52, CUDA, CUDA_CALL(cudaFree(data));); (28, CUDA, CUDA_CALL(cudaDeviceSynchronize());); (6, CUDA, CUDA_CALL(cudaMalloc((void**)&data, size * sizeof(T)));)"}
{"predict": "(17, MPI, MPI_Comm_size(comm, &size);); (28, MPI, MPI_Abort(comm, 1);); (15, MPI, MPI_Comm_rank(comm, &rank);)", "label": "(29, MPI, MPI_Abort(comm, 1);); (15, MPI, MPI_Comm_size(comm, &size);); (15, MPI, MPI_Comm_rank(comm, &rank);)"}
{"predict": "(37, OpenMP, #pragma omp parallel sections shared(j)); (30, OpenMP, #pragma omp parallel sections shared(e, g)); (32, OpenMP, #pragma omp parallel sections private(i)); (7, OpenMP, #pragma omp parallel sections shared(); (16, OpenMP, #pragma omp parallel sections shared(argc)); (25, OpenMP, #pragma omp parallel sections shared(ca)); (3, OpenMP, #pragma omp parallel sections shared()); (7, OpenMP, #pragma omp parallel sections shared(argc); (31, OpenMP, #pragma omp parallel sections firstprivate(i)); (24, OpenMP, #pragma omp parallel sections shared(da)); (12, OpenMP, #pragma omp parallel sections shared(a, b, c, d, f, k)); (33, OpenMP, #pragma omp parallel sections shared(i)); (-2, OpenMP, #pragma omp parallel sections shared); (12, OpenMP, #pragma omp parallel sections shared(argv[1])); (24, OpenMP, #pragma omp parallel sections shared(h, B::x)); (4, OpenMP, #pragma omp parallel sections shared(argc > 0 ? argv[1] : argv[2])); (33, OpenMP, #pragma omp parallel sections shared(j)); (11, OpenMP, #pragma omp parallel sections shared(ba)); (-6, OpenMP, #pragma omp parallel sections shared(argc)", "label": "(25, OpenMP, #pragma omp parallel sections shared(argv[1])); (34, OpenMP, #pragma omp parallel sections shared(h, B::x)); (41, OpenMP, #pragma omp parallel sections shared(i)); (20, OpenMP, #pragma omp parallel sections shared(a, b, c, d, f, k)); (9, OpenMP, #pragma omp parallel sections shared(argc); (10, OpenMP, #pragma omp parallel sections shared(argc,); (33, OpenMP, #pragma omp parallel sections firstprivate(i)); (22, OpenMP, #pragma omp parallel sections shared(ca)); (19, OpenMP, #pragma omp parallel sections shared(ba)); (28, OpenMP, #pragma omp parallel sections private(i)); (-3, OpenMP, #pragma omp parallel sections shared); (20, OpenMP, #pragma omp parallel sections shared(da)); (5, OpenMP, #pragma omp parallel sections shared(argc > 0 ? argv[1] : argv[2])); (8, OpenMP, #pragma omp parallel sections shared(S1)); (5, OpenMP, #pragma omp parallel sections shared(argc)); (30, OpenMP, #pragma omp parallel sections shared(j)); (-5, OpenMP, #pragma omp parallel sections shared()); (-8, OpenMP, #pragma omp parallel sections shared(); (15, OpenMP, #pragma omp parallel sections shared(e, g))"}
{"predict": "(45, MPI, MPI_Abort(MPI_COMM_WORLD, 1);)", "label": "(45, MPI, MPI_Abort(MPI_COMM_WORLD, 1);)"}
{"predict": "(2, MPI, MPIDataCommunicator mpi_world_communicator(MPI_COMM_WORLD);)", "label": "(2, MPI, MPIDataCommunicator mpi_world_communicator(MPI_COMM_WORLD);)"}
{"predict": "(25, OpenMP, #pragma omp parallel for)", "label": "(25, OpenMP, #pragma omp parallel for)"}
{"predict": "(13, CUDA, extern __shared__ char buf[];)", "label": "(13, CUDA, extern __shared__ char buf[];)"}
{"predict": "(66, MPI, MPI_Comm_size(fd->comm, &nprocs);); (66, MPI, MPI_Comm_rank(fd->comm, &myrank);)", "label": "(66, MPI, MPI_Comm_size(fd->comm, &nprocs);); (66, MPI, MPI_Comm_rank(fd->comm, &myrank);)"}
{"predict": "(6, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);); (4, MPI, MPI_Comm_size(MPI_COMM_WORLD, &world_size);)", "label": "(6, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);); (4, MPI, MPI_Comm_size(MPI_COMM_WORLD, &world_size);)"}
{"predict": "(45, OpenMP, #pragma omp distribute parallel for lastprivate(argc)); (141, OpenMP, #pragma omp distribute parallel for lastprivate(n) firstprivate(n)); (106, OpenMP, #pragma omp distribute parallel for lastprivate(m)); (85, OpenMP, #pragma omp distribute parallel for lastprivate(S2::S2s)); (96, OpenMP, #pragma omp distribute parallel for lastprivate(e, g)); (53, OpenMP, #pragma omp distribute parallel for lastprivate(a, b, c, d, f)); (22, OpenMP, #pragma omp distribute parallel for lastprivate(argc); (132, OpenMP, #pragma omp distribute parallel for lastprivate(j)); (64, OpenMP, #pragma omp distribute parallel for lastprivate(ca)); (10, OpenMP, #pragma omp distribute parallel for lastprivate(); (74, OpenMP, #pragma omp distribute parallel for lastprivate(xa)); (32, OpenMP, #pragma omp distribute parallel for lastprivate(argc)); (14, OpenMP, #pragma omp distribute parallel for lastprivate(argc,); (-2, OpenMP, #pragma omp target); (44, OpenMP, #pragma omp distribute parallel for lastprivate(argv[1])); (119, OpenMP, #pragma omp distribute parallel for lastprivate(i)); (91, OpenMP, #pragma omp distribute parallel for lastprivate(B::x)); (36, OpenMP, #pragma omp distribute parallel for lastprivate(S1)); (16, OpenMP, #pragma omp distribute parallel for lastprivate(argc > 0 ? argv[1] : argv[2])); (-10, OpenMP, #pragma omp distribute parallel for lastprivate); (-15, OpenMP, #pragma omp teams)", "label": "(82, OpenMP, #pragma omp distribute parallel for lastprivate(xa)); (15, OpenMP, #pragma omp distribute parallel for lastprivate(); (59, OpenMP, #pragma omp distribute parallel for lastprivate(2 * 2)); (73, OpenMP, #pragma omp distribute parallel for lastprivate(da)); (93, OpenMP, #pragma omp distribute parallel for safelen(5)); (137, OpenMP, #pragma omp distribute parallel for lastprivate(j)); (25, OpenMP, #pragma omp distribute parallel for lastprivate(argc,); (2, OpenMP, #pragma omp target); (109, OpenMP, #pragma omp distribute parallel for lastprivate(B::x)); (62, OpenMP, #pragma omp distribute parallel for lastprivate(ca)); (138, OpenMP, #pragma omp distribute parallel for firstprivate(m) lastprivate(m)); (116, OpenMP, #pragma omp distribute parallel for lastprivate(i)); (142, OpenMP, #pragma omp distribute parallel for lastprivate(n) firstprivate(n)); (94, OpenMP, #pragma omp distribute parallel for lastprivate(m)); (32, OpenMP, #pragma omp distribute parallel for lastprivate(S1)); (97, OpenMP, #pragma omp distribute parallel for lastprivate(h)); (-5, OpenMP, #pragma omp distribute parallel for lastprivate); (39, OpenMP, #pragma omp distribute parallel for lastprivate(argv[1])); (18, OpenMP, #pragma omp distribute parallel for lastprivate(argc > 0 ? argv[1] : argv[2])); (32, OpenMP, #pragma omp distribute parallel for lastprivate(a, b, c, d, f)); (140, OpenMP, #pragma omp distribute parallel for lastprivate(si)); (20, OpenMP, #pragma omp distribute parallel for lastprivate(argc)); (80, OpenMP, #pragma omp distribute parallel for lastprivate(e, g)); (3, OpenMP, #pragma omp distribute parallel for lastprivate(argc); (42, OpenMP, #pragma omp distribute parallel for lastprivate(ba)); (62, OpenMP, #pragma omp distribute parallel for lastprivate(S2::S2s)); (66, OpenMP, #pragma omp distribute parallel for lastprivate(S2::S2sc)); (95, OpenMP, #pragma omp distribute parallel for private(xa), lastprivate(xa)); (-7, OpenMP, #pragma omp distribute parallel for lastprivate()); (-19, OpenMP, #pragma omp teams)"}
{"predict": "(153, MPI, MPI_Finalize();); (23, MPI, MPI_Comm_size(MPI_COMM_WORLD,&Num_procs);); (18, MPI, MPI_Init(&argc,&argv);); (78, MPI, MPI_Bcast(&length,        1, MPI_LONG, root, MPI_COMM_WORLD);); (76, MPI, MPI_Bcast(&nthread_input, 1, MPI_INT,  root, MPI_COMM_WORLD);); (77, MPI, MPI_Bcast(&iterations,    1, MPI_INT,  root, MPI_COMM_WORLD);); (16, MPI, MPI_Comm_rank(MPI_COMM_WORLD,&my_ID);); (73, MPI, MPI_Bcast(&offset,        1, MPI_LONG, root, MPI_COMM_WORLD);); (113, MPI, MPI_Barrier(MPI_COMM_WORLD);); (75, MPI, MPI_Bcast(&bytes,         1, MPI_DOUBLE, root, MPI_COMM_WORLD);); (70, MPI, MPI_Bcast(&scalar,        1, MPI_DOUBLE, root, MPI_COMM_WORLD);); (71, MPI, MPI_Bcast(&space,         1, MPI_DOUBLE, root, MPI_COMM_WORLD);)", "label": "(101, OpenMP, printf(\"Number of threads    = %d\\n\", omp_get_max_threads());); (24, MPI, MPI_Comm_size(MPI_COMM_WORLD,&Num_procs);); (148, MPI, MPI_Finalize();); (104, OpenMP, #pragma omp parallel for); (74, MPI, MPI_Bcast(&length,        1, MPI_LONG, root, MPI_COMM_WORLD);); (21, MPI, MPI_Comm_rank(MPI_COMM_WORLD,&my_ID);); (75, MPI, MPI_Bcast(&nthread_input, 1, MPI_INT,  root, MPI_COMM_WORLD);); (76, OpenMP, omp_set_num_threads(nthread_input);); (16, MPI, MPI_Init(&argc,&argv);); (71, MPI, MPI_Bcast(&iterations,    1, MPI_INT,  root, MPI_COMM_WORLD);); (113, MPI, MPI_Barrier(MPI_COMM_WORLD);); (68, MPI, MPI_Bcast(&offset,        1, MPI_LONG, root, MPI_COMM_WORLD);)"}
{"predict": "(18, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);)", "label": "(18, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);)"}
{"predict": "(9, OpenMP, #pragma omp target); (46, OpenMP, #pragma omp distribute firstprivate(t_var, vec, s_arr, s_arr, var, var, svar)); (8, OpenMP, #pragma omp distribute firstprivate(g, g1, svar, sfvar)); (8, OpenMP, #pragma omp teams)", "label": "(9, OpenMP, #pragma omp target); (10, OpenMP, #pragma omp distribute simd firstprivate(g, g1, svar, sfvar)); (46, OpenMP, #pragma omp distribute simd firstprivate(t_var, vec, s_arr, s_arr, var, var, svar)); (7, OpenMP, #pragma omp teams)"}
{"predict": "(7, CUDA, __shared__ block_radix_sort_t::TempStorage temp_storage;)", "label": "(7, CUDA, __shared__ block_radix_sort_t::TempStorage temp_storage;)"}
{"predict": "(12, CUDA, CUDASimulation cudaSimulation(model);)", "label": "(12, CUDA, CUDASimulation cudaSimulation(model);)"}
{"predict": "(33, CUDA, cudaFree(d_inPtr);); (21, CUDA, cudaMalloc((void**)&d_outPtr, size * sizeof(float));); (26, CUDA, cudaMemcpy(&result_gpu, &d_outPtr[0], sizeof(float), cudaMemcpyDeviceToHost);); (21, CUDA, cudaMemcpy(d_inPtr, h_inPtr, size * sizeof(float), cudaMemcpyHostToDevice);); (28, CUDA, cudaFree(d_outPtr);); (16, CUDA, cudaMalloc((void**)& d_inPtr, size * sizeof(float));)", "label": "(33, CUDA, cudaFree(d_inPtr);); (21, CUDA, cudaMalloc((void**)&d_outPtr, size * sizeof(float));); (26, CUDA, cudaMemcpy(&result_gpu, &d_outPtr[0], sizeof(float), cudaMemcpyDeviceToHost);); (21, CUDA, cudaMemcpy(d_inPtr, h_inPtr, size * sizeof(float), cudaMemcpyHostToDevice);); (28, CUDA, cudaFree(d_outPtr);); (16, CUDA, cudaMalloc((void**)& d_inPtr, size * sizeof(float));)"}
{"predict": "(8, TBB, tbb::flow::make_edge(my_queue, my_broadcast_node);); (2, TBB, tbb::flow::broadcast_node<my_type> my_broadcast_node(g);); (4, TBB, tbb::flow::queue_node<my_type> my_queue(g);); (14, TBB, return (tbb::tick_count::now() - t0).seconds();); (4, TBB, tbb::tick_count t0 = tbb::tick_count::now();)", "label": "(3, TBB, tbb::flow::broadcast_node<my_type> my_broadcast_node(g);); (7, TBB, const tbb::tick_count t0 = tbb::tick_count::now();); (14, TBB, return (tbb::tick_count::now() - t0).seconds();); (-1, TBB, tbb::flow::queue_node<my_type> my_queue(g);)"}
{"predict": "(26, MPI, MPI_Allreduce( &temperr, &errcomp, 1, MPI_FLOAT, MPI_MAX, slucomm);); (23, MPI, MPI_Allreduce( &tempxnorm, &xnorm, 1, MPI_DOUBLE, MPI_MAX, slucomm);); (21, MPI, MPI_Allreduce( &temperr, &err, 1, MPI_DOUBLE, MPI_MAX, slucomm);)", "label": "(26, MPI, MPI_Allreduce( &temperr, &errcomp, 1, MPI_FLOAT, MPI_MAX, slucomm);); (23, MPI, MPI_Allreduce( &tempxnorm, &xnorm, 1, MPI_DOUBLE, MPI_MAX, slucomm);); (20, MPI, MPI_Allreduce( &temperr, &err, 1, MPI_DOUBLE, MPI_MAX, slucomm);)"}
{"predict": "(8, OpenMP, #pragma omp target map(present, alloc: arr[0:0])); (6, OpenMP, #pragma omp target data map(alloc: arr[0:5]))", "label": "(8, OpenMP, #pragma omp target map(present, alloc: arr[0:0])); (6, OpenMP, #pragma omp target data map(alloc: arr[0:5])); (19, OpenMP, #pragma omp target data map(alloc: arr[0:0]))"}
{"predict": "(25, MPI, MPI_Comm_free(&abc_intra);); (21, MPI, MPI_Barrier(ab_c_inter);); (12, MPI, MPI_Barrier(inter);); (20, MPI, MPI_Comm_free(&ab_inter);); (20, MPI, MPI_Comm_free(&ac_inter);); (21, MPI, MPI_Comm_free(&ab_c_inter);); (6, MPI, err = MPI_Intercomm_create(ab_intra, 0, ac_intra, rank, tag, &inter);); (15, MPI, err = MPI_Intercomm_merge(inter, 0, &ab_c_inter);); (10, MPI, err = MPI_Barrier(ab_c_inter);); (2, MPI, MPI_Comm_free(&ab_intra);); (2, MPI, MPI_Comm_free(&ac_intra);)", "label": "(14, MPI, err = MPI_Barrier(ab_c_inter);); (16, MPI, err = MPI_Intercomm_merge(ab_c_inter, 0, &abc_intra);); (25, MPI, MPI_Comm_disconnect(&ab_inter);); (21, MPI, MPI_Comm_free(&ab_intra);); (18, MPI, MPI_Comm_free(&abc_intra);); (5, MPI, err = MPI_Intercomm_create(ab_intra, 0, ac_intra, count, tag, &ab_c_inter);); (17, MPI, MPI_Comm_free(&ab_c_inter);); (18, MPI, MPI_Comm_free(&ac_intra);); (20, MPI, MPI_Comm_disconnect(&ac_inter);); (10, MPI, err = MPI_Barrier(abc_intra);)"}
{"predict": "(56, MPI, MPI_Finalize();); (1, MPI, MPI_Init(&argc,&argv);)", "label": "(2, MPI, MPI_Init(&argc, &argv);); (55, MPI, MPI_Finalize();)"}
{"predict": "(4, OpenMP, #pragma omp parallel num_threads(2)); (7, OpenMP, #pragma omp barrier); (4, OpenMP, #pragma omp master)", "label": "(5, OpenMP, #pragma omp parallel num_threads(2)); (3, OpenMP, omp_set_nested(1);)"}
{"predict": "(23, OpenCL, clReleaseEvent(events[i]);)", "label": "(23, OpenCL, clReleaseEvent(events[i]);)"}
{"predict": "(6, OpenMP, #pragma omp parallel for)", "label": "(6, OpenMP, #pragma omp parallel for)"}
{"predict": "(20, TBB, tbb::flow::graph g;)", "label": "(720, TBB, utility::report_elapsed_time((oneapi::tbb::tick_count::now() - start).seconds());); (15, TBB, oneapi::tbb::global_control c(oneapi::tbb::global_control::max_allowed_parallelism, p);); (19, TBB, oneapi::tbb::flow::graph g;); (11, TBB, oneapi::tbb::tick_count start = oneapi::tbb::tick_count::now();)"}
{"predict": "(50, CUDA, CHECK(cudaStreamCreate(&(streams[n])));); (82, CUDA, CHECK(cudaStreamDestroy(streams[i]));); (92, CUDA, CHECK(cudaFree(d_y));); (19, CUDA, CHECK(cudaMemcpy(d_x, h_x, M, cudaMemcpyHostToDevice));); (91, CUDA, CHECK(cudaFree(d_z));); (53, CUDA, CHECK(cudaStreamDestroy(streams[n]));); (58, CUDA, CHECK(cudaMallocHost(&h_x2, M));); (80, CUDA, CHECK(cudaFreeHost(h_y2));); (80, CUDA, CHECK(cudaFreeHost(h_z2));); (65, CUDA, CHECK(cudaStreamCreate(&(streams[i])));); (13, CUDA, CHECK(cudaMalloc(&d_y, M));); (11, CUDA, CHECK(cudaMalloc(&d_x, M));); (82, CUDA, CHECK(cudaFree(d_x));); (51, CUDA, CHECK(cudaMallocHost(&h_z2, M));); (5, CUDA, CHECK(cudaMalloc(&d_z, M));); (73, CUDA, CHECK(cudaFreeHost(h_x2));); (5, CUDA, CHECK(cudaMemcpy(d_y, h_y, M, cudaMemcpyHostToDevice));); (50, CUDA, CHECK(cudaMallocHost(&h_y2, M));)", "label": "(47, CUDA, CHECK(cudaStreamCreate(&(streams[n])));); (84, CUDA, CHECK(cudaStreamDestroy(streams[i]));); (94, CUDA, CHECK(cudaFree(d_y));); (19, CUDA, CHECK(cudaMemcpy(d_x, h_x, M, cudaMemcpyHostToDevice));); (93, CUDA, CHECK(cudaFree(d_z));); (53, CUDA, CHECK(cudaStreamDestroy(streams[n]));); (58, CUDA, CHECK(cudaMallocHost(&h_x2, M));); (82, CUDA, CHECK(cudaFreeHost(h_y2));); (82, CUDA, CHECK(cudaFreeHost(h_z2));); (66, CUDA, CHECK(cudaStreamCreate(&(streams[i])));); (10, CUDA, CHECK(cudaMalloc(&d_y, M));); (8, CUDA, CHECK(cudaMalloc(&d_x, M));); (83, CUDA, CHECK(cudaFree(d_x));); (53, CUDA, CHECK(cudaMallocHost(&h_z2, M));); (7, CUDA, CHECK(cudaMalloc(&d_z, M));); (73, CUDA, CHECK(cudaFreeHost(h_x2));); (7, CUDA, CHECK(cudaMemcpy(d_y, h_y, M, cudaMemcpyHostToDevice));); (48, CUDA, CHECK(cudaMallocHost(&h_y2, M));)"}
{"predict": "(25, MPI, CHECK(MPI_File_set_view(fileh, 0, MPI_INT, MPI_INT, datarep[i], MPI_INFO_NULL));); (31, MPI, CHECK(MPI_File_close(&fileh));); (44, MPI, CHECK(MPI_File_delete(TEST_FILENAME, MPI_INFO_NULL));); (12, MPI, CHECK(MPI_Init(&argc, &argv));); (45, MPI, CHECK(MPI_Finalize());); (11, MPI, CHECK(MPI_Comm_rank(MPI_COMM_WORLD, &rank));)", "label": "(14, MPI, MPI_Init(&argc, &argv);); (47, MPI, MPI_Finalize();); (33, MPI, MPI_Barrier(MPI_COMM_WORLD);); (12, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (40, MPI, CHECK(MPI_File_delete(TEST_FILENAME, MPI_INFO_NULL));); (27, MPI, CHECK(MPI_File_close(&fileh));); (19, MPI, CHECK(MPI_File_set_view(fileh, 0, MPI_INT, MPI_INT, datarep[i], MPI_INFO_NULL));)"}
{"predict": "(16, MPI, MPI_Send(NULL, 0, MPI_BYTE, p->nbor, 1, MPI_COMM_WORLD);); (20, MPI, MPI_Recv(NULL, 0, MPI_BYTE, p->nbor, 1, MPI_COMM_WORLD, &status);); (32, MPI, latency = (MPI_Wtime() - t0) / (2 * g_latency012_reps);)", "label": "(28, MPI, MPI_Recv(NULL, 0, MPI_BYTE, p->nbor2, 1, MPI_COMM_WORLD, &status);); (22, MPI, MPI_Recv(NULL, 0, MPI_BYTE, p->nbor, 1, MPI_COMM_WORLD, &status);); (25, MPI, MPI_Send(NULL, 0, MPI_BYTE, p->nbor2, 1, MPI_COMM_WORLD);); (34, MPI, latency = (MPI_Wtime() - t0) / (2 * g_latency012_reps);); (18, MPI, MPI_Send(NULL, 0, MPI_BYTE, p->nbor, 1, MPI_COMM_WORLD);); (10, MPI, t0 = MPI_Wtime();)"}
{"predict": "(90, CUDA, cudaFree(gpuTransposeMatrix);); (19, CUDA, cudaGetDeviceProperties(&devProp, 0);); (81, CUDA, cudaFree(gpuMatrix);); (42, CUDA, cudaMalloc((void**)&gpuMatrix, NUM * sizeof(float));); (42, CUDA, cudaMalloc((void**)&gpuTransposeMatrix, NUM * sizeof(float));)", "label": "(20, CUDA, cudaGetDeviceProperties(&devProp, 0);); (81, CUDA, cudaFree(gpuMatrix);); (43, CUDA, cudaMalloc((void**)&gpuMatrix, NUM * sizeof(float));); (81, CUDA, cudaFree(gpuTransposeMatrix);); (43, CUDA, cudaMalloc((void**)&gpuTransposeMatrix, NUM * sizeof(float));)"}
{"predict": "(24, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &wrank);); (19, MPI, MPI_Init_thread(&argc, &argv, required, &provided);); (49, MPI, MPI_Finalize();); (46, MPI, MPI_T_finalize();); (18, MPI, MPI_T_init_thread(required, &provided);); (31, MPI, MPI_Abort(MPI_COMM_WORLD, 1);)", "label": "(24, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &wrank);); (19, MPI, MPI_Init_thread(&argc, &argv, required, &provided);); (50, MPI, MPI_Finalize();); (47, MPI, MPI_T_finalize();); (18, MPI, MPI_T_init_thread(required, &provided);); (31, MPI, MPI_Abort(MPI_COMM_WORLD, 1);)"}
{"predict": "(22, MPI, MPI_Gatherv_c(sendbuf, count, datatype, recvbuf, counts, displs, datatype, root, comm);); (26, MPI, MPI_Wait(&req, MPI_STATUS_IGNORE);)", "label": "(22, MPI, MPI_Gatherv_c(sendbuf, count, datatype, recvbuf, counts, displs, datatype, root, comm);); (26, MPI, MPI_Wait(&req, MPI_STATUS_IGNORE);)"}
{"predict": "(8, OpenMP, #pragma omp taskloop); (6, OpenMP, #pragma omp parallel); (304, OpenMP, #pragma omp taskloop lastprivate(ii)); (271, OpenMP, #pragma omp taskloop collapse(2)); (285, OpenMP, #pragma omp taskloop firstprivate(ii)); (275, OpenMP, #pragma omp taskloop collapse(3)); (290, OpenMP, #pragma omp taskloop linear(ii)); (294, OpenMP, #pragma omp taskloop private(ii)); (307, OpenMP, #pragma omp taskloop nogroup); (2, OpenMP, #pragma omp taskloop (); (260, OpenMP, #pragma omp taskloop collapse(1)); (284, OpenMP, #pragma omp taskloop private(jj)); (275, OpenMP, #pragma omp taskloop collapse(2) safelen(4)); (27, OpenMP, #pragma omp taskloop increment(ii)); (265, OpenMP, #pragma omp taskloop collapse(2) safelen(3)); (247, OpenMP, #pragma omp taskloop collapse(2) firstprivate(ii)); (275, OpenMP, #pragma omp taskloop private(kk)); (297, OpenMP, #pragma omp taskloop nogroup safelen(2)); (238, OpenMP, #pragma omp taskloop collapse(2) private(ii)); (2, OpenMP, #pragma omp taskloop initializer(ii = 0)); (256, OpenMP, #pragma omp taskloop collapse(3) private(ii, jj, kk)); (262, OpenMP, #pragma omp taskloop collapse(2) private(jj)); (274, OpenMP, #pragma omp taskloop lastprivate(ii) collapse(2) private(ii)); (6, OpenMP, #pragma omp taskloop conditions(ii < 10)); (251, OpenMP, #pragma omp taskloop collapse(2) linear(ii)); (31, OpenMP, #pragma omp taskloop decrement(ii)); (-14, OpenMP, #pragma omp taskloop); (-18, OpenMP, #pragma omp parallel); (254, OpenMP, #pragma omp taskloop collapse(2) private(ii) firstprivate(ii)); (11,", "label": "(286, OpenMP, #pragma omp taskloop lastprivate(ii)); (280, OpenMP, #pragma omp taskloop private(ii)); (5, OpenMP, #pragma omp parallel); (5, OpenMP, #pragma omp taskloop); (317, OpenMP, #pragma omp taskloop collapse(2)); (265, OpenMP, #pragma omp taskloop firstprivate(ii)); (270, OpenMP, #pragma omp taskloop linear(ii))"}
{"predict": "(40, MPI, MPI_T_finalize();); (15, MPI, MPI_T_init_thread(required, &provided);)", "label": "(40, MPI, MPI_T_finalize();); (15, MPI, MPI_T_init_thread(required, &provided);)"}
{"predict": "(109, OpenCL, retVal = clReleaseProgram(pProgram);); (33, OpenCL, context = clCreateContext(nullptr, 1, &device, nullptr, nullptr, &retVal);); (105, OpenCL, retVal = clReleaseKernel(kernel);); (60, OpenCL, kernel = clCreateKernel(pProgram, \"CopyBuffer\", &retVal);); (109, OpenCL, retVal = clReleaseCommandQueue(cmdQ);); (110, OpenCL, retVal = clReleaseContext(context);); (34, OpenCL, cmdQ = clCreateCommandQueue(context, device, properties, &retVal);)", "label": "(104, OpenCL, retVal = clReleaseKernel(kernel);); (34, OpenCL, context = clCreateContext(nullptr, 1, &device, nullptr, nullptr, &retVal);); (108, OpenCL, retVal = clReleaseCommandQueue(cmdQ);); (110, OpenCL, retVal = clReleaseContext(context);); (57, OpenCL, kernel = clCreateKernel(pProgram, \"CopyBuffer\", &retVal);); (102, OpenCL, retVal = clReleaseProgram(pProgram);); (33, OpenCL, cmdQ = clCreateCommandQueue(context, device, properties, &retVal);)"}
{"predict": "(14, CUDA, return CUDA(cudaGetLastError());)", "label": "(14, CUDA, return CUDA(cudaGetLastError());)"}
{"predict": "(13, OpenMP, #pragma omp parallel num_threads(2)); (5, OpenMP, #pragma omp parallel num_threads(4)); (1, OpenMP, #pragma omp target teams num_teams(8) thread_limit(128))", "label": "(1, OpenMP, #pragma omp target teams); (5, OpenMP, #pragma omp parallel)"}
{"predict": "(248, MPI, MPI_Win_complete(rma_winy);); (233, MPI, MPI_Barrier(MPI_COMM_WORLD);); (139, MPI, MPI_Bcast(&n,          1, MPI_INT, root, MPI_COMM_WORLD);); (44, MPI, MPI_Comm_size(MPI_COMM_WORLD, &Num_procs);); (243, MPI, MPI_Win_complete(rma_winx);); (136, MPI, MPI_Bcast(&iterations, 1, MPI_INT, root, MPI_COMM_WORLD);); (37, MPI, MPI_Init(&argc,&argv);); (237, MPI, MPI_Win_flush(bottom_nbr, rma_winfo);); (237, MPI, MPI_Win_flush(left_nbr, rma_winfo);); (248, MPI, MPI_Finalize();); (232, MPI, MPI_Win_flush(right_nbr, rma_winfo);); (243, MPI, MPI_Win_unlock(right_nbr, rma_winfo);); (243, MPI, MPI_Win_unlock(bottom_nbr, rma_winfo);); (34, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &my_ID);); (230, MPI, MPI_Win_flush(top_nbr, rma_winfo);); (240, MPI, MPI_Win_unlock(left_nbr, rma_winfo);); (243, MPI, MPI_Win_free(&rma_winy);); (237, MPI, MPI_Win_unlock(top_nbr, rma_winfo);); (233, MPI, MPI_Win_lock(MPI_LOCK_EXCLUSIVE, left_nbr, rma_winfo);); (237, MPI, MPI_Win_lock(MPI_LOCK_EXCLUSIVE, bottom_nbr, rma_winfo);); (234, MPI, MPI_Win_lock(MPI_LOCK_EXCLUSIVE, top_nbr, rma_winfo);); (242, MPI, MPI_Win_free(&rma_winx);); (236, MPI, MPI_Win_lock(MPI_LOCK_EXCLUSIVE, right_nbr, rma_winfo);); (128, MPI, MPI_Bcast(&RADIUS,     1, MPI_INT, root, MPI_COMM_WORLD);); (227, MPI, MPI_Win_create(out, total_length_out, sizeof(DTYPE), rma_w", "label": "(210, MPI, MPI_Info_create(&rma_winfo);); (212, MPI, MPI_Info_set(rma_winfo, \"no_locks\", \"true\");); (370, MPI, MPI_Info_free(&rma_winfo);); (371, MPI, MPI_Finalize();); (128, MPI, MPI_Bcast(&n,          1, MPI_INT, root, MPI_COMM_WORLD);); (128, MPI, MPI_Bcast(&iterations, 1, MPI_INT, root, MPI_COMM_WORLD);); (267, MPI, MPI_Win_fence(MPI_MODE_NOSTORE, rma_winx);); (39, MPI, MPI_Init(&argc,&argv);); (232, MPI, MPI_Barrier(MPI_COMM_WORLD);); (321, MPI, MPI_Reduce(&local_norm, &norm, 1, MPI_DTYPE, MPI_SUM, root, MPI_COMM_WORLD);); (38, MPI, MPI_Comm_size(MPI_COMM_WORLD, &Num_procs);); (234, MPI, MPI_Win_fence(MPI_MODE_NOSTORE, rma_winy);); (35, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &my_ID);)"}
{"predict": "(28, OpenCL, retVal = clReleaseMemObject(image);); (6, OpenCL, auto status = clGetDeviceInfo(&mockClDevice, CL_DEVICE_IMAGE_SUPPORT_INTEL, sizeof(imageSupportInfo), &imageSupportInfo, nullptr);)", "label": "(28, OpenCL, retVal = clReleaseMemObject(image);); (6, OpenCL, auto status = clGetDeviceInfo(&mockClDevice, CL_DEVICE_IMAGE_SUPPORT, sizeof(imageSupportInfo), &imageSupportInfo, nullptr);)"}
{"predict": "(12, MPI, MPI_Init(&argc, &argv);); (34, MPI, MPI_Finalize();); (11, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (11, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (11, MPI, MPI_Dims_create(size, NR_DIMS, dims);); (17, MPI, MPI_Cart_coords(cart_comm, rank, NR_DIMS, cart_coords);); (27, MPI, MPI_Barrier(MPI_COMM_WORLD);); (13, MPI, MPI_Abort(MPI_COMM_WORLD, 1);)", "label": "(12, MPI, MPI_Init(&argc, &argv);); (34, MPI, MPI_Finalize();); (11, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (11, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (11, MPI, MPI_Dims_create(size, NR_DIMS, dims);); (17, MPI, MPI_Cart_coords(cart_comm, rank, NR_DIMS, cart_coords);); (27, MPI, MPI_Barrier(MPI_COMM_WORLD);); (13, MPI, MPI_Abort(MPI_COMM_WORLD, 1);)"}
{"predict": "(27, MPI, MPI_Abort(MPI_COMM_WORLD, 1);)", "label": "(27, MPI, MPI_Abort(MPI_COMM_WORLD, 1);)"}
{"predict": "(40, CUDA, cudaMalloc((void **)&df_C, M * N * sizeof(float));); (38, CUDA, cudaMalloc((void **)&df_B, K * N * sizeof(float));); (64, CUDA, cudaFree(df_A);); (64, CUDA, cudaFree(df_B);); (57, CUDA, cudaStreamSynchronize(stream);); (34, CUDA, cudaMalloc((void **)&df_A, M * K * sizeof(float));); (58, CUDA, cudaFree(df_C);); (28, CUDA, cudaStreamCreate(&stream);)", "label": "(39, CUDA, cudaMalloc((void **)&df_C, M * N * sizeof(float));); (62, CUDA, cudaFree(df_A);); (36, CUDA, cudaMalloc((void **)&df_B, K * N * sizeof(float));); (38, CUDA, cudaStat = cudaStreamCreate(&stream);); (61, CUDA, cudaFree(df_C);); (32, CUDA, cudaMalloc((void **)&df_A, M * K * sizeof(float));); (55, CUDA, cudaStreamDestroy(stream);); (48, CUDA, cudaStreamSynchronize(stream);); (56, CUDA, cudaFree(df_B);)"}
{"predict": "(148, CUDA, checkCudaErrors(cudaEventRecord(stop_event, 0));); (14, CUDA, checkCudaErrors(cudaGetDeviceCount(&gpu_n));); (30, CUDA, checkCudaErrors(cudaGetDeviceProperties(&prop[i], i));); (76, CUDA, checkCudaErrors(cudaMalloc(&g1, buf_size));); (103, CUDA, checkCudaErrors(cudaMemcpyPeer(g0, gpuid[0], g1, gpuid[1], buf_size));); (73, CUDA, checkCudaErrors(cudaMalloc(&g0, buf_size));); (130, CUDA, checkCudaErrors(cudaEventElapsedTime(&time_memcpy, start_event, stop_event));); (105, CUDA, checkCudaErrors(cudaEventSynchronize(stop_event));); (13, CUDA, checkCudaErrors(cudaSetDevice(i));); (86, CUDA, checkCudaErrors(cudaEventCreate(&start_event, eventflags));); (100, CUDA, checkCudaErrors(cudaEventRecord(start_event, 0));); (124, CUDA, checkCudaErrors(cudaEventSynchronize(start_event));); (94, CUDA, checkCudaErrors(cudaMemcpy(g0, h0, buf_size, cudaMemcpyHostToDevice));); (113, CUDA, checkCudaErrors(cudaEventRecord(stop_event, gpuid[1]));); (105, CUDA, checkCudaErrors(cudaMemcpyPeer(g1, gpuid[1], g0, gpuid[0], buf_size));); (13, CUDA, checkCudaErrors(cudaEventCreate(&stop_event, eventflags));); (115, CUDA, checkCudaErrors(cudaEventElapsedTime(&time_memcpy, start_event,(153, CUDA, checkCudaErrors(cudaFreeHost(h0));); (144, CUDA, checkCudaErrors(cudaEventDestroy(stop_event));); (106, CUDA, checkCudaErrors(cudaMemcpy(h0, g1, buf_size, cudaMemcpyDeviceToHost));); (138, CUDA, checkCudaErrors(cudaFree(g1));); (86, CUDA, checkCudaErrors(cudaEventRecord(stop_event, gpuid[0]));); (134, CUDA, checkCudaErrors(cudaEventDestroy(start_event));); (97, CUDA, checkCudaErrors", "label": "(46, CUDA, checkCudaErrors(cudaDeviceCanAccessPeer(&can_access_peer, i, j));); (99, CUDA, checkCudaErrors(cudaEventCreateWithFlags(&stop_event, eventflags));); (101, CUDA, checkCudaErrors(cudaEventRecord(start_event, 0));); (107, CUDA, checkCudaErrors(cudaMemcpy(g1, g0, buf_size, cudaMemcpyDefault));); (190, CUDA, checkCudaErrors(cudaFreeHost(h0));); (142, CUDA, checkCudaErrors(cudaDeviceSynchronize());); (156, CUDA, checkCudaErrors(cudaMemcpy(h0, g0, buf_size, cudaMemcpyDefault));); (109, CUDA, checkCudaErrors(cudaEventRecord(stop_event, 0));); (6, CUDA, checkCudaErrors(cudaGetDeviceCount(&gpu_n));); (66, CUDA, checkCudaErrors(cudaSetDevice(gpuid[0]));); (181, CUDA, checkCudaErrors(cudaFree(g0));); (20, CUDA, checkCudaErrors(cudaGetDeviceProperties(&prop[i], i));); (74, CUDA, checkCudaErrors(cudaMalloc(&g0, buf_size));); (176, CUDA, checkCudaErrors(cudaEventDestroy(stop_event));); (62, CUDA, checkCudaErrors(cudaDeviceEnablePeerAccess(gpuid[1], 0));); (97, CUDA, checkCudaErrors(cudaMemcpy(g0, g1, buf_size, cudaMemcpyDefault));); (102, CUDA, checkCudaErrors(cudaEventElapsedTime(&time_memcpy, start_event, stop_event));); (171, CUDA, checkCudaErrors(cudaEventDestroy(start_event));); (59, CUDA, checkCudaErrors(cudaSetDevice(gpuid[1]));); (70, CUDA, checkCudaErrors(cudaMalloc(&g1, buf_size));); (58, CUDA, checkCudaErrors(cudaDeviceEnablePeerAccess(gpuid[0], 0));); (163, CUDA, checkCudaErrors(cudaDeviceDisablePeerAccess(gpuid[0]));); (160, CUDA, checkCudaErrors(cudaDeviceDisablePeerAccess(gpuid[1]));); (76, CUDA, checkCudaErrors(cudaEventCreateWithFlags(&start_event, eventflags));); (173, CUDA, checkCudaErrors(cudaSetDevice(i));); (107, CUDA, checkCudaErrors(cudaMemcpy(g0, h0, buf_size, cudaMemcpyDefault));); (91, CUDA, checkCudaErrors(cudaEventSynchronize(stop_event));); (166, CUDA, checkCudaErrors(cudaFree(g1));)"}
{"predict": "(3, CUDA, Check_CudaErroorFun(\"At the beginning.\");)", "label": "(3, CUDA, Check_CudaErroorFun(\"At the beginning.\");)"}
{"predict": "(2, MPI, MPI_Comm_size(MPI_COMM_WORLD, &result.size);); (20, MPI, MPI_Comm_split(MPI_COMM_WORLD, result.group, result.rank, &result.local);); (24, MPI, MPI_Comm_free(&result.global);); (18, MPI, MPI_Comm_split(MPI_COMM_WORLD, result.group, peer_lead, &result.global);); (-1, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &result.rank);); (22, MPI, MPI_Comm_free(&result.local);)", "label": "(4, MPI, MPI_Comm_size(result.global, &result.size);); (4, MPI, MPI_Comm_rank(result.global, &result.rank);); (1, MPI, MPI_Comm_dup(MPI_COMM_WORLD, &result.global);); (15, MPI, MPI_Comm_rank(result.local, &result.local_rank);); (12, MPI, MPI_Comm_split(result.global, result.group, result.rank, &result.local);); (-3, MPI, MPI_Init(nullptr, nullptr);); (11, MPI, MPI_Comm_size(result.local, &result.local_size);)"}
{"predict": "(17, MPI, MPI_Barrier(MPI_COMM_WORLD);); (271, MPI, double total_time = MPI_Wtime() - start;); (267, MPI, MPI_Allreduce(&rc, &all_rc, 1, MPI_INT, MPI_MIN, MPI_COMM_WORLD);); (217, MPI, MPI_Irecv(buf, DCMP_COMPARE_LIST_SIZE, MPI_UINT64_T, right_rank, 0, MPI_COMM_WORLD, &request[k]);); (303, MPI, MPI_Send(&time_ended, 1, MPI_DOUBLE, 0, DCMP_TAG_COMPARE_ENDED, MPI_COMM_WORLD);); (215, MPI, MPI_Isend(buf, DCMP_COMPARE_LIST_SIZE, MPI_UINT64_T, left_rank, 0, MPI_COMM_WORLD, &request[k]);); (289, MPI, MPI_Recv(&time_started, 1, MPI_DOUBLE, 0, DCMP_TAG_COMPARE_STARTED, MPI_COMM_WORLD, MPI_STATUS_IGNORE);); (163, MPI, MPI_Waitall(k, request, status);); (263, MPI, MPI_Recv(buf, DCMP_COMPARE_LIST_SIZE, MPI_UINT64_T, right_rank, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);); (285, MPI, MPI_Send(&time_ended, 1, MPI_DOUBLE, right_rank, DCMP_TAG_COMPARE_ENDED, MPI_COMM_WORLD);); (282, MPI, MPI_Send(&time_ended, 1, MPI_DOUBLE, left_rank, DCMP_TAG_COMPARE_ENDED, MPI_COMM_WORLD);); (208, MPI, MPI_Irecv(buf, DCMP_COMPARE_LIST_SIZE, MPI_UINT64_T, left_rank, 0, MPI_COMM_WORLD, &request[k]);); (105, MPI, double start = MPI_Wtime();); (275, MPI, MPI_Recv(&time_ended, 1, MPI_DOUBLE, right_rank, DCMP_TAG_COMPARE_ENDED, MPI_COMM_WORLD, MPI_STATUS_IGNORE);); (272, MPI, MPI_Recv(&time_ended, 1, MPI_DOUBLE, left_rank, DCMP_TAG_COMPARE_ENDED, MPI_COMM_WORLD, MPI_STATUS_IGNORE);); (202, MPI, MPI_Isend(buf, DCMP_COMPARE_LIST_SIZE, MPI_UINT64_T, right_rank, 0, MPI_COMM_WORLD, &request", "label": "(17, MPI, MPI_Barrier(MPI_COMM_WORLD);); (26, MPI, double start_compare = MPI_Wtime();); (199, MPI, double end_compare = MPI_Wtime();)"}
{"predict": "(24, CUDA, CUDASimulation cudaSimulation(model);)", "label": "(24, CUDA, CUDASimulation cudaSimulation(model);)"}
{"predict": "(53, MPI, MPI_Comm_free(&comm2);); (46, MPI, MPI_Ssend(buffer, 0, MPI_INT, rank, 1, MPI_COMM_WORLD);); (31, MPI, MPI_Comm_dup(MPI_COMM_WORLD, &comm2);); (43, MPI, MPI_Barrier(comm4);); (5, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (38, MPI, MPI_Comm_dup(comm1, &comm4);); (44, MPI, MPI_Comm_free(&comm4);); (3, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (43, MPI, MPI_Comm_free(&comm1);); (39, MPI, MPI_Recv(buffer, 0, MPI_INT, rank, 2, MPI_COMM_WORLD, MPI_STATUS_IGNORE);); (28, MPI, MPI_Ssend(buffer, 0, MPI_INT, rank, 0, MPI_COMM_WORLD);); (22, MPI, MPI_Comm_dup(MPI_COMM_WORLD, &comm1);)", "label": "(54, MPI, MPI_Comm_free(&comm2);); (46, MPI, MPI_Ssend(buffer, 0, MPI_INT, rank, 1, MPI_COMM_WORLD);); (31, MPI, MPI_Comm_dup(MPI_COMM_WORLD, &comm2);); (43, MPI, MPI_Barrier(comm4);); (5, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (38, MPI, MPI_Comm_dup(comm1, &comm4);); (46, MPI, MPI_Comm_free(&comm4);); (3, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (45, MPI, MPI_Comm_free(&comm1);); (39, MPI, MPI_Recv(buffer, 0, MPI_INT, rank, 2, MPI_COMM_WORLD, MPI_STATUS_IGNORE);); (30, MPI, MPI_Ssend(buffer, 0, MPI_INT, rank, 0, MPI_COMM_WORLD);); (21, MPI, MPI_Comm_dup(MPI_COMM_WORLD, &comm1);)"}
{"predict": "(74, MPI, MPI_Waitall((NUMBER_OF_NEIGHBORS * 2), requests, MPI_STATUSES_IGNORE);); (71, MPI, MPI_Irecv(recv_buffers[i], size, MPI_BYTE, neighbours[i], 0, MPI_COMM_WORLD, &requests[i]);); (89, MPI, time = MPI_Wtime() - time;); (71, MPI, MPI_Isend(send_buffers[i], size, MPI_BYTE, neighbours[i], 0, MPI_COMM_WORLD, &requests[NUMBER_OF_NEIGHBORS + i]);); (111, MPI, MPI_Recv(&report, sizeof(imb_p2p_report_t), MPI_BYTE, source_rank, 1, MPI_COMM_WORLD, MPI_STATUS_IGNORE);); (96, MPI, MPI_Send(&report, sizeof(imb_p2p_report_t), MPI_BYTE, 0, 1, MPI_COMM_WORLD);); (56, MPI, time = MPI_Wtime();)", "label": "(75, MPI, MPI_Waitall((NUMBER_OF_NEIGHBORS * 2), requests, MPI_STATUSES_IGNORE);); (97, MPI, time = MPI_Wtime() - time;); (71, MPI, MPI_Isend(send_buffers[i], size, MPI_BYTE, neighbours[i], 0, MPI_COMM_WORLD, &requests[NUMBER_OF_NEIGHBORS + i]);); (78, MPI, time = MPI_Wtime();); (101, MPI, MPI_Send(&report, sizeof(imb_p2p_report_t), MPI_BYTE, 0, 1, MPI_COMM_WORLD);); (65, MPI, MPI_Irecv(recv_buffers[i], size, MPI_BYTE, neighbours[i], 0, MPI_COMM_WORLD, &requests[i]);); (108, MPI, MPI_Recv(&report, sizeof(imb_p2p_report_t), MPI_BYTE, source_rank, 1, MPI_COMM_WORLD, MPI_STATUS_IGNORE);)"}
{"predict": "(59, CUDA, cudaEventRecord( evStop );); (73, CUDA, cudaFree( in );); (73, CUDA, cudaFree( out );); (38, CUDA, cudaEventRecord( evStart );)", "label": "(59, CUDA, cudaEventRecord( evStop );); (75, CUDA, cudaFree( in );); (72, CUDA, cudaEventDestroy( evStart );); (52, CUDA, cudaEventRecord( evStart );); (73, CUDA, cudaFree( out );); (70, CUDA, cudaEventDestroy( evStop );)"}
{"predict": "(35, OpenMP, #pragma omp target teams distribute parallel for map(a, b))", "label": "(35, OpenMP, #pragma omp target teams distribute parallel for map(a, b))"}
{"predict": "(40, CUDA, checkCudaErrors(cudaMemset(d_Output, 0, QRNG_DIMENSIONS * N * sizeof(float)));); (44, CUDA, checkCudaErrors(cudaDeviceSynchronize());); (124, CUDA, checkCudaErrors(cudaFree(d_Output));)", "label": "(40, CUDA, checkCudaErrors(cudaMemset(d_Output, 0, QRNG_DIMENSIONS * N * sizeof(float)));); (44, CUDA, checkCudaErrors(cudaDeviceSynchronize());); (124, CUDA, checkCudaErrors(cudaFree(d_Output));)"}
{"predict": "(15, CUDA, qmc_cuda::cuda_check(cudaGetLastError(), \"vKKwij_to_vwKiKj\");); (15, CUDA, qmc_cuda::cuda_check(cudaDeviceSynchronize(), \"vKKwij_to_vwKiKj\");)", "label": "(15, CUDA, qmc_cuda::cuda_check(cudaGetLastError(), \"vKKwij_to_vwKiKj\");); (15, CUDA, qmc_cuda::cuda_check(cudaDeviceSynchronize(), \"vKKwij_to_vwKiKj\");)"}
{"predict": "(9, OpenCL, auto userEvent = clCreateUserEvent(pContext, &retVal);); (30, OpenCL, retVal = clReleaseEvent(userEvent);)", "label": "(9, OpenCL, auto userEvent = clCreateUserEvent(pContext, &retVal);); (30, OpenCL, retVal = clReleaseEvent(userEvent);)"}
{"predict": "(9, OpenMP, #pragma omp teams distribute parallel for); (7, OpenMP, #pragma omp target); (11, OpenMP, #pragma omp teams distribute parallel for if (parallel: false))", "label": "(10, OpenMP, #pragma omp teams distribute parallel for); (8, OpenMP, #pragma omp target); (12, OpenMP, #pragma omp teams distribute parallel for if (parallel: false))"}
{"predict": "(65, MPI, MPI_Type_free(&parent_type);); (11, MPI, MPI_Pack_external_size((char *) \"external32\", 1, MPI_INT, &sizeofint);); (36, MPI, MPI_Pack_external((char *) \"external32\", array, 1, parent_type, buf, sizeoftype, &position);); (21, MPI, MPI_Type_vector(10, 2, 2, MPI_INT, &parent_type);); (22, MPI, MPI_Pack_external_size((char *) \"external32\", 1, parent_type, &sizeoftype);); (44, MPI, MPI_Unpack_external((char *) \"external32\", buf, sizeoftype, &position, array, 1, parent_type);)", "label": "(12, MPI, MPI_Pack_external_size((char *) \"external32\", 1, MPI_INT, &sizeofint);); (66, MPI, MPI_Type_free(&parent_type);); (36, MPI, MPI_Pack_external((char *) \"external32\", array, 1, parent_type, buf, sizeoftype, &position);); (46, MPI, MPI_Unpack_external((char *) \"external32\", buf, sizeoftype, &position, array, 1, parent_type);); (21, MPI, MPI_Pack_external_size((char *) \"external32\", 1, parent_type, &sizeoftype);); (18, MPI, MPI_Type_commit(&parent_type);); (15, MPI, MPI_Type_vector(10, 2, 2, MPI_INT, &parent_type);)"}
{"predict": "(19, SYCL, auto  B = sycl::malloc_device<TB>(nelems, q);); (27, SYCL, sycl::free(h_a, q);); (16, SYCL, auto  A = sycl::malloc_device<TA>(nelems, q);); (18, SYCL, auto  C = sycl::malloc_device<TC>(nelems, q);); (48, SYCL, sycl::free(h_b, q);); (48, SYCL, sycl::free(h_c, q);); (13, SYCL, auto h_c = sycl::malloc_host<TC>(nelems, q);); (23, SYCL, sycl::free(A, q);); (23, SYCL, sycl::free(B, q);); (-1, SYCL, auto h_a = sycl::malloc_host<TA>(nelems, q);); (98, SYCL, sycl::free(C, q);); (-2, SYCL, auto h_b = sycl::malloc_host<TB>(nelems, q);); (16, SYCL, sycl::free(h_reference, q);); (-3, SYCL, auto h_reference = sycl::malloc_host<TC>(nelems, q);)", "label": "(82, SYCL, auto isA_fp16 = (typeid(TA) == typeid(sycl::half));); (28, SYCL, sycl::free(h_a, q);); (6, SYCL, auto h_c = sycl::malloc_host<TC>( nelems, q);); (4, SYCL, auto h_b = sycl::malloc_host<TB>( nelems, q);); (111, SYCL, sycl::free(h_c, q);); (14, SYCL, auto  A = sycl::malloc_device<TA>( nelems, q);); (94, SYCL, auto isC_fp16 = (typeid(TC) == typeid(sycl::half));); (23, SYCL, sycl::free(h_b, q);); (49, SYCL, sycl::free(A, q);); (47, SYCL, sycl::free(B, q);); (-4, SYCL, auto h_a = sycl::malloc_host<TA>( nelems, q);); (80, SYCL, auto isB_fp16 = (typeid(TB) == typeid(sycl::half));); (9, SYCL, auto  C = sycl::malloc_device<TC>( nelems, q);); (7, SYCL, auto  B = sycl::malloc_device<TB>( nelems, q);); (41, SYCL, sycl::free(C, q);)"}
{"predict": "(20, MPI, MPI_Comm_free(&dup_comm);); (7, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (7, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (12, MPI, mpi_errno = MPI_Comm_create_group(MPI_COMM_WORLD, group, 0, &dup_comm);); (13, MPI, MPI_Error_class(mpi_errno, &errclass);); (18, MPI, MPI_Group_free(&group);); (5, MPI, MPI_Comm_group(MPI_COMM_WORLD, &group);); (11, MPI, MPI_Comm_free(&dup_comm);); (3, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);)", "label": "(16, MPI, mpi_errno = MPI_Comm_create_group(dup_comm, group, 10, NULL);); (20, MPI, MPI_Comm_free(&dup_comm);); (6, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (6, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (18, MPI, MPI_Group_free(&group);); (12, MPI, MPI_Error_class(mpi_errno, &errclass);); (7, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);); (5, MPI, MPI_Comm_group(dup_comm, &group);); (3, MPI, MPI_Comm_dup(MPI_COMM_WORLD, &dup_comm);)"}
{"predict": "(34, MPI, MPI_Type_free(&column[j]);); (18, MPI, MPI_Type_commit(&xpose[j]);); (32, MPI, MPI_Type_free(&xpose[j]);); (13, MPI, MPI_Type_create_hvector(1, ncols, sizeof(double), column, &xpose[i]);); (15, MPI, MPI_Type_commit(&column[j]);); (9, MPI, MPI_Type_create_hvector(1, nrows, sizeof(double), &xpose[0], &column[i]);); (17, MPI, t[i] = MPI_Wtime() - ttmp;); (31, MPI, ttmp = MPI_Wtime();); (12, MPI, ttmp = MPI_Wtime();); (7, MPI, MPI_Type_contiguous(ncols, MPI_DOUBLE, &column[0]);); (14, MPI, MPI_Type_contiguous(nrows, MPI_DOUBLE, &xpose[0]);)", "label": "(24, MPI, t[i] = MPI_Wtime() - ttmp;); (19, MPI, MPI_Type_commit(&xpose[j]);); (34, MPI, MPI_Type_free(&column[j]);); (32, MPI, MPI_Type_free(&xpose[j]);); (11, MPI, ttmp = MPI_Wtime();); (13, MPI, MPI_Type_vector(nrows, 1, ncols, MPI_INT, &column[j]);); (13, MPI, MPI_Type_create_hvector(ncols, 1, sizeof(int), column[j], &xpose[j]);)"}
{"predict": "(18, CUDA, cudaError_t result = cudaGetLastError();); (18, CUDA, EXPECT_EQ(result, cudaSuccess) << \" - CUDA error: \" << cudaGetErrorString(result);)", "label": "(18, CUDA, ASSERT_EQ(cudaGetLastError(), cudaSuccess) << \"Kernel launch error.\";)"}
{"predict": "(3, CUDA, __shared__ float buffer[128];); (3, CUDA, __shared__ float sums[4];); (0, CUDA, __shared__ float gauss[16];)", "label": "(3, CUDA, __shared__ float buffer[128];); (3, CUDA, __shared__ float sums[4];); (0, CUDA, __shared__ float gauss[16];)"}
{"predict": "(26, MPI, MPI_Abort(MPI_COMM_WORLD, 1);); (5, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);)", "label": "(26, MPI, MPI_Abort(MPI_COMM_WORLD, 1);); (5, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);)"}
{"predict": "(12, MPI, MPI_Barrier(MPI_COMM_WORLD);); (4, MPI, MPI_Recv(buffer, n, MPI_INT, task, task, MPI_COMM_WORLD, MPI_STATUS_IGNORE);)", "label": "(12, MPI, MPI_Barrier(MPI_COMM_WORLD);)"}
{"predict": "(15, CUDA, checkCudaErrors(cudaGetLastError());); (13, CUDA, checkCudaErrors(cudaStreamSynchronize(stream));)", "label": "(15, CUDA, checkCudaErrors(cudaGetLastError());); (13, CUDA, checkCudaErrors(cudaStreamSynchronize(stream));)"}
{"predict": "(14, MPI, rc = MPI_Type_get_extent(type, &tmp_lb, &attr->child_type_extent);); (120, MPI, rc = MPI_Type_free(&type);)", "label": "(14, MPI, rc = MPI_Type_get_extent(type, &tmp_lb, &attr->child_type_extent);); (127, MPI, rc = MPI_Type_free(&type);)"}
{"predict": "(14, OpenMP, #pragma omp target map(tofrom : fd) device(ancestor: 1)); (8, OpenMP, #pragma omp target data map(tofrom : fd) device(ancestor: 1)); (7, OpenMP, #pragma omp declare mapper(id: T k) map(k))", "label": "(20, OpenMP, #pragma omp target update to(mapper(id): fd)); (10, OpenMP, #pragma omp declare mapper(id: N1::vec v) map(v.len)); (14, OpenMP, #pragma omp target map(mapper(id) alloc: fd)); (15, OpenMP, #pragma omp target map(mapper(idd) alloc: fd.b)); (19, OpenMP, #pragma omp target update from(mapper(idd): fd.b)); (4, OpenMP, #pragma omp declare mapper(id: struct foodat v) map(v.a)); (15, OpenMP, #pragma omp target update to(mapper(idd): fd.b)); (3, OpenMP, #pragma omp declare mapper(idd: struct foodatchild v) map(v.k)); (14, OpenMP, #pragma omp target update from(mapper(id): fd))"}
{"predict": "(4, CUDA, cudaDeviceSynchronize();)", "label": "(4, CUDA, cudaMemcpy(state.vx, state.dvx, size_f, cudaMemcpyDeviceToHost);); (4, CUDA, cudaMemcpy(state.vy, state.dvy, size_f, cudaMemcpyDeviceToHost);); (4, CUDA, cudaMemcpy(state.rho, state.drho, size_f, cudaMemcpyDeviceToHost);)"}
{"predict": "(12, CUDA, __shared__ T tails[SMALL_KERNEL_BLOCK * SMALL_KERNEL_BLOCK];); (19, CUDA, extern __shared__ char _arrays[];)", "label": "(12, CUDA, __shared__ T tails[SMALL_KERNEL_BLOCK * SMALL_KERNEL_BLOCK];); (18, CUDA, extern __shared__ char _arrays[];)"}
{"predict": "(134, OpenCL, error = clSetKernelArg(kernel, 1, sizeof(tinfo->inBuf), &tinfo->inBuf);)", "label": "(134, OpenCL, error = clSetKernelArg(kernel, 1, sizeof(tinfo->inBuf), &tinfo->inBuf);)"}
{"predict": "(17, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &myid);); (44, MPI, MPI_Finalize();); (11, MPI, MPI_Comm_size(MPI_COMM_WORLD, &NPROCS);)", "label": "(45, MPI, ierr = MPI_Finalize();); (15, MPI, ierr = MPI_Comm_rank(MPI_COMM_WORLD, &myid);)"}
{"predict": "(9, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &wrank);); (14, MPI, MPI_Dims_create(tests[k].size, tests[k].dim, dims);)", "label": "(9, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &wrank);); (14, MPI, MPI_Dims_create(tests[k].size, tests[k].dim, dims);)"}
{"predict": "(8, MPI, MPI_Finalize();); (0, MPI, MPI_Init(&argc,&argv);)", "label": "(8, MPI, MPI_Finalize();); (0, MPI, MPI_Init(&argc,&argv);)"}
{"predict": "(5, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);)", "label": "(5, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);)"}
{"predict": "(18, CUDA, CUASSERT(cudaMemsetAsync(sortClassValidCountPtr, 0, N * sizeof(int), stream));)", "label": "(21, CUDA, CUASSERT(cudaMemsetAsync(sortClassValidCountPtr, 0, N * sizeof(int), stream));); (19, CUDA, CUASSERT(cudaMemsetAsync(argMaxBBoxPtr, 0, N * samples * 4 * sizeof(float), stream));); (20, CUDA, CUASSERT(cudaMemsetAsync(sortClassPosPtr, 0, N * (NClass + 1) * sizeof(int), stream));); (20, CUDA, CUASSERT(cudaMemsetAsync(sortClassSampleIdxPtr, 0, N * (samples + 1) * sizeof(int), stream));); (15, CUDA, CUASSERT(cudaMemsetAsync(argMaxScorePtr, 0, N * samples * sizeof(float), stream));)"}
{"predict": "(13, MPI, MPI_Send(pre_info, 2, MPI_INT, 0, kTag, MPI_COMM_WORLD);)", "label": "(11, MPI, MPI_Send(pre_info, 2, MPI_INT, 0, kTag, MPI_COMM_WORLD);)"}
{"predict": "(30, OpenCL, clMemWrapper in = clCreateBuffer(context, CL_MEM_READ_WRITE, bytes, NULL, &err);); (45, OpenCL, err = clSetKernelArg(kernel, 0, sizeof(cl_mem), &in);); (51, OpenCL, err = clEnqueueReadBuffer(queue, in, CL_TRUE, 0, bytes, &h_out[0], 0, NULL, NULL);); (42, OpenCL, err = clEnqueueNDRangeKernel(queue, kernel, 1, NULL, &global, NULL, 0, NULL, NULL);); (36, OpenCL, clKernelWrapper kernel = clCreateKernel(prog, spvName, &err);); (27, OpenCL, err = clEnqueueWriteBuffer(queue, in, CL_TRUE, 0, bytes, &h_in[0], 0, NULL, NULL);)", "label": "(32, OpenCL, err = clEnqueueWriteBuffer(queue, in, CL_TRUE, 0, bytes, &h_in[0], 0, NULL, NULL);); (44, OpenCL, err = clSetKernelArg(kernel, 0, sizeof(cl_mem), &in);); (51, OpenCL, err = clEnqueueReadBuffer(queue, in, CL_TRUE, 0, bytes, &h_out[0], 0, NULL, NULL);); (26, OpenCL, clMemWrapper in = clCreateBuffer(context, CL_MEM_READ_WRITE, bytes, NULL, &err);); (38, OpenCL, clKernelWrapper kernel = clCreateKernel(prog, spvName, &err);); (44, OpenCL, err = clEnqueueNDRangeKernel(queue, kernel, 1, NULL, &global, NULL, 0, NULL, NULL);)"}
{"predict": "(6, MPI, MPI_Error_string(err, errorString, &errorStringLen);); (5, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (10, MPI, MPI_Abort(MPI_COMM_WORLD, err);)", "label": "(6, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (6, MPI, MPI_Error_string(err, errorString, &errorStringLen);); (10, MPI, MPI_Abort(MPI_COMM_WORLD, -1);)"}
{"predict": "(6, MPI, MPI_Get_library_version(version, &resultlen);)", "label": "(7, MPI, MPI_Get_library_version(version, &resultlen);)"}
{"predict": "(20, TBB, tbb::detail::d1::segmented_iterator<nested_vec, T> my_si(my_vec);); (61, TBB, tbb::detail::d1::segmented_iterator<nested_vec, const T> my_csi(my_vec);)", "label": "(61, TBB, tbb::internal::segmented_iterator<nested_vec, const T> my_csi(my_vec);); (18, TBB, tbb::internal::segmented_iterator<nested_vec, T> my_si(my_vec);)"}
{"predict": "(25, OpenCL, err = clCreateCommandQueue(ctx, ctx->device, 0, &err);); (33, OpenCL, cl_mem buf = clEnqueueMapBuffer(ctx->image_queue, CL_TRUE, CL_MAP_READ, origin, region, &err);); (55, OpenCL, err = clEnqueueUnmapMemObject(ctx->image_queue, buf, data, 0, NULL, NULL);); (62, OpenCL, clReleaseMemObject(mem);)", "label": "(61, OpenCL, clReleaseMemObject(mem);); (33, OpenCL, cl_mem buf = clCreateBuffer(ctx, CL_MEM_USE_HOST_PTR, sz, data, &err);); (23, OpenCL, ctx->image_queue = clCreateCommandQueueWithProperties(ctx, ctx->devices[0], 0, &err);); (55, OpenCL, err = clEnqueueCopyBufferToImage(ctx->image_queue, buf, mem, 0, origin, region, 0, NULL, NULL);); (38, OpenCL, clReleaseMemObject(buf);)"}
{"predict": "(145, OpenMP, #pragma omp distribute parallel for lastprivate(n) firstprivate(n)); (173, OpenMP, #pragma omp distribute parallel for firstprivate(si)); (115, OpenMP, #pragma omp distribute parallel for private(xa), firstprivate(xa)); (109, OpenMP, #pragma omp distribute parallel for firstprivate(h, B::x)); (156, OpenMP, #pragma omp distribute parallel for firstprivate(j)); (118, OpenMP, #pragma omp distribute parallel for firstprivate(i)); (4, OpenMP, #pragma omp target); (135, OpenMP, #pragma omp distribute parallel for firstprivate(n)); (5, OpenMP, #pragma omp distribute parallel for firstprivate); (11, OpenMP, #pragma omp distribute parallel for firstprivate()); (17, OpenMP, #pragma omp distribute parallel for firstprivate(argc); (83, OpenMP, #pragma omp distribute parallel for firstprivate(S2::S2sc)); (53, OpenMP, #pragma omp distribute parallel for firstprivate(ca)); (158, OpenMP, #pragma omp distribute parallel for lastprivate(g) firstprivate(g)); (37, OpenMP, #pragma omp distribute parallel for firstprivate(argv[1])); (22, OpenMP, #pragma omp distribute parallel for firstprivate(argc,); (12, OpenMP, #pragma omp distribute parallel for firstprivate(argc)); (92, OpenMP, #pragma omp distribute parallel for firstprivate(m)); (61, OpenMP, #pragma omp distribute parallel for firstprivate(xa)); (3, OpenMP, #pragma omp distribute parallel for firstprivate(); (72, OpenMP, #pragma omp distribute parallel for firstprivate(S2::S2s)); (140, OpenMP, #pragma omp distribute parallel for firstprivate(si)); (16, OpenMP, #pragma omp distribute parallel for firstprivate(argc > 0 ? argv[1] : argv[2])); (117, OpenMP, #pragma omp distribute parallel for firstprivate(k)); (89, OpenMP, #pragma omp distribute parallel for firstprivate(e, g)); (57, OpenMP, #pragma omp distribute parallel for firstprivate(da)); (77, OpenMP, #pragma omp distribute parallel for firstprivate(S1)); (21, OpenMP, #", "label": "(51, OpenMP, #pragma omp distribute parallel for firstprivate(a, b, c, d, f)); (86, OpenMP, #pragma omp distribute parallel for firstprivate(S2::S2s)); (158, OpenMP, #pragma omp parallel private(i)); (94, OpenMP, #pragma omp distribute parallel for safelen(5)); (98, OpenMP, #pragma omp distribute parallel for firstprivate(e, g)); (170, OpenMP, #pragma omp distribute parallel for firstprivate(si)); (70, OpenMP, #pragma omp distribute parallel for firstprivate(da)); (75, OpenMP, #pragma omp distribute parallel for firstprivate(xa)); (28, OpenMP, #pragma omp distribute parallel for firstprivate(argc > 0 ? argv[1] : argv[2])); (113, OpenMP, #pragma omp distribute parallel for firstprivate(i)); (-1, OpenMP, #pragma omp target); (30, OpenMP, #pragma omp distribute parallel for firstprivate(argc)); (133, OpenMP, #pragma omp distribute parallel for lastprivate(n) firstprivate(n)); (99, OpenMP, #pragma omp distribute parallel for firstprivate(k, h, B::x)); (111, OpenMP, #pragma omp parallel); (151, OpenMP, #pragma omp parallel reduction(+ : i)); (0, OpenMP, #pragma omp distribute parallel for firstprivate(); (44, OpenMP, #pragma omp distribute parallel for firstprivate(2 * 2)); (53, OpenMP, #pragma omp distribute parallel for firstprivate(ca)); (114, OpenMP, #pragma omp distribute parallel for firstprivate(j)); (36, OpenMP, #pragma omp distribute parallel for firstprivate(argv[1])); (96, OpenMP, #pragma omp distribute parallel for private(xa), firstprivate(xa)); (70, OpenMP, #pragma omp distribute parallel for firstprivate(S2::S2sc)); (-2, OpenMP, #pragma omp distribute parallel for firstprivate()); (2, OpenMP, #pragma omp distribute parallel for firstprivate(argc); (114, OpenMP, #pragma omp distribute parallel for lastprivate(g) firstprivate(g)); (20, OpenMP, #pragma omp distribute parallel for firstprivate(S1)); (4, OpenMP, #pragma omp distribute parallel for firstprivate(argc,); (79, OpenMP, #pragma omp distribute parallel for firstprivate(m)); (37, OpenMP, #pragma omp distribute parallel for firstprivate(ba)); (-19, OpenMP, #pragma omp distribute parallel for firstprivate); (-21, OpenMP, #pragma omp teams)"}
{"predict": "(22, OpenCL, retVal = clReleaseCommandQueue(commandQueue);); (10, OpenCL, auto commandQueue = clCreateCommandQueueWithProperties(context.get(), clDevice, properties.data(), &retVal);)", "label": "(11, OpenCL, auto commandQueue = clCreateCommandQueueWithProperties(pContext, testedClDevice, properties.data(), &retVal);); (21, OpenCL, clReleaseCommandQueue(commandQueue);)"}
{"predict": "(8, MPI, MPI_Type_get_extent(sddt, &lb, &extent);)", "label": "(6, MPI, MPI_Type_get_extent(sddt, &lb, &extent);)"}
{"predict": "(71, OpenMP, const int th=omp_get_thread_num();); (10, OpenMP, #pragma omp parallel for schedule (guided))", "label": "(71, OpenMP, const int th=omp_get_thread_num();); (10, OpenMP, #pragma omp parallel for schedule (guided))"}
{"predict": "(11, CUDA, CUDA_CHECK(cudaGetDeviceProperties(&props, 0));)", "label": "(11, CUDA, CUDA_CHECK(cudaGetDeviceProperties(&props, 0));)"}
{"predict": "(3, MPI, MPI_Init(&argc, &argv);); (9, MPI, MPI_Finalize();)", "label": "(3, MPI, MPI_Init(&argc, &argv);); (9, MPI, MPI_Finalize();)"}
{"predict": "(12, OpenCL, result = clGetPlatformInfo(platform, CL_PLATFORM_EXTENSIONS_SIZE, 0, NULL, &set_size);); (14, OpenCL, result = clGetPlatformInfo(platform, CL_PLATFORM_EXTENSIONS, set_size, &extensions[0], NULL);)", "label": "(12, OpenCL, result = clGetPlatformInfo(platform, CL_PLATFORM_EXTENSIONS, 0, NULL, &set_size);); (14, OpenCL, result = clGetPlatformInfo(platform, CL_PLATFORM_EXTENSIONS, extensions.size(), extensions.data(), NULL);)"}
{"predict": "(11, OpenMP, #pragma omp teams num_teams ()); (39, OpenMP, #pragma omp teams num_teams (-2)); (40, OpenMP, #pragma omp teams num_teams (3.14)); (20, OpenMP, #pragma omp teams num_teams (argc > 0 ? argv[1] : argv[2])); (23, OpenMP, #pragma omp teams num_teams (argc + z))); (26, OpenMP, #pragma omp teams num_teams (S1)); (30, OpenMP, #pragma omp teams num_teams (-10u)); (0, OpenMP, #pragma omp teams num_teams (); (-3, OpenMP, #pragma omp target); (32, OpenMP, #pragma omp teams num_teams (-2)); (6, OpenMP, #pragma omp teams num_teams (argc); (9, OpenMP, #pragma omp teams num_teams (argc +); (33, OpenMP, #pragma omp teams num_teams (0)); (-8, OpenMP, #pragma omp teams num_teams); (-3, OpenMP, #pragma omp teams num_teams (argc)", "label": "(47, OpenMP, #pragma omp teams num_teams (3.14)); (42, OpenMP, #pragma omp teams num_teams (-10u)); (17, OpenMP, #pragma omp teams num_teams (argc))); (4, OpenMP, #pragma omp teams num_teams (); (7, OpenMP, #pragma omp teams num_teams ()); (10, OpenMP, #pragma omp teams num_teams (argc); (25, OpenMP, #pragma omp teams num_teams (argc), num_teams (argc+1)); (32, OpenMP, #pragma omp teams num_teams (-2)); (15, OpenMP, #pragma omp teams num_teams (argc > 0 ? argv[1] : argv[2])); (-7, OpenMP, #pragma omp target); (25, OpenMP, #pragma omp teams num_teams (S1)); (16, OpenMP, #pragma omp teams num_teams (argc + argc-z)); (-9, OpenMP, #pragma omp teams num_teams)"}
{"predict": "(103, MPI, MPI_Isend(buf_send, nread, MPI_BYTE, rank_send, 0, comm, &request[0]);); (135, MPI, MPI_Waitall(2, request, status);); (108, MPI, MPI_Get_count(&status[0], MPI_BYTE, &nwrite);); (131, MPI, MPI_Rename(file_send, file_recv);); (75, MPI, MPI_Irecv(buf_recv, shuffile_mpi_buf_size, MPI_BYTE, rank_recv, 0, comm, &request[1]);); (129, MPI, MPI_Barrier(comm);); (78, MPI, MPI_Get_count(&status[1], MPI_BYTE, &nread);)", "label": "(101, MPI, MPI_Wait(&request[1], &status[1]);); (110, MPI, MPI_Wait(&request[0], &status[0]);); (110, MPI, MPI_Get_count(&status[0], MPI_BYTE, &nwrite);); (74, MPI, MPI_Irecv(buf_recv, shuffile_mpi_buf_size, MPI_BYTE, rank_recv, 0, comm, &request[0]);); (96, MPI, MPI_Isend(buf_send, nread, MPI_BYTE, rank_send, 0, comm, &request[1]);)"}
{"predict": "(46, MPI, MPI_Comm_free(&pgroup_old);); (50, MPI, MPI_Send(port, PORT_SIZE, MPI_CHAR, members[i], 0, MPI_COMM_WORLD);); (6, MPI, MPI_Comm_size(MPI_COMM_WORLD, &nproc);); (43, MPI, MPI_Comm_accept(port, port_info, 0, MPI_COMM_SELF, &pgroup_new);); (59, MPI, MPI_Comm_connect(port, port_info, 0, MPI_COMM_SELF, &pgroup_new);); (3, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &me);); (46, MPI, MPI_Comm_free(&pgroup_new);); (7, MPI, MPI_Comm_group(MPI_COMM_WORLD, &group);)", "label": "(48, MPI, MPI_Comm_accept(port, MPI_INFO_NULL, 0, pgroup, &pgroup_new);); (52, MPI, MPI_Comm_free(&pgroup_old);); (6, MPI, MPI_Comm_size(MPI_COMM_WORLD, &nproc);); (4, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &me);); (64, MPI, MPI_Comm_connect(port, MPI_INFO_NULL, 0, MPI_COMM_SELF, &pgroup_new);); (42, MPI, MPI_Send(port, PORT_SIZE, MPI_CHAR, members[i], 0, MPI_COMM_WORLD);); (35, MPI, MPI_Open_port(port_info, port);); (44, MPI, MPI_Comm_free(&pgroup_new);); (48, MPI, MPI_Close_port(port);); (66, MPI, MPI_Comm_connect(port, MPI_INFO_NULL, 0, pgroup, &pgroup_new);)"}
{"predict": "(5, CUDA, __shared__ typename BlockMergeSort::TempStorage temp_storage_shuffle;)", "label": "(5, CUDA, __shared__ typename BlockMergeSort::TempStorage temp_storage_shuffle;)"}
{"predict": "(14, MPI, MPI_Comm_size(comm, &size);); (20, MPI, MPI_Allreduce(buf, buf, count, MPI_INT, op, comm);); (34, MPI, MPI_Op_free(&op);); (14, MPI, MPI_Op_create((MPI_User_function *) addem, 1, &op);); (11, MPI, MPI_Comm_rank(comm, &rank);)", "label": "(22, MPI, MPI_Allreduce(MPI_IN_PLACE, buf, count, MPI_INT, op, comm);); (13, MPI, MPI_Comm_size(comm, &size);); (35, MPI, MPI_Op_free(&op);); (6, MPI, MPI_Op_create(mysum, 0, &op);); (11, MPI, MPI_Comm_rank(comm, &rank);)"}
{"predict": "(33, MPI, MPI_Comm_size(comm, &ranks);); (13, MPI, MPI_Type_get_true_extent(keysat, &true_lb, &true_extent);); (30, MPI, MPI_Comm_rank(comm, &rank);)", "label": "(34, MPI, MPI_Comm_size(comm, &ranks);); (32, MPI, MPI_Comm_rank(comm, &rank);); (12, MPI, MPI_Type_get_true_extent(keysat, &true_lb, &true_extent);)"}
{"predict": "(10, OpenMP, #pragma omp parallel for)", "label": "(10, OpenMP, #pragma omp parallel for)"}
{"predict": "(6, OpenMP, #pragma omp parallel for)", "label": "(6, OpenMP, #pragma omp parallel for)"}
{"predict": "(11, CUDA, cudaStreamCreate(&stream);); (14, CUDA, cudaStreamDestroy(stream);)", "label": "(11, CUDA, cudaStreamCreate(&stream);); (14, CUDA, cudaStreamDestroy(stream);)"}
{"predict": "(3, CUDA, __shared__ clock_t s_clocks[64];)", "label": "(3, CUDA, __shared__ clock_t s_clocks[32];)"}
{"predict": "(9, MPI, MPI_Info_create(&info);); (10, MPI, MPI_Info_set(info, key, val);); (15, MPI, MPI_Info_get(info, key, sizeof(buff), buff, &flag);); (7, MPI, MPI_Info_free(&info);)", "label": "(11, MPI, MPI_Info_get(info, key, sizeof(buff) - 1, buff, &flag);); (8, MPI, MPI_Info_create(&info);); (19, MPI, MPI_Info_free(&info);); (7, MPI, MPI_Info_set(info, key, val);)"}
{"predict": "(111, MPI, MPI_Type_commit(&mpi_word);); (124, MPI, MPI_Allgather(iterstring,1,mpi_word, catstring,1,mpi_word, MPI_COMM_WORLD);); (156, MPI, MPI_Finalize();); (64, MPI, MPI_Bcast(&iterations, 1, MPI_INT, root, MPI_COMM_WORLD);); (107, MPI, MPI_Type_contiguous(proc_length,MPI_CHAR, &mpi_word);); (18, MPI, MPI_Init(&argc,&argv);); (62, MPI, MPI_Bcast(&length,     1, MPI_LONG, root, MPI_COMM_WORLD);); (110, MPI, MPI_Barrier(MPI_COMM_WORLD);); (17, MPI, MPI_Comm_size(MPI_COMM_WORLD, &Num_procs);); (15, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &my_ID);)", "label": "(113, MPI, MPI_Type_commit(&mpi_word);); (120, MPI, MPI_Allgather(iterstring,1,mpi_word, catstring,1,mpi_word, MPI_COMM_WORLD);); (152, MPI, MPI_Finalize();); (61, MPI, MPI_Bcast(&iterations, 1, MPI_INT, root, MPI_COMM_WORLD);); (108, MPI, MPI_Type_contiguous(proc_length,MPI_CHAR, &mpi_word);); (17, MPI, MPI_Init(&argc,&argv);); (59, MPI, MPI_Bcast(&length,     1, MPI_LONG, root, MPI_COMM_WORLD);); (108, MPI, MPI_Barrier(MPI_COMM_WORLD);); (16, MPI, MPI_Comm_size(MPI_COMM_WORLD, &Num_procs);); (14, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &my_ID);)"}
{"predict": "(13, CUDA, __shared__ float Bs[maxPipelineStages][BLOCK_SIZE_X][BLOCK_SIZE_X];); (8, CUDA, __shared__ float As[maxPipelineStages][BLOCK_SIZE_X][BLOCK_SIZE_X];)", "label": "(13, CUDA, __shared__ float Bs[maxPipelineStages][BLOCK_SIZE_X][BLOCK_SIZE_X];); (8, CUDA, __shared__ float As[maxPipelineStages][BLOCK_SIZE_X][BLOCK_SIZE_X];)"}
{"predict": "(11, CUDA, extern __shared__ float sdata[];)", "label": "(11, CUDA, extern __shared__ float sdata[];)"}
{"predict": "(4, OpenMP, #pragma omp is_device_ptr); (6, OpenMP, #pragma omp target map(from: device))", "label": "(7, OpenMP, #pragma omp target map(tofrom : device)); (9, OpenMP, printf(\"omp_is_initial_device() returned false on host\\n\");); (12, OpenMP, printf(\"omp_is_initial_device() returned true on device\\n\");)"}
{"predict": "(3, TBB, tbb::atomic<int> counter;)", "label": "(32, TBB, tbb::tbb_allocator<t1>().destroy(my_storage);); (35, TBB, tbb::tbb_allocator<t2>().destroy(my_storage);); (0, TBB, tbb::atomic<int> counter;)"}
{"predict": "(60, CUDA, checkCudaErrors(cufftPlan2d(&planc2r, DIM, DIM, CUFFT_C2R));); (58, CUDA, checkCudaErrors(cufftPlan2d(&planr2c, DIM, DIM, CUFFT_R2C));); (38, CUDA, checkCudaErrors(cudaMalloc((void **)&vyfield, sizeof(cData) * PDS));); (36, CUDA, checkCudaErrors(cudaMalloc((void **)&vxfield, sizeof(cData) * PDS));); (54, CUDA, checkCudaErrors(cudaMalloc((void **)&vortfield, sizeof(cData) * PDS));); (36, CUDA, checkCudaErrors(cudaMemcpy(vyfield, hvyfield, sizeof(cData) * PDS, cudaMemcpyHostToDevice));); (67, CUDA, checkCudaErrors(cudaFree(vyfield));); (65, CUDA, checkCudaErrors(cudaFree(vxfield));); (53, CUDA, checkCudaErrors(cudaMalloc((void **)&hvyfield, sizeof(cData) * PDS));); (65, CUDA, checkCudaErrors(cudaFree(hvyfield));); (51, CUDA, checkCudaErrors(cudaMalloc((void **)&hvxfield, sizeof(cData) * PDS));); (62, CUDA, checkCudaErrors(cudaFree(hvxfield));); (53, CUDA, checkCudaErrors(cudaMalloc((void **)&velfield, sizeof(cData) * PDS));); (58, CUDA, checkCudaErrors(cufftDestroy(planc2r));); (56, CUDA, checkCudaErrors(cufftDestroy(planr2c));); (58, CUDA, checkCudaErrors(cudaFree(velfield));); (58, CUDA, checkCudaErrors(cudaFree(vortfield));); (35, CUDA, checkCudaErrors(cudaMemcpy(vxfield, hvxfield, sizeof(cData) * PDS, cudaMemcpyHostToDevice));)", "label": "(56, CUDA, checkCudaErrors(cufftPlan2d(&planc2r, DIM, DIM, CUFFT_C2R));); (54, CUDA, checkCudaErrors(cufftPlan2d(&planr2c, DIM, DIM, CUFFT_R2C));); (37, CUDA, checkCudaErrors(cudaMallocPitch((void **)&dvfield, &tPitch, sizeof(cData)*DIM, DIM));); (38, CUDA, checkCudaErrors(cudaMemcpy(dvfield, hvfield, sizeof(cData) * DS, cudaMemcpyHostToDevice));); (40, CUDA, checkCudaErrors(cudaMalloc((void **)&vyfield, sizeof(cData) * PDS));); (38, CUDA, checkCudaErrors(cudaMalloc((void **)&vxfield, sizeof(cData) * PDS));)"}
{"predict": "(46, OpenMP, #pragma omp teams reduction(+:sum)); (43, OpenMP, #pragma omp target map(tofrom: b, sum, t) map(alloc: a)); (46, OpenMP, #pragma omp distribute parallel for reduction(+:sum)); (48, OpenMP, t[i] = omp_get_team_num();)", "label": "(46, OpenMP, #pragma omp teams reduction(+:sum)); (43, OpenMP, #pragma omp target map(tofrom: b, sum, t) map(alloc: a)); (46, OpenMP, #pragma omp distribute parallel for reduction(+:sum)); (48, OpenMP, t[i] = omp_get_team_num();)"}
{"predict": "(171, CUDA, cudaCheck(cudaMemcpy(dembs, states + state_sizes[0] + state_sizes[1], state_sizes[1], cudaMemcpyHostToDevice));); (131, CUDA, cudaCheck(cudaMemcpy(h_gn1, states + state_sizes[0], state_sizes[2], cudaMemcpyHostToDevice));); (198, CUDA, cudaCheck(cudaMemcpy(dout, states + state_sizes[0] + state_sizes[1] + state_sizes[2] + state_sizes[3] + state_sizes[4] + state_sizes[5] + state_sizes[6] + state_sizes[7] + state_sizes[8] + state_sizes[9], state_sizes[17], cudaMemcpyHostToDevice));); (166, CUDA, cudaCheck(cudaMemcpy(dx, states + state_sizes[0] + state_sizes[1] + state_sizes[2] + state_sizes[3] + state_sizes[4] + state_sizes[5], state_sizes[12], cudaMemcpyHostToDevice));); (172, CUDA, cudaCheck(cudaMemcpy(emb_broad, states + state_sizes[0] + state_sizes[1] + state_sizes[2] + state_sizes[3] + state_sizes[4] + state_sizes[5] + state_sizes[6] + state_sizes[7] + state_sizes[8] + state_sizes[9], state_sizes[13], cudaMemcpyHostToDevice));); (50, CUDA, cudaCheck(cudaMalloc(&grads_memory_gpu, num_parameters * sizeof(float)));); (176, CUDA, cudaCheck(cudaMemcpy(h_ud, states + state_sizes[0] + state_sizes[1] + state_sizes[2] + state_sizes[3] + state_sizes[4] + state_sizes[5] + state_sizes[6] + state_sizes[7] + state_sizes[8] + state_sizes[9] + state_sizes[10], state_sizes[14], cudaMemcpyHostToDevice));); (222, CUDA, cudaCheck(cudaMemcpy(output, acts.output, B * C_out * H_out * W_out * sizeof(float), cudaMemcpyDeviceToHost));); (157, CUDA, cudaCheck(cudaMemcpy(h_silu1, states + state_sizes[0] + state_sizes[1] + state_sizes[2], state_sizes[3], cudaMemcpyHostToDevice));); (42, CUDA, cudaCheck", "label": "(125, CUDA, cudaCheck(cudaMalloc(&acts_memory_gpu, num_acts_params * sizeof(float)));); (257, CUDA, cudaCheck(cudaFree(acts_memory_gpu));); (173, CUDA, cudaCheck(cudaMalloc(&back_acts_memory_gpu, num_back_acts * sizeof(float)));); (254, CUDA, cudaCheck(cudaFree(params_memory_gpu));); (259, CUDA, cudaCheck(cudaFree(acts.emb));); (53, CUDA, cudaCheck(cudaMemset(grads_memory_gpu, 0, num_parameters * sizeof(float)));); (170, CUDA, cudaCheck(cudaMemset(back_acts_memory_gpu, 0, num_back_acts * sizeof(float)));); (182, CUDA, cudaCheck(cudaMemcpy(back_acts.dout, debug_states.dout, B * C_out * H_out * W_out * sizeof(float), cudaMemcpyHostToDevice));); (254, CUDA, cudaCheck(cudaFree(acts.input));); (117, CUDA, cudaCheck(cudaMemset(acts_memory_gpu, 0, num_acts_params * sizeof(float)));); (43, CUDA, cudaCheck(cudaMemcpy(params_memory_gpu, params_memory_cpu, num_parameters * sizeof(float), cudaMemcpyHostToDevice));); (249, CUDA, cudaCheck(cudaFree(back_acts_memory_gpu));); (122, CUDA, cudaCheck(cudaMemcpy(acts.input, debug_states.input, state_sizes[0] * sizeof(float), cudaMemcpyHostToDevice));); (122, CUDA, cudaCheck(cudaMemcpy(acts.emb, debug_states.emb, state_sizes[1] * sizeof(float), cudaMemcpyHostToDevice));); (43, CUDA, cudaCheck(cudaMalloc(&grads_memory_gpu, num_parameters * sizeof(float)));); (116, CUDA, cudaCheck(cudaMalloc(&acts.input, B * C * H * W * sizeof(float)));); (36, CUDA, cudaCheck(cudaMalloc(&params_memory_gpu, num_parameters * sizeof(float)));); (115, CUDA, cudaCheck(cudaMalloc(&acts.emb, B * C_emb * sizeof(float)));); (241, CUDA, cudaCheck(cudaFree(grads_memory_gpu));)"}
{"predict": "(5, OpenMP, omp_test_nest_lock(&nest_lock);); (3, OpenMP, omp_init_nest_lock(&nest_lock);); (7, OpenMP, omp_unset_nest_lock(&nest_lock);); (9, OpenMP, omp_destroy_nest_lock(&nest_lock);)", "label": "(6, OpenMP, omp_unset_nest_lock(&nest_lock);); (2, OpenMP, omp_init_nest_lock(&nest_lock);); (3, OpenMP, omp_test_nest_lock(&nest_lock);); (5, OpenMP, omp_set_nest_lock(&nest_lock);); (9, OpenMP, omp_destroy_nest_lock(&nest_lock);)"}
{"predict": "(72, MPI, MPI_Timing_add(handle->req_array[handle->req_count-1], MPI_TSTATE_PREPARED);); (89, MPI, MPI_Timing_add(handle->req_array[handle->req_count-1], MPI_TSTATE_WAITING);); (54, MPI, MPI_Timing_add(handle->req_array[handle->req_count-1], MPI_TSTATE_COMPLETED);); (35, MPI, MPI_Timing_add(MPI_REQUEST_NULL, MPI_TSTATE_PREPARED);); (13, MPI, MPI_Timing_add(handle->req_array[0], MPI_TSTATE_WAITING);); (52, MPI, MPI_Timing_add(handle->req_array[handle->req_count-1], MPI_TSTATE_START);); (86, MPI, MPI_Timing_add(handle->req_array[handle->req_count-1], MPI_TSTATE_END);); (13, MPI, MPI_Timing_add(MPI_REQUEST_NULL, MPI_TSTATE_COMPLETED);); (11, MPI, MPI_Timing_add(MPI_REQUEST_NULL, MPI_TSTATE_START);); (11, MPI, MPI_Timing_add(MPI_REQUEST_NULL, MPI_TSTATE_END);); (51, MPI, MPI_Timing_add(handle->req_array[handle->req_count-1], MPI_TSTATE_PULLED);)", "label": "(73, MPI, Irecv_time -= MPI_Wtime();); (55, MPI, Isend_time += MPI_Wtime();); (88, MPI, Irecv_time += MPI_Wtime();); (35, MPI, Isend_time -= MPI_Wtime();)"}
{"predict": "(24, CUDA, CHECK(cudaMalloc(&d_B, M));); (24, CUDA, CHECK(cudaMemcpy(d_A, h_A, M, cudaMemcpyHostToDevice));); (46, CUDA, CHECK(cudaFree(d_B));); (20, CUDA, CHECK(cudaMalloc(&d_A, M));); (32, CUDA, CHECK(cudaMemcpy(h_B, d_B, M, cudaMemcpyDeviceToHost));); (42, CUDA, CHECK(cudaFree(d_A));)", "label": "(24, CUDA, CHECK(cudaMalloc(&d_B, M));); (24, CUDA, CHECK(cudaMemcpy(d_A, h_A, M, cudaMemcpyHostToDevice));); (46, CUDA, CHECK(cudaFree(d_B));); (20, CUDA, CHECK(cudaMalloc(&d_A, M));); (32, CUDA, CHECK(cudaMemcpy(h_B, d_B, M, cudaMemcpyDeviceToHost));); (42, CUDA, CHECK(cudaFree(d_A));)"}
{"predict": "(65, OpenMP, #pragma omp parallel for if(n>OMP_MIN_SIZE)); (91, OpenMP, #pragma omp parallel for if (n>OMP_MIN_SIZE) schedule(static,1)); (5, MPI, MPI_Comm_rank( MPI_COMM_WORLD , &rank );); (33, OpenMP, printf( \"# sN[S/L] = stride-N [store/load] \\n\" );); (34, OpenMP, printf( \"# pur  = pragma unroll \\n\" );); (35, OpenMP, printf( \"# mur  = manual unroll \\n\" );); (36, OpenMP, printf( \"# murv = manual unroll and vectorize \\n\" );); (36, OpenMP, fprintf( stderr , \"sN[S/L] = stride-N [store/load] \\n\" );); (36, OpenMP, fprintf( stderr , \"pur  = pragma unroll \\n\" );); (6, MPI, MPI_Init_thread( &argc , &argv , MPI_THREAD_FUNNELED , &provided );); (153, OpenMP, #pragma omp parallel for schedule(dynamic,1)); (272, MPI, MPI_Finalize();); (129, OpenMP, #pragma omp parallel for if(n>OMP_MIN_SIZE) schedule(dynamic,1)); (58, OpenMP, #pragma omp parallel for if (n>OMP_MIN_SIZE)); (32, OpenMP, fprintf( stderr , \"mur  = manual unroll \\n\" );); (242, OpenMP, #pragma omp parallel for schedule(static,1)); (32, OpenMP, fprintf( stderr , \"murv = manual unroll and vectorize \\n\" );); (14, OpenMP, #pragma omp parallel for if(n>OMP_MIN_SIZE) schedule(static,1)); (1, MPI, MPI_Abort( MPI_COMM_WORLD , -1 );); (151, OpenMP, #pragma omp parallel for schedule(static,10)); (57, OpenMP, #pragma omp parallel for if (n>OMP_MIN_SIZE) schedule(static,1)); (120, OpenMP, #pragma omp parallel for if(n>OMP_MIN_SIZE) schedule(static,1)); (138, OpenMP, #pragma omp parallel for schedule(dynamic,1)); (221, OpenMP, #pragma", "label": "(8, MPI, MPI_Comm_rank( MPI_COMM_WORLD , &rank );); (364, MPI, MPI_Finalize();); (34, OpenMP, fprintf( stderr , \"starting test: OpenMP ON with %d threads... \\n\", omp_get_max_threads() );); (164, OpenMP, #pragma omp parallel if(n>OMP_MIN_SIZE)); (168, OpenMP, #pragma omp for private(i,j,n4)); (63, OpenMP, #pragma omp parallel for if(n>OMP_MIN_SIZE)); (1, MPI, MPI_Init_thread( &argc , &argv , MPI_THREAD_FUNNELED , &provided );); (28, OpenMP, printf( \"# starting test: OpenMP ON with %d threads... \\n\", omp_get_max_threads() );)"}
{"predict": "(5, CUDA, extern __shared__ char shared_memory[];)", "label": "(5, CUDA, extern __shared__ char shared_memory[];)"}
{"predict": "(12, MPI, err = MPI_Type_struct(3, blocks, disps, types, &eviltype);); (22, MPI, err = MPI_Type_size(eviltype, &val);); (123, MPI, MPI_Type_free(&eviltype);); (65, MPI, err = MPI_Type_get_extent(eviltype, &lb, &extent);); (85, MPI, err = MPI_Type_ub(eviltype, &aval);); (99, MPI, err = MPI_Type_get_true_extent(eviltype, &true_lb, &aval);); (31, MPI, err = MPI_Type_extent(eviltype, &aval);); (46, MPI, err = MPI_Type_lb(eviltype, &aval);)", "label": "(23, MPI, err = MPI_Type_size(eviltype, &val);); (11, MPI, err = MPI_Type_struct(3, blocks, disps, types, &eviltype);); (66, MPI, err = MPI_Type_get_extent(eviltype, &lb, &extent);); (86, MPI, err = MPI_Type_ub(eviltype, &aval);); (121, MPI, MPI_Type_free(&eviltype);); (99, MPI, err = MPI_Type_get_true_extent(eviltype, &true_lb, &aval);); (32, MPI, err = MPI_Type_extent(eviltype, &aval);); (46, MPI, err = MPI_Type_lb(eviltype, &aval);)"}
{"predict": "(59, MPI, MPI_Win_unlock(rank, win);); (46, MPI, MPI_Win_start(group, 0, win);); (86, MPI, MPI_Win_free(&win);); (14, MPI, MPI_Comm_split(MPI_COMM_WORLD, (rank < 2), rank, &CommDeuce);); (69, MPI, MPI_Win_post(group, 0, win);); (45, MPI, MPI_Send(B, SIZE, MPI_INT, 1, 100, MPI_COMM_WORLD);); (35, MPI, MPI_Alloc_mem(SIZE * sizeof(int), MPI_INFO_NULL, &A);); (81, MPI, MPI_Comm_free(&CommDeuce);); (50, MPI, MPI_Win_create(base_ptr, SIZE * sizeof(int), sizeof(int), MPI_INFO_NULL, CommDeuce, &win);); (35, MPI, MPI_Group_incl(comm_group, 1, &destrank, &group);); (48, MPI, MPI_Alloc_mem(SIZE * sizeof(int), MPI_INFO_NULL, &B);); (73, MPI, MPI_Win_wait(win);); (37, MPI, MPI_Win_allocate(0, 1, MPI_INFO_NULL, CommDeuce, &base_ptr, &win);); (2, MPI, MPI_Abort(MPI_COMM_WORLD, 1);); (76, MPI, MPI_Group_free(&comm_group);); (19, MPI, MPI_Alloc_mem(SIZE * sizeof(int), MPI_INFO_NULL, &B);); (71, MPI, MPI_Free_mem(A);); (29, MPI, MPI_Put(A, SIZE, MPI_INT, 1, 0, SIZE, MPI_INT, win);); (-8, MPI, MPI_Comm_size(MPI_COMM_WORLD, &nprocs);); (-8, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (47, MPI, MPI_Recv(A, SIZE, MPI_INT, 0, 100, MPI_COMM_WORLD, MPI_STATUS_IGNORE);); (7, MPI, MPI_Comm_group(CommDeuce, &comm_group);); (69, MPI, MPI_Group_free(&group);); (71, MPI, MPI_Free_mem(B);); (23, MPI, MPI_Win_complete(win);)", "label": "(67, MPI, MPI_Win_unlock(rank, win);); (28, MPI, i = MPI_Alloc_mem(SIZE * sizeof(int), MPI_INFO_NULL, &B);); (45, MPI, MPI_Win_start(group, 0, win);); (92, MPI, MPI_Win_free(&win);); (13, MPI, MPI_Comm_split(MPI_COMM_WORLD, (rank < 2), rank, &CommDeuce);); (66, MPI, MPI_Win_post(group, 0, win);); (44, MPI, MPI_Send(B, SIZE, MPI_INT, 1, 100, MPI_COMM_WORLD);); (34, MPI, MPI_Win_allocate(0, 1, MPI_INFO_NULL, CommDeuce, &base_ptr, &win);); (47, MPI, MPI_Win_allocate(SIZE * sizeof(int), sizeof(int), MPI_INFO_NULL, CommDeuce, &B, &win);); (63, MPI, MPI_Recv(A, SIZE, MPI_INT, 0, 100, MPI_COMM_WORLD, MPI_STATUS_IGNORE);); (63, MPI, MPI_Win_wait(win);); (41, MPI, MPI_Free_mem(B);); (37, MPI, MPI_Win_complete(win);); (35, MPI, MPI_Put(A, SIZE, MPI_INT, 1, 0, SIZE, MPI_INT, win);); (0, MPI, MPI_Abort(MPI_COMM_WORLD, 1);); (5, MPI, i = MPI_Alloc_mem(SIZE * sizeof(int), MPI_INFO_NULL, &A);); (82, MPI, MPI_Comm_free(&CommDeuce);); (77, MPI, MPI_Group_free(&comm_group);); (-9, MPI, MPI_Comm_size(MPI_COMM_WORLD, &nprocs);); (7, MPI, MPI_Comm_group(CommDeuce, &comm_group);); (-10, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (75, MPI, MPI_Free_mem(A);); (71, MPI, MPI_Group_free(&group);); (23, MPI, MPI_Group_incl(comm_group, 1, &destrank, &group);); (38, MPI, MPI_Win_create(B, SIZE * sizeof(int), sizeof(int), MPI_INFO_NULL, CommDeuce, &win);)"}
{"predict": "(52, CUDA, CubDebugExit(cudaMemcpy(d_flags, h_flags, sizeof(unsigned char) * num_items, cudaMemcpyHostToDevice));); (50, CUDA, CubDebugExit(cudaMemcpy(d_in, h_in, sizeof(int) * num_items, cudaMemcpyHostToDevice));)", "label": "(52, CUDA, CubDebugExit(cudaMemcpy(d_flags, h_flags, sizeof(unsigned char) * num_items, cudaMemcpyHostToDevice));); (50, CUDA, CubDebugExit(cudaMemcpy(d_in, h_in, sizeof(int) * num_items, cudaMemcpyHostToDevice));)"}
{"predict": "(58, MPI, MPI_Start(&req);); (13, MPI, MPI_Comm_rank(comm, &myrank);); (75, MPI, MPI_Type_free(&stype[i][j]);); (51, MPI, MPI_Info_create(&info);); (55, MPI, MPI_Wait(&req, MPI_STATUS_IGNORE);); (72, MPI, MPI_Type_free(&xtype[i][j]);); (56, MPI, MPI_Request_free(&req);); (8, MPI, MPI_Comm_size(comm, &p);); (55, MPI, MPI_Info_free(&info);)", "label": "(58, MPI, MPI_Start(&req);); (13, MPI, MPI_Comm_rank(comm, &myrank);); (76, MPI, MPI_Type_free(&stype[i][j]);); (50, MPI, MPI_Info_create(&info);); (55, MPI, MPI_Wait(&req, MPI_STATUS_IGNORE);); (72, MPI, MPI_Type_free(&xtype[i][j]);); (56, MPI, MPI_Request_free(&req);); (6, MPI, MPI_Comm_size(comm, &p);); (55, MPI, MPI_Info_free(&info);)"}
{"predict": "(170, OpenCL, clGetDeviceInfo(vkGPU->device, CL_DEVICE_VENDOR_ID, sizeof(cl_int), &vendorID, 0);); (92, CUDA, res = cudaMalloc((void**)&buffer, bufferSize);); (101, OpenCL, buffer = clCreateBuffer(vkGPU->context, CL_MEM_READ_WRITE, bufferSize, 0, &res);)", "label": "(161, OpenCL, clGetDeviceInfo(vkGPU->device, CL_DEVICE_VENDOR_ID, sizeof(cl_int), &vendorID, 0);); (81, CUDA, res = cudaMalloc((void**)&buffer, bufferSize);); (90, OpenCL, buffer = clCreateBuffer(vkGPU->context, CL_MEM_READ_WRITE, bufferSize, 0, &res);)"}
{"predict": "(25, MPI, MPI_Comm_size(intercomm, &size);); (86, MPI, MPI_Comm_disconnect(&intercomm);); (34, MPI, MPI_Send(&i, 1, MPI_INT, i, 0, intercomm);); (70, MPI, MPI_Ssend(&errs, 1, MPI_INT, 0, 1, intercomm);); (46, MPI, MPI_Comm_get_name(intercomm, cname, &rlen);); (85, MPI, MPI_Finalize();); (10, MPI, MPI_Comm_get_parent(&parentcomm);); (38, MPI, MPI_Recv(&err, 1, MPI_INT, i, 1, intercomm, MPI_STATUS_IGNORE);); (65, MPI, MPI_Recv(&i, 1, MPI_INT, 0, 0, intercomm, &status);); (19, MPI, MPI_Comm_rank(intercomm, &rank);); (16, MPI, MPI_Comm_remote_size(intercomm, &rsize);)", "label": "(26, MPI, MPI_Comm_size(intercomm, &size);); (84, MPI, MPI_Comm_disconnect(&intercomm);); (91, MPI, MPI_Finalize();); (11, MPI, MPI_Comm_get_parent(&parentcomm);); (66, MPI, MPI_Recv(&i, 1, MPI_INT, 0, 0, intercomm, &status);); (32, MPI, MPI_Send(&i, 1, MPI_INT, i, 0, intercomm);); (52, MPI, MPI_Comm_get_name(intercomm, cname, &rlen);); (69, MPI, MPI_Ssend(&errs, 1, MPI_INT, 0, 1, intercomm);); (35, MPI, MPI_Recv(&err, 1, MPI_INT, i, 1, intercomm, MPI_STATUS_IGNORE);); (18, MPI, MPI_Comm_rank(intercomm, &rank);); (15, MPI, MPI_Comm_remote_size(intercomm, &rsize);)"}
{"predict": "(44, OpenMP, #pragma omp teams distribute parallel for collapse (foobool(argc)), collapse (true), collapse (-5)); (31, OpenMP, #pragma omp teams distribute parallel for collapse (1)); (67, OpenMP, #pragma omp teams distribute parallel for collapse (2)); (61, OpenMP, #pragma omp teams distribute parallel for collapse (N)); (5, OpenMP, #pragma omp teams distribute parallel for collapse (); (13, OpenMP, #pragma omp teams distribute parallel for collapse (argc); (-2, OpenMP, #pragma omp teams distribute parallel for collapse); (41, OpenMP, #pragma omp teams distribute parallel for collapse (S)); (64, OpenMP, #pragma omp teams distribute parallel for collapse (ST); (14, OpenMP, #pragma omp teams distribute parallel for collapse (ST); (-8, OpenMP, #pragma omp target); (20, OpenMP, #pragma omp teams distribute parallel for collapse ((ST > 0) ? 1 + ST : 2)); (3, OpenMP, #pragma omp teams distribute parallel for collapse ()); (-2, OpenMP, #pragma omp teams distribute parallel for collapse ())", "label": "(31, OpenMP, #pragma omp teams distribute parallel for collapse (1)); (35, OpenMP, #pragma omp teams distribute parallel for collapse ((ST > 0) ? 1 + ST : 2)); (1, OpenMP, #pragma omp teams distribute parallel for collapse); (10, OpenMP, #pragma omp teams distribute parallel for collapse ()); (44, OpenMP, #pragma omp distribute collapse (S)); (21, OpenMP, #pragma omp teams distribute parallel for collapse (ST); (62, OpenMP, #pragma omp teams distribute parallel for collapse (N)); (13, OpenMP, #pragma omp teams distribute parallel for collapse (argc); (65, OpenMP, #pragma omp teams distribute parallel for collapse (2)); (49, OpenMP, #pragma omp teams distribute parallel for collapse (argv[1]=2)); (-8, OpenMP, #pragma omp target); (-3, OpenMP, #pragma omp teams distribute parallel for collapse (); (32, OpenMP, #pragma omp teams distribute parallel for collapse (foobool(argc)), collapse (true), collapse (-5))"}
{"predict": "(45, MPI, MPI_Comm_size(MPI_COMM_WORLD, &ranks);); (43, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (163, MPI, double total = MPI_Wtime() - start;); (46, MPI, double start = MPI_Wtime();)", "label": "(45, MPI, MPI_Comm_size(MPI_COMM_WORLD, &ranks);); (47, MPI, double start = MPI_Wtime();); (237, MPI, double now = MPI_Wtime();); (41, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);)"}
{"predict": "(37, MPI, runtime::mpi::register_mpi_comm(MPI_Comm_c2f(comm));); (16, MPI, MPI_Comm_rank(comm, &par_rank);); (16, MPI, MPI_Comm_size(comm, &par_size);)", "label": "(33, MPI, flow::Workspace::set_default_mpi_comm(MPI_Comm_c2f(comm));); (16, MPI, MPI_Comm_rank(comm, &par_rank);); (16, MPI, MPI_Comm_size(comm, &par_size);)"}
{"predict": "(13, OpenCL, retVal = clReleaseMemObject(smallBuffer);); (2, OpenCL, cl_mem smallBuffer = clCreateBufferWithProperties(context, &memProperties, 0, 4096 * 9, nullptr, &retVal);); (16, OpenCL, EXPECT_EQ(clReleaseContext(context), CL_SUCCESS);)", "label": "(13, OpenCL, retVal = clReleaseMemObject(smallBuffer);); (17, OpenCL, EXPECT_EQ(clReleaseContext(context), CL_SUCCESS);); (1, OpenCL, cl_mem smallBuffer = clCreateBufferWithProperties(clContext, &memProperties, flags, size, hostPtr, &retVal);)"}
{"predict": "(8, OpenMP, int tid = omp_get_thread_num();); (4, OpenMP, #pragma omp parallel num_threads(8)); (2, OpenMP, omp_set_affinity_format(formats[i]);)", "label": "(8, OpenMP, int tid = omp_get_thread_num();); (4, OpenMP, #pragma omp parallel num_threads(8)); (2, OpenMP, omp_set_affinity_format(formats[i]);)"}
{"predict": "(16, CUDA, __shared__ uninitialized_array<thrust::complex<T>, 1024> cache;); (29, CUDA, cache[id] += static_cast<thrust::complex<T>>(A_[(a * nchol + i) * nocc + b] * A_[(b * nchol + i) * nocc + a]);); (21, CUDA, thrust::complex<T2> const* A_(Tab + blockIdx.x * nocc * nocc * nchol);); (18, CUDA, cache[id]              = thrust::complex<T>(0.0);); (18, CUDA, thrust::complex<T> alp = static_cast<thrust::complex<T>>(alpha);)", "label": "(16, CUDA, __shared__ uninitialized_array<thrust::complex<T>, 1024> cache;); (29, CUDA, cache[id] += static_cast<thrust::complex<T>>(A_[(a * nchol + i) * nocc + b] * A_[(b * nchol + i) * nocc + a]);); (21, CUDA, thrust::complex<T2> const* A_(Tab + blockIdx.x * nocc * nocc * nchol);); (18, CUDA, cache[id]              = thrust::complex<T>(0.0);); (18, CUDA, thrust::complex<T> alp = static_cast<thrust::complex<T>>(alpha);)"}
{"predict": "(159, CUDA, CUDA_CHECK(cudaFree(d_B_array));); (159, CUDA, CUDA_CHECK(cudaFree(d_C_array));); (167, CUDA, CUDA_CHECK(cudaStreamDestroy(stream));); (155, CUDA, CUDA_CHECK(cudaFree(d_A_array));); (158, CUDA, CUDA_CHECK(cudaFree(d_A[i]));); (159, CUDA, CUDA_CHECK(cudaFree(d_C[i]));); (123, CUDA, CUDA_CHECK(cudaStreamSynchronize(stream));); (163, CUDA, CUDA_CHECK(cudaDeviceReset());); (154, CUDA, CUDA_CHECK(cudaFree(d_B[i]));); (75, CUDA, CUDA_CHECK(cudaStreamCreateWithFlags(&stream, cudaStreamNonBlocking));)", "label": "(169, CUDA, CUDA_CHECK(cudaFree(d_B_array));); (169, CUDA, CUDA_CHECK(cudaFree(d_C_array));); (177, CUDA, CUDA_CHECK(cudaStreamDestroy(stream));); (165, CUDA, CUDA_CHECK(cudaFree(d_A_array));); (168, CUDA, CUDA_CHECK(cudaFree(d_A[i]));); (169, CUDA, CUDA_CHECK(cudaFree(d_C[i]));); (133, CUDA, CUDA_CHECK(cudaStreamSynchronize(stream));); (174, CUDA, CUDA_CHECK(cudaDeviceReset());); (165, CUDA, CUDA_CHECK(cudaFree(d_B[i]));); (75, CUDA, CUDA_CHECK(cudaStreamCreateWithFlags(&stream, cudaStreamNonBlocking));)"}
{"predict": "(49, CUDA, HANDLE_ERROR( cudaFree( dev_a ) );); (49, CUDA, HANDLE_ERROR( cudaFree( dev_b ) );); (49, CUDA, HANDLE_ERROR( cudaFree( dev_partial_c ) );)", "label": "(48, CUDA, HANDLE_ERROR( cudaFree( dev_a ) );); (49, CUDA, HANDLE_ERROR( cudaFree( dev_partial_c ) );); (47, CUDA, HANDLE_ERROR( cudaFree( dev_b ) );)"}
{"predict": "(22, OpenMP, omp_destroy_nest_lock(&lck);); (9, OpenMP, #pragma omp for); (10, OpenMP, omp_set_nest_lock(&lck);); (10, OpenMP, #pragma omp flush); (15, OpenMP, omp_unset_nest_lock(&lck);); (3, OpenMP, #pragma omp parallel shared(lck)); (1, OpenMP, omp_init_nest_lock(&lck);)", "label": "(12, OpenMP, omp_set_nest_lock(&lck);); (18, OpenMP, omp_unset_nest_lock(&lck);); (8, OpenMP, #pragma omp for); (10, OpenMP, #pragma omp flush); (4, OpenMP, #pragma omp parallel shared(lck)); (2, OpenMP, omp_init_nest_lock(&lck);); (16, OpenMP, omp_destroy_nest_lock(&lck);)"}
{"predict": "(19, MPI, MPI_Type_get_true_extent(inkeysat, &keysat_true_lb, &keysat_true_extent);); (14, MPI, MPI_Type_get_true_extent(inkey, &key_true_lb, &key_true_extent);)", "label": "(19, MPI, MPI_Type_get_true_extent(inkeysat, &keysat_true_lb, &keysat_true_extent);); (76, MPI, MPI_Type_dup(inkey,    &values->key);); (13, MPI, MPI_Type_get_true_extent(inkey, &key_true_lb, &key_true_extent);); (75, MPI, MPI_Type_dup(inkeysat, &values->keysat);)"}
{"predict": "(6, TBB, auto h1 = tbb::flow::make_task(&parallel_fib, n-1);); (6, TBB, auto h2 = tbb::flow::make_task(&parallel_fib, n-2);); (6, TBB, tbb::flow::task_group g;); (8, TBB, tbb::flow::task::spawn_root_and_wait(g);); (10, TBB, tbb::flow::task::merge(h1,h2);); (6, TBB, tbb::flow::task::spawn(g, *h2);); (4, TBB, tbb::flow::task::spawn(g, *h1);)", "label": "(6, TBB, tbb::task_group g;); (6, TBB, tbb::task_handle h1 = make_task(g, x, n-1);); (6, TBB, tbb::task_handle h2 = make_task(g, y, n-2);)"}
{"predict": "(17, CUDA, cudaStreamDestroy(resources->exec_streams[i]);)", "label": "(17, CUDA, CUDA_FUNC(cudaStreamDestroy(resources->exec_streams[i]));)"}
{"predict": "(31, MPI, error_code = MPI_Comm_test_inter(comm, &flag);); (56, MPI, MPI_Comm_dup(comm, &dupcomm);); (133, MPI, MPI_Comm_rank(dupcomm, &rank);); (143, MPI, MPI_Barrier(dupcomm);); (67, MPI, MPI_Allreduce(&amode, &tmp_amode, 1, MPI_INT, ADIO_same_amode, dupcomm);)", "label": "(31, MPI, error_code = MPI_Comm_test_inter(comm, &flag);); (56, MPI, MPI_Comm_dup(comm, &dupcomm);); (126, MPI, MPI_Comm_rank(dupcomm, &rank);); (136, MPI, MPI_Barrier(dupcomm);); (67, MPI, MPI_Allreduce(&amode, &tmp_amode, 1, MPI_INT, ADIO_same_amode, dupcomm);)"}
{"predict": "(5, OpenMP, #pragma omp parallel for)", "label": "(5, OpenMP, #pragma omp parallel for)"}
{"predict": "(14, MPI, MPI_Bcast( &nbases, 1, MPI_INT, Parallel::serverid, MPI_COMM_WORLD );); (28, MPI, MPI_Bcast( &iphysdim, 1, MPI_INT, Parallel::serverid, MPI_COMM_WORLD );); (26, MPI, MPI_Bcast( &icelldim, 1, MPI_INT, Parallel::serverid, MPI_COMM_WORLD );); (38, MPI, MPI_Bcast( &nzones, 1, MPI_INT, Parallel::serverid, MPI_COMM_WORLD );)", "label": "(224, MPI, MPI_Bcast( &bocotype, 1, MPI_INT, Parallel::serverid, MPI_COMM_WORLD );); (190, MPI, MPI_Bcast( &nbocos, 1, MPI_INT, Parallel::serverid, MPI_COMM_WORLD );); (202, MPI, MPI_Bcast( &location, 1, MPI_INT, Parallel::serverid, MPI_COMM_WORLD );); (38, MPI, MPI_Bcast( &nzones, 1, MPI_INT, Parallel::serverid, MPI_COMM_WORLD );); (84, MPI, MPI_Bcast( zonename, 33, MPI_CHAR, Parallel::serverid, MPI_COMM_WORLD );); (295, MPI, MPI_Bcast( range.data(), npnts * index_dim, MPI_LONG_LONG, Parallel::serverid, MPI_COMM_WORLD );); (219, MPI, MPI_Bcast( &ptset_type, 1, MPI_INT, Parallel::serverid, MPI_COMM_WORLD );); (251, MPI, MPI_Bcast( pnts.data(), npnts * index_dim, MPI_LONG_LONG, Parallel::serverid, MPI_COMM_WORLD );); (81, MPI, MPI_Bcast( isize.data(), index_dim * 3, MPI_LONG_LONG, Parallel::serverid, MPI_COMM_WORLD );); (113, MPI, MPI_Bcast( &zoneType, 1, MPI_INT, Parallel::serverid, MPI_COMM_WORLD );); (220, MPI, MPI_Bcast( normalIndex.data(), index_dim, MPI_INT, Parallel::serverid, MPI_COMM_WORLD );); (216, MPI, MPI_Bcast( &npnts, 1, MPI_LONG_LONG, Parallel::serverid, MPI_COMM_WORLD );); (289, MPI, MPI_Bcast( donor_range.data(), npnts * index_dim, MPI_LONG_LONG, Parallel::serverid, MPI_COMM_WORLD );); (164, MPI, MPI_Bcast( pcoor, nNodes, MPI_DOUBLE, Parallel::serverid, MPI_COMM_WORLD );); (145, MPI, MPI_Bcast( &dataType, 1, MPI_INT, Parallel::serverid, MPI_COMM_WORLD );); (283, MPI, MPI_Bcast( connectname, 33, MPI_CHAR, Parallel::serverid, MPI_COMM_WORLD );); (243, MPI, MPI_Bcast( normalList.data(), nNodes * iphysdim * sizeof( double ), MPI_CHAR, Parallel::serverid, MPI_COMM_WORLD );); (-3, MPI, MPI_Bcast( &nbases, 1, MPI_INT, Parallel::serverid, MPI_COMM_WORLD );); (205, MPI, MPI_Bcast( boconame, 33, MPI_CHAR, Parallel::serverid, MPI_COMM_WORLD );); (139, MPI, MPI_Bcast( coordname, 33, MPI_CHAR, Parallel::serverid, MPI_COMM_WORLD );); (208, MPI, MPI_Bcast( &normalListSize, 1, MPI_LONG_LONG, Parallel::serverid, MPI_COMM_WORLD );); (256, MPI, MPI_Bcast( &n1to1, 1, MPI_INT, Parallel::serverid, MPI_COMM_WORLD );); (6, MPI, MPI_Bcast( &icelldim, 1, MPI_INT, Parallel::serverid, MPI_COMM_WORLD );); (6, MPI, MPI_Bcast( &iphysdim, 1, MPI_INT, Parallel::serverid, MPI_COMM_WORLD );); (205, MPI, MPI_Bcast( &ndataset, 1, MPI_INT, Parallel::serverid, MPI_COMM_WORLD );); (274, MPI, MPI_Bcast( donorname, 33, MPI_CHAR, Parallel::serverid, MPI_COMM_WORLD );); (104, MPI, MPI_Bcast( &ncoords, 1, MPI_INT, Parallel::serverid, MPI_COMM_WORLD );); (199, MPI, MPI_Bcast( &normalDataType, 1, MPI_INT, Parallel::serverid, MPI_COMM_WORLD );)"}
{"predict": "(58, OpenMP, test_comp_vlen_strings(COMP_VL_STRS_FILE, \"group\", 1);); (58, OpenMP, test_comp_vlen_strings(COMP_VL_STRS_FILE, \"group_copy\", 0);)", "label": "(58, OpenMP, test_comp_vlen_strings(COMP_VL_STRS_FILE, \"group\", 1);); (58, OpenMP, test_comp_vlen_strings(COMP_VL_STRS_FILE, \"group_copy\", 0);)"}
{"predict": "(3, CUDA, using alloc = thrust::cuda::allocator<double>;); (11, CUDA, cudaDeviceSynchronize(); benchmark::DoNotOptimize(base(y)); benchmark::ClobberMemory();)", "label": "(3, CUDA, using alloc = thrust::cuda::allocator<double>;); (11, CUDA, cudaDeviceSynchronize(); benchmark::DoNotOptimize(y.base()); benchmark::ClobberMemory();)"}
{"predict": "(32, OpenMP, #pragma omp target); (35, OpenMP, int device_id = omp_get_default_device();); (54, OpenMP, #pragma omp target data use_device_ptr(a))", "label": "(32, OpenMP, #pragma omp target); (35, OpenMP, int device_id = omp_get_default_device();); (54, OpenMP, #pragma omp target data use_device_ptr(a))"}
{"predict": "(16, CUDA, cudaMemcpy(d_B, h_B, DSIZE*sizeof(float), cudaMemcpyHostToDevice);); (20, CUDA, cudaMemcpy(h_C, d_C, DSIZE*sizeof(float), cudaMemcpyDeviceToHost);); (9, CUDA, cudaMalloc(&d_A, DSIZE*sizeof(float));); (10, CUDA, cudaMalloc(&d_C, DSIZE*sizeof(float));); (17, CUDA, cudaDeviceSynchronize();); (12, CUDA, cudaMemcpy(d_A, h_A, DSIZE*sizeof(float), cudaMemcpyHostToDevice);); (6, CUDA, cudaMalloc(&d_B, DSIZE*sizeof(float));)", "label": "(28, CUDA, cudaCheckErrors(\"kernel execution failure or cudaMemcpy H2D failure\");); (14, CUDA, cudaMemcpy(d_A, h_A, DSIZE*sizeof(float), cudaMemcpyHostToDevice);); (16, CUDA, cudaCheckErrors(\"cudaMemcpy H2D failure\");); (23, CUDA, cudaMemcpy(h_C, d_C, DSIZE*sizeof(float), cudaMemcpyDeviceToHost);); (13, CUDA, cudaMemcpy(d_B, h_B, DSIZE*sizeof(float), cudaMemcpyHostToDevice);); (7, CUDA, cudaMalloc(&d_C, DSIZE*sizeof(float));); (5, CUDA, cudaMalloc(&d_B, DSIZE*sizeof(float));); (6, CUDA, cudaCheckErrors(\"cudaMalloc failure\");); (15, CUDA, cudaCheckErrors(\"kernel launch failure\");); (1, CUDA, cudaMalloc(&d_A, DSIZE*sizeof(float));)"}
{"predict": "(16, OpenMP, #pragma omp target teams distribute parallel for)", "label": "(17, OpenMP, #pragma omp target teams distribute parallel for collapse(2)); (23, OpenMP, #pragma omp target exit data map(delete:A[0:N1],B[0:N1],C[0:N2])); (14, OpenMP, #pragma omp target enter data map(to: A[0:N1],B[0:N1],C[0:N2])); (20, OpenMP, #pragma omp target update from(C[0:N2]))"}
{"predict": "(16, OpenMP, #pragma omp parallel for)", "label": "(16, OpenMP, #pragma omp parallel for)"}
{"predict": "(57, OpenCL, clReleaseEvent(event);)", "label": "(54, OpenCL, clReleaseEvent(event);)"}
{"predict": "(17, MPI, *v6 = MPI_Cart_create( (MPI_Comm)(*v1), *v2, l4, l5, *v3, ierr );)", "label": "(17, MPI, *ierr = MPI_Cart_create( (MPI_Comm)(*v1), *v2, v3, l4, l5, (MPI_Comm *)(v6) );)"}
{"predict": "(191, MPI, MPI_Wait( &send_req[p], &status);); (191, MPI, MPI_Wait( &send_req[procs+p], &status);); (170, MPI, MPI_Recv( itemp, it, mpi_int_t, p, p, grid->comm, &status );)", "label": "(191, MPI, MPI_Wait( &send_req[p], &status);); (191, MPI, MPI_Wait( &send_req[procs+p], &status);); (170, MPI, MPI_Recv( itemp, it, mpi_int_t, p, p, grid->comm, &status );)"}
{"predict": "(16, CUDA, return CUDA(cudaGetLastError());)", "label": "(16, CUDA, return CUDA(cudaGetLastError());)"}
{"predict": "(50, CUDA, CHECK_CUDA(cudaMalloc(&dy, dataSize * sizeof(int32_t)));); (75, CUDA, CHECK_HIEDNN(hiednnDestroyCudaHandle(handle));); (32, CUDA, CHECK_HIEDNN(hiednnCreateCudaHandle(&handle));); (76, CUDA, CHECK_CUDA(cudaFree(dy));); (45, CUDA, CHECK_CUDA(cudaMalloc(&dx, dataSize * sizeof(int32_t)));); (32, CUDA, CHECK_HIEDNN(hiednnSetCudaStream(handle, 0));); (72, CUDA, CHECK_CUDA(cudaFree(dx));)", "label": "(50, CUDA, CHECK_CUDA(cudaMalloc(&dy, dataSize * sizeof(int32_t)));); (75, CUDA, CHECK_HIEDNN(hiednnDestroyCudaHandle(handle));); (32, CUDA, CHECK_HIEDNN(hiednnCreateCudaHandle(&handle));); (76, CUDA, CHECK_CUDA(cudaFree(dy));); (45, CUDA, CHECK_CUDA(cudaMalloc(&dx, dataSize * sizeof(int32_t)));); (32, CUDA, CHECK_HIEDNN(hiednnSetCudaStream(handle, 0));); (72, CUDA, CHECK_CUDA(cudaFree(dx));)"}
{"predict": "(23, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);)", "label": "(23, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);)"}
{"predict": "(28, OpenMP, #pragma omp parallel for reduction(&&: Red)); (3, OpenMP, #pragma omp parallel for reduction(-: Red)); (14, OpenMP, #pragma omp parallel for reduction(&: Red)); (17, OpenMP, #pragma omp parallel for reduction(|: Red)); (4, OpenMP, #pragma omp parallel for reduction(+: Red)); (19, OpenMP, #pragma omp parallel for reduction(^: Red)); (20, OpenMP, #pragma omp parallel for reduction(~: Red)); (23, OpenMP, #pragma omp parallel for reduction(||: Red))", "label": "(28, OpenMP, #pragma omp parallel for reduction(&&: Red)); (7, OpenMP, #pragma omp parallel for reduction(-: Red)); (14, OpenMP, #pragma omp parallel for reduction(&: Red)); (17, OpenMP, #pragma omp parallel for reduction(|: Red)); (0, OpenMP, #pragma omp parallel for reduction(+: Red)); (19, OpenMP, #pragma omp parallel for reduction(^: Red)); (6, OpenMP, #pragma omp parallel for reduction(*: Red)); (25, OpenMP, #pragma omp parallel for reduction(||: Red))"}
{"predict": "(19, OpenMP, #pragma omp simd aligned (argc : 5)); (11, OpenMP, #pragma omp simd aligned (argc); (21, OpenMP, #pragma omp simd aligned (argv[1])); (26, OpenMP, #pragma omp simd aligned(h)); (29, OpenMP, #pragma omp parallel); (13, OpenMP, #pragma omp simd aligned (*argc > 0 ? argv[1] : argv[2])); (18, OpenMP, #pragma omp simd aligned(e, g)); (0, OpenMP, #pragma omp simd aligned); (1, OpenMP, #pragma omp simd aligned (); (20, OpenMP, #pragma omp simd aligned(i)); (34, OpenMP, #pragma omp simd aligned(f)); (12, OpenMP, #pragma omp simd aligned (S1)); (21, OpenMP, #pragma omp simd aligned(v:16)); (0, OpenMP, #pragma omp simd aligned ()); (25, OpenMP, #pragma omp simd aligned(f:j)); (32, OpenMP, #pragma omp simd aligned(f))", "label": "(25, OpenMP, #pragma omp simd aligned(e, g)); (18, OpenMP, #pragma omp simd aligned (argc : 5)); (29, OpenMP, #pragma omp simd aligned(i)); (5, OpenMP, #pragma omp simd aligned (); (17, OpenMP, #pragma omp simd aligned (S1)); (28, OpenMP, #pragma omp parallel); (40, OpenMP, #pragma omp simd aligned(f:j)); (10, OpenMP, #pragma omp simd aligned (*argc > 0 ? argv[1] : argv[2])); (6, OpenMP, #pragma omp simd aligned (argc,); (14, OpenMP, #pragma omp simd aligned (argv[1])); (-4, OpenMP, #pragma omp simd aligned); (-1, OpenMP, #pragma omp simd aligned ()); (25, OpenMP, #pragma omp simd aligned(v:16)); (28, OpenMP, #pragma omp simd aligned(f)); (14, OpenMP, #pragma omp simd aligned(h)); (-3, OpenMP, #pragma omp simd aligned (argc)"}
{"predict": "(13, MPI, MPI_Type_size(type, &size);); (19, MPI, MPI_Type_free(&type);); (13, MPI, mpi_errno = MPI_Type_ub(type, NULL);); (6, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (4, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (11, MPI, MPI_Error_class(mpi_errno, &errclass);); (4, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);)", "label": "(13, MPI, MPI_Type_size(type, &size);); (14, MPI, mpi_errno = MPI_Type_ub(type, NULL);); (18, MPI, MPI_Type_free(&type);); (6, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (4, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (11, MPI, MPI_Error_class(mpi_errno, &errclass);); (4, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);)"}
{"predict": "(26, MPI, MPI_Start(&req);); (14, MPI, MPI_Info_create(&info);); (10, MPI, MPI_Comm_size(comm, &size);); (24, MPI, MPI_Reduce_scatter_init(sendbuf, &recvbuf, recvcounts, MPI_INT, MPI_SUM, comm, info, &req);); (33, MPI, MPI_Request_free(&req);); (38, MPI, MPI_Info_free(&info);); (7, MPI, MPI_Comm_rank(comm, &rank);); (21, MPI, MPI_Wait(&req, MPI_STATUS_IGNORE);)", "label": "(26, MPI, MPI_Start(&req);); (11, MPI, MPI_Comm_size(comm, &size);); (13, MPI, MPI_Info_create(&info);); (24, MPI, MPI_Wait(&req, MPI_STATUS_IGNORE);); (36, MPI, MPI_Info_free(&info);); (34, MPI, MPI_Request_free(&req);); (18, MPI, MPI_Reduce_scatter_init(sendbuf, &recvbuf, recvcounts, MPI_INT, MPI_SUM, comm, info, &req);); (6, MPI, MPI_Comm_rank(comm, &rank);)"}
{"predict": "(4, MPI, MPI_Init(&argc, &argv);); (30, MPI, MPI_Finalize();); (4, MPI, int ierr = MPI_Comm_rank(MPI_COMM_WORLD, &rank);)", "label": "(4, MPI, MPI_Init(&argc, &argv);); (30, MPI, MPI_Finalize();); (3, MPI, int ierr = MPI_Comm_rank(MPI_COMM_WORLD, &rank);)"}
{"predict": "(7, CUDA, __shared__ block_radix_sort_t::TempStorage temp_storage;)", "label": "(7, CUDA, __shared__ block_radix_sort_t::TempStorage temp_storage;)"}
{"predict": "(24, CUDA, extern __shared__ char smem_[];); (26, CUDA, __shared__ half2 exp_sum[WARPS];); (24, CUDA, __shared__ half2 exp_diff[WARPS];)", "label": "(24, CUDA, extern __shared__ char smem_[];); (26, CUDA, __shared__ half2 smem_red[VECS_PER_CTA][WARPS];)"}
{"predict": "(63, OpenCL, plan->program = clCreateProgramWithSource(context, 1, &source_str, NULL, &err);); (90, OpenCL, err = clGetDeviceInfo(devices[i], CL_DEVICE_NAME, sizeof(devicename), devicename, NULL);); (114, OpenCL, err = clReleaseProgram(plan->program);); (67, OpenCL, err = clGetDeviceInfo(devices[i], CL_DEVICE_TYPE, sizeof(device_type), &device_type, NULL);); (73, OpenCL, err = clBuildProgram(plan->program, 1, &devices[i], NULL, NULL, NULL);); (88, OpenCL, err = clReleaseKernel(kInfo->kernel);); (110, OpenCL, clReleaseProgram(plan->program);)", "label": "(76, OpenCL, err = clBuildProgram(plan->program, 1, &devices[i], coptions, NULL, NULL);); (59, OpenCL, plan->program = clCreateProgramWithSource(context, 1, (const char**) &source_str, NULL, &err);); (68, OpenCL, err = clGetDeviceInfo(devices[i], CL_DEVICE_TYPE, sizeof(device_type), &device_type, NULL);); (88, OpenCL, err = clGetDeviceInfo(devices[i], CL_DEVICE_NAME, sizeof(devicename), devicename, NULL);)"}
{"predict": "(27, MPI, MPI_Isend(in, count, type, left, tag, comm, &requests[window_size + w]);); (20, MPI, MPI_Isend(in, count, type, right, tag, comm, &requests[w]);); (16, MPI, MPI_Waitall(2 * window_size, requests, MPI_STATUSES_IGNORE);); (26, MPI, MPI_Recv(out, count, type, left, tag, comm, MPI_STATUS_IGNORE);); (19, MPI, MPI_Recv(out, count, type, right, tag, comm, MPI_STATUS_IGNORE);); (2, MPI, MPI_Comm_group(comm, &group);)", "label": "(24, MPI, MPI_Recv(&ack, 1, MPI_CHAR, right, tag, comm, MPI_STATUS_IGNORE);); (26, MPI, MPI_Irecv(out, count, type, set_src ? left : MPI_ANY_SOURCE, tag, comm, &requests[w]);); (28, MPI, MPI_Isend(in, count, type, left, (tag == MPI_ANY_TAG ? 0 : tag), comm, &requests[w + window_size]);); (20, MPI, MPI_Waitall(2 * window_size, requests, MPI_STATUSES_IGNORE);); (17, MPI, MPI_Isend(in, count, type, right, (tag == MPI_ANY_TAG ? 0 : tag), comm, &requests[w + window_size]);); (13, MPI, MPI_Irecv(out, count, type, set_src ? right : MPI_ANY_SOURCE, tag, comm, &requests[w]);); (27, MPI, MPI_Send(&ack, 1, MPI_CHAR, left, (tag == MPI_ANY_TAG ? 0 : tag), comm);)"}
{"predict": "(22, OpenMP, #pragma omp parallel master taskloop simd collapse (foobool(argc)), collapse (true), collapse (-5)); (36, OpenMP, #pragma omp parallel master taskloop simd collapse (2)); (4, OpenMP, #pragma omp parallel master taskloop simd collapse ()); (10, OpenMP, #pragma omp parallel master taskloop simd collapse (ST); (11, OpenMP, #pragma omp parallel master taskloop simd collapse (1))); (-3, OpenMP, #pragma omp parallel master taskloop simd collapse); (-2, OpenMP, #pragma omp parallel master taskloop simd collapse (); (26, OpenMP, #pragma omp parallel master taskloop simd collapse (1)); (9, OpenMP, #pragma omp parallel master taskloop simd collapse ((ST > 0) ? 1 + ST : 2)); (1, OpenMP, #pragma omp parallel master taskloop simd collapse (argc); (14, OpenMP, #pragma omp parallel master taskloop simd collapse (S)); (24, OpenMP, #pragma omp parallel master taskloop simd collapse (N))", "label": "(13, OpenMP, #pragma omp parallel master taskloop simd collapse (ST); (5, OpenMP, #pragma omp parallel master taskloop simd collapse ()); (15, OpenMP, #pragma omp parallel master taskloop simd collapse ((ST > 0) ? 1 + ST : 2)); (1, OpenMP, #pragma omp parallel master taskloop simd collapse (); (20, OpenMP, #pragma omp parallel master taskloop simd collapse (S)); (10, OpenMP, #pragma omp parallel master taskloop simd collapse (1))); (27, OpenMP, #pragma omp parallel master taskloop simd collapse (1)); (30, OpenMP, #pragma omp parallel master taskloop simd collapse (2)); (14, OpenMP, #pragma omp parallel master taskloop simd collapse (foobool(argc)), collapse (true), collapse (-5)); (-7, OpenMP, #pragma omp parallel master taskloop simd collapse); (0, OpenMP, #pragma omp parallel master taskloop simd collapse (argc); (24, OpenMP, #pragma omp parallel master taskloop simd collapse (N))"}
{"predict": "(1, TBB, tbb::task_group_context tgc(tbb::task_group_context::isolated);); (1, TBB, tbb::global_control s(tbb::global_control::max_allowed_parallelism, 1);)", "label": "(5, TBB, tbb::task_group_context tgc;); (15, TBB, tgc.set_priority(tbb::priority_high);); (4, TBB, tgc.set_priority(tbb::priority_normal);)"}
{"predict": "(8, OpenMP, #pragma omp parallel for)", "label": "(8, OpenMP, #pragma omp parallel for)"}
{"predict": "(13, OpenMP, #pragma omp parallel); (13, OpenMP, #pragma omp task if (task: false))", "label": "(13, OpenMP, #pragma omp parallel); (13, OpenMP, #pragma omp task if (task: false))"}
{"predict": "(29, OpenMP, #pragma omp distribute parallel for schedule(static)); (13, OpenMP, #pragma omp distribute parallel for dist_schedule(static); (54, OpenMP, #pragma omp distribute parallel for schedule(dynamic, ch)); (20, OpenMP, #pragma omp distribute parallel for dist_schedule(static, ch)); (36, OpenMP, #pragma omp distribute parallel for schedule(static, ch)); (42, OpenMP, #pragma omp distribute parallel for schedule(dynamic)); (3, OpenMP, #pragma omp target); (48, OpenMP, #pragma omp distribute parallel for schedule(guided)); (2, OpenMP, #pragma omp teams)", "label": "(42, OpenMP, #pragma omp distribute parallel for schedule(static, ch)); (49, OpenMP, #pragma omp distribute parallel for schedule(dynamic)); (7, OpenMP, #pragma omp distribute parallel for); (15, OpenMP, #pragma omp distribute parallel for dist_schedule(static)); (30, OpenMP, #pragma omp distribute parallel for schedule(static)); (53, OpenMP, #pragma omp distribute parallel for schedule(dynamic, ch)); (5, OpenMP, #pragma omp cancel for); (0, OpenMP, #pragma omp target); (18, OpenMP, #pragma omp distribute parallel for dist_schedule(static, ch)); (-1, OpenMP, #pragma omp teams)"}
{"predict": "(54, OpenMP, #pragma omp distribute private(i)); (6, OpenMP, #pragma omp target); (70, OpenMP, #pragma omp distribute private(j)); (35, OpenMP, #pragma omp distribute firstprivate(i)); (12, OpenMP, #pragma omp distribute private (argc,); (23, OpenMP, #pragma omp distribute private (a, b, c, d, f)); (36, OpenMP, #pragma omp teams private(i)); (48, OpenMP, #pragma omp distribute private(i)); (24, OpenMP, #pragma omp distribute private (argv[1])); (12, OpenMP, #pragma omp distribute private (argc)); (63, OpenMP, #pragma omp teams reduction(+:i)); (27, OpenMP, #pragma omp distribute private(h)); (35, OpenMP, #pragma omp teams firstprivate(i)); (19, OpenMP, #pragma omp distribute private(ba) allocate , allocate(, allocate(omp_default , allocate(omp_default_mem_alloc, allocate(omp_default_mem_alloc:, allocate(omp_default_mem_alloc: argc, allocate(omp_default_mem_alloc: argv), allocate(argv)); (14, OpenMP, #pragma omp distribute private (S1)); (5, OpenMP, #pragma omp distribute private (argc > 0 ? argv[1] : argv[2])); (-8, OpenMP, #pragma omp distribute private); (17, OpenMP, #pragma omp distribute private(da)); (21, OpenMP, #pragma omp distribute private(e, g)); (-10, OpenMP, #pragma omp distribute private (); (29, OpenMP, #pragma omp distribute private(i)); (43, OpenMP, #pragma omp distribute firstprivate(i)); (19, OpenMP, #pragma omp distribute private(ca)); (5, OpenMP, #pragma omp distribute private (argv[1])); (12, OpenMP, #pragma omp distribute private(S2::S2s)); (-4, OpenMP, #pragma omp distribute private (d)); (-1, OpenMP, #pragma omp distribute private (argc)); (18, OpenMP, #pragma omp distribute private(threadvar, B::x)); (52, OpenMP, #pragma omp distribute private(j)); (12, OpenMP, #pragma omp distribute private(S2::S2sc", "label": "(35, OpenMP, #pragma omp distribute private(e, g)); (51, OpenMP, #pragma omp parallel private(i)); (5, OpenMP, #pragma omp distribute private); (12, OpenMP, #pragma omp distribute private (argc,); (9, OpenMP, #pragma omp distribute private (argc); (36, OpenMP, #pragma omp target); (19, OpenMP, #pragma omp distribute private (argv[1])); (12, OpenMP, #pragma omp distribute private (argc) allocate , allocate(, allocate(omp_default , allocate(omp_default_mem_alloc, allocate(omp_default_mem_alloc:, allocate(omp_default_mem_alloc: argc, allocate(omp_default_mem_alloc: argv), allocate(argv)); (9, OpenMP, #pragma omp distribute private (argc > 0 ? argv[1] : argv[2])); (14, OpenMP, #pragma omp distribute private (a, b, c, d, f)); (17, OpenMP, #pragma omp distribute private(ba)); (39, OpenMP, #pragma omp distribute private(j)); (-1, OpenMP, #pragma omp distribute private ()); (24, OpenMP, #pragma omp distribute private(h)); (44, OpenMP, #pragma omp teams reduction(+:i)); (18, OpenMP, #pragma omp distribute private(S2::S2s)); (43, OpenMP, #pragma omp distribute private(i)); (14, OpenMP, #pragma omp distribute private(da)); (-9, OpenMP, #pragma omp distribute private (); (2, OpenMP, #pragma omp distribute private (S1)); (29, OpenMP, #pragma omp teams private(i)); (8, OpenMP, #pragma omp distribute private(ca)); (17, OpenMP, #pragma omp distribute); (22, OpenMP, #pragma omp distribute firstprivate(i)); (30, OpenMP, #pragma omp teams firstprivate(i)); (17, OpenMP, #pragma omp teams)"}
{"predict": "(22, CUDA, __shared__  volatile ll_t smem[_TPB_];)", "label": "(22, CUDA, __shared__ volatile ll_t smem[_TPB_];)"}
{"predict": "(3, MPI, MPI_Init(&argc, &argv);); (24, MPI, MPI_Barrier(MPI_COMM_WORLD);); (87, MPI, MPI_Finalize();); (2, MPI, MPI_Comm_size(MPI_COMM_WORLD, &params.comm_size);); (2, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &params.comm_rank);)", "label": "(3, MPI, MPI_Init(&argc, &argv);); (303, MPI, MPI_Finalize();); (23, MPI, MPI_Barrier(MPI_COMM_WORLD);); (222, MPI, MPI_Allreduce(&local_opt_worst_time, &opt_worst_time, 1, MPI_DOUBLE, MPI_MAX, MPI_COMM_WORLD);)"}
{"predict": "(7, CUDA, fcuda::Check_CudaErroorFun(\"DgReduSumFloat3\");); (5, CUDA, cudaMemcpy(data,datag+inidata,sizeof(float3)*ndata,cudaMemcpyDeviceToHost);)", "label": "(7, CUDA, fcuda::Check_CudaErroorFun(\"DgReduSumFloat3\");); (5, CUDA, cudaMemcpy(data,datag+inidata,sizeof(float3)*ndata,cudaMemcpyDeviceToHost);)"}
{"predict": "(125, OpenMP, #define GOMP_CRITICAL_SWP(FLAG))", "label": "(127, OpenMP, #define GOMP_CRITICAL_SWP(FLAG))"}
{"predict": "(27, CUDA, cudaMemcpy(dst, src, bytes, kind);); (28, CUDA, cudaDeviceSynchronize();); (30, CUDA, cudaEventSynchronize(stopEvent);); (40, CUDA, cudaEventDestroy(startEvent);); (17, CUDA, cudaEvent_t startEvent = thrust::raw_pointer_cast(&timer.start);); (40, CUDA, cudaEventDestroy(stopEvent);); (16, CUDA, cudaEvent_t stopEvent = thrust::raw_pointer_cast(&timer.stop);)", "label": "(27, CUDA, cudaMemcpy(dst, src, bytes, kind);)"}
{"predict": "(7, TBB, tbb::concurrent_vector< std::pair<const int, int> > arrIntTbb;); (b); (2, TBB, typedef tbb::concurrent_vector< std::pair<const int, int> > container_type;); (2, TBB, container_type::value_type a, b;)", "label": "(9, TBB, tbb::atomic<int> b;); (6, TBB, std::list< std::pair< const int, tbb::atomic<int> > > arrIntTbb;)"}
{"predict": "(97, MPI, MPI_Query_thread(&omp_mpi_level);); (38, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (33, MPI, MPI_Init_thread(&argc, &argv, required, &provided);)", "label": "(97, MPI, MPI_Query_thread(&omp_mpi_level);); (38, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (33, MPI, MPI_Init_thread(&argc, &argv, required, &provided);)"}
{"predict": "(431, MPI, start_exch = MPI_Wtime();); (146, MPI, start_comm_time = MPI_Wtime();); (159, MPI, end_comm_time = MPI_Wtime();); (496, MPI, start_write_time = MPI_Wtime();); (439, MPI, end_exch = MPI_Wtime();); (505, MPI, end_write_time = MPI_Wtime();)", "label": "(391, MPI, start_exch = MPI_Wtime();); (143, MPI, start_comm_time = MPI_Wtime();); (156, MPI, end_comm_time = MPI_Wtime();); (435, MPI, start_write_time = MPI_Wtime();); (442, MPI, end_write_time = MPI_Wtime();); (495, MPI, end_exch = MPI_Wtime();)"}
{"predict": "(33, CUDA, CUDA_CHECK(cudaStreamSynchronize(stream));); (35, CUDA, CUDA_CHECK(cudaFree(d_data));)", "label": "(33, CUDA, CUDA_CHECK(cudaStreamSynchronize(stream));); (35, CUDA, CUDA_CHECK(cudaFree(d_data));)"}
{"predict": "(44, MPI, MPI_Pack(a, 1, xpose, buffer, bufsize, &position, MPI_COMM_WORLD);); (58, MPI, MPI_Type_free(&row);); (31, MPI, MPI_Type_commit(&xpose);); (55, MPI, MPI_Type_free(&xpose);); (27, MPI, MPI_Type_hvector(100, 1, sizeofint, row, &xpose);); (22, MPI, MPI_Type_extent(MPI_INT, &sizeofint);); (29, MPI, MPI_Pack_size(1, xpose, MPI_COMM_WORLD, &bufsize);); (34, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);); (39, MPI, MPI_Unpack(buffer, bufsize, &position, b, 100 * 100, MPI_INT, MPI_COMM_WORLD);); (21, MPI, MPI_Type_vector(100, 1, 100, MPI_INT, &row);)", "label": "(43, MPI, MPI_Pack(a, 1, xpose, buffer, bufsize, &position, MPI_COMM_WORLD);); (59, MPI, MPI_Type_free(&row);); (31, MPI, MPI_Type_commit(&xpose);); (56, MPI, MPI_Type_free(&xpose);); (28, MPI, MPI_Type_hvector(100, 1, sizeofint, row, &xpose);); (23, MPI, MPI_Type_extent(MPI_INT, &sizeofint);); (30, MPI, MPI_Pack_size(1, xpose, MPI_COMM_WORLD, &bufsize);); (34, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);); (39, MPI, MPI_Unpack(buffer, bufsize, &position, b, 100 * 100, MPI_INT, MPI_COMM_WORLD);); (22, MPI, MPI_Type_vector(100, 1, 100, MPI_INT, &row);)"}
{"predict": "(24, MPI, MPI_Isend(sendbuf, BUF_COUNT, MPI_INT, i, 1, MPI_COMM_WORLD, &sendreqs[i]);); (8, MPI, MPI_Comm_size(MPI_COMM_WORLD, &nprocs);); (8, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (41, MPI, MPI_Waitall(nprocs, sendreqs, sendstats);); (20, MPI, MPI_Barrier(MPI_COMM_WORLD);)", "label": "(10, MPI, MPI_Comm_size(MPI_COMM_WORLD, &nprocs);); (8, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (42, MPI, MPI_Waitall(nprocs, sendreqs, sendstats);); (13, MPI, MPI_Barrier(MPI_COMM_WORLD);); (21, MPI, MPI_Isend(sendbuf, BUF_COUNT, MPI_INT, i, 0, MPI_COMM_WORLD, &sendreqs[i]);)"}
{"predict": "(3, MPI, MPI_Init(&argc, &argv);); (167, CUDA, cudaStat = cudaMalloc((void**)&d_A, llda * colsA * sizeof(double));); (240, CUDA, cudaStat = cudaStreamDestroy(localStream);); (245, MPI, MPI_Barrier(MPI_COMM_WORLD);); (167, CUDA, cudaStat = cudaMalloc((void**)&d_tau, numColDevices * sizeof(double));); (177, CUDA, cudaStat = cudaMemset(d_info_geqrf, 0, sizeof(int));); (235, CUDA, cudaStat = cudaFree(d_info_geqrf);); (238, CUDA, cudaStat = cudaFree(d_tau);); (202, CUDA, cudaStat = cudaStreamSynchronize(localStream);); (176, CUDA, cudaStat = cudaMalloc((void**)&d_info_geqrf, sizeof(int));); (182, CUDA, cudaStat = cudaMalloc((void**)&d_work_geqrf, workspaceInBytesOnDevice_geqrf);); (234, CUDA, cudaStat = cudaFree(d_work_geqrf);); (229, CUDA, cudaStat = cudaFree(d_A);); (104, CUDA, assert(cudaStat == cudaSuccess);); (43, CUDA, cudaStat = cudaSetDevice(localDeviceId);); (199, MPI, double begin = MPI_Wtime();); (230, CUDA, cudaStat = cudaFree(d_info_geqrf);); (45, CUDA, cudaStat = cudaStreamCreate(&localStream);); (206, MPI, double end = MPI_Wtime();); (107, MPI, MPI_Barrier(MPI_COMM_WORLD);); (223, CUDA, cudaStat = cudaFree(d_tau);); (3, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rankId);); (226, CUDA, cudaStat = cudaFree(d_work_geqrf);); (229, CUDA, cudaStat = cudaFree(d_info_geqrf);); (-3, MPI, MPI_Comm_size(MPI_COMM_WORLD, &rankSize);); (100, CUDA, cudaStat = cudaMalloc((void**)&d_info_geqrf, sizeof(int));); (109, CUDA, cudaStat = cudaMemset(d_info_ge", "label": "(358, CUDA, cudaStat = cudaMemcpy(h_A, d_global_Q, sizeof(double) * lda * colsA, cudaMemcpyDeviceToHost);); (196, CUDA, cudaStat = cudaMalloc((void**)&d_info_geqrf, sizeof(int));); (27, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rankId);); (429, CUDA, cudaStat = cudaFree(d_tau);); (-1, MPI, MPI_Init(NULL, NULL);); (274, CUDA, cudaStat = cudaMemcpyAsync(&h_info_geqrf, d_info_geqrf, sizeof(int), cudaMemcpyDeviceToHost, localStream);); (471, CUDA, cudaStat = cudaStreamDestroy(localStream);); (474, MPI, MPI_Barrier(MPI_COMM_WORLD);); (42, CUDA, cudaStat = cudaSetDevice(localDeviceId);); (43, CUDA, cudaStat = cudaFree(0);); (194, CUDA, cudaStat = cudaMemset(d_info_geqrf, 0, sizeof(int));); (428, CUDA, cudaStat = cudaFree(d_work_geqrf);); (178, CUDA, cudaStat = cudaMalloc((void**)&d_tau, localColsA * sizeof(double));); (301, CUDA, cudaStat = cudaMalloc((void**)&d_global_Q, lda * colsA * sizeof(double));); (213, CUDA, cudaStat = cudaMalloc((void**)&d_work_geqrf, workspaceInBytesOnDevice_geqrf);); (431, CUDA, cudaStat = cudaFree(d_info_geqrf);); (12, MPI, MPI_Comm_size(MPI_COMM_WORLD, &rankSize);); (154, CUDA, cudaStat = cudaMalloc((void**)&d_A, localColsA * LLDA * sizeof(double));); (305, CUDA, cudaStat = cudaMemcpy(d_global_R, d_global_Q, sizeof(double) * lda * colsA, cudaMemcpyDeviceToDevice);); (302, CUDA, cudaStat = cudaMemcpy(d_global_Q, h_A, sizeof(double) * lda * colsA, cudaMemcpyHostToDevice);); (53, CUDA, cudaStat = cudaStreamCreate(&localStream);); (463, MPI, MPI_Finalize();); (403, CUDA, cudaStat = cudaFree(d_A);); (293, CUDA, cudaStat = cudaMalloc((void**)&d_global_R, lda * colsA * sizeof(double));); (294, CUDA, cudaStat = cudaMalloc((void**)&d_global_tau, colsA * sizeof(double));)"}
{"predict": "(6, CUDA, __shared__ typename cg::thread_block_group<T>::scratch_type scratch;)", "label": "(4, CUDA, __shared__ cg::block_tile_memory<BlockSize> scratch;)"}
{"predict": "(60, CUDA, cudaFree( deviceInt );); (60, CUDA, cudaFreeHost( hostInt );)", "label": "(59, CUDA, cudaFree( deviceInt );); (59, CUDA, cudaFreeHost( hostInt );)"}
{"predict": "(101, CUDA, cudaFree( dptrForce[i] );); (99, CUDA, cudaFree( dptrPosMass[i] );); (24, CUDA, cudaSetDevice( oldDevice );)", "label": "(98, CUDA, cudaFree( dptrPosMass[i] );); (100, CUDA, cudaSetDevice( oldDevice );); (97, CUDA, cudaFree( dptrForce[i] );)"}
{"predict": "(9, OpenCL, clReleaseMemObject(objiAmax);); (4, OpenCL, clReleaseMemObject(objX);); (11, OpenCL, clReleaseMemObject(objScratch);)", "label": "(5, OpenCL, clReleaseMemObject(objX);); (12, OpenCL, clReleaseMemObject(objScratch);); (7, OpenCL, clReleaseMemObject(objiAmax);)"}
{"predict": "(12, TBB, tbb::concurrent_queue<T> q;); (3, TBB, tbb::internal::punned_cast<hacked_concurrent_queue<T>*>(q);); (17, TBB, tbb::concurrent_bounded_queue<T> q;)", "label": "(19, TBB, REMARK(\"Wraparound on tbb::concurrent_bounded_queue...\");); (2, TBB, tbb::concurrent_queue<T>* q = new tbb::concurrent_queue<T>;); (16, TBB, tbb::concurrent_bounded_queue<T>* q = new tbb::concurrent_bounded_queue<T>;)"}
{"predict": "(17, OpenMP, #pragma omp parallel); (8, OpenMP, #pragma omp serial)", "label": "(25, OpenMP, printf(\"Thread %d sleeps now for %d seconds\\n\", omp_get_thread_num(), SLEEPTIME);); (8, OpenMP, #pragma omp parallel); (31, OpenMP, printf(\"Thread %d wakes up again\\n\", omp_get_thread_num());)"}
{"predict": "(37, SYCL, Alloca->setMetadata(hipsycl::compiler::MDKind::Arrayified, MDAlloca);)", "label": "(45, SYCL, GEP->setMetadata(hipsycl::compiler::MDKind::Arrayified, MDAlloca);); (36, SYCL, Alloca->setMetadata(hipsycl::compiler::MDKind::Arrayified, MDAlloca);)"}
{"predict": "(62, OpenMP, #pragma omp parallel master taskloop simd firstprivate(xa)); (126, OpenMP, #pragma omp parallel private(i)); (85, OpenMP, #pragma omp parallel master taskloop simd private(xa), firstprivate(xa)); (6, OpenMP, #pragma omp parallel master taskloop simd firstprivate); (107, OpenMP, #pragma omp parallel master taskloop simd lastprivate(g) firstprivate(g)); (12, OpenMP, #pragma omp parallel master taskloop simd firstprivate()); (16, OpenMP, #pragma omp parallel master taskloop simd firstprivate(argc); (50, OpenMP, #pragma omp parallel master taskloop simd firstprivate(da)); (27, OpenMP, #pragma omp parallel master taskloop simd firstprivate(argc)); (115, OpenMP, #pragma omp parallel master taskloop simd firstprivate(B::x)); (85, OpenMP, #pragma omp parallel shared(xa)); (68, OpenMP, #pragma omp parallel master taskloop simd safelen(5)); (30, OpenMP, #pragma omp parallel master taskloop simd firstprivate(argv[1])); (120, OpenMP, #pragma omp parallel master taskloop simd firstprivate(n) lastprivate(n)); (17, OpenMP, #pragma omp parallel master taskloop simd firstprivate(argc,); (73, OpenMP, #pragma omp parallel master taskloop simd firstprivate(h)); (51, OpenMP, #pragma omp parallel master taskloop simd firstprivate(S2::S2sc)); (38, OpenMP, #pragma omp parallel master taskloop simd firstprivate(ca)); (55, OpenMP, #pragma omp parallel master taskloop simd firstprivate(S2::S2s)); (14, OpenMP, #pragma omp parallel master taskloop simd firstprivate(argc > 0 ? argv[1] : argv[2])); (116, OpenMP, #pragma omp parallel master taskloop simd lastprivate(n) firstprivate(n)); (74, OpenMP, #pragma omp parallel master taskloop simd firstprivate(m)); (28, OpenMP, #pragma omp parallel master taskloop simd firstprivate(2 * 2)); (31, OpenMP, #pragma omp parallel master taskloop simd firstprivate(ba)); (-7, OpenMP, #pragma omp parallel); (", "label": "(22, OpenMP, #pragma omp parallel master taskloop simd firstprivate(argc); (78, OpenMP, #pragma omp parallel master taskloop simd safelen(5)); (81, OpenMP, #pragma omp parallel master taskloop simd firstprivate(e, g)); (125, OpenMP, #pragma omp parallel private(i)); (87, OpenMP, #pragma omp parallel master taskloop simd firstprivate(h)); (53, OpenMP, #pragma omp parallel master taskloop simd firstprivate(ca)); (48, OpenMP, #pragma omp parallel master taskloop simd firstprivate(ba)); (27, OpenMP, #pragma omp parallel master taskloop simd firstprivate(argc) allocate , allocate(, allocate(omp_default , allocate(omp_default_mem_alloc, allocate(omp_default_mem_alloc:, allocate(omp_default_mem_alloc: argc, allocate(omp_default_mem_alloc: argv), allocate(argv)); (38, OpenMP, #pragma omp parallel master taskloop simd firstprivate(argv[1])); (90, OpenMP, #pragma omp parallel master taskloop simd firstprivate(i)); (-1, OpenMP, #pragma omp parallel); (64, OpenMP, #pragma omp parallel master taskloop simd firstprivate(S2::S2sc)); (128, OpenMP, #pragma omp parallel master taskloop simd firstprivate(B::x)); (119, OpenMP, #pragma omp parallel reduction(+ : i)); (88, OpenMP, #pragma omp parallel shared(xa)); (23, OpenMP, #pragma omp parallel master taskloop simd firstprivate(S1)); (14, OpenMP, #pragma omp parallel master taskloop simd firstprivate(argc > 0 ? argv[1] : argv[2])); (78, OpenMP, #pragma omp parallel master taskloop simd private(xa), firstprivate(xa)); (53, OpenMP, #pragma omp parallel master taskloop simd firstprivate(S2::S2s)); (125, OpenMP, #pragma omp parallel master taskloop simd firstprivate(si)); (-6, OpenMP, #pragma omp parallel master taskloop simd firstprivate(); (-3, OpenMP, #pragma omp parallel master taskloop simd firstprivate()); (65, OpenMP, #pragma omp parallel master taskloop simd firstprivate(m)); (84, OpenMP, #pragma omp parallel master taskloop simd firstprivate(j)); (18, OpenMP, #pragma omp parallel master taskloop simd firstprivate(a, b, c, d, f)); (86, OpenMP, #pragma omp parallel master taskloop simd lastprivate(g) firstprivate(g)); (89, OpenMP, #pragma omp parallel master taskloop simd lastprivate(n) firstprivate(n)); (-1, OpenMP, #pragma omp parallel master taskloop simd firstprivate(argc,); (39, OpenMP, #pragma omp parallel master taskloop simd firstprivate(xa)); (21, OpenMP, #pragma omp parallel master taskloop simd firstprivate(2 * 2)); (32, OpenMP, #pragma omp parallel master taskloop simd firstprivate(da)); (-21, OpenMP, #pragma omp parallel master taskloop simd firstprivate)"}
{"predict": "(10, OpenMP, #pragma omp parallel for private(i,i2) reduction(+:sum)); (13, OpenMP, #pragma omp flush)", "label": "(14, OpenMP, #pragma omp flush); (9, OpenMP, #pragma omp parallel for reduction(+:sum) schedule(static,1) private(i) private(i2))"}
{"predict": "(21, MPI, MPI_Isend(in, count, type, left, tag, comm, &requests[w]);); (22, MPI, MPI_Irecv(out, count, type, right, tag, comm, &requests[w]);); (16, MPI, MPI_Waitall(window_size, requests, MPI_STATUSES_IGNORE);); (24, MPI, MPI_Recv(&ack, 1, MPI_CHAR, right, tag, comm, MPI_STATUS_IGNORE);); (16, MPI, MPI_Send(&ack, 1, MPI_CHAR, left, tag, comm);)", "label": "(21, MPI, MPI_Recv(&ack, 1, MPI_CHAR, right, tag, comm, MPI_STATUS_IGNORE);); (23, MPI, MPI_Irecv(out, count, type, set_src ? left : MPI_ANY_SOURCE, tag, comm, &requests[w]);); (18, MPI, MPI_Waitall(window_size, requests, MPI_STATUSES_IGNORE);); (15, MPI, MPI_Isend(in, count, type, right, (tag == MPI_ANY_TAG ? 0 : tag), comm, &requests[w]);); (23, MPI, MPI_Send(&ack, 1, MPI_CHAR, left, (tag == MPI_ANY_TAG ? 0 : tag), comm);)"}
{"predict": "(33, OpenMP, comp_do_parse(cur, tail);)", "label": "(34, OpenMP, comp_do_parse(cur, tail);)"}
{"predict": "(3, OpenMP, #pragma omp target device(0)); (13, OpenMP, #pragma omp target device(1))", "label": "(3, OpenMP, #pragma omp target device(0)); (13, OpenMP, #pragma omp target device(1))"}
{"predict": "(6, OpenMP, #pragma omp task shared(var, a)); (2, OpenMP, #pragma omp parallel num_threads(2) shared(var, a)); (1, OpenMP, #pragma omp master); (13, OpenMP, #pragma omp taskwait); (7, OpenMP, #pragma omp task shared(var, a) depend(in : var)); (3, OpenMP, #pragma omp task shared(var, a) depend(out : var))", "label": "(4, OpenMP, #pragma omp master); (5, OpenMP, #pragma omp taskgroup); (6, OpenMP, #pragma omp task shared(var, a)); (0, OpenMP, #pragma omp parallel num_threads(2) shared(var, a))"}
{"predict": "(15, MPI, MPI_Alltoallv(data_out, counts, displs, MPI_INT, data_in, counts, displs, MPI_INT, comm);); (2, MPI, MPI_Comm_size(comm, &size);); (2, MPI, MPI_Comm_rank(comm, &rank);)", "label": "(3, MPI, MPI_Comm_size(comm, &size);); (3, MPI, MPI_Comm_rank(comm, &rank);); (13, MPI, MPI_Alltoallv(data_out, counts, displs, MPI_INT, data_in, counts, displs, MPI_INT, comm);)"}
{"predict": "(29, MPI, error = MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (8, MPI, error = MPI_Finalized(&flag);); (52, MPI, error = MPI_Barrier(MPI_COMM_WORLD);); (60, MPI, error = MPI_Finalize();); (17, MPI, MPI_Abort(MPI_COMM_WORLD, error);); (5, MPI, MPI_Error_string(error, err_string, &length);); (13, MPI, error = MPI_Init(&argc, &argv);)", "label": "(11, MPI, MPI_Error_string(error, err_string, &length);); (20, MPI, error = MPI_Init(&argc, &argv);); (27, MPI, error = MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (60, MPI, error = MPI_Finalize();); (50, MPI, error = MPI_Barrier(MPI_COMM_WORLD);); (29, MPI, MPI_Abort(MPI_COMM_WORLD, error);); (3, MPI, error = MPI_Finalized(&flag);)"}
{"predict": "(13, CUDA, cudaMalloc(&dev_B, size_b);); (11, CUDA, cudaMalloc(&dev_A, size_a);); (19, CUDA, cudaMemcpy(dev_A, dev_B, size_b, cudaMemcpyDeviceToDevice);); (27, CUDA, cudaFree(dev_B);); (14, CUDA, cudaDeviceSynchronize();); (24, CUDA, cudaFree(dev_A);)", "label": "(13, CUDA, cudaMalloc(&dev_B, size_b);); (13, CUDA, cudaDeviceSynchronize();); (10, CUDA, cudaMalloc(&dev_A, size_a);); (27, CUDA, cudaFree(dev_B);); (25, CUDA, cudaFree(dev_A);)"}
{"predict": "(123, OpenMP, #pragma omp target teams map(t.D)); (111, OpenMP, #pragma omp target data map(to: t.C)); (10, OpenMP, #pragma omp target teams map(tofrom: arg)); (117, OpenMP, #pragma omp target data map(to: r, r.C, u)); (110, OpenMP, #pragma omp target teams map(r.B)); (122, OpenMP, #pragma omp target teams map(r.D)); (6, OpenMP, #pragma omp target teams map(tofrom:); (96, OpenMP, #pragma omp target teams map(marr[:2] [1:][:])); (111, OpenMP, #pragma omp target teams map(u.B)); (49, OpenMP, #pragma omp target teams map(marr[2] [3:arg][:2])); (33, OpenMP, #pragma omp target teams map(SA::S)); (84, OpenMP, #pragma omp target teams map(mptr[:1][:2 - 1] [0:2])); (11, OpenMP, #pragma omp target teams map(tofrom:)); (112, OpenMP, #pragma omp target teams map(r, r.C)); (22, OpenMP, #pragma omp target teams map(a, b)); (54, OpenMP, #pragma omp target teams map(marr2[:1][:2][0])); (115, OpenMP, #pragma omp target teams map(t, u)); (96, OpenMP, #pragma omp target teams map(mptr[:1][:arg][:2])); (57, OpenMP, #pragma omp target teams map(mvla[:1][:2][0])); (39, OpenMP, #pragma omp target teams map(marr[:2][:arg][:2])); (16, OpenMP, #pragma omp target teams map(SA)); (118, OpenMP, #pragma omp target data map(from: t.C)); (29, OpenMP, #pragma omp target teams map(marr[:2][:][:1])); (75, OpenMP, #pragma omp target teams map(mptr[:1][:2][:1])); (62, OpenMP, #pragma omp target teams map(mvla2[:1][:2][n:m])); (-12, OpenMP, #pragma omp target teams", "label": "(35, OpenMP, #pragma omp target teams map(marr[:arg][n:])); (166, OpenMP, #pragma omp target teams map(r.S.Arr[4:5])); (53, OpenMP, #pragma omp target teams map(marr[:arg][:2][:])); (120, OpenMP, #pragma omp target teams map(r.PtrS[0], r.PtrS->B)); (117, OpenMP, #pragma omp target teams map(r.ArrS[0].A, t.ArrS[1].A)); (136, OpenMP, #pragma omp target teams map(r.C, r.D)); (9, OpenMP, #pragma omp target teams map(r)); (80, OpenMP, #pragma omp target teams map(mvla2[:1][:2][:10])); (123, OpenMP, #pragma omp target teams map(r.RPtrS, r.RPtrS->B)); (136, OpenMP, #pragma omp target teams map(r.C) map(r.C)); (21, OpenMP, #pragma omp target teams map(marr[arg:][:arg][:])); (189, OpenMP, #pragma omp target data map(to: t)); (157, OpenMP, #pragma omp target teams map(r.S.Ptr[4:5])); (54, OpenMP, #pragma omp target teams map(marr[:2][2+2-4:][0:5+5])); (35, OpenMP, #pragma omp target teams map(marr[:2][:][1:])); (12, OpenMP, #pragma omp target teams map(marr[arg:][:][:])); (93, OpenMP, #pragma omp target teams map(r.ArrS[:arg].B)); (0, OpenMP, #pragma omp target teams map(marr[2][0:2][0:2])); (80, OpenMP, #pragma omp target teams map(mptr[:1][:2][0:2])); (53, OpenMP, #pragma omp target teams map(marr2[:1][:2][0])); (65, OpenMP, #pragma omp target teams map(mvla2[:1][:2][:11])); (86, OpenMP, #pragma omp target teams map(r.ArrS[:1].B)); (35, OpenMP, #pragma omp target teams map(marr[:1][3:1][:2])); (6, OpenMP, #pragma omp target teams map(marr[arg:])); (29, OpenMP, #pragma omp target teams map(marr[:1][0][:])); (134, OpenMP, #pragma omp target teams map(r.Ptr[3:5])); (74, OpenMP, #pragma omp target teams map(mptr[:1][:][0:2])); (108, OpenMP, #pragma omp target teams map(r.S.Arr[:12])); (125, OpenMP, #pragma omp target teams map(r.A)); (90, OpenMP, #pragma omp target teams map(r.ArrS[0].A, r.ArrS[1].A)); (95, OpenMP, #pragma omp target teams map(r.PtrS, r.PtrS->B)); (164, OpenMP, #pragma omp target teams map(t.D)); (149, OpenMP, #pragma omp target teams map(r.D)); (96, OpenMP, #pragma omp target teams map(r.RPtrS[0], r.RPtrS->B)); (77, OpenMP, #pragma omp target teams map(r.ArrS[0].Arr[1:23])); (98, OpenMP, #pragma omp target teams map(r.RPtrS->A, r.RPtrS->B)); (45, OpenMP, #pragma omp target teams map(mvla[1][2:arg][:])); (142, OpenMP, #pragma omp target data map(to: r.C)); (21, OpenMP, #pragma omp target teams map(marr[:1][3:arg][:2])); (8, OpenMP, #pragma omp target teams map(marr[:2][:][:1])); (37, OpenMP, #pragma omp target teams map(mvla[:2][:arg][:])); (61, OpenMP, #pragma omp target teams map(mptr[:2][:1][0:2])); (71, OpenMP, #pragma omp target teams map(r.ArrS[0].Arr[1:arg])); (142, OpenMP, #pragma omp target data map(to: t.Ptr)); (31, OpenMP, #pragma omp target teams map(mvla[:1][:][0])); (112, OpenMP, #pragma omp target teams map(r.Arr[3:5])); (46, OpenMP, #pragma omp target teams map(mptr[:1][:2-1][2:4-3])); (108, OpenMP"}
{"predict": "(13, OpenMP, #pragma omp target teams distribute parallel for map(tofrom:tt.p1[0:10]) map(tofrom:C[0:10])); (4, OpenMP, #pragma omp target data map(to:tt.p1[0:10]) map(from:C[0:10])); (14, OpenMP, #pragma omp target teams distribute parallel for map(tofrom:tt.p1[0:10]) map(tofrom:C[0:10]) reduction(+:C))", "label": "(12, OpenMP, #pragma omp target map(tofrom: C) map(to: tt, tt.p1[:10]))"}
{"predict": "(4, CUDA, cudaFree(cusolverData.cusolverH);); (2, CUDA, cudaFree(cusolverData.syevj_params);)", "label": "(7, CUDA, cudaFree(bufferOffset.W);); (3, CUDA, cudaFree(bufferOffset.srcShiftSum);); (1, CUDA, cudaFree(bufferOffset.dstMean);); (10, CUDA, cudaFree(cusolverData.cusolverBuffer);); (5, CUDA, cudaFree(bufferOffset.J);); (3, CUDA, cudaFree(bufferOffset.r);); (4, CUDA, cudaFree(bufferOffset.calc_buffer);); (-1, CUDA, cudaFree(bufferOffset.LtL);); (-6, CUDA, cudaFree(bufferOffset.srcMean);); (-4, CUDA, cudaFree(bufferOffset.dstShiftSum);); (4, CUDA, cudaFree(cusolverData.cusolverInfo);)"}
{"predict": "(74, CUDA, CUDA_CHECK_AND_EXIT(cudaStreamCreate(&stream));); (72, CUDA, CUDA_CHECK_AND_EXIT(cudaMemset(output, 0b11111111, flat_fft_size_bytes));); (72, CUDA, CUDA_CHECK_AND_EXIT(cudaMemcpy(input, input_host.data(), flat_fft_size_bytes, cudaMemcpyHostToDevice));); (91, CUDA, CUDA_CHECK_AND_EXIT(cudaFree(output));); (67, CUDA, CUDA_CHECK_AND_EXIT(cudaMalloc(&output, flat_fft_size_bytes));); (76, CUDA, CUDA_CHECK_AND_EXIT(cudaStreamSynchronize(stream));); (88, CUDA, CUDA_CHECK_AND_EXIT(cudaFree(input));); (63, CUDA, CUDA_CHECK_AND_EXIT(cudaMalloc(&input, flat_fft_size_bytes));); (83, CUDA, CUDA_CHECK_AND_EXIT(cudaStreamDestroy(stream));)", "label": "(77, CUDA, CUDA_CHECK_AND_EXIT(cudaStreamCreate(&stream));); (71, CUDA, CUDA_CHECK_AND_EXIT(cudaMemset(output, 0b11111111, flat_fft_size_bytes));); (71, CUDA, CUDA_CHECK_AND_EXIT(cudaMemcpy(input, input_host.data(), flat_fft_size_bytes, cudaMemcpyHostToDevice));); (91, CUDA, CUDA_CHECK_AND_EXIT(cudaFree(output));); (70, CUDA, CUDA_CHECK_AND_EXIT(cudaDeviceSynchronize());); (88, CUDA, CUDA_CHECK_AND_EXIT(cudaFree(input));); (62, CUDA, CUDA_CHECK_AND_EXIT(cudaMalloc(&input, flat_fft_size_bytes));); (83, CUDA, CUDA_CHECK_AND_EXIT(cudaStreamDestroy(stream));); (61, CUDA, CUDA_CHECK_AND_EXIT(cudaMalloc(&output, flat_fft_size_bytes));)"}
{"predict": "(19, OpenCL, error = clGetDeviceInfo( device, CL_DEVICE_PROFILE, sizeof( kernelSource ), &kernelSource, NULL );); (22, OpenCL, error = clGetDeviceInfo( device, CL_DEVICE_SINGLE_FP_CONFIG, sizeof( config ), &config, NULL );); (107, OpenCL, error = clEnqueueNDRangeKernel( queue, kernel, 1, NULL, threads, localThreads, 0, NULL, NULL );); (95, OpenCL, error = clSetKernelArg( kernel, (int)i, sizeof( streams[i] ), &streams[i] );); (108, OpenCL, error = clEnqueueReadBuffer( queue, streams[2], true, 0, sizeof( cl_float ) * TEST_SIZE, outData, 0, NULL, NULL );)", "label": "(108, OpenCL, error = clEnqueueNDRangeKernel( queue, kernel, 1, NULL, threads, localThreads, 0, NULL, NULL );); (22, OpenCL, error = clGetDeviceInfo( device, CL_DEVICE_SINGLE_FP_CONFIG, sizeof( config ), &config, NULL );); (16, OpenCL, error = clGetDeviceInfo( device, CL_DEVICE_PROFILE, sizeof( kernelSource ), kernelSource, NULL );); (95, OpenCL, error = clSetKernelArg(kernel, (int)i, sizeof( streams[i] ), &streams[i]);); (108, OpenCL, error = clEnqueueReadBuffer( queue, streams[2], true, 0, sizeof( cl_float ) * TEST_SIZE, outData, 0, NULL, NULL );)"}
{"predict": "(12, OpenMP, #pragma omp parallel for schedule(static,1)); (47, OpenMP, #pragma omp taskwait); (74, OpenMP, #pragma omp task shared(matrixAAllocated, deviceSrcMatA)); (39, OpenMP, #pragma omp task shared(copiedSrcMatA)); (76, OpenMP, #pragma omp task shared(matrixCAllocated, deviceDstMat)); (34, OpenMP, #pragma omp task shared(copiedSrcMatB)); (73, OpenMP, #pragma omp task shared(matrixBAllocated, deviceSrcMatB)); (9, OpenMP, #pragma omp task)", "label": "(11, OpenMP, #pragma omp parallel for schedule(static,1)); (12, OpenMP, #pragma omp task)"}
{"predict": "(4, CUDA, cudaDeviceSynchronize();); (4, CUDA, cudaMemcpy(h_data, data.m_data, sizeof(SiftPoint)*data.maxPts, cudaMemcpyDeviceToHost);)", "label": "(8, CUDA, safeCall(cudaMemcpy(h_data, data.d_data, sizeof(SiftPoint)*data.numPts, cudaMemcpyDeviceToHost));)"}
{"predict": "(11, TBB, tbb::task_scheduler_init init(1);); (15, TBB, tbb::tick_count t0 = tbb::tick_count::now();); (16, TBB, std::cout << \"Elapsed time: \" << (tbb::tick_count::now() - t0).seconds() << \" seconds\" << std::endl;)", "label": "(12, TBB, tbb::mutex *m = new tbb::mutex;)"}
{"predict": "(14, OpenMP, #pragma omp parallel for allocate(argc) private(argc, b), firstprivate(c, d), lastprivate(d, f) collapse(N) schedule(static, N) ordered(N) if (parallel :argc) num_threads(N) default(shared) shared(e) reduction(+ : h)); (5, OpenMP, #pragma omp threadprivate(g)); (5, OpenMP, #pragma omp parallel for schedule(dynamic) default(none) copyin(g) linear(a) allocate(a) lastprivate(conditional: d, e, f) order(concurrent))", "label": "(7, OpenMP, #pragma omp parallel for schedule(dynamic) default(none) copyin(g) linear(a) allocate(a) lastprivate(conditional: d, e,f) order(concurrent)); (5, OpenMP, #pragma omp threadprivate(g)); (11, OpenMP, #pragma omp parallel for allocate(argc) private(argc, b), firstprivate(c, d), lastprivate(d, f) collapse(N) schedule(static, N) ordered(N) if (parallel :argc) num_threads(N) default(shared) shared(e) reduction(+ : h))"}
{"predict": "(19, MPI, MPI_Abort(MPI_COMM_WORLD, 1);)", "label": "(19, MPI, MPI_Abort(MPI_COMM_WORLD, 1);)"}
{"predict": "(31, TBB, ASSERT(default_ss == tbb::global_control::active_value(tbb::global_control::thread_stack_size), NULL);); (5, TBB, const unsigned h_c = tbb::tbb_thread::hardware_concurrency();); (6, TBB, tbb::task_scheduler_init t(h_c+1);); (20, TBB, size_t default_ss = tbb::global_control::active_value(tbb::global_control::thread_stack_size);)", "label": "(31, TBB, ASSERT(default_ss == tbb::global_control::active_value(tbb::global_control::thread_stack_size), NULL);); (3, TBB, const unsigned h_c = tbb::tbb_thread::hardware_concurrency();); (5, TBB, tbb::task_scheduler_init t(h_c+1);); (20, TBB, size_t default_ss = tbb::global_control::active_value(tbb::global_control::thread_stack_size);)"}
{"predict": "Buffer failed\");(253, OpenCL, clReleaseMemObject(array);); (253, OpenCL, clReleaseProgram(program);); (204, OpenCL, err = clSetKernelArg(kernel, 0, sizeof(cl_mem), &array);); (169, OpenCL, err = clSetKernelArg(kernel, 3, sizeof(cl_uint), &min_dim);); (251, OpenCL, clReleaseKernel(kernel);); (204, OpenCL, err |= clSetKernelArg(kernel, 2, sizeof(max_local_workgroup_size), max_local_workgroup_size);); (202, OpenCL, err |= clSetKernelArg(kernel, 1, sizeof(dimensions), &dimensions);); (244, OpenCL, err = clEnqueueNDRangeKernel(queue, kernel, dimensions, NULL, max_local_workgroup_size, NULL, 0, NULL, NULL);); (55, OpenCL, clEnqueueUnmapMemObject(queue, array, NULL, 0, NULL, NULL);); (194, OpenCL, err = clSetKernelArg(kernel, 4, sizeof(cl_uint), &size_increase_per_iteration);); (195, OpenCL, err |= clSetKernelArg(kernel, 5, sizeof(use_atomics), &use_atomics);); (50, OpenCL, clEnqueueMapBuffer(queue, array, CL_TRUE, CL_MAP_READ | CL_MAP_WRITE, 0, sizeof(cl_mem), 0, NULL, NULL, &err);); (162, OpenCL, err = clSetKernelArg(kernel, 2, sizeof(cl_uint), &max_dim);); (160, OpenCL, err = clSetKernelArg(kernel, 1, sizeof(cl_uint), &min_x_size);); (163, OpenCL, err |= clSetKernelArg(kernel, 4, sizeof(cl_uint), &quick_test);); (59, OpenCL, clReleaseProgram(program);); (238, OpenCL, err = clEnqueueUnmapMemObject(queue, array, ret_ptr, 0, NULL, NULL);); (154, OpenCL, err = clSetKernelArg(kernel, 3, sizeof(cl_uint), &max_z_size);); (152, OpenCL, err = clSetKernelArg(kernel, 1,", "label": "(558, OpenCL, clReleaseKernel(kernel);); (558, OpenCL, clReleaseProgram(program);); (555, OpenCL, clReleaseMemObject(array);)"}
{"predict": "(35, CUDA, HANDLE_ERROR(cudaMalloc((void**)&state_deriv_GPU, sizeof(float) * DYN::STATE_DIM));); (38, CUDA, HANDLE_ERROR(cudaMemcpyAsync(s_d, s_gpu.data(), sizeof(float) * DYN::STATE_DIM, cudaMemcpyHostToDevice, s1));); (42, CUDA, CudaCheckError();); (38, CUDA, HANDLE_ERROR(cudaMemcpyAsync(u_d, u.data(), sizeof(float) * DYN::CONTROL_DIM, cudaMemcpyHostToDevice, s1));); (30, CUDA, HANDLE_ERROR(cudaMalloc((void**)&s_d, sizeof(float) * DYN::STATE_DIM));); (31, CUDA, HANDLE_ERROR(cudaMalloc((void**)&u_d, sizeof(float) * DYN::CONTROL_DIM));); (43, CUDA, HANDLE_ERROR(cudaMemcpyAsync(s_gpu.data(), s_d, sizeof(float) * DYN::STATE_DIM, cudaMemcpyDeviceToHost, s1));); (21, CUDA, cudaStreamCreate(&s1);); (28, CUDA, HANDLE_ERROR(cudaStreamSynchronize(s1));)", "label": "(34, CUDA, HANDLE_ERROR(cudaMalloc((void**)&state_deriv_GPU, sizeof(float) * DYN::STATE_DIM));); (37, CUDA, HANDLE_ERROR(cudaMemcpyAsync(s_d, s_gpu.data(), sizeof(float) * DYN::STATE_DIM, cudaMemcpyHostToDevice, s1));); (46, CUDA, CudaCheckError();); (34, CUDA, HANDLE_ERROR(cudaMemcpyAsync(u_d, u.data(), sizeof(float) * DYN::CONTROL_DIM, cudaMemcpyHostToDevice, s1));); (29, CUDA, HANDLE_ERROR(cudaMalloc((void**)&s_d, sizeof(float) * DYN::STATE_DIM));); (27, CUDA, HANDLE_ERROR(cudaMalloc((void**)&u_d, sizeof(float) * DYN::CONTROL_DIM));); (45, CUDA, HANDLE_ERROR(cudaMemcpyAsync(s_gpu.data(), s_d, sizeof(float) * DYN::STATE_DIM, cudaMemcpyDeviceToHost, s1));); (32, CUDA, HANDLE_ERROR(cudaStreamSynchronize(s1));); (19, CUDA, cudaStreamCreate(&s1);)"}
{"predict": "(37, CUDA, cudaStream_t stream = at::cuda::getCurrentCUDAStream();)", "label": "(69, CUDA, cudaStream_t stream = at::cuda::getCurrentCUDAStream();)"}
{"predict": "(24, MPI, MPI_Allreduce( &s, &berr, 1, MPI_FLOAT, MPI_MAX, grid->comm );)", "label": "(24, MPI, MPI_Allreduce( &s, &berr, 1, MPI_FLOAT, MPI_MAX, grid->comm );)"}
{"predict": "(37, CUDA, cudaDeviceSynchronize();); (7, CUDA, int voxNum = cx::voxel_number(argv[1]);); (5, CUDA, int cryNum = cx::cry_number(argv[1]);); (5, CUDA, int radNum = cx::radius_number(argv[1]);)", "label": "(34, CUDA, checkCudaErrors(cudaDeviceSynchronize());)"}
{"predict": "(18, CUDA, checkRuntime(cudaStreamCreate(&stream));); (88, CUDA, checkRuntime(cudaStreamDestroy(stream));); (57, CUDA, checkRuntime(cudaMemcpyAsync(input_data_device, input_data_host, input_numel * sizeof(float), cudaMemcpyHostToDevice, stream));); (86, CUDA, checkRuntime(cudaFreeHost(input_data_host));); (84, CUDA, checkRuntime(cudaFree(output_data_device));); (55, CUDA, checkRuntime(cudaStreamSynchronize(stream));); (81, CUDA, checkRuntime(cudaFreeHost(output_data_host));); (65, CUDA, checkRuntime(cudaMalloc(&output_data_device, output_numel * sizeof(float)));); (51, CUDA, checkRuntime(cudaMallocHost(&input_data_host, input_numel * sizeof(float)));); (64, CUDA, checkRuntime(cudaMallocHost(&output_data_host, output_numel * sizeof(float)));); (52, CUDA, checkRuntime(cudaMalloc(&input_data_device, input_numel * sizeof(float)));); (1, CUDA, auto engine = make_nvshared(runtime->deserializeCudaEngine(engine_data.data(), engine_data.size()));); (71, CUDA, checkRuntime(cudaMemcpyAsync(output_data_host, output_data_device, output_numel * sizeof(float), cudaMemcpyDeviceToHost, stream));); (71, CUDA, checkRuntime(cudaStreamSynchronize(stream));)", "label": "(18, CUDA, checkRuntime(cudaStreamCreate(&stream));); (79, CUDA, checkRuntime(cudaMemcpyAsync(output_data_host, output_data_device, sizeof(float) * output_numel, cudaMemcpyDeviceToHost, stream));); (79, CUDA, checkRuntime(cudaStreamSynchronize(stream));); (57, CUDA, checkRuntime(cudaMemcpyAsync(input_data_device, input_data_host, input_numel * sizeof(float), cudaMemcpyHostToDevice, stream));); (24, CUDA, checkRuntime(cudaMallocHost(&input_data_host, input_numel * sizeof(float)));); (24, CUDA, checkRuntime(cudaMalloc(&input_data_device, input_numel * sizeof(float)));); (89, CUDA, checkRuntime(cudaFree(input_data_device));); (86, CUDA, checkRuntime(cudaFreeHost(input_data_host));); (88, CUDA, checkRuntime(cudaFree(output_data_device));); (62, CUDA, checkRuntime(cudaMalloc(&output_data_device, sizeof(float) * output_numel));); (-5, CUDA, auto engine = make_nvshared(runtime->deserializeCudaEngine(engine_data.data(), engine_data.size()));); (59, CUDA, checkRuntime(cudaMallocHost(&output_data_host, sizeof(float) * output_numel));); (82, CUDA, checkRuntime(cudaFreeHost(output_data_host));); (79, CUDA, checkRuntime(cudaStreamDestroy(stream));)"}
{"predict": "(141, OpenMP, #pragma omp task firstprivate(r)); (7, OpenMP, #pragma omp task); (9, OpenMP, #pragma omp task ]); (15, OpenMP, #pragma omp task unknown()); (25, OpenMP, #pragma omp task); (74, OpenMP, #pragma omp task default(none)); (8, OpenMP, #pragma omp task [); (92, OpenMP, #pragma omp parallel shared(sa)); (113, OpenMP, #pragma omp task reduction(+ : r)); (96, OpenMP, #pragma omp parallel reduction(+ : r)); (122, OpenMP, #pragma omp for reduction(+ : r)); (2, OpenMP, #pragma omp task (); (102, OpenMP, #pragma omp task private(a, b)); (57, OpenMP, #pragma omp task default(shared)); (75, OpenMP, #pragma omp task default(none)); (84, OpenMP, #pragma omp parallel); (116, OpenMP, #pragma omp task firstprivate(sb)); (118, OpenMP, #pragma omp task private(sb)); (128, OpenMP, #pragma omp task firstprivate(da)); (57, OpenMP, #pragma omp task default(none)); (133, OpenMP, #pragma omp task firstprivate(h)); (84, OpenMP, #pragma omp task default(shared)); (116, OpenMP, #pragma omp task reduction(+ : sa)); (106, OpenMP, #pragma omp task private(a)); (119, OpenMP, #pragma omp task firstprivate(r)); (114, OpenMP, #pragma omp task private(b)); (61, OpenMP, #pragma omp parallel); (59, OpenMP, #pragma omp task default(shared)); (7, OpenMP, #pragma omp task }); (120, OpenMP, #pragma omp task firstprivate(B::x)); (44, OpenMP, #pragma omp task default(none); (-11, OpenMP, #pragma omp task); (72, OpenMP, #pragma omp task default(none)); (5, OpenMP, #pragma omp task ])); (85, OpenMP, #pragma omp task default(none)); (117, OpenMP, #pragma", "label": "(174, OpenMP, #pragma omp task mergeable detach(evt)); (19, OpenMP, #pragma omp task unknown()); (14, OpenMP, #pragma omp task }); (154, OpenMP, #pragma omp task untied untied); (106, OpenMP, #pragma omp parallel shared(sa, sb)); (125, OpenMP, #pragma omp for reduction(+ : r)); (109, OpenMP, #pragma omp task firstprivate(r)); (160, OpenMP, #pragma omp task detach(); (-2, OpenMP, #pragma omp task); (104, OpenMP, #pragma omp parallel reduction(+ : r)); (160, OpenMP, #pragma omp task detach(evt) detach(evt)); (161, OpenMP, #pragma omp task detach(evt) mergeable); (60, OpenMP, #pragma omp parallel); (162, OpenMP, #pragma omp task detach(-evt)); (-6, OpenMP, #pragma omp task(); (48, OpenMP, #pragma omp task default(shared)); (-6, OpenMP, #pragma omp task[); (152, OpenMP, #pragma omp task detach(a)); (-6, OpenMP, #pragma omp task]); (58, OpenMP, #pragma omp parallel shared(a, b)); (157, OpenMP, #pragma omp task detach(evt) shared(evt)); (-7, OpenMP, #pragma omp task)); (144, OpenMP, #pragma omp task detach); (148, OpenMP, #pragma omp task detach(cevt) detach(revt)); (136, OpenMP, #pragma omp task mergeable mergeable); (153, OpenMP, #pragma omp task detach(evt) firstprivate(evt)); (19, OpenMP, #pragma omp task default(none)); (141, OpenMP, #pragma omp task detach()); (66, OpenMP, #pragma omp parallel shared(sa))"}
{"predict": "(7, MPI, MPI_Probe(MPI_ANY_SOURCE, tag, MPI_COMM_WORLD, &s);); (9, MPI, MPI_Irecv(buf, 10, MPI_INT, MPI_ANY_SOURCE, tag, MPI_COMM_WORLD, &r);)", "label": "(8, MPI, MPI_Start(&r);); (11, MPI, MPI_Send_init(buf, 10, MPI_INT, MPI_PROC_NULL, tag, MPI_COMM_WORLD, &r);); (7, MPI, MPI_Wait(&r, &s);); (4, MPI, MPI_Recv_init(buf, 10, MPI_INT, MPI_PROC_NULL, tag, MPI_COMM_WORLD, &r);); (6, MPI, MPI_Request_free(&r);)"}
{"predict": "(16, CUDA, CUDA_CHECK(cudaGetLastError());)", "label": "(16, CUDA, CUDA_CHECK(cudaGetLastError());)"}
{"predict": "(34, MPI, MPI_Get_library_version(mpiVersion, &resultLen);); (132, MPI, ret = MPI_Init_thread(argc, argv, MPI_THREAD_MULTIPLE, &provided);); (157, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);); (3, MPI, MPI_Finalized(&isMpiFinalized);); (136, MPI, ret = MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (153, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);)", "label": "(35, MPI, MPI_Get_library_version(mpiVersion, &resultLen);); (132, MPI, ret = MPI_Init_thread(argc, argv, MPI_THREAD_MULTIPLE, &provided);); (146, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (126, MPI, MPI_Initialized(&isMpiInited);); (0, MPI, MPI_Finalized(&isMpiFinalized);)"}
{"predict": "(3, OpenMP, #pragma omp target map(tofrom: a) device ()); (4, OpenMP, #pragma omp target map(tofrom: a) device (p)); (5, OpenMP, #pragma omp target map(tofrom: a) device (a)); (10, OpenMP, #pragma omp target map(tofrom: a) device (-2)); (6, OpenMP, #pragma omp target map(tofrom: a) device (omp_get_default_device())); (1, OpenMP, #pragma omp target map(tofrom: a) device (tofrom: a)); (8, OpenMP, #pragma omp target map(tofrom: a) device (2)); (-4, OpenMP, #pragma omp target map(tofrom: a) device); (2, OpenMP, #pragma omp target map(tofrom: a) device (ancestor: 0)); (6, OpenMP, #pragma omp target map(tofrom: a) device (omp_get_initial_device()))", "label": "(14, OpenMP, #pragma omp parallel reduction(+ : incomplete, ([10])p)); (1, OpenMP, #pragma omp parallel reduction(); (2, OpenMP, #pragma omp parallel reduction(unknown); (9, OpenMP, #pragma omp parallel reduction(inscan, + : a)); (6, OpenMP, #pragma omp parallel reduction(default, + : a)); (1, OpenMP, #pragma omp parallel reduction(default,); (2, OpenMP, #pragma omp parallel reduction(unknown, +: a))"}
{"predict": "(12, OpenMP, int _dev_thread_num = omp_get_num_threads();); (12, OpenMP, int _dev_thread_id = omp_get_thread_num();)", "label": "(13, OpenMP, int _dev_thread_id = omp_get_thread_num();); (11, OpenMP, int _dev_thread_num = omp_get_num_threads();)"}
{"predict": "(14, CUDA, cudaError_t err = cudaMalloc(&m_histogram, sizeof(int) * 256 * maxBatchSize);)", "label": "(14, CUDA, cudaError_t err = cudaMalloc(&m_histogram, sizeof(int) * 256 * maxBatchSize);)"}
{"predict": "(36, OpenMP, #pragma omp for simd dispatch(static,); (46, OpenMP, #pragma omp for simd dispatch(static, 1+); (18, OpenMP, #pragma omp for simd init_prefer_group); (63, OpenMP, #pragma omp for simd init(static, 1+)); (75, OpenMP, #pragma omp for simd init(dynamic, 1+)); (46, OpenMP, #pragma omp for simd dispatch(dynamic,); (84, OpenMP, #pragma omp for simd init(dynamic, 1)); (49, OpenMP, #pragma omp for simd dispatch(guided,); (15, OpenMP, #pragma omp for simd init_prefer_dynamic); (88, OpenMP, #pragma omp for simd init(static, 0)); (66, OpenMP, #pragma omp for simd init(static, 1)); (29, OpenMP, #pragma omp for simd dispatch(); (57, OpenMP, #pragma omp for simd init_for_static(); (72, OpenMP, #pragma omp for simd init(static, -1)); (20, OpenMP, #pragma omp for simd dispatch); (0, OpenMP, #pragma omp for simd init); (10, OpenMP, #pragma omp for simd dispatch()); (77, OpenMP, #pragma omp for simd init(dynamic, -1)); (36, OpenMP, #pragma omp for simd dispatch(guided, 1+); (66, OpenMP, #pragma omp for simd init(guided, 1)); (20, OpenMP, #pragma omp for simd dispatch(static); (39, OpenMP, #pragma omp for simd dispatch(dynamic); (-11, OpenMP, #pragma omp for simd); (68, OpenMP, #pragma omp for simd init(guided, -1)); (5, OpenMP, #pragma omp for simd dispatch(,)", "label": "(137, OpenMP, #pragma omp for schedule(nonmonotonic: auto)); (3, OpenMP, #pragma omp for); (47, OpenMP, #pragma omp for schedule(guided)); (106, OpenMP, #pragma omp for schedule(monotonic: dynamic)); (41, OpenMP, #pragma omp for simd schedule(runtime)); (56, OpenMP, #pragma omp for simd schedule(dynamic)); (107, OpenMP, #pragma omp for simd schedule(monotonic: dynamic)); (46, OpenMP, #pragma omp for simd schedule(guided)); (89, OpenMP, #pragma omp for simd schedule(monotonic: runtime)); (10, OpenMP, #pragma omp for simd schedule(static)); (83, OpenMP, #pragma omp for schedule(monotonic: runtime)); (90, OpenMP, #pragma omp for schedule(monotonic: guided)); (144, OpenMP, #pragma omp for schedule(static, 2) ordered(1)); (28, OpenMP, #pragma omp for schedule(runtime)); (62, OpenMP, #pragma omp for schedule(monotonic: static, 2)); (-1, OpenMP, #pragma omp for schedule(static)); (21, OpenMP, #pragma omp for simd schedule(auto)); (144, OpenMP, #pragma omp for simd schedule(static, 2) ordered); (152, OpenMP, #pragma omp for simd schedule(auto) ordered); (66, OpenMP, #pragma omp for schedule(monotonic: auto)); (105, OpenMP, #pragma omp for schedule(nonmonotonic: dynamic)); (145, OpenMP, #pragma omp for schedule(auto) ordered(1)); (67, OpenMP, #pragma omp for simd schedule(monotonic: auto)); (110, OpenMP, #pragma omp for simd schedule(nonmonotonic: static)); (57, OpenMP, #pragma omp for simd schedule(monotonic: static, 2)); (46, OpenMP, #pragma omp for simd schedule(monotonic: static)); (-2, OpenMP, #pragma omp for schedule(static, 2)); (39, OpenMP, #pragma omp for schedule(monotonic: static)); (113, OpenMP, #pragma omp for simd schedule(nonmonotonic: runtime)); (28, OpenMP, #pragma omp for schedule(dynamic)); (87, OpenMP, #pragma omp for schedule(nonmonotonic: guided)); (149, OpenMP, #pragma omp for simd schedule(runtime) ordered); (97, OpenMP, #pragma omp for simd schedule(nonmonotonic: dynamic)); (157, OpenMP, #pragma omp for simd schedule(guided) ordered); (-25, OpenMP, #pragma omp for simd); (111, OpenMP, #pragma omp for schedule(static) ordered); (69, OpenMP, #pragma omp for simd schedule(monotonic: guided)); (-4, OpenMP, #pragma omp for schedule(auto)); (83, OpenMP, #pragma omp for simd schedule(nonmonotonic: guided)); (156, OpenMP, #pragma omp for schedule(dynamic) ordered(1)); (111, OpenMP, #pragma omp for simd schedule(static) ordered); (144, OpenMP, #pragma omp for schedule(guided) ordered(1)); (-13, OpenMP, #pragma omp for simd schedule(static, 2)); (132, OpenMP, #pragma omp for schedule(runtime) ordered)"}
{"predict": "(52, OpenCL, clReleaseEvent(event);)", "label": "(51, OpenCL, clReleaseEvent(event);)"}
{"predict": "(45, OpenMP, #pragma omp for private(k,j,m)); (29, OpenMP, #pragma omp for private(j,k,m)); (47, OpenMP, #pragma omp for private(uijk,up1,um1,vijk,vp1,vm1,wijk,wp1,wm1,k,j,m,rho_inv))", "label": "(171, OpenMP, #pragma omp for private(j,k,vijk,vp1,vm1)); (397, OpenMP, #pragma omp for private(j,m)); (7, OpenMP, #pragma omp for nowait private(j,k,rho_inv)); (127, OpenMP, #pragma omp for nowait private(j,k,m)); (103, OpenMP, #pragma omp for nowait private(k,m)); (343, OpenMP, #pragma omp for nowait private(j,m)); (151, OpenMP, #pragma omp for private(k,m)); (25, OpenMP, #pragma omp for private(j,k,m)); (38, OpenMP, #pragma omp for private(j,k,uijk,up1,um1)); (282, OpenMP, #pragma omp for private(j,k,wijk,wp1,wm1)); (399, OpenMP, #pragma omp for private(k,m,i))"}
{"predict": "(8, MPI, MPI_Init(&argc, &argv);); (8, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (12, MPI, MPI_Finalize();); (7, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (23, MPI, MPI_Type_free(&ddt);); (21, MPI, MPI_DDT_DUMP(ddt);)", "label": "(28, MPI, MPI_Type_free(&ddt);); (7, MPI, MPI_Init(&argc, &argv);); (12, MPI, MPI_Finalize();); (7, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (7, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (21, MPI, MPI_DDT_DUMP(ddt);)"}
{"predict": "(38, MPI, MPI_Comm_size(comm, &np);); (56, MPI, MPI_Send(obuf, bytesize[j], types[j], partner, tag, comm);); (63, MPI, MPI_Recv(inbufs[j], 1, types[j], partner, tag, comm, &status);); (51, MPI, MPI_Get_count(&status, types[j], &count);); (34, MPI, MPI_Comm_rank(comm, &rank);); (25, MPI, MPI_Get_object_name(types[j], myname, &mynamelen);); (58, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);)", "label": "(57, MPI, MPI_Recv(outbufs[j], counts[j], types[j], partner, tag, comm, &status);); (45, MPI, MPI_Type_get_name(types[j], myname, &mynamelen);); (49, MPI, MPI_Send(inbufs[j], counts[j], types[j], partner, tag, comm);); (35, MPI, MPI_Comm_size(comm, &np);); (25, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);); (32, MPI, MPI_Comm_rank(comm, &rank);); (53, MPI, MPI_Get_count(&status, types[j], &count);)"}
{"predict": "(16, MPI, MPI_Init(&argc, &argv);); (21, MPI, MPI_Finalize();)", "label": "(16, MPI, MPI_Init(&argc, &argv);); (20, MPI, MPI_Finalize();)"}
{"predict": "(14, MPI, MPI_Init(&argc, &argv);); (148, MPI, MPI_Finalize();); (72, MPI, t0 = MPI_Wtime();); (73, MPI, t1 = MPI_Wtime();)", "label": "(14, MPI, MPI_Init(&argc, &argv);); (148, MPI, MPI_Finalize();); (72, MPI, t0 = MPI_Wtime();); (73, MPI, t1 = MPI_Wtime();)"}
{"predict": "(11, MPI, MPI_Abort(MPI_COMM_WORLD, MPIT_result);); (12, MPI, MPIT_result = MPI_T_pvar_session_create(session);); (6, MPI, MPIT_result = MPI_T_init_thread(MPI_THREAD_SINGLE, &provided);)", "label": "(11, MPI, MPI_Abort(MPI_COMM_WORLD, MPIT_result);); (12, MPI, MPIT_result = MPI_T_pvar_session_create(session);); (6, MPI, MPIT_result = MPI_T_init_thread(MPI_THREAD_SINGLE, &provided);)"}
{"predict": "(6, CUDA, __shared__ float block_acc[32];)", "label": "(6, CUDA, __shared__ float block_acc[32];)"}
{"predict": "(7, OpenMP, int maxThreads = omp_get_max_threads();)", "label": "(3, OpenMP, auto maxThreads = omp_get_max_threads();)"}
{"predict": "(6, MPI, MPI_Init(&argc, &argv);); (19, MPI, MPI_Finalize();); (6, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (7, MPI, MPI_Comm_get_parent(&intercomm);); (10, MPI, err = MPI_Recv(str, 4, MPI_CHAR, 1, 0, intercomm, MPI_STATUS_IGNORE);); (7, MPI, err = MPI_Send(\"hi\", 3, MPI_CHAR, 1, 0, intercomm);)", "label": "(6, MPI, MPI_Init(&argc, &argv);); (19, MPI, MPI_Finalize();); (6, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (7, MPI, MPI_Comm_get_parent(&intercomm);); (11, MPI, err = MPI_Recv(str, 4, MPI_CHAR, 3, 0, intercomm, MPI_STATUS_IGNORE);); (8, MPI, err = MPI_Send(\"hi\", 3, MPI_CHAR, 3, 0, intercomm);)"}
{"predict": "(31, CUDA, example::ok(cudaGetLastError());); (29, CUDA, example::ok(cudaDeviceSynchronize());)", "label": "(31, CUDA, CUDA_CHECK_AND_EXIT(cudaPeekAtLastError());); (29, CUDA, CUDA_CHECK_AND_EXIT(cudaDeviceSynchronize());)"}
{"predict": "(6, OpenMP, #pragma omp parallel if (argc))); (19, OpenMP, #pragma omp parallel if(parallel : argc) if (argc)); (13, OpenMP, #pragma omp parallel if(parallel :); (1, OpenMP, #pragma omp parallel if ()); (9, OpenMP, #pragma omp parallel if(if(tmain(argc, argv)); (0, OpenMP, #pragma omp parallel if (argc); (8, OpenMP, #pragma omp parallel if(parallel); (-4, OpenMP, #pragma omp parallel if (); (2, OpenMP, #pragma omp parallel if (argv[1]=2)); (-7, OpenMP, #pragma omp parallel if); (6, OpenMP, #pragma omp parallel if(parallel : argc); (8, OpenMP, #pragma omp parallel if(parallel : argc) if (parallel:argc)); (-4, OpenMP, #pragma omp parallel if (foobool(argc)), if (true)); (-1, OpenMP, #pragma omp parallel if (1 0)); (4, OpenMP, #pragma omp parallel if(parallel : argc) if (for:argc)); (-8, OpenMP, #pragma omp parallel if (argc > 0 ? argv[1] : argv[2])); (-7, OpenMP, #pragma omp parallel if (S1)); (0, OpenMP, #pragma omp parallel if(parallel : argc>> z)); (-7, OpenMP, #pragma omp parallel if (argc argc))", "label": "(5, OpenMP, #pragma omp task final (argc); (3, OpenMP, #pragma omp task final ()); (8, OpenMP, #pragma omp task final (argv[1]=2)); (4, OpenMP, #pragma omp task final (argc > 0 ? argv[1] : argv[2])); (8, OpenMP, #pragma omp task final (1 0)); (1, OpenMP, #pragma omp task final (z+argc))); (2, OpenMP, #pragma omp task final (foobool(argc)), final (true)); (6, OpenMP, #pragma omp task final(if(tmain(argc, argv)); (-5, OpenMP, #pragma omp task final (); (2, OpenMP, #pragma omp task final (argc argc)); (-8, OpenMP, #pragma omp task final); (-2, OpenMP, #pragma omp task final (S1))"}
{"predict": "(49, MPI, MPI_Allreduce(MPI_IN_PLACE,&n,1,mpi_int_t,MPI_MAX,grid->comm);); (47, MPI, MPI_Allreduce(MPI_IN_PLACE,&nnzL,1,mpi_int_t,MPI_SUM,grid->comm);)", "label": "(49, MPI, MPI_Allreduce(MPI_IN_PLACE,&n,1,mpi_int_t,MPI_MAX,grid->comm);); (47, MPI, MPI_Allreduce(MPI_IN_PLACE,&nnzL,1,mpi_int_t,MPI_SUM,grid->comm);)"}
{"predict": "(121, OpenCL, err = clEnqueueNDRangeKernel(queue, kernels[vecsize], 1, NULL, &size, NULL, 0, NULL, NULL);); (48, OpenCL, src2 = clCreateBuffer(context, CL_MEM_READ_WRITE, BUFFER_SIZE, NULL, &err);); (75, OpenCL, err = clSetKernelArg(kernels[vecsize], 2, sizeof(cl_mem), &src2);); (77, OpenCL, err = clSetKernelArg(kernels[vecsize], 3, sizeof(cl_mem), &cmp);); (45, OpenCL, cmp = clCreateBuffer(context, CL_MEM_READ_WRITE, BUFFER_SIZE, NULL, &err);); (71, OpenCL, err = clSetKernelArg(kernels[vecsize], 1, sizeof(cl_mem), &src1);); (138, OpenCL, err = clEnqueueReadBuffer(queue, dest, CL_TRUE, 0, BUFFER_SIZE, dest_host.data(), 0, NULL, NULL);); (40, OpenCL, src1 = clCreateBuffer(context, CL_MEM_READ_WRITE, BUFFER_SIZE, NULL, &err);); (71, OpenCL, err = clSetKernelArg(kernels[vecsize], 4, sizeof(size_t), &step);); (38, OpenCL, dest = clCreateBuffer(context, CL_MEM_READ_WRITE, BUFFER_SIZE, NULL, &err);)", "label": "(51, OpenCL, dest = clCreateBuffer( context, CL_MEM_WRITE_ONLY, BUFFER_SIZE, NULL, &err );); (44, OpenCL, src1 = clCreateBuffer( context, CL_MEM_READ_ONLY, BUFFER_SIZE, NULL, &err );); (72, OpenCL, err = clSetKernelArg(kernels[vecsize], 0, sizeof dest, &dest);); (44, OpenCL, src2 = clCreateBuffer( context, CL_MEM_READ_ONLY, BUFFER_SIZE, NULL, &err );); (76, OpenCL, err = clSetKernelArg(kernels[vecsize], 3, sizeof cmp, &cmp);); (71, OpenCL, err = clSetKernelArg(kernels[vecsize], 1, sizeof src1, &src1);); (134, OpenCL, err = clEnqueueNDRangeKernel(queue, kernels[vecsize], 1, NULL, &vector_count, NULL, 0, NULL, NULL);); (42, OpenCL, cmp = clCreateBuffer( context, CL_MEM_READ_ONLY, BUFFER_SIZE, NULL, &err );); (70, OpenCL, err = clSetKernelArg(kernels[vecsize], 2, sizeof src2, &src2);)"}
{"predict": "(15, MPI, MPI_Type_commit(&eq_type);); (17, MPI, MPI_Op_create((MPI_User_function *) streq, 1, &op);); (17, MPI, MPI_Reduce(&data, &result, 1, eq_type, op, 0, MPI_COMM_WORLD);); (6, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &wrank);); (13, MPI, MPI_Type_create_struct(2, blklens, displs, types, &eq_type);); (5, MPI, MPI_Comm_size(MPI_COMM_WORLD, &wsize);); (21, MPI, MPI_Op_free(&op);); (20, MPI, MPI_Type_free(&eq_type);)", "label": "(17, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &wrank);); (21, MPI, MPI_Reduce(&data, &result, 1, eq_type, op, 0, MPI_COMM_WORLD);); (25, MPI, MPI_Op_free(&op);); (10, MPI, MPI_Type_create_struct(2, blklens, displs, types, &eq_type);); (10, MPI, MPI_Type_commit(&eq_type);); (3, MPI, MPI_Op_create(myop, 0, &op);); (10, MPI, MPI_Comm_size(MPI_COMM_WORLD, &wsize);); (21, MPI, MPI_Type_free(&eq_type);)"}
{"predict": "(4, OpenMP, #pragma omp target private(var1, var2) map(tofrom: var1, var2))", "label": "(7, OpenMP, #pragma omp critical(add_first)); (3, OpenMP, #pragma omp parallel shared(var1, var2)); (7, OpenMP, #pragma omp atomic); (8, OpenMP, #pragma omp single)"}
{"predict": "(13, TBB, test_extract<tbb::flow::rejecting>();); (7, TBB, lightweight_testing::test<tbb::flow::function_node>(10);); (12, TBB, test_extract<tbb::flow::queueing>();)", "label": "(9, TBB, test_ports_return_references<tbb::flow::rejecting>();); (9, TBB, lightweight_testing::test<tbb::flow::multifunction_node>(10);); (13, TBB, test_extract<tbb::flow::rejecting>();); (5, TBB, test_ports_return_references<tbb::flow::queueing>();); (12, TBB, test_extract<tbb::flow::queueing>();)"}
{"predict": "(119, MPI, mpirc = MPI_File_read_at(fh, read_offset, bufstart, read_count, MPI_BYTE, &status);); (86, MPI, mpirc = MPI_File_read_at(fh, pos, buf, 1, MPI_BYTE, &status);); (60, MPI, const char* mpierrstr = MPI_Error_string(mpirc);); (23, MPI, MPI_Bcast(&filesize, 1, MPI_UINT64_T, 0, MPI_COMM_WORLD);); (90, MPI, MPI_Error_string(mpirc, mpierrstr, &mpierrlen);); (6, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (57, MPI, int mpirc = MPI_File_set_view(fh, disp, MPI_BYTE, MPI_BYTE, datarep, MPI_INFO_NULL);); (193, MPI, MPI_Bcast(line, (int) size, MPI_CHAR, 0, MPI_COMM_WORLD);); (4, MPI, MPI_Comm_size(MPI_COMM_WORLD, &ranks);)", "label": "(64, MPI, MPI_Error_string(mpirc, mpierrstr, &mpierrlen);); (45, MPI, MPI_Exscan(&chunk_count, &chunk_offset, 1, MPI_UINT64_T, MPI_SUM, MPI_COMM_WORLD);); (88, MPI, mpirc = MPI_File_read_at(fh, pos, buf, 1, MPI_CHAR, &status);); (120, MPI, mpirc = MPI_File_read_at(fh, read_offset, bufstart, read_count, MPI_CHAR, &status);); (58, MPI, int mpirc = MPI_File_set_view(fh, disp, MPI_CHAR, MPI_CHAR, datarep, MPI_INFO_NULL);); (5, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (5, MPI, MPI_Comm_size(MPI_COMM_WORLD, &ranks);); (19, MPI, MPI_Bcast(&filesize, 1, MPI_UINT64_T, 0, MPI_COMM_WORLD);)"}
{"predict": "(1, CUDA, __shared__ float s_mem[32];)", "label": "(1, CUDA, __shared__ float s_mem[32];)"}
{"predict": "(12, MPI, rc = MPI_Type_get_extent(type, &tmp_lb, &attr->child_extent);); (14, MPI, rc = MPI_Type_dup(type, newtype);); (19, MPI, rc = MPI_Type_free(&type);)", "label": "(15, MPI, rc = MPI_Type_dup(type, newtype);); (11, MPI, rc = MPI_Type_get_extent(type, &tmp_lb, &attr->child_type_extent);); (19, MPI, rc = MPI_Type_free(&type);)"}
{"predict": "(60, OpenMP, #pragma omp parallel for reduction(+ : ret_sum))", "label": "(60, OpenMP, #pragma omp parallel for reduction(+ : ret_sum))"}
{"predict": "(2, TBB, tbb::task* dummy_root = new( tbb::task::allocate_root() ) tbb::empty_task;)", "label": "(3, TBB, tbb::task* dummy_root = new( tbb::task::allocate_root() ) tbb::empty_task;); (22, TBB, tbb::task::destroy( *dummy_root );); (13, TBB, tbb::task::spawn_root_and_wait(t);); (16, TBB, tbb::task::enqueue(t);)"}
{"predict": "(32, OpenMP, #pragma omp target update from(z[:10])); (17, OpenMP, #pragma omp target update to(z[:10])); (18, OpenMP, #pragma omp target map(to:k[:5]) map(always, tofrom:x) map(tofrom:y))", "label": "(28, OpenMP, #pragma omp target update from(z[:10])); (17, OpenMP, #pragma omp target update to(z[:10])); (18, OpenMP, #pragma omp target map(to:k[:5]) map(always, tofrom:x) map(tofrom:y))"}
{"predict": "(31, OpenMP, #pragma omp target update from(z[:10])); (17, OpenMP, #pragma omp target update to(z[:10])); (18, OpenMP, #pragma omp target map(to:k[:5]) map(always, tofrom:x) map(tofrom:y))", "label": "(28, OpenMP, #pragma omp target update from(z[:10])); (17, OpenMP, #pragma omp target update to(z[:10])); (18, OpenMP, #pragma omp target map(to:k[:5]) map(always, tofrom:x) map(tofrom:y))"}
{"predict": "(16, MPI, MPI_Abort(MPI_COMM_WORLD, -1);)", "label": "(18, MPI, MPI_Abort(MPI_COMM_WORLD, 1);)"}
{"predict": "(3, OpenMP, #pragma omp target); (3, OpenMP, #pragma omp teams distribute)", "label": "(4, OpenMP, #pragma omp teams distribute); (2, OpenMP, #pragma omp target)"}
{"predict": "(41, CUDA, return cudaGetLastError();)", "label": "(41, CUDA, return cudaGetLastError();)"}
{"predict": "(14, CUDA, extern __shared__ float alpha_buffer_sh[];)", "label": "(14, CUDA, extern __shared__ float alpha_buffer_sh[];)"}
{"predict": "(65, MPI, rc = MPI_Type_free(&type);)", "label": "(65, MPI, rc = MPI_Type_free(&type);)"}
{"predict": "(34, MPI, MPI_Cart_coords(comm2d, crank, 2, coords);); (32, MPI, MPI_Cart_get(comm2d, 2, dims, period, neighbors);); (7, MPI, MPI_Init(&argc, &argv);); (47, MPI, MPI_Comm_free(&comm2d);); (6, MPI, MPI_Comm_size(MPI_COMM_WORLD, &ntasks);); (6, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (29, MPI, MPI_Cart_create(MPI_COMM_WORLD, 2, dims, period, 1, &comm2d);); (32, MPI, MPI_Comm_rank(comm2d, &crank);); (40, MPI, MPI_Barrier(MPI_COMM_WORLD);)", "label": "(37, MPI, MPI_Cart_shift(comm2d, 0, 1, &neighbors[0], &neighbors[1]);); (8, MPI, MPI_Init(&argc, &argv);); (26, MPI, MPI_Finalize();); (38, MPI, MPI_Cart_coords(comm2d, crank, 2, coords);); (6, MPI, MPI_Comm_size(MPI_COMM_WORLD, &ntasks);); (28, MPI, MPI_Cart_create(MPI_COMM_WORLD, 2, dims, period, 1, &comm2d);); (5, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (42, MPI, MPI_Barrier(comm2d);); (26, MPI, MPI_Comm_rank(comm2d, &crank);); (29, MPI, MPI_Cart_shift(comm2d, 1, 1, &neighbors[2], &neighbors[3]);)"}
{"predict": "(21, CUDA, qmc_cuda::cuda_check(cudaDeviceSynchronize(), \"KaKjw_to_KKwaj\");); (19, CUDA, qmc_cuda::cuda_check(cudaGetLastError(), \"KaKjw_to_KKwaj\");)", "label": "(21, CUDA, qmc_cuda::cuda_check(cudaDeviceSynchronize(), \"KaKjw_to_KKwaj\");); (19, CUDA, qmc_cuda::cuda_check(cudaGetLastError(), \"KaKjw_to_KKwaj\");)"}
{"predict": "(4, OpenMP, #pragma omp atomic hint(AMD_fast_fp_atomics)); (10, OpenMP, #pragma omp atomic hint(AMD_safe_fp_atomics)); (6, OpenMP, #pragma omp atomic hint(AMD_partial_fp_atomics)); (-1, OpenMP, #pragma omp atomic hint(AMD_default_fp_atomics)); (1, OpenMP, #pragma omp atomic hint(AMD_strong_fp_atomics)); (4, OpenMP, #pragma omp atomic hint(AMD_relaxed_fp_atomics))", "label": "(12, OpenMP, #pragma omp atomic hint(1) hint(1)); (7, OpenMP, #pragma omp atomic hint(a); (4, OpenMP, #pragma omp atomic hint(+); (1, OpenMP, #pragma omp atomic hint(); (6, OpenMP, #pragma omp atomic hint(a)); (-3, OpenMP, #pragma omp atomic hint)"}
{"predict": "(65, CUDA, HANDLE_CUDA_ERROR(cudaMallocHost((void**) &C, sizeof(floatTypeC) * elementsC));); (266, CUDA, if (C_d) cudaFree(C_d);); (264, CUDA, if (A) cudaFreeHost(A);); (52, CUDA, HANDLE_CUDA_ERROR(cudaMalloc((void**) &C_d, sizeC));); (50, CUDA, HANDLE_CUDA_ERROR(cudaMalloc((void**) &A_d, sizeA));); (259, CUDA, if (A_d) cudaFree(A_d);); (262, CUDA, if (C) cudaFreeHost(C);); (56, CUDA, HANDLE_CUDA_ERROR(cudaMallocHost((void**) &A, sizeof(floatTypeA) * elementsA));); (179, CUDA, HANDLE_CUDA_ERROR(cudaDeviceSynchronize());); (162, CUDA, HANDLE_CUDA_ERROR(cudaProfilerStart());); (157, CUDA, HANDLE_CUDA_ERROR(cudaMemcpy2DAsync(A_d, sizeA, A, sizeA, sizeA, 1, cudaMemcpyDefault, nullptr));); (179, CUDA, HANDLE_CUDA_ERROR(cudaProfilerStop());); (163, CUDA, HANDLE_CUDA_ERROR(cudaMemcpy2DAsync(C_d, sizeC, C, sizeC, sizeC, 1, cudaMemcpyDefault, nullptr));); (254, CUDA, HANDLE_CUDA_ERROR(cudaStreamDestroy(stream));); (141, CUDA, HANDLE_CUDA_ERROR(cudaCreateStream(&stream));); (89, CUDA, HANDLE_ERROR(cutensorSetStream(handle, plan, stream));); (249, CUDA, if (plan) cudaFreePlan(plan);); (250, CUDA, if (desc) cudaFreeOperationDescriptor(desc);); (251, CUDA, if (descA) cudaFreeTensorDescriptor(descA);); (252, CUDA, if (descC) cudaFreeTensorDescriptor(descC);); (245, CUDA, HANDLE_CUDA_ERROR(cudaDeviceReset());); (141, CUDA, HANDLE_CUDA_ERROR(cudaStreamSynchronize(stream));); (45, CUDA, HANDLE_CUDA_ERROR(cudaMemset(A_d, 0, sizeA));); (45, CUDA, HANDLE_CUDA_ERROR(cudaMemset(C_d, 0, sizeC));); (239, CUDA, if (A) cudaFreeHost(A_d", "label": "(63, CUDA, HANDLE_CUDA_ERROR(cudaMallocHost((void**) &C, sizeof(floatTypeC) * elementsC));); (78, CUDA, HANDLE_CUDA_ERROR(cudaMemcpy2DAsync(A_d, sizeA, A, sizeA, sizeA, 1, cudaMemcpyDefault, nullptr));); (192, CUDA, if (C_d) cudaFree(C_d);); (188, CUDA, if (A) cudaFreeHost(A);); (51, CUDA, HANDLE_CUDA_ERROR(cudaMalloc((void**) &C_d, sizeC));); (49, CUDA, HANDLE_CUDA_ERROR(cudaMalloc((void**) &A_d, sizeA));); (187, CUDA, if (A_d) cudaFree(A_d);); (185, CUDA, if (C) cudaFreeHost(C);); (54, CUDA, HANDLE_CUDA_ERROR(cudaMallocHost((void**) &A, sizeof(floatTypeA) * elementsA));)"}
{"predict": "(18, TBB, tbb::spin_mutex::scoped_lock lock(*rMutex);)", "label": "(18, TBB, tbb::spin_mutex::scoped_lock lock(*rMutex);)"}
{"predict": "(19, CUDA, cudaMalloc((void**)&d_LimitsA, sizeof(uint) * ((MAX_SAMPLE_COUNT >> 1) + 1);); (22, CUDA, cudaMalloc((void**)&d_RanksB, sizeof(uint) * MAX_SAMPLE_COUNT);); (18, CUDA, cudaMalloc((void**)&d_RanksA, sizeof(uint) * MAX_SAMPLE_COUNT);); (21, CUDA, cudaMalloc((void**)&d_LimitsB, sizeof(uint) * ((MAX_SAMPLE_COUNT >> 1) + 1);)", "label": "(21, CUDA, checkCudaErrors(cudaMalloc((void **)&d_LimitsA, MAX_SAMPLE_COUNT * sizeof(uint)));); (19, CUDA, checkCudaErrors(cudaMalloc((void **)&d_RanksB,  MAX_SAMPLE_COUNT * sizeof(uint)));); (17, CUDA, checkCudaErrors(cudaMalloc((void **)&d_RanksA,  MAX_SAMPLE_COUNT * sizeof(uint)));); (19, CUDA, checkCudaErrors(cudaMalloc((void **)&d_LimitsB, MAX_SAMPLE_COUNT * sizeof(uint)));)"}
{"predict": "(72, OpenACC, #pragma acc data copyin(grid[0:n*n])); (99, OpenACC, #pragma acc parallel loop); (100, OpenACC, #pragma acc update host(grid[0:n*n])); (78, OpenACC, #pragma acc parallel loop tile(*,*) nogroup)", "label": "(79, OpenACC, #pragma acc parallel loop independent); (70, OpenACC, #pragma acc data pcopy(grid[0:n*n])); (86, OpenACC, #pragma acc parallel loop gang); (99, OpenACC, #pragma acc kernels); (89, OpenACC, #pragma acc loop vector)"}
{"predict": "(6, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);); (4, MPI, MPI_Comm_size(MPI_COMM_WORLD, &world_size);)", "label": "(6, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);); (4, MPI, MPI_Comm_size(MPI_COMM_WORLD, &world_size);)"}
{"predict": "(7, MPI, MPI_Init(&argc, &argv);); (8, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (24, MPI, MPI_Finalize();)", "label": "(25, MPI, MPI_Finalize();); (7, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (5, MPI, MPI_Init(NULL, NULL);)"}
{"predict": "(124, MPI, MPI_Comm_group( MPI_COMM_WORLD, &world_group );); (144, MPI, MPI_Comm_rank( comm_col, &myrow );); (206, MPI, MPI_Barrier(MPI_COMM_WORLD);); (83, MPI, MPI_Bcast(&inner_block_flag, 1, MPI_INT, root, MPI_COMM_WORLD);); (136, MPI, MPI_Group_incl( world_group, nprow, ranks, &temp_group );); (40, MPI, MPI_Comm_rank( MPI_COMM_WORLD, &my_ID );); (79, MPI, MPI_Bcast(&iterations, 1, MPI_INT, root, MPI_COMM_WORLD);); (125, MPI, MPI_Group_incl( world_group, npcol, ranks, &temp_group );); (36, MPI, MPI_Init(&argc,&argv);); (132, MPI, MPI_Comm_create( MPI_COMM_WORLD, temp_group, &comm_col );); (36, MPI, MPI_Comm_size( MPI_COMM_WORLD, &Num_procs );); (122, MPI, MPI_Comm_create( MPI_COMM_WORLD, temp_group, &comm_row );); (246, MPI, MPI_Finalize();); (71, MPI, MPI_Bcast(&order,  1, MPI_INT, root, MPI_COMM_WORLD);); (168, MPI, MPI_Allgather( &mynrows, 1, MPI_INT, mm, 1, MPI_INT, comm_col );); (71, MPI, MPI_Bcast(&nb, 1, MPI_INT, root, MPI_COMM_WORLD);); (128, MPI, MPI_Comm_rank( comm_row, &mycol );); (173, MPI, MPI_Allgather( &myncols, 1, MPI_INT, nn, 1, MPI_INT, comm_row );)", "label": "(124, MPI, MPI_Comm_group( MPI_COMM_WORLD, &world_group );); (143, MPI, MPI_Comm_rank( comm_col, &myrow );); (205, MPI, MPI_Barrier(MPI_COMM_WORLD);); (83, MPI, MPI_Bcast(&inner_block_flag, 1, MPI_INT, root, MPI_COMM_WORLD);); (135, MPI, MPI_Group_incl( world_group, nprow, ranks, &temp_group );); (39, MPI, MPI_Comm_rank( MPI_COMM_WORLD, &my_ID );); (78, MPI, MPI_Bcast(&iterations, 1, MPI_INT, root, MPI_COMM_WORLD);); (124, MPI, MPI_Group_incl( world_group, npcol, ranks, &temp_group );); (35, MPI, MPI_Init(&argc,&argv);); (131, MPI, MPI_Comm_create( MPI_COMM_WORLD, temp_group, &comm_col );); (35, MPI, MPI_Comm_size( MPI_COMM_WORLD, &Num_procs );); (121, MPI, MPI_Comm_create( MPI_COMM_WORLD, temp_group, &comm_row );); (245, MPI, MPI_Finalize();); (70, MPI, MPI_Bcast(&order,  1, MPI_INT, root, MPI_COMM_WORLD);); (167, MPI, MPI_Allgather( &mynrows, 1, MPI_INT, mm, 1, MPI_INT, comm_col );); (70, MPI, MPI_Bcast(&nb, 1, MPI_INT, root, MPI_COMM_WORLD);); (127, MPI, MPI_Comm_rank( comm_row, &mycol );); (172, MPI, MPI_Allgather( &myncols, 1, MPI_INT, nn, 1, MPI_INT, comm_row );)"}
{"predict": "(3, OpenMP, #pragma omp target teams distribute parallel for if (target: Arg)); (10, OpenMP, #pragma omp target teams distribute parallel for if (parallel: Arg)); (4, OpenMP, #pragma omp target teams distribute parallel for if (Arg)); (1, OpenMP, #pragma omp target teams distribute parallel for if (false)); (9, OpenMP, #pragma omp target teams distribute parallel for if (Arg) if (parallel: Arg))", "label": "(6, OpenMP, #pragma omp target teams distribute parallel for if (false)); (9, OpenMP, #pragma omp target teams distribute parallel for if (parallel: Arg)); (0, OpenMP, #pragma omp target teams distribute parallel for if (true))"}
{"predict": "(2, MPI, MPIDataCommunicator mpi_world_communicator(MPI_COMM_WORLD);)", "label": "(2, MPI, MPIDataCommunicator mpi_world_communicator(MPI_COMM_WORLD);)"}
{"predict": "(9, MPI, MPI_Reduce_local(inbuf, inoutbuf, count, datatype, MPI_SUM);); (11, MPI, MPI_Abort(MPI_COMM_WORLD, 1);)", "label": "(8, MPI, MPI_Reduce_local_c(inbuf, inoutbuf, count, datatype, MPI_SUM);)"}
{"predict": "(2, MPI, MPIDataCommunicator mpi_world_communicator(MPI_COMM_WORLD);)", "label": "(2, MPI, MPIDataCommunicator mpi_world_communicator(MPI_COMM_WORLD);)"}
{"predict": "(104, MPI, MPI_Barrier(c_info->File_comm);); (125, MPI, MPI_ERRHAND(GEN_File_read_at(c_info->fh, Offset, c_info->r_buffer, Locsize, c_info->etype, &stat));); (134, MPI, MPI_ERRHAND(GEN_File_read_shared(c_info->fh, c_info->r_buffer, Locsize, c_info->etype, &stat));); (109, MPI, MPI_ERRHAND(GEN_File_read(c_info->fh, c_info->r_buffer, Locsize, c_info->etype, &stat));); (92, MPI, *time = MPI_Wtime();); (118, MPI, MPI_ERRHAND(GEN_File_read_at(c_info->fh, Offset, c_info->s_buffer, Locsize, c_info->etype, &stat));); (94, MPI, MPI_ERRHAND(GEN_File_read_shared(c_info->fh, c_info->s_buffer, Locsize, c_info->etype, &stat));); (139, MPI, MPI_ERRHAND(GEN_File_read(c_info->fh, c_info->s_buffer, Locsize, c_info->etype, &stat));); (46, MPI, MPI_Type_size(c_info->etype, &size);); (100, MPI, *time = (MPI_Wtime() - *time) / (i_sample*j_sample);)", "label": "(102, MPI, MPI_Barrier(c_info->File_comm);); (108, MPI, MPI_ERRHAND(GEN_File_read(c_info->fh, c_info->r_buffer, Locsize, c_info->etype, &stat));); (121, MPI, MPI_ERRHAND(GEN_File_read_at(c_info->fh, Offset, c_info->r_buffer, Locsize, c_info->etype, &stat));); (133, MPI, MPI_ERRHAND(GEN_File_read_shared(c_info->fh, c_info->r_buffer, Locsize, c_info->etype, &stat));); (92, MPI, *time = MPI_Wtime();)"}
{"predict": "(6, CUDA, thrust::device_ptr<thrust::complex<double>> d_ptr = thrust::device_malloc<thrust::complex<double>>(1);); (15, CUDA, thrust::device_free(d_ptr);); (8, CUDA, qmc_cuda::cuda_check(cudaDeviceSynchronize());); (8, CUDA, qmc_cuda::cuda_check(cudaGetLastError());)", "label": "(6, CUDA, thrust::device_ptr<thrust::complex<double>> d_ptr = thrust::device_malloc<thrust::complex<double>>(1);); (14, CUDA, thrust::device_free(d_ptr);); (9, CUDA, qmc_cuda::cuda_check(cudaDeviceSynchronize());); (7, CUDA, qmc_cuda::cuda_check(cudaGetLastError());)"}
{"predict": "(84, OpenMP, #pragma omp parallel private(i)); (62, OpenMP, #pragma omp distribute parallel for simd private(h)); (4, OpenMP, #pragma omp target); (25, OpenMP, #pragma omp distribute parallel for simd private(argc,); (64, OpenMP, #pragma omp distribute parallel for simd nowait); (8, OpenMP, #pragma omp distribute parallel for simd private(); (65, OpenMP, #pragma omp parallel); (16, OpenMP, #pragma omp distribute parallel for simd private(argc); (40, OpenMP, #pragma omp distribute parallel for simd private(a, b)); (49, OpenMP, #pragma omp distribute parallel for simd private(e, g)); (34, OpenMP, #pragma omp distribute parallel for simd private(S1)); (42, OpenMP, #pragma omp distribute parallel for simd private(argv[1])); (6, OpenMP, #pragma omp distribute parallel for simd private()); (-5, OpenMP, #pragma omp distribute parallel for simd private); (63, OpenMP, #pragma omp distribute parallel for simd private(i)); (72, OpenMP, #pragma omp distribute parallel for simd private(j)); (23, OpenMP, #pragma omp distribute parallel for simd private(argc)); (16, OpenMP, #pragma omp distribute parallel for simd private(argc > 0 ? argv[1] : argv[2])); (65, OpenMP, #pragma omp parallel shared(i)); (-13, OpenMP, #pragma omp teams)", "label": "(63, OpenMP, #pragma omp distribute parallel for simd private(h)); (86, OpenMP, #pragma omp distribute parallel for simd private(j)); (82, OpenMP, #pragma omp parallel private(i)); (65, OpenMP, #pragma omp distribute parallel for simd nowait); (9, OpenMP, #pragma omp distribute parallel for simd private(); (1, OpenMP, #pragma omp target); (27, OpenMP, #pragma omp distribute parallel for simd private(argc > 0 ? argv[1] : argv[2])); (1, OpenMP, #pragma omp distribute parallel for simd private); (35, OpenMP, #pragma omp distribute parallel for simd private(S1)); (19, OpenMP, #pragma omp distribute parallel for simd private(argc,); (61, OpenMP, #pragma omp parallel); (12, OpenMP, #pragma omp distribute parallel for simd private(argc); (36, OpenMP, #pragma omp distribute parallel for simd private(a, b)); (25, OpenMP, #pragma omp distribute parallel for simd private(argc) allocate , allocate(, allocate(omp_default , allocate(omp_default_mem_alloc, allocate(omp_default_mem_alloc:, allocate(omp_default_mem_alloc: argc, allocate(omp_default_mem_alloc: argv), allocate(argv)); (39, OpenMP, #pragma omp distribute parallel for simd private(argv[1])); (43, OpenMP, #pragma omp distribute parallel for simd private(e, g)); (2, OpenMP, #pragma omp distribute parallel for simd private()); (60, OpenMP, #pragma omp distribute parallel for simd private(i)); (65, OpenMP, #pragma omp parallel shared(i)); (-12, OpenMP, #pragma omp teams)"}
{"predict": "(9, OpenCL, clReleaseMemObject(objNrm2);); (4, OpenCL, clReleaseMemObject(objX);); (11, OpenCL, clReleaseMemObject(objScratch);)", "label": "(5, OpenCL, clReleaseMemObject(objX);); (12, OpenCL, clReleaseMemObject(objScratch);); (7, OpenCL, clReleaseMemObject(objNrm2);)"}
{"predict": "(4, CUDA, __shared__ unsigned short points[2*MEMWID];)", "label": "(3, CUDA, __shared__ unsigned short points[2*MEMWID];)"}
{"predict": "(13, CUDA, CUDASimulation cudaSimulation(model);)", "label": "(13, CUDA, CUDASimulation cudaSimulation(model);)"}
{"predict": "(67, MPI, MPI_Waitall(2, request, status);)", "label": "(67, MPI, MPI_Waitall(2, request, status);)"}
{"predict": "(21, MPI, MPI_Win_create(buf, 10 * sizeof(int), sizeof(int), MPI_INFO_NULL, comm, &win);); (22, MPI, MPI_Group_compare(group, wingroup, &result);); (24, MPI, MPI_Group_free(&wingroup);); (18, MPI, MPI_Win_get_group(win, &wingroup);); (24, MPI, MPI_Win_free(&win);); (14, MPI, MPI_Comm_group(comm, &group);); (21, MPI, MPI_Group_free(&group);)", "label": "(28, MPI, MPI_Group_free(&wingroup);); (19, MPI, MPI_Win_create(buf, sizeof(int) * 10, sizeof(int), MPI_INFO_NULL, comm, &win);); (28, MPI, MPI_Win_free(&win);); (20, MPI, MPI_Group_compare(group, wingroup, &result);); (25, MPI, MPI_Group_free(&group);); (17, MPI, MPI_Comm_group(comm, &group);); (15, MPI, MPI_Win_get_group(win, &wingroup);)"}
{"predict": "(14, CUDA, ColorSpinorParam cudaParam(cpuParam, *inv_param, QUDA_CUDA_FIELD_LOCATION);)", "label": "(14, CUDA, ColorSpinorParam cudaParam(cpuParam, *inv_param, QUDA_CUDA_FIELD_LOCATION);)"}
{"predict": "(15, OpenMP, #pragma omp target teams distribute parallel for)", "label": "(15, OpenMP, #pragma omp target parallel for)"}
{"predict": "(58, CUDA, thrust::host_vector<mytype> th_data = t_data;); (40, CUDA, thrust::device_vector<mytype> t_data(h_data, h_data+test_dsize);); (49, CUDA, cudaEventElapsedTime(&et, start, stop);); (22, CUDA, cudaStreamCreate(&str);); (27, CUDA, cudaLaunchCooperativeKernel((void *)my_remove_if<mytype>, FIXME);); (53, CUDA, thrust::remove(t_data.begin(), t_data.end(), -1);); (25, CUDA, cudaMemcpy(h_data, d_odata, tsize, cudaMemcpyDeviceToHost);); (34, CUDA, cudaEventRecord(start);); (41, CUDA, cudaEventRecord(stop);); (15, CUDA, cudaMemcpy(d_idata, h_data, tsize, cudaMemcpyHostToDevice);); (2, CUDA, cudaError_t err = cudaGetDeviceProperties(&prop, 0);); (39, CUDA, cudaEventSynchronize(stop);); (-4, CUDA, cudaMalloc(&d_idxs, test_dsize*sizeof(unsigned));); (-7, CUDA, cudaMalloc(&d_odata, tsize);); (0, CUDA, cudaMemset(d_odata, 0, tsize);); (47, CUDA, cudaEventDestroy(start);); (50, CUDA, cudaFree(d_odata);); (50, CUDA, cudaFree(d_idxs);); (31, CUDA, cudaEventCreate(&start);); (-9, CUDA, cudaMalloc(&d_idata, tsize);); (30, CUDA, cudaEventCreate(&stop);); (46, CUDA, cudaEventDestroy(stop);); (-2, CUDA, cudaMemset(d_idata, 0, tsize);); (9, CUDA, cudaOccupancyMaxActiveBlocksPerMultiprocessor(&numBlkPerSM, my_remove_if<mytype>, nTPB, 0);); (40, CUDA, cudaStreamDestroy(str);); (31, CUDA, cudaEventRecord(stop);); (-6, CUDA, cudaMemset(d_odata, -1, tsize);)", "label": "(58, CUDA, thrust::host_vector<mytype> th_data = t_data;); (40, CUDA, thrust::device_vector<mytype> t_data(h_data, h_data+test_dsize);); (49, CUDA, cudaEventElapsedTime(&et, start, stop);); (22, CUDA, cudaStreamCreate(&str);); (27, CUDA, cudaLaunchCooperativeKernel((void *)my_remove_if<mytype>, FIXME);); (8, CUDA, cudaError_t err = cudaGetDeviceProperties(&prop, 0);); (26, CUDA, cudaMemcpy(h_data, d_odata, tsize, cudaMemcpyDeviceToHost);); (49, CUDA, thrust::remove(t_data.begin(), t_data.end(), -1);); (15, CUDA, cudaMemcpy(d_idata, h_data, tsize, cudaMemcpyHostToDevice);); (39, CUDA, cudaEventRecord(stop);); (-1, CUDA, cudaMalloc(&d_idxs, test_dsize*sizeof(unsigned));); (33, CUDA, cudaEventCreate(&start);); (-5, CUDA, cudaMalloc(&d_odata, tsize);); (33, CUDA, cudaEventRecord(start);); (-6, CUDA, cudaMemset(d_odata, 0, tsize);); (-9, CUDA, cudaMalloc(&d_idata, tsize);); (29, CUDA, cudaEventCreate(&stop);); (2, CUDA, cudaOccupancyMaxActiveBlocksPerMultiprocessor(&numBlkPerSM, my_remove_if<mytype>, nTPB, 0);)"}
{"predict": "(48, MPI, MPI_Type_commit(recv_types + j);)", "label": "(48, MPI, MPI_Type_commit(recv_types + j);)"}
{"predict": "(23, CUDA, HANDLE_ERROR(cudaStreamSynchronize(stream));); (9, CUDA, HANDLE_ERROR(cudaMalloc((void**)&initial_x_d, sizeof(float) * 2 * DYN_T::STATE_DIM));); (10, CUDA, HANDLE_ERROR(cudaMalloc((void**)&cost_trajectories_d, sizeof(float) * 2 * num_rollouts));)", "label": "(25, CUDA, HANDLE_ERROR(cudaStreamSynchronize(stream));); (9, CUDA, HANDLE_ERROR(cudaMalloc((void**)&initial_x_d, sizeof(float) * 2 * DYN_T::STATE_DIM));); (9, CUDA, HANDLE_ERROR(cudaMalloc((void**)&cost_trajectories_d, sizeof(float) * 2 * num_rollouts));)"}
{"predict": "(3, CUDA, extern __shared__ float s_buffer[];)", "label": "(6, CUDA, extern __shared__ float s_buffer[];)"}
{"predict": "(20, MPI, MPI_Grequest_complete(aio_reqlist[i]->req);)", "label": "(19, MPI, MPI_Grequest_complete(aio_reqlist[i]->req);)"}
{"predict": "(67, CUDA, cudaEventSynchronize(stop);); (39, CUDA, cudaMalloc((void **) &d_a, sizeof(int)*m*n);); (113, CUDA, cudaFreeHost(h_cc);); (34, CUDA, cudaEventRecord(start, 0);); (60, CUDA, cudaThreadSynchronize();); (36, CUDA, cudaMalloc((void **) &d_b, sizeof(int)*n*k);); (39, CUDA, cudaMemcpy(d_a, h_a, sizeof(int)*m*n, cudaMemcpyHostToDevice);); (102, CUDA, cudaFree(d_a);); (62, CUDA, cudaEventElapsedTime(&gpu_elapsed_time_ms, start, stop);); (3, CUDA, cudaMallocHost((void **) &h_c, sizeof(int)*m*k);); (3, CUDA, cudaMallocHost((void **) &h_cc, sizeof(int)*m*k);); (35, CUDA, cudaMemcpy(d_b, h_b, sizeof(int)*n*k, cudaMemcpyHostToDevice);); (-1, CUDA, cudaMallocHost((void **) &h_b, sizeof(int)*n*k);); (98, CUDA, cudaFree(d_c);); (96, CUDA, cudaFree(d_b);); (65, CUDA, cudaEventElapsedTime(&cpu_elapsed_time_ms, start, stop);); (26, CUDA, cudaMalloc((void **) &d_c, sizeof(int)*m*k);); (48, CUDA, cudaEventRecord(stop, 0);); (45, CUDA, cudaMemcpy(h_c, d_c, sizeof(int)*m*k, cudaMemcpyDeviceToHost);); (94, CUDA, cudaFreeHost(h_b);); (92, CUDA, cudaFreeHost(h_a);); (12, CUDA, cudaEventCreate(&start);); (-12, CUDA, cudaMallocHost((void **) &h_a, sizeof(int)*m*n);); (11, CUDA, cudaEventCreate(&stop);); (90, CUDA, cudaFreeHost(h_c);)", "label": "(67, CUDA, cudaEventSynchronize(stop);); (39, CUDA, cudaMalloc((void **) &d_a, sizeof(int)*m*n);); (114, CUDA, cudaFreeHost(h_cc);); (34, CUDA, cudaEventRecord(start, 0);); (60, CUDA, cudaThreadSynchronize();); (36, CUDA, cudaMalloc((void **) &d_b, sizeof(int)*n*k);); (39, CUDA, cudaMemcpy(d_a, h_a, sizeof(int)*m*n, cudaMemcpyHostToDevice);); (103, CUDA, cudaFree(d_a);); (62, CUDA, cudaEventElapsedTime(&gpu_elapsed_time_ms, start, stop);); (3, CUDA, cudaMallocHost((void **) &h_c, sizeof(int)*m*k);); (3, CUDA, cudaMallocHost((void **) &h_cc, sizeof(int)*m*k);); (35, CUDA, cudaMemcpy(d_b, h_b, sizeof(int)*n*k, cudaMemcpyHostToDevice);); (-1, CUDA, cudaMallocHost((void **) &h_b, sizeof(int)*n*k);); (99, CUDA, cudaFree(d_c);); (97, CUDA, cudaFree(d_b);); (66, CUDA, cudaEventElapsedTime(&cpu_elapsed_time_ms, start, stop);); (26, CUDA, cudaMalloc((void **) &d_c, sizeof(int)*m*k);); (49, CUDA, cudaEventRecord(stop, 0);); (45, CUDA, cudaMemcpy(h_c, d_c, sizeof(int)*m*k, cudaMemcpyDeviceToHost);); (95, CUDA, cudaFreeHost(h_b);); (93, CUDA, cudaFreeHost(h_a);); (12, CUDA, cudaEventCreate(&start);); (55, OpenMP, omp_mm(h_a, m, n, h_b, n, k, h_cc);); (-13, CUDA, cudaMallocHost((void **) &h_a, sizeof(int)*m*n);); (10, CUDA, cudaEventCreate(&stop);); (90, CUDA, cudaFreeHost(h_c);)"}
{"predict": "(37, CUDA, cudaMalloc((void **)&result_data, tensor1->size * sizeof(float));)", "label": "(37, CUDA, cudaMalloc((void **)&result_data, tensor1->size * sizeof(float));)"}
{"predict": "(1, OpenMP, #pragma omp parallel firstprivate(a, b, c, d, e)); (4, OpenMP, #pragma omp parallel firstprivate(a, b, c))", "label": "(1, OpenMP, #pragma omp parallel firstprivate(a, b, c, e)); (4, OpenMP, #pragma omp parallel firstprivate(a, b, c))"}
{"predict": "(29, CUDA, CUDA_CHECK(cudaMemcpy(P_host, P_device, size, cudaMemcpyDeviceToHost));); (35, CUDA, cudaFree(P_device);); (10, CUDA, CUDA_CHECK(cudaMemcpy(M_device, M_host, size, cudaMemcpyHostToDevice));); (34, CUDA, cudaFree(N_device);); (34, CUDA, cudaFree(M_device);); (25, CUDA, CUDA_CHECK(cudaDeviceSynchronize());); (7, CUDA, CUDA_CHECK(cudaMemcpy(N_device, N_host, size, cudaMemcpyHostToDevice));); (2, CUDA, CUDA_CHECK(cudaMalloc((void**)&N_device, size));); (9, CUDA, CUDA_CHECK(cudaMalloc((void**)&P_device, size));;); (-1, CUDA, CUDA_CHECK(cudaMalloc((void**)&M_device, size));)", "label": "(29, CUDA, CUDA_CHECK(cudaMemcpy(P_host, P_device, size, cudaMemcpyDeviceToHost));); (35, CUDA, cudaFree(P_device);); (10, CUDA, CUDA_CHECK(cudaMemcpy(M_device, M_host, size, cudaMemcpyHostToDevice));); (34, CUDA, cudaFree(N_device);); (34, CUDA, cudaFree(M_device);); (25, CUDA, CUDA_CHECK(cudaDeviceSynchronize());); (7, CUDA, CUDA_CHECK(cudaMemcpy(N_device, N_host, size, cudaMemcpyHostToDevice));); (2, CUDA, CUDA_CHECK(cudaMalloc((void**)&N_device, size));); (9, CUDA, CUDA_CHECK(cudaMalloc((void**)&P_device, size));;); (-1, CUDA, CUDA_CHECK(cudaMalloc((void**)&M_device, size));)"}
{"predict": "(11, SYCL, EasyCL *cl = EasyCL::createForFirstGpuOtherwiseCpu();)", "label": "(11, SYCL, EasyCL *cl = EasyCL::createForFirstGpuOtherwiseCpu();)"}
{"predict": "(12, OpenMP, #pragma omp parallel default(shared)); (0, OpenMP, #pragma omp task default); (11, OpenMP, #pragma omp parallel); (2, OpenMP, #pragma omp task default(none)); (-1, OpenMP, #pragma omp task default(); (12, OpenMP, #pragma omp parallel default(firstprivate)); (2, OpenMP, #pragma omp task default(x)); (-1, OpenMP, #pragma omp task default())", "label": "(17, OpenMP, #pragma omp task default(firstprivate)); (4, OpenMP, #pragma omp task default(shared), default(shared)); (0, OpenMP, #pragma omp task default(); (0, OpenMP, #pragma omp task default()); (5, OpenMP, #pragma omp task default(none)); (1, OpenMP, #pragma omp task default(x)); (7, OpenMP, #pragma omp task default(shared)); (-6, OpenMP, #pragma omp task default); (-4, OpenMP, #pragma omp task default(none)"}
{"predict": "(4, TBB, const oneapi::tbb::blocked_range3d<int> r( 0, i, 5, 0, j, 3, 0, k, 1 );); (4, TBB, oneapi::tbb::parallel_for( r, Striker() );)", "label": "(4, TBB, const tbb::blocked_range3d<int> r( 0, i, 5, 0, j, 3, 0, k, 1 );); (4, TBB, tbb::parallel_for( r, Striker() );)"}
{"predict": "(31, CUDA, volatile __shared__ int s_bmod;); (28, CUDA, __shared__ double s_lsum[MAXSUPER];)", "label": "(31, CUDA, volatile __shared__ int s_bmod;); (28, CUDA, __shared__ double s_lsum[MAXSUPER];)"}
{"predict": "(52, MPI, MPI_Allreduce(MPI_IN_PLACE,&n,1,mpi_int_t,MPI_MAX,grid->comm);); (50, MPI, MPI_Allreduce(MPI_IN_PLACE,&nnzL,1,mpi_int_t,MPI_SUM,grid->comm);)", "label": "(52, MPI, MPI_Allreduce(MPI_IN_PLACE,&n,1,mpi_int_t,MPI_MAX,grid->comm);); (50, MPI, MPI_Allreduce(MPI_IN_PLACE,&nnzL,1,mpi_int_t,MPI_SUM,grid->comm);)"}
{"predict": "(34, CUDA, CUDA_CHECK(cudaStreamSynchronize(stream));); (50, CUDA, CUDA_CHECK(cudaDeviceReset());); (47, CUDA, CUDA_CHECK(cudaStreamDestroy(stream));); (23, CUDA, CUDA_CHECK(cudaMalloc(reinterpret_cast<void **>(&d_A), sizeof(data_type) * A.size()));); (41, CUDA, CUDA_CHECK(cudaFree(d_A));); (17, CUDA, CUDA_CHECK(cudaStreamCreateWithFlags(&stream, cudaStreamNonBlocking));)", "label": "(34, CUDA, CUDA_CHECK(cudaStreamSynchronize(stream));); (50, CUDA, CUDA_CHECK(cudaDeviceReset());); (47, CUDA, CUDA_CHECK(cudaStreamDestroy(stream));); (23, CUDA, CUDA_CHECK(cudaMalloc(reinterpret_cast<void **>(&d_A), sizeof(data_type) * A.size()));); (41, CUDA, CUDA_CHECK(cudaFree(d_A));); (17, CUDA, CUDA_CHECK(cudaStreamCreateWithFlags(&stream, cudaStreamNonBlocking));)"}
{"predict": "(11, MPI, err = MPI_Type_struct(3, blocks, disps, types, &inttype);); (32, MPI, err = MPI_Type_size(eviltype, &val);); (134, MPI, MPI_Type_free(&inttype);); (75, MPI, err = MPI_Type_get_extent(eviltype, &lb, &extent);); (95, MPI, err = MPI_Type_ub(eviltype, &aval);); (131, MPI, MPI_Type_free(&eviltype);); (108, MPI, err = MPI_Type_get_true_extent(eviltype, &true_lb, &aval);); (15, MPI, err = MPI_Type_vector(3, 4, -5, inttype, &eviltype);); (40, MPI, err = MPI_Type_extent(eviltype, &aval);); (54, MPI, err = MPI_Type_lb(eviltype, &aval);)", "label": "(11, MPI, err = MPI_Type_struct(3, blocks, disps, types, &inttype);); (32, MPI, err = MPI_Type_size(eviltype, &val);); (134, MPI, MPI_Type_free(&inttype);); (75, MPI, err = MPI_Type_get_extent(eviltype, &lb, &extent);); (96, MPI, err = MPI_Type_ub(eviltype, &aval);); (17, MPI, err = MPI_Type_vector(3, 4, -5, inttype, &eviltype);); (131, MPI, MPI_Type_free(&eviltype);); (108, MPI, err = MPI_Type_get_true_extent(eviltype, &true_lb, &aval);); (40, MPI, err = MPI_Type_extent(eviltype, &aval);); (54, MPI, err = MPI_Type_lb(eviltype, &aval);)"}
{"predict": "(48, OpenMP, lis2mdl_offset_temp_comp_set(&dev_ctx, PROPERTY_ENABLE);)", "label": "(48, OpenMP, lis2mdl_offset_temp_comp_set(&dev_ctx, PROPERTY_ENABLE);)"}
{"predict": "(4, TBB, const oneapi::tbb::blocked_range3d<int> r( 0, i, 5, 0, j, 3, 0, k, 1 );); (4, TBB, oneapi::tbb::parallel_for( r, Striker() );)", "label": "(4, TBB, const tbb::blocked_range3d<int> r( 0, i, 5, 0, j, 3, 0, k, 1 );); (4, TBB, tbb::parallel_for( r, Striker() );)"}
{"predict": "(36, CUDA, CUDASimulation cudaSimulation(model);)", "label": "(36, CUDA, CUDASimulation cudaSimulation(model);)"}
{"predict": "(9, OpenMP, #pragma omp target); (10, OpenMP, #pragma omp distribute parallel for lastprivate(g, g1, svar, sfvar)); (63, OpenMP, #pragma omp distribute parallel for lastprivate(t_var, vec, s_arr, s_arr, var, var, svar)); (7, OpenMP, #pragma omp teams)", "label": "(9, OpenMP, #pragma omp target); (65, OpenMP, #pragma omp distribute parallel for lastprivate(t_var, vec, s_arr, s_arr, var, var, svar)); (9, OpenMP, #pragma omp distribute parallel for lastprivate(g, g1, svar, sfvar)); (7, OpenMP, #pragma omp teams)"}
{"predict": "(22, CUDA, cudaCheck(cudaMemsetAsync(scratch, 0, B * T * C * sizeof(floatX), main_stream));)", "label": "(45, CUDA, cudaCheck(cudaGetLastError());)"}
{"predict": "(66, OpenMP, iis2mdc_offset_temp_comp_set(&mag_ctx, PROPERTY_ENABLE);)", "label": "(66, OpenMP, iis2mdc_offset_temp_comp_set(&mag_ctx, PROPERTY_ENABLE);)"}
{"predict": "(13, CUDA, CP_host->freeCudaMem();)", "label": "(13, CUDA, CP_host->freeCudaMem();)"}
{"predict": "(116, CUDA, cudaFuncGetAttributes(&cuattr, slsum_bmod_inv_gpu_mrhs_nvshmem);); (116, CUDA, cudaDeviceSetLimit(cudaLimitStackSize, cuattr.localSizeBytes);); (121, CUDA, cudaOccupancyMaxPotentialBlockSize(&minGridSize, &myblockSize, (const void *) dwait_bcrd_u, 0, 0);); (91, CUDA, cudaStreamCreateWithFlags(&stream[i], cudaStreamNonBlocking);); (172, CUDA, CUDA_CHECK(cudaGetLastError());); (181, CUDA, CUDA_CHECK(cudaStreamDestroy(stream[i]));)", "label": "(117, CUDA, cudaDeviceSetLimit(cudaLimitStackSize, cuattr.localSizeBytes);); (93, CUDA, cudaStreamCreateWithFlags(&stream[i], cudaStreamNonBlocking);); (121, CUDA, cudaOccupancyMaxPotentialBlockSize(&minGridSize, &myblockSize, (const void *) swait_bcrd_u, 0, 0);); (173, CUDA, CUDA_CHECK(cudaGetLastError());); (112, CUDA, cudaFuncGetAttributes(&cuattr, slsum_bmod_inv_gpu_mrhs_nvshmem);); (181, CUDA, CUDA_CHECK(cudaStreamDestroy(stream[i]));)"}
{"predict": "(71, OpenMP, #pragma omp target teams distribute parallel for)", "label": "(101, CUDA, checkHIPErrors( ::cudaDeviceSynchronize() );)"}
{"predict": "(20, OpenMP, #pragma omp parallel num_threads(THREADS)); (25, OpenMP, #pragma omp barrier); (29, OpenMP, printf(\"Error: thread %d waited for itself!\\n\", omp_get_thread_num());); (16, OpenMP, #pragma omp master)", "label": "(27, OpenMP, #pragma omp atomic update); (21, OpenMP, #pragma omp loop order(concurrent)); (29, OpenMP, num_threads = omp_get_num_threads();); (17, OpenMP, #pragma omp target parallel num_threads(THREADS) map(tofrom: x[0:N], num_threads, total_wait_errors) map(to: y[0:N], z[0:N]))"}
{"predict": "(21, OpenMP, #pragma omp target defaultmap(tofrom,); (15, OpenMP, #pragma omp target defaultmap(tofrom:scalar) defaultmap(to:scalar)); (3, OpenMP, #pragma omp target defaultmap()); (0, OpenMP, #pragma omp target defaultmap(); (10, OpenMP, #pragma omp target defaultmap(tofrom, scalar); (21, OpenMP, #pragma omp target defaultmap(none:pointer)); (28, OpenMP, #pragma omp target defaultmap(none:aggregate) defaultmap(none:scalar) map(argc)); (14, OpenMP, #pragma omp target defaultmap(none:pointer) defaultmap(none:scalar) map(g)); (-1, OpenMP, #pragma omp target defaultmap(tofrom)); (6, OpenMP, #pragma omp target defaultmap(to, scalar)); (14, OpenMP, #pragma omp target defaultmap(none:aggregate) defaultmap(none:scalar) map(g)); (16, OpenMP, #pragma omp target defaultmap(none:aggregate)); (17, OpenMP, #pragma omp target defaultmap(none:scalar)); (-7, OpenMP, #pragma omp target defaultmap())", "label": "(9, OpenMP, #pragma omp target defaultmap(tofrom:); (4, OpenMP, #pragma omp target defaultmap()); (25, OpenMP, #pragma omp target defaultmap(none:pointer)); (10, OpenMP, #pragma omp target defaultmap(tofrom,); (40, OpenMP, #pragma omp parallel); (-4, OpenMP, #pragma omp target defaultmap); (27, OpenMP, #pragma omp target defaultmap(none:pointer) defaultmap(none:scalar) defaultmap(none:aggregate) map(g) firstprivate(argc)); (8, OpenMP, #pragma omp target defaultmap(scalar:); (11, OpenMP, #pragma omp target defaultmap(tofrom: scalar) defaultmap(tofrom: scalar)); (20, OpenMP, #pragma omp target defaultmap(none:pointer) defaultmap(none:scalar) map(argc)); (1, OpenMP, #pragma omp target defaultmap(tofrom)); (6, OpenMP, #pragma omp target defaultmap(tofrom, scalar); (23, OpenMP, #pragma omp target defaultmap(none:aggregate)); (-10, OpenMP, #pragma omp target defaultmap(); (9, OpenMP, #pragma omp target defaultmap(tofrom : scalar) defaultmap(to: scalar)); (16, OpenMP, #pragma omp target defaultmap(none:pointer) defaultmap(none:scalar) map(g)); (9, OpenMP, #pragma omp target defaultmap(alloc: pointer) defaultmap(to: scalar) defaultmap(firstprivate: pointer)); (20, OpenMP, #pragma omp target defaultmap(none:aggregate) defaultmap(none:scalar) map(argc)); (-11, OpenMP, #pragma omp target defaultmap(tofrom)"}
{"predict": "(139, MPI, MPI_Finalize();); (63, MPI, MPI_Bcast(&iterations,    1, MPI_INT, root, MPI_COMM_WORLD);); (63, MPI, MPI_Bcast(&vector_length, 1, MPI_LONG, root, MPI_COMM_WORLD);); (17, MPI, MPI_Init(&argc,&argv);); (81, MPI, MPI_Barrier(MPI_COMM_WORLD);); (17, MPI, MPI_Comm_size(MPI_COMM_WORLD, &Num_procs);); (15, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &my_ID);)", "label": "(139, MPI, MPI_Finalize();); (63, MPI, MPI_Bcast(&iterations,    1, MPI_INT, root, MPI_COMM_WORLD);); (63, MPI, MPI_Bcast(&vector_length, 1, MPI_LONG, root, MPI_COMM_WORLD);); (17, MPI, MPI_Init(&argc,&argv);); (81, MPI, MPI_Barrier(MPI_COMM_WORLD);); (17, MPI, MPI_Comm_size(MPI_COMM_WORLD, &Num_procs);); (15, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &my_ID);)"}
{"predict": "(25, OpenMP, #pragma omp target teams distribute parallel for simd collapse (1))); (5, OpenMP, #pragma omp target teams distribute parallel for simd collapse (); (27, OpenMP, #pragma omp target teams distribute parallel for simd collapse ((ST > 0) ? 1 + ST : 2)); (13, OpenMP, #pragma omp target teams distribute parallel for simd collapse (argc); (57, OpenMP, #pragma omp target teams distribute parallel for simd collapse (2)); (51, OpenMP, #pragma omp target teams distribute parallel for simd collapse (N)); (46, OpenMP, #pragma omp target teams distribute parallel for simd collapse (1)); (-3, OpenMP, #pragma omp target teams distribute parallel for simd collapse); (32, OpenMP, #pragma omp target teams distribute parallel for simd collapse (S)); (0, OpenMP, #pragma omp target teams distribute parallel for simd collapse ()); (10, OpenMP, #pragma omp target teams distribute parallel for simd collapse (ST)", "label": "(25, OpenMP, #pragma omp target teams distribute parallel for simd collapse (1))); (60, OpenMP, #pragma omp target teams distribute parallel for simd collapse (2)); (4, OpenMP, #pragma omp target teams distribute parallel for simd collapse (); (54, OpenMP, #pragma omp target teams distribute parallel for simd collapse (N)); (36, OpenMP, #pragma omp target teams distribute parallel for simd collapse (S)); (24, OpenMP, #pragma omp target teams distribute parallel for simd collapse ((ST > 0) ? 1 + ST : 2)); (-4, OpenMP, #pragma omp target teams distribute parallel for simd collapse); (9, OpenMP, #pragma omp target teams distribute parallel for simd collapse (argc); (28, OpenMP, #pragma omp target teams distribute parallel for simd collapse (foobool(argc)), collapse (true), collapse (-5)); (12, OpenMP, #pragma omp target teams distribute parallel for simd collapse (ST); (43, OpenMP, #pragma omp target teams distribute parallel for simd collapse (1)); (-1, OpenMP, #pragma omp target teams distribute parallel for simd collapse ())"}
{"predict": "(74, OpenCL, err = clEnqueueWriteBuffer( queue, memobjs[1], CL_TRUE, 0, num_bytes, inptr, 0, NULL, NULL );); (90, OpenCL, err |= clSetKernelArg( kernel[0], 1, sizeof( cl_mem ), (void *)&memobjs[1] );); (88, OpenCL, err |= clSetKernelArg( kernel[0], 0, sizeof( cl_mem ), (void *)&memobjs[0] );); (121, OpenCL, err = clEnqueueCopyImage( queue, memobjs[0], memobjs[2], srcPt, destPt, region, 0, NULL, &copyEvent );); (158, OpenCL, err = clWaitForEvents( 1, &copyEvent );); (89, OpenCL, clReleaseProgram( program[0] );); (130, OpenCL, err = clEnqueueReadBuffer( queue, memobjs[2], CL_TRUE, 0, num_bytes, dst, 0, NULL, NULL );); (94, OpenCL, clReleaseKernel( kernel[0] );); (83, OpenCL, err = clSetKernelArg( kernel[0], 2, sizeof( cl_mem ), (void *)&memobjs[2] );); (83, OpenCL, err |= clSetKernelArg( kernel[0], 3, sizeof( int ), (void *)&num_channels );); (83, OpenCL, err |= clSetKernelArg( kernel[0], 4, sizeof( int ), (void *)&w );); (83, OpenCL, err |= clSetKernelArg( kernel[0], 5, sizeof( int ), (void *)&h );); (93, OpenCL, err = clEnqueueNDRangeKernel( queue, kernel[0], 2, NULL, threads, NULL, 0, NULL, NULL );)", "label": "(85, OpenCL, clReleaseMemObject( memobjs[2] );); (140, OpenCL, clReleaseEvent(copyEvent);); (103, OpenCL, err = clEnqueueNDRangeKernel( queue, kernel[0], 2, NULL, threads, NULL, 0, NULL, NULL );); (72, OpenCL, err = clEnqueueWriteBuffer( queue, memobjs[1], true, 0, num_bytes, inptr, 0, NULL, NULL );); (87, OpenCL, err = clSetKernelArg( kernel[0], 0, sizeof( cl_mem ), (void *)&memobjs[1] );); (91, OpenCL, clReleaseProgram( program[0] );); (77, OpenCL, clReleaseMemObject( memobjs[0] );); (88, OpenCL, clReleaseKernel( kernel[0] );); (84, OpenCL, err |= clSetKernelArg( kernel[0], 1, sizeof( cl_mem ), (void *)&memobjs[0] );); (48, OpenCL, clReleaseMemObject(memobjs[0]);); (113, OpenCL, err = clEnqueueCopyImage( queue, memobjs[0], memobjs[2], srcPt, destPt, region, 0, NULL, &copyEvent );); (57, OpenCL, clReleaseMemObject(memobjs[1]);); (201, OpenCL, err = clEnqueueReadImage( queue, memobjs[2], true, origin, region2, 0, 0, dst, 0, NULL, NULL );); (125, OpenCL, err = clWaitForEvents( 1, &copyEvent );); (70, OpenCL, clReleaseMemObject( memobjs[1] );)"}
{"predict": "(13, CUDA, cudaEventRecord(stop);); (13, CUDA, cudaEventSynchronize(stop);); (23, CUDA, cudaFree(d_data);); (9, CUDA, cudaMemcpy(d_data, h_data, SIZE * sizeof(float), cudaMemcpyHostToDevice);); (15, CUDA, cudaEventElapsedTime(&milliseconds, start, stop);); (-2, CUDA, cudaEventCreate(&start);); (0, CUDA, cudaMalloc((void **)&d_data, SIZE * sizeof(float));); (10, CUDA, cudaMemcpy(h_data, d_data, SIZE * sizeof(float), cudaMemcpyDeviceToHost);); (-3, CUDA, cudaEventCreate(&stop);)", "label": "(12, CUDA, cudaEventRecord(stop);); (12, CUDA, cudaEventSynchronize(stop);); (9, CUDA, cudaMemcpy(d_data, h_data, SIZE * sizeof(float), cudaMemcpyHostToDevice);); (7, CUDA, cudaEventRecord(start);); (-1, CUDA, cudaMalloc((void **)&d_data, SIZE * sizeof(float));); (10, CUDA, cudaEventElapsedTime(&milliseconds, start, stop);); (1, CUDA, cudaEventCreate(&stop);); (13, CUDA, cudaMemcpy(h_data, d_data, SIZE * sizeof(float), cudaMemcpyDeviceToHost);); (19, CUDA, cudaFree(d_data);); (-3, CUDA, cudaEventCreate(&start);)"}
{"predict": "(1, OpenMP, #pragma omp for); (9, OpenMP, #pragma omp tile sizes(5))", "label": "(6, OpenMP, #pragma omp tile sizes(5)); (0, OpenMP, #pragma omp for)"}
{"predict": "(144, MPI, MPI_Finalize();); (67, MPI, MPI_Bcast(&iterations,    1, MPI_INT, root, MPI_COMM_WORLD);); (67, MPI, MPI_Bcast(&vector_length, 1, MPI_LONG, root, MPI_COMM_WORLD);); (19, MPI, MPI_Init(&argc,&argv);); (85, MPI, MPI_Barrier(MPI_COMM_WORLD);); (19, MPI, MPI_Comm_size(MPI_COMM_WORLD, &Num_procs);); (17, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &my_ID);)", "label": "(143, MPI, MPI_Finalize();); (67, MPI, MPI_Bcast(&iterations,    1, MPI_INT, root, MPI_COMM_WORLD);); (67, MPI, MPI_Bcast(&vector_length, 1, MPI_LONG, root, MPI_COMM_WORLD);); (19, MPI, MPI_Init(&argc,&argv);); (85, MPI, MPI_Barrier(MPI_COMM_WORLD);); (19, MPI, MPI_Comm_size(MPI_COMM_WORLD, &Num_procs);); (17, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &my_ID);)"}
{"predict": "(10, OpenMP, #pragma omp parallel for); (45, OpenMP, #pragma omp atomic)", "label": "(10, OpenMP, #pragma omp parallel for); (45, OpenMP, #pragma omp atomic)"}
{"predict": "(16, CUDA, thrust::complex<T>* tmp = thrust::raw_pointer_cast(tmpdev);); (19, CUDA, thrust::complex<T> const* m_(m + batch * mstride);); (10, CUDA, thrust::device_vector<thrust::complex<T>> tmpdev(batch_size);)", "label": "(20, CUDA, thrust::complex<T> const* m_ = m + batch * mstride;); (16, CUDA, tmp[t] = thrust::complex<T>(0.0);); (9, CUDA, __shared__ thrust::cuda_cub::core::uninitialized_array<thrust::complex<T>, 64> tmp;)"}
{"predict": "(19, CUDA, __shared__ T B_thread_block_tile[BLOCK_TILE_SIZE_K][BLOCK_TILE_SIZE_X];); (17, CUDA, __shared__ T A_thread_block_tile[BLOCK_TILE_SIZE_Y][BLOCK_TILE_SIZE_K];)", "label": "(19, CUDA, __shared__ T B_thread_block_tile[BLOCK_TILE_SIZE_K][BLOCK_TILE_SIZE_X];); (17, CUDA, __shared__ T A_thread_block_tile[BLOCK_TILE_SIZE_Y][BLOCK_TILE_SIZE_K];)"}
{"predict": "(109, MPI, MPI_Finalize();); (5, MPI, err = MPI_Init(&argc, &argv);); (8, MPI, err = MPI_Comm_size(MPI_COMM_WORLD, &numRanks);); (5, MPI, err = MPI_Comm_rank(MPI_COMM_WORLD, &rank);)", "label": "(109, MPI, MPI_Finalize();); (5, MPI, err = MPI_Init(&argc, &argv);); (8, MPI, err = MPI_Comm_size(MPI_COMM_WORLD, &numRanks);); (5, MPI, err = MPI_Comm_rank(MPI_COMM_WORLD, &rank);)"}
{"predict": "(29, CUDA, CHECK_HIEDNN(hiednnCreateCudaHandle(&handle));); (72, CUDA, CHECK_CUDA(cudaFree(dX));); (43, CUDA, CHECK_CUDA(cudaMalloc(&dX, size * sizeof(int32_t)));); (29, CUDA, CHECK_HIEDNN(hiednnSetCudaStream(handle, 0));); (67, CUDA, CHECK_HIEDNN(hiednnDestroyCudaHandle(handle));); (69, CUDA, CHECK_CUDA(cudaFree(dY));); (40, CUDA, CHECK_CUDA(cudaMalloc(&dY, size * sizeof(int32_t)));)", "label": "(29, CUDA, CHECK_HIEDNN(hiednnCreateCudaHandle(&handle));); (72, CUDA, CHECK_CUDA(cudaFree(dX));); (43, CUDA, CHECK_CUDA(cudaMalloc(&dX, size * sizeof(int32_t)));); (29, CUDA, CHECK_HIEDNN(hiednnSetCudaStream(handle, 0));); (67, CUDA, CHECK_HIEDNN(hiednnDestroyCudaHandle(handle));); (69, CUDA, CHECK_CUDA(cudaFree(dY));); (40, CUDA, CHECK_CUDA(cudaMalloc(&dY, size * sizeof(int32_t)));)"}
{"predict": "(29, CUDA, __shared__ float x_s[x_s_sz];); (27, CUDA, __shared__ float w_s[w_s_sz];)", "label": "(29, CUDA, __shared__ float x_s[x_s_sz];); (27, CUDA, __shared__ float w_s[w_s_sz];)"}
{"predict": "(16, SYCL, using namespace cl::sycl::access;); (4, SYCL, cl::sycl::queue queue;)", "label": "(16, SYCL, using namespace cl::sycl::access;); (4, SYCL, cl::sycl::queue queue;)"}
{"predict": "(17, OpenMP, #pragma omp distribute collapse ((ST > 0) ? 1 + ST : 2)); (5, OpenMP, #pragma omp distribute collapse ()); (3, OpenMP, #pragma omp distribute collapse (); (24, OpenMP, #pragma omp distribute collapse (S)); (11, OpenMP, #pragma omp distribute collapse (1))); (31, OpenMP, #pragma omp distribute collapse (2)); (27, OpenMP, #pragma omp distribute collapse (N)); (15, OpenMP, #pragma omp distribute collapse (foobool(argc)), collapse (true), collapse (-5)); (2, OpenMP, #pragma omp distribute collapse (argc); (7, OpenMP, #pragma omp distribute collapse (ST); (26, OpenMP, #pragma omp distribute collapse (1)); (-8, OpenMP, #pragma omp distribute collapse)", "label": "(36, OpenMP, #pragma omp distribute collapse (N)); (9, OpenMP, #pragma omp distribute collapse (argc); (36, OpenMP, #pragma omp distribute collapse (2)); (22, OpenMP, #pragma omp distribute collapse (S)); (2, OpenMP, #pragma omp distribute collapse ()); (-1, OpenMP, #pragma omp distribute collapse (); (9, OpenMP, #pragma omp distribute collapse (1))); (27, OpenMP, #pragma omp distribute collapse (1)); (9, OpenMP, #pragma omp distribute collapse ((ST > 0) ? 1 + ST : 2)); (-7, OpenMP, #pragma omp distribute collapse); (3, OpenMP, #pragma omp distribute collapse (ST); (12, OpenMP, #pragma omp distribute collapse (foobool(argc)), collapse (true), collapse (-5))"}
{"predict": "(8, MPI, rc = MPI_Type_get_extent(type, &tmp_lb, &attr->child_type_extent);)", "label": "(8, MPI, rc = MPI_Type_get_extent(type, &tmp_lb, &attr->child_type_extent);)"}
{"predict": "(5, OpenMP, #pragma omp target teams distribute simd reduction(+: sivar))", "label": "(5, OpenMP, #pragma omp target teams distribute simd reduction(+: sivar))"}
{"predict": "(39, MPI, MPI_Bcast( rowind, nnz, mpi_int_t,  0, grid->comm );); (36, MPI, MPI_Bcast( &nnz,   1,   mpi_int_t,  0, grid->comm );); (50, MPI, MPI_Bcast( colptr,  n+1, mpi_int_t,  0, grid->comm );); (48, MPI, MPI_Bcast( rowind,  nnz, mpi_int_t,  0, grid->comm );); (39, MPI, MPI_Bcast( &m,   1,   mpi_int_t,  0, grid->comm );); (31, MPI, MPI_Bcast( &n,     1,   mpi_int_t,  0, grid->comm );); (29, MPI, MPI_Bcast( &m,     1,   mpi_int_t,  0, grid->comm );); (38, MPI, MPI_Bcast( &nnz, 1,   mpi_int_t,  0, grid->comm );); (32, MPI, MPI_Bcast( colptr, n+1, mpi_int_t,  0, grid->comm );); (29, MPI, MPI_Bcast( nzval,  nnz, SuperLU_MPI_DOUBLE_COMPLEX, 0, grid->comm );); (34, MPI, MPI_Bcast( &n,   1,   mpi_int_t,  0, grid->comm );); (39, MPI, MPI_Bcast( nzval,   nnz, SuperLU_MPI_DOUBLE_COMPLEX, 0, grid->comm );)", "label": "(50, MPI, MPI_Bcast( nzval,   nnz, SuperLU_MPI_DOUBLE_COMPLEX, 0, grid->comm );); (38, MPI, MPI_Bcast( rowind, nnz, mpi_int_t,  0, grid->comm );); (50, MPI, MPI_Bcast( colptr,  n+1, mpi_int_t,  0, grid->comm );); (48, MPI, MPI_Bcast( rowind,  nnz, mpi_int_t,  0, grid->comm );); (39, MPI, MPI_Bcast( &m,   1,   mpi_int_t,  0, grid->comm );); (31, MPI, MPI_Bcast( &n,     1,   mpi_int_t,  0, grid->comm );); (29, MPI, MPI_Bcast( &m,     1,   mpi_int_t,  0, grid->comm );); (38, MPI, MPI_Bcast( &nnz, 1,   mpi_int_t,  0, grid->comm );); (32, MPI, MPI_Bcast( colptr, n+1, mpi_int_t,  0, grid->comm );); (28, MPI, MPI_Bcast( &nnz,   1,   mpi_int_t,  0, grid->comm );); (28, MPI, MPI_Bcast( nzval,  nnz, SuperLU_MPI_DOUBLE_COMPLEX, 0, grid->comm );); (33, MPI, MPI_Bcast( &n,   1,   mpi_int_t,  0, grid->comm );)"}
{"predict": "(15, MPI, MPI_Irecv(NULL, 0, MPI_BYTE, 0, tag, comm, &r);); (10, MPI, MPI_Comm_rank(comm, &rank);); (19, MPI, MPI_Wait(&r, &s);); (20, MPI, MPI_Request_free(&r);)", "label": "(22, MPI, MPI_Request_free(&r);); (14, MPI, MPI_Recv_init(buff, count, type, 0, tag, comm, &r);); (2, MPI, MPI_Comm_rank(comm, &rank);)"}
{"predict": "(20, TBB, tbb::flow::make_edge( n, r[i] );); (54, TBB, tbb::flow::remove_edge( n, r[i] );); (1, TBB, tbb::flow::write_once_node<R> n(g);); (-1, TBB, tbb::flow::graph g;)", "label": "(20, TBB, tbb::flow::make_edge( n, r[i] );); (54, TBB, tbb::flow::remove_edge( n, r[i] );); (1, TBB, tbb::flow::write_once_node<R> n(g);); (-1, TBB, tbb::flow::graph g;)"}
{"predict": "(65, OpenCL, clReleaseMemObject(clCompressedImage);); (25, OpenCL, auto clCompressedImage = clCreateImage(context, CL_MEM_READ_WRITE, &imageFormat, &imageDescriptor, nullptr, &retVal);)", "label": "(64, OpenCL, clReleaseMemObject(clCompressedImage);); (25, OpenCL, auto clCompressedImage = clCreateImage(context, CL_MEM_READ_WRITE, &imageFormat, &imageDescriptor, nullptr, &retVal);)"}
{"predict": "(2, CUDA, extern __shared__ float share_mem[];)", "label": "(7, CUDA, extern __shared__ float share_mem[];)"}
{"predict": "(7, OpenMP, #pragma omp parallel for)", "label": "(7, OpenMP, #pragma omp parallel for)"}
{"predict": "(23, CUDA, cudaSetDevice(deviceId);); (20, CUDA, cudaGetDeviceCount(&nDevices);); (6, MPI, MPIManager mpi_manager(MPI_COMM_WORLD);)", "label": "(24, CUDA, cudaSetDevice(deviceId);); (20, CUDA, cudaGetDeviceCount(&nDevices);); (6, MPI, MPIManager mpi_manager(MPI_COMM_WORLD);)"}
{"predict": "(17, CUDA, cudaMalloc((void**) &d_fcLayer, m * c * sizeof(double));); (53, CUDA, cudaDeviceSynchronize();); (117, CUDA, cudaFree(d_diffData);); (109, CUDA, cudaFree(d_gradData);); (14, CUDA, cudaMalloc((void**) &d_softmaxData, m * c * sizeof(double));); (113, CUDA, cudaFree(d_fcLayer);); (104, CUDA, cudaFree(d_softmaxData);); (48, CUDA, cudaMemcpy(result, d_softmaxData, m * c * sizeof(double), cudaMemcpyDeviceToHost);); (73, CUDA, cudaMalloc((void**) &d_diffData, m * c * sizeof(double));); (109, CUDA, cudaFree(d_diffData);); (11, CUDA, cudaMemcpy(d_fcLayer, fcLayer, m * c * sizeof(double), cudaMemcpyHostToDevice);); (64, CUDA, cudaMalloc((void**) &d_gradData, m * c * sizeof(double));); (73, CUDA, cudaMemcpy(d_diffData, diffData, m * c * sizeof(double), cudaMemcpyHostToDevice);); (42, CUDA, cudaDeviceSynchronize();)", "label": "(73, CUDA, cudaMalloc((void**) &d_gradData, m * c * sizeof(double));); (116, CUDA, cudaFree(d_fcLayer);); (118, CUDA, cudaFree(d_diffData);); (116, CUDA, cudaFree(d_gradData);); (12, CUDA, cudaMalloc((void**) &d_fcLayer, m * c * sizeof(double));); (17, CUDA, cudaMalloc((void**) &d_softmaxData, m * c * sizeof(double));); (43, CUDA, cudaDeviceSynchronize();); (11, CUDA, cudaMemcpy(d_fcLayer, fcLayer, m * c * sizeof(double), cudaMemcpyHostToDevice);); (72, CUDA, cudaMalloc((void**) &d_diffData, m * c * sizeof(double));); (109, CUDA, cudaFree(d_softmaxData);); (83, CUDA, cudaMemcpy(result_backward, d_gradData, m * c * sizeof(double), cudaMemcpyDeviceToHost);); (44, CUDA, cudaMemcpy(result, d_softmaxData, m * c * sizeof(double), cudaMemcpyDeviceToHost);); (69, CUDA, cudaMemcpy(d_diffData, diffData, m * c * sizeof(double), cudaMemcpyHostToDevice);)"}
{"predict": "(11, OpenMP, #pragma omp parallel for); (77, OpenMP, #pragma omp atomic)", "label": "(11, OpenMP, #pragma omp parallel for); (77, OpenMP, #pragma omp atomic)"}
{"predict": "(180, MPI, MPI_Allreduce(&tmp_error, error_code, 1, MPI_INT, MPI_MAX, fd->comm);); (47, MPI, MPI_Comm_size(fd->comm, &nprocs);); (75, MPI, MPI_Allgather(&end_offset, 1, ADIO_OFFSET, end_offsets, 1, ADIO_OFFSET, fd->comm);); (73, MPI, MPI_Allgather(&start_offset, 1, ADIO_OFFSET, st_offsets, 1, ADIO_OFFSET, fd->comm);); (45, MPI, MPI_Comm_rank(fd->comm, &myrank);); (208, MPI, MPI_Type_size_x(datatype, &size);)", "label": "(173, MPI, MPI_Allreduce(&tmp_error, error_code, 1, MPI_INT, MPI_MAX, fd->comm);); (47, MPI, MPI_Comm_size(fd->comm, &nprocs);); (75, MPI, MPI_Allgather(&end_offset, 1, ADIO_OFFSET, end_offsets, 1, ADIO_OFFSET, fd->comm);); (73, MPI, MPI_Allgather(&start_offset, 1, ADIO_OFFSET, st_offsets, 1, ADIO_OFFSET, fd->comm);); (45, MPI, MPI_Comm_rank(fd->comm, &myrank);); (192, MPI, MPI_Type_size_x(datatype, &size);)"}
{"predict": "(4, MPI, MPI_Reduce( &SCT->commVolFactor, &cvolFactor,  1, MPI_DOUBLE, MPI_SUM, 0, grid3d->comm );); (5, MPI, MPI_Reduce( &SCT->commVolRed, &cvolRed,  1, MPI_DOUBLE, MPI_SUM, 0, grid3d->comm );)", "label": "(4, MPI, MPI_Reduce( &SCT->commVolFactor, &cvolFactor,  1, MPI_DOUBLE, MPI_SUM, 0, grid3d->comm );); (5, MPI, MPI_Reduce( &SCT->commVolRed, &cvolRed,  1, MPI_DOUBLE, MPI_SUM, 0, grid3d->comm );)"}
{"predict": "(54, CUDA, CUDA_CHECK(cudaStreamCreate(&stream));); (5, CUDA, CUDA_CHECK(cudaGetDeviceCount(&ndevices));); (5, CUDA, CUDA_CHECK(cudaSetDevice(rank % ndevices));); (0, MPI, MPI_Init(&argc, &argv);); (104, CUDA, CUDA_CHECK(cudaStreamDestroy(stream));); (95, MPI, MPI_Finalize();); (-2, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (-2, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (78, CUDA, CUDA_CHECK(cudaStreamSynchronize(stream));); (101, MPI, MPI_Barrier(MPI_COMM_WORLD);)", "label": "(10, CUDA, CUDA_CHECK(cudaGetDeviceCount(&ndevices));); (54, CUDA, CUDA_CHECK(cudaStreamCreate(&stream));); (88, CUDA, CUDA_CHECK(cudaStreamSynchronize(stream));); (8, CUDA, CUDA_CHECK(cudaSetDevice(rank % ndevices));); (-2, MPI, MPI_Init(&argc, &argv);); (113, MPI, MPI_Finalize();); (1, MPI, MPI_Comm_size(mpi_comm, &size);); (103, CUDA, CUDA_CHECK(cudaStreamDestroy(stream));); (78, CUDA, CUDA_CHECK(cudaGetLastError());); (-3, MPI, MPI_Comm_rank(mpi_comm, &rank);)"}
{"predict": "(10, TBB, tbb::task_group g;)", "label": "(5, TBB, if(tbb::is_current_task_group_canceling()) return;)"}
{"predict": "(14, CUDA, CUDASimulation cudaSimulation(model);)", "label": "(14, CUDA, CUDASimulation cudaSimulation(model);)"}
{"predict": "(4, TBB, tbb::tick_count t0 = tbb::tick_count::now();); (5, TBB, tbb::tick_count t1 = tbb::tick_count::now();)", "label": "(4, TBB, tbb::tick_count t0 = tbb::tick_count::now();); (5, TBB, tbb::tick_count t1 = tbb::tick_count::now();)"}
{"predict": "(11, MPI, MPI_Init(&argc, &argv);); (43, MPI, MPI_Finalize();); (10, MPI, MPI_Comm_size(MPI_COMM_WORLD, &ntasks);); (10, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (35, MPI, MPI_Recv(recvbuf.data(), block_size, MPI_INT, 0, rank, MPI_COMM_WORLD, &status);); (26, MPI, MPI_Send(&sendbuf[i*block_size], block_size, MPI_INT, i, i, MPI_COMM_WORLD);); (20, MPI, MPI_Abort(MPI_COMM_WORLD, -1);)", "label": "(11, MPI, MPI_Init(&argc, &argv);); (44, MPI, MPI_Finalize();); (10, MPI, MPI_Comm_size(MPI_COMM_WORLD, &ntasks);); (10, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (35, MPI, MPI_Recv(recvbuf.data(), block_size, MPI_INT, 0, rank, MPI_COMM_WORLD, &status);); (26, MPI, MPI_Send(&sendbuf[i*block_size], block_size, MPI_INT, i, i, MPI_COMM_WORLD);); (20, MPI, MPI_Abort(MPI_COMM_WORLD, -1);)"}
{"predict": "(23, MPI, MPI_Reduce(gFrstCost, gFrstCostAcc, numForests, MPI_DOUBLE, MPI_SUM, 0, grid3d->zscp.comm);)", "label": "(23, MPI, MPI_Reduce(gFrstCost, gFrstCostAcc, numForests, MPI_DOUBLE, MPI_SUM, 0, grid3d->zscp.comm);)"}
{"predict": "(17, MPI, MPI_Finalize();); (2, MPI, MPI_Init(&argc,&argv);)", "label": "(17, MPI, MPI_Finalize();); (2, MPI, MPI_Init(&argc,&argv);)"}
{"predict": "(11, CUDA, __shared__ float u_[_N_];); (11, CUDA, __shared__ float r[_N_], k[_N_], v[_N_], w_[_N_], gy[_N_];)", "label": "(11, CUDA, __shared__ float u_[_N_];); (11, CUDA, __shared__ float r[_N_], k[_N_], v[_N_], w_[_N_], gy[_N_];)"}
{"predict": "(12, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);)", "label": "(12, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);)"}
{"predict": "(7, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);)", "label": "(7, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);)"}
{"predict": "(3, TBB, tbb::enumerable_thread_specific<double> test_locals;); (13, TBB, REMARK(\"%d threads, work ratio %d per cent, time %g\", nThreads, csWorkRatio, (tbb::tick_count::now() - t0).seconds());); (0, TBB, tbb::task_scheduler_init init(tbb::task_scheduler_init::deferred);); (5, TBB, tbb::tick_count t0;); (6, TBB, t0 = tbb::tick_count::now();)", "label": "(3, TBB, tbb::enumerable_thread_specific<double> test_locals;); (13, TBB, REMARK(\"%d threads, work ratio %d per cent, time %g\", nThreads, csWorkRatio, (tbb::tick_count::now() - t0).seconds());); (0, TBB, tbb::task_scheduler_init init(tbb::task_scheduler_init::deferred);); (5, TBB, tbb::tick_count t0;); (6, TBB, t0 = tbb::tick_count::now();)"}
{"predict": "(43, CUDA, CSC(cudaGetLastError(), STATUS_FAILURE);)", "label": "(43, CUDA, CSC(cudaGetLastError(), STATUS_FAILURE);)"}
{"predict": "(5, MPI, MPI_Init(&argc, &argv);); (106, MPI, MPI_Finalize();); (5, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (5, MPI, MPI_Comm_size(MPI_COMM_WORLD, &ranks);)", "label": "(2, MPI, MPI_Init(&argc, &argv);); (7, MPI, MPI_Comm_size(MPI_COMM_WORLD, &ranks);); (105, MPI, MPI_Finalize();); (4, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);)"}
{"predict": "(8, TBB, tbb::flow::make_edge(inner_node1, tbb::flow::input_port<1>(inner_node3));); (14, TBB, tbb::flow::make_edge(inner_node2, tbb::flow::input_port<2>(inner_node3));); (9, TBB, tbb::flow::make_edge(inner_node1, tbb::flow::input_port<0>(inner_node2));); (-2, TBB, tbb::flow::graph g;); (10, TBB, tbb::flow::make_edge(inner_node2, tbb::flow::input_port<1>(inner_node3));); (19, TBB, tbb::flow::make_edge(outer_node, output);); (13, TBB, tbb::flow::make_edge(outer_node, tbb::flow::input_port<0>(inner_node2));); (-1, TBB, adder_node outer_node(g, hidden);); (12, TBB, tbb::flow::make_edge(outer_node, tbb::flow::input_port<0>(inner_node3));); (-6, TBB, tbb::flow::input_node<int> input(g, snode_body(4));); (20, TBB, tbb::flow::remove_edge(input, tbb::flow::input_port<0>(outer_node));); (-9, TBB, tbb::flow::output_node<int> output(g, onode_body<int>(correct_outputs));)", "label": "(38, TBB, CHECK_MESSAGE( (tbb::flow::output_port<0>(outer_node).try_get(out) == output.try_get(out)), \"output from outer_node does not match output from graph\");); (13, TBB, CHECK_MESSAGE( (&tbb::flow::input_port<1>(outer_node) == &tbb::flow::input_port<1>(inner_node1)), \"input port 1 of inner_node1 not bound to input port 1 in outer_node\");); (0, TBB, tbb::flow::composite_node<std::tuple<int, int>, std::tuple<int> > outer_node(g);); (8, TBB, outer_node.set_external_ports(base_type::input_ports_type(tbb::flow::input_port<0>(inner_node1), tbb::flow::input_port<1>(inner_node1)), base_type::output_ports_type(tbb::flow::output_port<0>(inner_node3)));); (-1, TBB, typedef tbb::flow::composite_node<std::tuple<int, int>, std::tuple<int> > base_type;); (18, TBB, tbb::flow::make_edge(inner_node2, tbb::flow::input_port<0>(inner_node3));); (18, TBB, tbb::flow::make_edge(inner_node2, tbb::flow::input_port<1>(inner_node3));); (13, TBB, tbb::flow::make_edge(inner_node1, tbb::flow::input_port<0>(inner_node2));); (-7, TBB, tbb::flow::graph g;); (6, TBB, CHECK_MESSAGE( (&tbb::flow::output_port<0>(outer_node) == &tbb::flow::output_port<0>(inner_node3)), \"output port 0 of inner_node3 not bound to output port 0 in outer_node\");); (11, TBB, tbb::flow::make_edge(inner_node1, tbb::flow::input_port<1>(inner_node2));); (2, TBB, CHECK_MESSAGE( (&tbb::flow::input_port<0>(outer_node) == &tbb::flow::input_port<0>(inner_node1)), \"input port 0 of inner_node1 not bound to input port 0 in outer_node\");); (-8, TBB, tbb::flow::broadcast_node<int> input(g);); (-8, TBB, tbb::flow::queue_node<int> output(g);)"}
{"predict": "(16, CUDA, CudaFile aCudaFile( aReader, GPUSPHOptions(), aTemplDir );)", "label": "(16, CUDA, CudaFile aCudaFile( aReader, GPUSPHOptions(), aTemplDir );)"}
{"predict": "(29, OpenMP, #pragma omp target teams distribute simd safelen (foobool(argc)), safelen (true), safelen (-5)); (46, OpenMP, #pragma omp target teams distribute simd safelen(safelen(tmain<int, char, -1, -2>(argc, argv)); (-1, OpenMP, #pragma omp target teams distribute simd safelen); (19, OpenMP, #pragma omp target teams distribute simd safelen (foobool(1) > 0 ? 1 : 2)); (9, OpenMP, #pragma omp target teams distribute simd safelen (4); (0, OpenMP, #pragma omp target teams distribute simd safelen (); (27, OpenMP, #pragma omp target teams distribute simd safelen (S1)); (10, OpenMP, #pragma omp target teams distribute simd safelen (2+2))); (1, OpenMP, #pragma omp target teams distribute simd safelen ())", "label": "(29, OpenMP, #pragma omp target teams distribute simd safelen (foobool(argc)), safelen (true), safelen (-5)); (46, OpenMP, #pragma omp target teams distribute simd safelen(safelen(tmain<int, char, -1, -2>(argc, argv)); (-1, OpenMP, #pragma omp target teams distribute simd safelen); (19, OpenMP, #pragma omp target teams distribute simd safelen (foobool(1) > 0 ? 1 : 2)); (9, OpenMP, #pragma omp target teams distribute simd safelen (4); (0, OpenMP, #pragma omp target teams distribute simd safelen (); (27, OpenMP, #pragma omp target teams distribute simd safelen (S1)); (10, OpenMP, #pragma omp target teams distribute simd safelen (2+2))); (1, OpenMP, #pragma omp target teams distribute simd safelen ())"}
{"predict": "(11, OpenMP, #pragma omp parallel for reduction(+:sum))", "label": "(11, OpenMP, #pragma omp parallel for reduction(+ : entropy))"}
{"predict": "(30, MPI, MPI_Bcast( work, diag_len[p], MPI_FLOAT, pkk, grid->comm );); (27, MPI, MPI_Bcast( work, lwork, MPI_FLOAT, pkk, grid->comm );)", "label": "(28, MPI, MPI_Bcast( work, lwork, MPI_FLOAT, pkk, grid->comm );); (29, MPI, MPI_Bcast( work, diag_len[p], MPI_FLOAT, pkk, grid->comm );)"}
{"predict": "(6, MPI, MPI_Comm_dup(MPI_COMM_SELF, &lwgrp_comm_self);)", "label": "(6, MPI, MPI_Comm_dup(MPI_COMM_SELF, &lwgrp_comm_self);)"}
{"predict": "(4, OpenMP, #pragma omp target teams distribute parallel for private(g, g1, sivar))", "label": "(4, OpenMP, #pragma omp target teams distribute parallel for private(g, g1, sivar))"}
{"predict": "(27, CUDA, cudaMalloc((void**)&dataC, sizeof(cufftDoubleComplex) * dims[0] * dims[1] * dims[2]);); (55, CUDA, cudaDeviceSynchronize();); (27, CUDA, cudaMemcpy(dataC, inputC, sizeof(cufftDoubleComplex) * dims[0] * dims[1] * dims[2], cudaMemcpyHostToDevice);); (78, CUDA, cudaFree(dataC);); (1, CUDA, cudaSetDevice(device_id);)", "label": "(27, CUDA, cudaMalloc((void**)&dataC, sizeof(cufftDoubleComplex) * dims[0] * dims[1] * dims[2]);); (55, CUDA, cudaDeviceSynchronize();); (27, CUDA, cudaMemcpy(dataC, inputC, sizeof(cufftDoubleComplex) * dims[0] * dims[1] * dims[2], cudaMemcpyHostToDevice);); (78, CUDA, cudaFree(dataC);); (1, CUDA, cudaSetDevice(device_id);)"}
{"predict": "(6, CUDA, checkCudaRuntime(cudaMemGetInfo(&free, &total));)", "label": "(6, CUDA, cudaCheck(cudaMemGetInfo(&free, &total));)"}
{"predict": "(5, CUDA, cudaMalloc(&curandStates, sizeof(curandState_t) * batchSize);); (47, CUDA, cudaFree(curandStates);)", "label": "(48, CUDA, cudaFree(curandStates);); (4, CUDA, cudaMalloc(&curandStates, sizeof(curandState_t) * 2 * batchSize);)"}
{"predict": "(24, MPI, MPI_Error_string(ierr, str, &slen);); (16, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);)", "label": "(29, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_ARE_FATAL);); (23, MPI, MPI_Error_string(ierr, str, &slen);); (14, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);)"}
{"predict": "(40, TBB, tbb::flow::make_edge(src, gamma);); (40, TBB, tbb::flow::make_edge(gamma, tint);); (40, TBB, tbb::flow::make_edge(tint, write);); (0, TBB, tbb::flow::graph g;)", "label": "(40, TBB, tbb::flow::make_edge(src, gamma);); (40, TBB, tbb::flow::make_edge(gamma, tint);); (40, TBB, tbb::flow::make_edge(tint, write);); (0, TBB, tbb::flow::graph g;)"}
{"predict": "(3, CUDA, __shared__ unsigned sidxs[nTPB];)", "label": "(3, CUDA, __shared__ unsigned sidxs[nTPB];)"}
{"predict": "(5, MPI, MPI_Comm_rank(MPI_COMM_WORLD,&me);); (19, MPI, MPI_Allreduce(&mysize, &totalsize, 1, MPI_UINT64_T, MPI_SUM, MPI_COMM_WORLD);); (33, MPI, MPI_Gatherv(in.c_str(), mysizeint, MPI_CHAR, out.data(), counts.data(), displs.data(), MPI_CHAR, 0, MPI_COMM_WORLD);); (-1, MPI, MPI_Init(&argc, &argv);); (38, MPI, MPI_Finalize();); (21, MPI, MPI_Allgather(&mysizeint, 1, MPI_INT, counts.data(), 1, MPI_INT, MPI_COMM_WORLD);); (1, MPI, MPI_Comm_size(MPI_COMM_WORLD,&np);)", "label": "(19, MPI, MPI_Reduce(&mysize, &totalsize, 1, MPI_INT64_T, MPI_SUM, 0, MPI_COMM_WORLD);); (4, MPI, MPI_Comm_rank(MPI_COMM_WORLD,&me);); (0, MPI, MPI_Init(&argc, &argv);); (23, MPI, MPI_Gather(&mysizeint, 1, MPI_INT, &(counts[0]), 1, MPI_INT, 0, MPI_COMM_WORLD);); (37, MPI, MPI_Finalize();); (1, MPI, MPI_Comm_size(MPI_COMM_WORLD,&np);); (29, MPI, MPI_Gatherv(in.c_str(), mysizeint, MPI_CHAR, &(out[0]), &(counts[0]), &(displs[0]), MPI_CHAR, 0, MPI_COMM_WORLD);)"}
{"predict": "(23, OpenMP, #pragma omp teams distribute parallel for order(concurrent)); (7, OpenMP, #pragma omp teams distribute parallel for order(); (13, OpenMP, #pragma omp teams distribute parallel for order(concurrent); (-2, OpenMP, #pragma omp target); (17, OpenMP, #pragma omp teams distribute parallel for order(none)); (-2, OpenMP, #pragma omp teams distribute parallel for order)", "label": "(18, OpenMP, #pragma omp teams distribute parallel for order(concurrent); (1, OpenMP, #pragma omp teams distribute parallel for order); (20, OpenMP, #pragma omp teams distribute parallel for order(concurrent)); (-2, OpenMP, #pragma omp target); (10, OpenMP, #pragma omp teams distribute parallel for order(none); (5, OpenMP, #pragma omp teams distribute parallel for order()"}
{"predict": "(13, CUDA, fprintf(stderr, \"CUDA kernel failed : %s\\n\", cudaGetErrorString(err));); (10, CUDA, auto err = cudaGetLastError();)", "label": "(13, CUDA, fprintf(stderr, \"CUDA kernel failed : %s\\n\", cudaGetErrorString(err));); (10, CUDA, auto err = cudaGetLastError();)"}
{"predict": "(98, OpenMP, john_omp_show_info();); (132, MPI, mpi_log_expanded_cl(cl, s);); (76, OpenMP, #pragma omp parallel); (8, OpenMP, john_omp_init();)", "label": "(14, OpenMP, john_omp_fallback(argv);); (18, MPI, mpi_setup(argc, argv);); (78, OpenMP, john_omp_maybe_adjust_or_fallback(argv);); (6, OpenMP, john_omp_init();)"}
{"predict": "(23, MPI, startTime = MPI_Wtime();); (43, MPI, MPI_Comm_create(MPI_COMM_WORLD, MPI_UNDEFINED, &newcomm);); (41, MPI, MPI_Comm_free(&newcomm);); (19, MPI, MPI_Abort(MPI_COMM_WORLD, 1);); (21, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (25, MPI, double rate = MPI_Wtime() - startTime;)", "label": "(44, MPI, MPI_Comm_split(MPI_COMM_WORLD, MPI_UNDEFINED, rank, &newcomm);); (21, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (40, MPI, MPI_Comm_free(&newcomm);); (21, MPI, startTime = MPI_Wtime();); (24, MPI, double rate = MPI_Wtime() - startTime;); (36, MPI, MPI_Comm_split(MPI_COMM_WORLD, 1, rank, &newcomm);)"}
{"predict": "(56, CUDA, flamegpu::CUDASimulation cudaSimulation(model, argc, argv);)", "label": "(56, CUDA, flamegpu::CUDASimulation  cudaSimulation(model, argc, argv);)"}
{"predict": "(2, TBB, typedef tbb::concurrent_hash_map<MyKey,MyData> MyTable;); (26, TBB, typedef tbb::concurrent_hash_map<MyKey,MyData2> MyTable2;); (38, TBB, typedef tbb::concurrent_hash_map<YourKey,YourData> YourTable1;); (38, TBB, typedef tbb::concurrent_hash_map<YourKey,YourData2> YourTable2;)", "label": "(36, TBB, typedef tbb::concurrent_hash_map<MyKey,MyData2,YourHashCompare> YourTable2;); (34, TBB, typedef tbb::concurrent_hash_map<MyKey,MyData2,YourHashCompare,MyAllocator> YourTable1;)"}
{"predict": "(20, MPI, MPI_Comm_size(MPI_COMM_WORLD, &ranks);); (31, MPI, mpirc = MPI_File_read_at(fh, 0, header_packed, 6, MPI_UINT64_T, &status);); (223, MPI, mpirc = MPI_File_read_at(fh, disp, buf, (int)count, MPI_BYTE, &status);); (107, MPI, mpirc = MPI_Type_get_extent(groups->dt, &lb_group, &extent_group);); (75, MPI, mpirc = MPI_Type_get_extent(users->dt, &lb_user, &extent_user);); (162, MPI, MPI_Allreduce(&readable, &all_readable, 1, MPI_UINT64_T, MPI_MIN, MPI_COMM_WORLD);); (90, MPI, mpirc = MPI_File_read_at(fh, 0, user_buf, user_buf_size, MPI_BYTE, &status);); (12, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (40, MPI, MPI_Bcast(header, 6, MPI_UINT64_T, 0, MPI_COMM_WORLD);); (78, MPI, mpirc = MPI_File_set_view(fh, disp, MPI_BYTE, MPI_BYTE, datarep, MPI_INFO_NULL);); (219, MPI, MPI_Allreduce(&size, &all_size, 1, MPI_UINT64_T, MPI_SUM, MPI_COMM_WORLD);); (15, MPI, int mpirc = MPI_File_set_view(fh, disp, MPI_BYTE, MPI_BYTE, datarep, MPI_INFO_NULL);); (214, MPI, MPI_Allreduce(&wtime, &all_wtime, 1, MPI_DOUBLE, MPI_MAX, MPI_COMM_WORLD);); (100, MPI, mpirc = MPI_Type_commit(&groups->dt);); (59, MPI, MPI_Bcast(&offset, 1, MPI_UINT64_T, 0, MPI_COMM_WORLD);); (150, MPI, MPI_Barrier(MPI_COMM_WORLD);); (209, MPI, MPI_Allreduce(&mode, &all_mode, 1, MPI_UINT32_T, MPI_MIN, MPI_COMM_WORLD);)", "label": "(28, MPI, MPI_Error_string(mpirc, mpierrstr, &mpierrlen);); (142, MPI, MPI_Bcast(groups->buf, (int)groups->count, groups->dt, 0, MPI_COMM_WORLD);); (96, MPI, mpirc = MPI_File_read_at(fh, 0, user_buf, user_buf_size, MPI_BYTE, &status);); (132, MPI, mpirc = MPI_File_read_at(fh, 0, group_buf, group_buf_size, MPI_BYTE, &status);); (102, MPI, MPI_Bcast(users->buf, (int)users->count, users->dt, 0, MPI_COMM_WORLD);); (15, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (28, MPI, mpirc = MPI_File_read_at(fh, 0, header_packed, header_size, MPI_BYTE, &status);); (41, MPI, MPI_Bcast(header, 6, MPI_UINT64_T, 0, MPI_COMM_WORLD);); (60, MPI, MPI_Exscan(&count, &offset, 1, MPI_UINT64_T, MPI_SUM, MPI_COMM_WORLD);); (12, MPI, MPI_Comm_size(MPI_COMM_WORLD, &ranks);); (16, MPI, int mpirc = MPI_File_set_view(fh, disp, MPI_BYTE, MPI_BYTE, datarep, MPI_INFO_NULL);); (69, MPI, MPI_Type_get_extent(users->dt, &lb_user, &extent_user);); (105, MPI, MPI_Type_get_extent(groups->dt, &lb_group, &extent_group);); (190, MPI, mpirc = MPI_File_read_at(fh, read_offset, buf, read_size, MPI_BYTE, &status);); (74, MPI, mpirc = MPI_File_set_view(fh, disp, MPI_BYTE, MPI_BYTE, datarep, MPI_INFO_NULL);); (159, MPI, MPI_Allreduce(&iters, &all_iters, 1, MPI_UINT64_T, MPI_MAX, MPI_COMM_WORLD);)"}
{"predict": "(22, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &mpi_rank);); (22, MPI, MPI_Comm_size(MPI_COMM_WORLD, &mpi_size);)", "label": "(22, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &mpi_rank);); (22, MPI, MPI_Comm_size(MPI_COMM_WORLD, &mpi_size);)"}
{"predict": "(12, CUDA, CHECK(cudaFree(m_output_src_device));); (12, CUDA, CHECK(cudaFree(m_output_boxes_device));); (12, CUDA, CHECK(cudaFree(m_output_scores_device));); (12, CUDA, CHECK(cudaFree(m_output_classes_device));); (6, CUDA, CHECK(cudaFree(m_input_resize_device));); (3, CUDA, CHECK(cudaFree(m_input_src_device));); (7, CUDA, CHECK(cudaFree(m_output_conf_device));); (1, CUDA, CHECK(cudaFree(m_input_rgb_device));); (1, CUDA, CHECK(cudaFree(m_input_hwc_device));); (1, CUDA, CHECK(cudaFree(m_input_norm_device));)", "label": "(8, CUDA, CHECK(cudaFree(m_output_boxes_device));); (9, CUDA, CHECK(cudaFree(m_output_classes_device));); (2, CUDA, CHECK(cudaFree(m_input_resize_device));); (0, CUDA, CHECK(cudaFree(m_input_src_device));); (3, CUDA, CHECK(cudaFree(m_output_num_device));); (0, CUDA, CHECK(cudaFree(m_input_rgb_device));); (3, CUDA, CHECK(cudaFree(m_output_scores_device));)"}
{"predict": "(18, CUDA, __shared__ bool kept_bboxinfo_flag[CAFFE_CUDA_NUM_THREADS * TSIZE];)", "label": "(19, CUDA, extern __shared__ bool kept_bboxinfo_flag[];)"}
{"predict": "(9, MPI, MPI_Comm_rank(comm_world, &rank_world);)", "label": "(9, MPI, MPI_Comm_rank(comm_world, &rank_world);)"}
{"predict": "(40, MPI, MPI_Request_free(&reqs[i]);)", "label": "(39, MPI, MPI_Request_free(&reqs[i]);)"}
{"predict": "(11, MPI, MPI_Comm_size(comm, &npes);)", "label": "(11, MPI, MPI_Comm_size(comm, &npes);)"}
{"predict": "(15, CUDA, cudaMemcpy(d_A, h_A, DSIZE*sizeof(float), cudaMemcpyHostToDevice);); (20, CUDA, cudaCheckErrors(\"kernel launch failure\");); (8, CUDA, cudaMalloc(&d_A, DSIZE*sizeof(float));)", "label": "(15, CUDA, cudaMemcpy(d_A, h_A, DSIZE*sizeof(float), cudaMemcpyHostToDevice);); (20, CUDA, cudaCheckErrors(\"kernel launch failure\");); (8, CUDA, cudaMalloc(&d_A, DSIZE*sizeof(float));)"}
{"predict": "(35, MPI, MPI_Finalize();); (7, MPI, MPI_Comm_size(MPI_COMM_WORLD, &comm_size);); (7, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (8, MPI, vtkh::SetMPICommHandle(MPI_Comm_c2f(MPI_COMM_WORLD));)", "label": "(35, MPI, MPI_Finalize();); (7, MPI, MPI_Comm_size(MPI_COMM_WORLD, &comm_size);); (7, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (8, MPI, vtkh::SetMPICommHandle(MPI_Comm_c2f(MPI_COMM_WORLD));)"}
{"predict": "(19, CUDA, result = cudaMalloc((void**)&devPtrA, M*N*sizeof(*a));); (30, CUDA, cudaFree(devPtrA);)", "label": "(19, CUDA, result = cudaMalloc((void**)&devPtrA, M*N*sizeof(*a));); (30, CUDA, cudaFree(devPtrA);)"}
{"predict": "(6, CUDA, __shared__ uint s_permutations[992];)", "label": "(6, CUDA, __shared__ uint s_permutations[160];)"}
{"predict": "(112, MPI, MPI_Bcast( &berr[j], 1, MPI_FLOAT, 0,  grid3d->zscp.comm);); (109, MPI, MPI_Allreduce( &s, &berr[j], 1, MPI_FLOAT, MPI_MAX, grid->comm );); (79, MPI, MPI_Bcast( X_col, ldx, MPI_FLOAT, 0,  grid3d->zscp.comm);); (76, MPI, MPI_Bcast( B_col, ldb, MPI_FLOAT, 0,  grid3d->zscp.comm);); (110, MPI, MPI_Allreduce( &s, &lstres, 1, MPI_FLOAT, MPI_MAX, grid3d->zscp.comm );); (104, MPI, MPI_Reduce( &s, &berr[j], 1, MPI_FLOAT, MPI_MAX, 0,  grid->comm );); (71, MPI, MPI_Bcast( &count, 1, MPI_INT, 0,  grid3d->zscp.comm);)", "label": "(110, MPI, MPI_Allreduce( &s, &berr[j], 1, MPI_FLOAT, MPI_MAX, grid->comm );); (111, MPI, MPI_Bcast( &berr[j], 1, MPI_FLOAT, 0,  grid3d->zscp.comm);)"}
{"predict": "(21, TBB, tbb::detail::d1::segmented_iterator<nested_vec, T> my_si(my_vec);); (62, TBB, tbb::detail::d1::segmented_iterator<nested_vec, const T> my_csi(my_vec);)", "label": "(62, TBB, tbb::internal::segmented_iterator<nested_vec, const T> my_csi(my_vec);); (19, TBB, tbb::internal::segmented_iterator<nested_vec, T> my_si(my_vec);)"}
{"predict": "(4, CUDA, __shared__ uchar4 s_img[256];)", "label": "(4, CUDA, __shared__ uint4 s_img[TPB];)"}
{"predict": "(46, MPI, MPI_Comm_size(pgroup, &nproc);); (7, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &me);); (53, MPI, MPI_Comm_free(&pgroup_old);); (47, MPI, MPI_Send(port, PORT_SIZE, MPI_CHAR, members[i], 0, MPI_COMM_WORLD);); (36, MPI, MPI_Open_port(port_info, port);); (42, MPI, MPI_Comm_accept(port, MPI_INFO_NULL, 0, MPI_COMM_SELF, &pgroup_new);); (68, MPI, MPI_Comm_accept(port, MPI_INFO_NULL, 0, pgroup, &pgroup_new);); (46, MPI, MPI_Comm_free(&pgroup_new);); (25, MPI, MPI_Comm_group(MPI_COMM_WORLD, &group);)", "label": "(49, MPI, MPI_Comm_accept(port, MPI_INFO_NULL, 0, pgroup, &pgroup_new);); (53, MPI, MPI_Comm_free(&pgroup_old);); (7, MPI, MPI_Comm_size(MPI_COMM_WORLD, &nproc);); (5, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &me);); (65, MPI, MPI_Comm_connect(port, MPI_INFO_NULL, 0, MPI_COMM_SELF, &pgroup_new);); (43, MPI, MPI_Send(port, PORT_SIZE, MPI_CHAR, members[i], 0, MPI_COMM_WORLD);); (36, MPI, MPI_Open_port(port_info, port);); (45, MPI, MPI_Comm_free(&pgroup_new);); (49, MPI, MPI_Close_port(port);); (67, MPI, MPI_Comm_connect(port, MPI_INFO_NULL, 0, pgroup, &pgroup_new);)"}
{"predict": "(14, MPI, MPI_Group_translate_ranks(worldGroup, groupSize, ranks.data(), group, worldRanks.data());); (5, MPI, MPI_Comm_group(comm.get(), &group);); (13, MPI, MPI_Group_free(&group);); (6, MPI, MPI_Group_size(worldGroup, &groupSize);); (3, MPI, MPI_Comm_group(MPI_COMM_WORLD, &worldGroup);); (12, MPI, MPI_Group_free(&worldGroup);)", "label": "(10, MPI, MPICHECK(MPI_Group_size(group, &groupSize));); (6, MPI, MPICHECK(MPI_Comm_group(comm, &group));); (13, MPI, MPICHECK(MPI_Group_translate_ranks(group, groupSize, ranks.data(), worldGroup, worldRanks.data()));); (13, MPI, MPICHECK(MPI_Group_free(&group));); (2, MPI, MPICHECK(MPI_Comm_group(MPI_COMM_WORLD, &worldGroup));); (12, MPI, MPICHECK(MPI_Group_free(&worldGroup));)"}
{"predict": "(39, OpenMP, #pragma omp taskloop simd private(h)); (44, OpenMP, #pragma omp taskloop simd shared(i)); (5, OpenMP, #pragma omp taskloop simd private); (22, OpenMP, #pragma omp taskloop simd private(argc) allocate , allocate(, allocate(omp_default , allocate(omp_default_mem_alloc, allocate(omp_default_mem_alloc:, allocate(omp_default_mem_alloc: argc, allocate(omp_default_mem_alloc: argv), allocate(argv)); (27, OpenMP, #pragma omp taskloop simd private(a, b)); (29, OpenMP, #pragma omp taskloop simd private(argv[1])); (22, OpenMP, #pragma omp taskloop simd private(S1)); (35, OpenMP, #pragma omp parallel); (47, OpenMP, #pragma omp parallel shared(i)); (37, OpenMP, #pragma omp parallel private(i)); (46, OpenMP, #pragma omp taskloop simd private(j)); (8, OpenMP, #pragma omp taskloop simd private(argc,); (17, OpenMP, #pragma omp taskloop simd private(argc > 0 ? argv[1] : argv[2])); (36, OpenMP, #pragma omp taskloop simd private(i)); (-2, OpenMP, #pragma omp taskloop simd private()); (-6, OpenMP, #pragma omp taskloop simd private(); (30, OpenMP, #pragma omp taskloop simd private(z, e, g)); (-1, OpenMP, #pragma omp taskloop simd private(argc); (40, OpenMP, #pragma omp parallel reduction(+ : i)); (43, OpenMP, #pragma omp taskloop simd private)", "label": "(33, OpenMP, #pragma omp taskloop simd private(argv[1])); (38, OpenMP, #pragma omp taskloop simd private(h)); (13, OpenMP, #pragma omp taskloop simd private(argc); (52, OpenMP, #pragma omp parallel shared(i)); (52, OpenMP, #pragma omp parallel private(i)); (1, OpenMP, #pragma omp taskloop simd private); (15, OpenMP, #pragma omp taskloop simd private(argc > 0 ? argv[1] : argv[2])); (38, OpenMP, #pragma omp parallel); (41, OpenMP, #pragma omp taskloop simd private(i)); (21, OpenMP, #pragma omp taskloop simd private(a, b)); (32, OpenMP, #pragma omp taskloop simd shared(i)); (13, OpenMP, #pragma omp taskloop simd private(argc) allocate , allocate(, allocate(omp_default , allocate(omp_default_mem_alloc, allocate(omp_default_mem_alloc:, allocate(omp_default_mem_alloc: argc, allocate(omp_default_mem_alloc: argv), allocate(argv)); (15, OpenMP, #pragma omp taskloop simd private(S1)); (5, OpenMP, #pragma omp taskloop simd private(argc,); (-5, OpenMP, #pragma omp taskloop simd private(); (-3, OpenMP, #pragma omp taskloop simd private()); (20, OpenMP, #pragma omp taskloop simd private(e, g, z)); (40, OpenMP, #pragma omp taskloop simd private(j))"}
{"predict": "(7, OpenMP, std::vector<BabelFlow::Payload> comp_outputs( 1 );)", "label": "(6, OpenMP, std::vector<BabelFlow::Payload> comp_outputs( 1 );)"}
{"predict": "(53, MPI, MPI_Abort(MPI_COMM_WORLD, 0);)", "label": "(43, MPI, printf(\" MPI library version      : %s\\n\", mpi_version());)"}
{"predict": "(15, CUDA, checkCudaErrors(cudaFree(workload->d_data));); (15, CUDA, checkCudaErrors(cudaFreeHost(workload->h_data));); (3, CUDA, checkCudaErrors(cudaSetDevice(workload->cudaDeviceID));); (14, CUDA, checkCudaErrors(cudaStreamDestroy(workload->stream));)", "label": "(15, CUDA, checkCudaErrors(cudaFree(workload->d_data));); (15, CUDA, checkCudaErrors(cudaFreeHost(workload->h_data));); (3, CUDA, checkCudaErrors(cudaSetDevice(workload->cudaDeviceID));); (14, CUDA, checkCudaErrors(cudaStreamDestroy(workload->stream));)"}
{"predict": "(9, MPI, MPI_Finalize();); (1, MPI, MPI_Init(&argc,&argv);)", "label": "(9, MPI, MPI_Finalize();); (1, MPI, MPI_Init(&argc,&argv);)"}
{"predict": "(10, CUDA, int *d_num_out = thrust::raw_pointer_cast(num_out.data());); (39, CUDA, thrust::fill(data.begin() + num_selected, data.end(), false);); (28, CUDA, thrust::shuffle(data.begin(), data.end(), g);); (10, CUDA, bool *d_flags = thrust::raw_pointer_cast(flags.data());); (37, CUDA, cudaMemcpy(&h_num_out, d_num_out, sizeof(int), cudaMemcpyDeviceToHost);); (0, CUDA, thrust::device_vector<bool> flags(num_items);); (0, CUDA, thrust::device_vector<int> num_out(1);); (19, CUDA, thrust::device_vector<bool> data(num_items);); (11, CUDA, cudaMalloc(&d_tmp_storage, tmp_storage_size);); (39, CUDA, cudaFree(d_tmp_storage);); (-3, CUDA, thrust::host_vector<int> h_num_out(1);)", "label": "(10, CUDA, int *d_num_out = thrust::raw_pointer_cast(num_out.data());); (10, CUDA, int *d_data = thrust::raw_pointer_cast(data.data());); (24, CUDA, d_tmp_storage = thrust::raw_pointer_cast(tmp_storage.data());); (32, CUDA, thrust::fill(flags.begin(), flags.begin() + num_selected, true);); (3, CUDA, thrust::device_vector<bool> flags(num_items);); (20, CUDA, thrust::device_vector<char> tmp_storage(tmp_storage_size);); (0, CUDA, thrust::device_vector<int> data(num_items);); (29, CUDA, thrust::fill(flags.begin() + num_selected, flags.end(), false);); (26, CUDA, thrust::sequence(data.begin(), data.end());); (28, CUDA, thrust::shuffle(flags.begin(), flags.end(), g);); (-5, CUDA, thrust::device_vector<int> num_out(1);); (36, CUDA, cudaMemcpy(&h_num_out, d_num_out, sizeof(int), cudaMemcpyDeviceToHost);); (0, CUDA, bool *d_flags = thrust::raw_pointer_cast(flags.data());)"}
{"predict": "(37, OpenCL, clReleaseKernel(kernel);); (25, OpenCL, status = clSetKernelArg(kernel, 0, sizeof(cl_mem), &test_buf);)", "label": "(12, OpenCL, status = clSetKernelArg(kernel, 0, sizeof(cl_mem), &test_buf);); (20, OpenCL, status = clSetKernelArg(kernel, 0, sizeof(cl_mem), NULL);)"}
{"predict": "(78, CUDA, checkCudaErrors(cudaEventSynchronize(stop));); (16, CUDA, checkCudaErrors(cudaGetDeviceProperties(&deviceProp, cuda_device));); (89, CUDA, checkCudaErrors(cudaFree(d_partial_sums));); (65, CUDA, checkCudaErrors(cudaEventRecord(start, 0));); (31, CUDA, checkCudaErrors(cudaMallocHost(&h_result, sz));); (69, CUDA, checkCudaErrors(cudaEventElapsedTime(&inc, start, stop));); (81, CUDA, checkCudaErrors(cudaFree(d_data));); (62, CUDA, checkCudaErrors(cudaEventCreate(&start));); (55, CUDA, checkCudaErrors(cudaMemset(d_partial_sums, 0, partial_sz));); (81, CUDA, checkCudaErrors(cudaFreeHost(h_partial_sums));); (59, CUDA, checkCudaErrors(cudaEventRecord(stop, 0));); (24, CUDA, checkCudaErrors(cudaMalloc(&d_partial_sums, partial_sz));); (64, CUDA, checkCudaErrors(cudaMemcpy(h_result, d_data, sz, cudaMemcpyDeviceToHost));); (-5, CUDA, cuda_device = findCudaDevice(argc, (const char **)argv);); (17, CUDA, checkCudaErrors(cudaMallocHost(&h_partial_sums, partial_sz));); (52, CUDA, checkCudaErrors(cudaEventCreate(&stop));); (13, CUDA, checkCudaErrors(cudaMalloc(&d_data, sz));); (55, CUDA, checkCudaErrors(cudaEventSynchronize(start));); (72, CUDA, checkCudaErrors(cudaFreeHost(h_result));); (34, CUDA, checkCudaErrors(cudaMemcpy(d_data, h_data, sz, cudaMemcpyHostToDevice));); (72, CUDA, checkCudaErrors(cudaFree(d_partial_sums));); (38, CUDA, checkCudaErrors(cudaMemset(d_data, 0, sz));); (63, CUDA, checkCudaErrors(cudaFree(d_data));); (-5, CUDA, checkCudaErrors(cudaMallocHost(&h_data, sz));); (64, CUDA, checkCudaErrors(cudaFreeHost(h_data));)", "label": "(76, CUDA, checkCudaErrors(cudaEventRecord(stop, 0));); (15, CUDA, checkCudaErrors(cudaGetDeviceProperties(&deviceProp, cuda_device));); (94, CUDA, checkCudaErrors(cudaFree(d_partial_sums));); (57, CUDA, checkCudaErrors(cudaEventCreate(&start));); (57, CUDA, checkCudaErrors(cudaEventCreate(&stop));); (73, CUDA, checkCudaErrors(cudaEventElapsedTime(&inc, start, stop));); (66, CUDA, checkCudaErrors(cudaEventRecord(start, 0));); (70, CUDA, checkCudaErrors(cudaEventSynchronize(stop));); (86, CUDA, checkCudaErrors(cudaFreeHost(h_partial_sums));); (84, CUDA, checkCudaErrors(cudaFreeHost(h_result));); (55, CUDA, checkCudaErrors(cudaMalloc((void **)&d_data, sz));); (84, CUDA, checkCudaErrors(cudaFree(d_data));); (18, CUDA, checkCudaErrors(cudaMallocHost((void **)&h_result, sizeof(int)*n_elements));); (79, CUDA, checkCudaErrors(cudaFreeHost(h_data));); (56, CUDA, checkCudaErrors(cudaMemcpy(d_data, h_data, sz, cudaMemcpyHostToDevice));); (-4, CUDA, cuda_device = findCudaDevice(argc, (const char **)argv);); (65, CUDA, checkCudaErrors(cudaMemcpy(h_result, d_data, sz, cudaMemcpyDeviceToHost));); (50, CUDA, checkCudaErrors(cudaMemset(d_partial_sums, 0, partial_sz));); (11, CUDA, checkCudaErrors(cudaMallocHost((void **)&h_data, sizeof(int)*n_elements));); (-5, CUDA, checkCudaErrors(cudaGetDevice(&cuda_device));); (46, CUDA, checkCudaErrors(cudaMalloc((void **)&d_partial_sums, partial_sz));); (48, CUDA, checkCudaErrors(cudaMallocHost((void **)&h_partial_sums, partial_sz));)"}
{"predict": "(6, CUDA, RAFT_CUDA_TRY(cudaStreamSynchronize(stream));)", "label": "(6, CUDA, RAFT_CUDA_TRY(cudaStreamSynchronize(stream));)"}
{"predict": "(19, OpenMP, #pragma omp target parallel num_threads (argv[1]=2)); (1, OpenMP, #pragma omp target parallel num_threads (); (2, OpenMP, #pragma omp target parallel num_threads ()); (11, OpenMP, #pragma omp target parallel num_threads (num_threads(tmain<int, char, -1, -2>(argc, argv)); (12, OpenMP, #pragma omp target parallel redef_num_threads (argc, argc)); (5, OpenMP, #pragma omp target parallel num_threads (foobool(argc)), num_threads (true), num_threads (-5)); (6, OpenMP, #pragma omp target parallel num_threads (S1)); (1, OpenMP, #pragma omp target parallel num_threads (argc); (11, OpenMP, #pragma omp target parallel num_threads (2)); (-4, OpenMP, #pragma omp target parallel num_threads); (7, OpenMP, #pragma omp target parallel num_threads (num_threads(tmain<int, char, 0, 0>(argc, argv))", "label": "(1, OpenMP, #pragma omp target teams defaultmap); (2, OpenMP, #pragma omp target teams defaultmap(); (9, OpenMP, #pragma omp target teams defaultmap(tofrom)); (12, OpenMP, #pragma omp target teams defaultmap(tofrom,); (3, OpenMP, #pragma omp target teams defaultmap(tofrom); (4, OpenMP, #pragma omp target teams defaultmap (tofrom:); (13, OpenMP, #pragma omp target teams defaultmap(tofrom, scalar); (-2, OpenMP, #pragma omp target teams defaultmap()); (5, OpenMP, #pragma omp target teams defaultmap(tofrom scalar)); (8, OpenMP, #pragma omp target teams defaultmap (scalar:)"}
{"predict": "(2, MPI, MPIDataCommunicator mpi_world_communicator(MPI_COMM_WORLD);)", "label": "(2, MPI, MPIDataCommunicator mpi_world_communicator(MPI_COMM_WORLD);)"}
{"predict": "(19, MPI, MPI_Comm_size(d->comm, &ranks_comm);); (28, MPI, MPI_Comm_rank(parent_comm, &parent_rank);); (28, MPI, MPI_Allgather(&parent_rank, 1, MPI_INT, ranklist, 1, MPI_INT, d->comm);)", "label": "(19, MPI, MPI_Comm_size(d->comm, &ranks_comm);); (28, MPI, MPI_Comm_rank(parent_comm, &parent_rank);); (28, MPI, MPI_Allgather(&parent_rank, 1, MPI_INT, ranklist, 1, MPI_INT, d->comm);)"}
{"predict": "(52, CUDA, CHECK(cudaFree(d_y));); (29, CUDA, CHECK(cudaMemcpy(d_x, h_x, M, cudaMemcpyHostToDevice));); (51, CUDA, CHECK(cudaFree(d_z));); (38, CUDA, CHECK(cudaMemcpy(h_z, d_z, M, cudaMemcpyDeviceToHost));); (22, CUDA, CHECK(cudaMalloc((void**)&d_x, M));); (22, CUDA, CHECK(cudaMalloc((void**)&d_y, M));); (45, CUDA, CHECK(cudaFree(d_x));); (21, CUDA, CHECK(cudaMalloc((void**)&d_z, M));); (29, CUDA, CHECK(cudaGetLastError());); (29, CUDA, CHECK(cudaDeviceSynchronize());); (23, CUDA, CHECK(cudaMemcpy(d_y, h_y, M, cudaMemcpyHostToDevice));)", "label": "(52, CUDA, CHECK(cudaFree(d_y));); (30, CUDA, CHECK(cudaMemcpy(d_x, h_x, M, cudaMemcpyHostToDevice));); (51, CUDA, CHECK(cudaFree(d_z));); (39, CUDA, CHECK(cudaMemcpy(h_z, d_z, M, cudaMemcpyDeviceToHost));); (22, CUDA, CHECK(cudaMalloc((void**)&d_x, M));); (22, CUDA, CHECK(cudaMalloc((void**)&d_y, M));); (45, CUDA, CHECK(cudaFree(d_x));); (21, CUDA, CHECK(cudaMalloc((void**)&d_z, M));); (30, CUDA, CHECK(cudaGetLastError());); (30, CUDA, CHECK(cudaDeviceSynchronize());); (22, CUDA, CHECK(cudaMemcpy(d_y, h_y, M, cudaMemcpyHostToDevice));)"}
{"predict": "(32, MPI, MPI_Send(lnzval, len2, MPI_DOUBLE, 0, jb, grid3d->zscp.comm);); (36, MPI, MPI_Recv(lnzval, len2, MPI_DOUBLE, layer, jb, grid3d->zscp.comm, &status);)", "label": "(32, MPI, MPI_Send(lnzval, len2, MPI_DOUBLE, 0, jb, grid3d->zscp.comm);); (36, MPI, MPI_Recv(lnzval, len2, MPI_DOUBLE, layer, jb, grid3d->zscp.comm, &status);)"}
{"predict": "(76, OpenMP, #define OP_GOMP_CRITICAL_CPT(TYPE, OP, FLAG))", "label": "(76, OpenMP, #define OP_GOMP_CRITICAL_CPT(TYPE, OP, FLAG))"}
{"predict": "(87, OpenMP, const dims_t comp_dims = ndims == 1 ? 1 : reduce_dims;); (162, OpenMP, const int64_t dst_idle_off = md_off_v(dst, idle_pos.data());); (166, OpenMP, dst.set_elem(dst_idle_off, s8_comp.get_elem(src_idle_off) + zp_comp.get_elem(src_idle_off));)", "label": "(101, OpenMP, dims_t comp_dims(ndims, 1);)"}
{"predict": "(2, OpenMP, #pragma omp target device); (27, OpenMP, #pragma omp target device (ancestor)); (10, OpenMP, #pragma omp target device (k)); (15, OpenMP, #pragma omp target device (argc), target device (argc+1)); (18, OpenMP, #pragma omp target device (ancestor) k); (15, OpenMP, #pragma omp target device (self) argc); (8, OpenMP, #pragma omp target device (argc))); (10, OpenMP, #pragma omp target device (parent)); (-3, OpenMP, #pragma omp target device (); (0, OpenMP, #pragma omp target device (argc); (-6, OpenMP, #pragma omp target device ())", "label": "(24, OpenMP, #pragma omp target parallel device (3.14)); (9, OpenMP, #pragma omp target parallel device (argc))); (20, OpenMP, #pragma omp target parallel device (-10u)); (5, OpenMP, #pragma omp target parallel device (argc); (12, OpenMP, #pragma omp target parallel device (k), device (argc+1)); (-3, OpenMP, #pragma omp target parallel device); (6, OpenMP, #pragma omp target parallel device (argc > 0 ? argv[1] : argv[2])); (11, OpenMP, #pragma omp target parallel device (S1)); (12, OpenMP, #pragma omp target parallel device (-2)); (-3, OpenMP, #pragma omp target parallel device ()); (4, OpenMP, #pragma omp target parallel device (argc + argc)); (-7, OpenMP, #pragma omp target parallel device ()"}
{"predict": "(1, CUDA, __shared__ float cache[threadsPerBlock];)", "label": "(1, CUDA, __shared__ float cache[threadsPerBlock];)"}
{"predict": "(34, CUDA, cudaFree( dptrForce );); (32, CUDA, cudaFree( dptrPosMass );)", "label": "(33, CUDA, cudaFree( dptrPosMass );); (33, CUDA, cudaFree( dptrForce );)"}
{"predict": "(63, OpenMP, double stop = omp_get_wtime();); (70, CUDA, CUDA_RT_CALL(cudaFree(a));); (18, CUDA, CUDA_RT_CALL(cudaDeviceSynchronize());); (10, CUDA, CUDA_RT_CALL(cudaMemset(a, 0, nx * ny * sizeof(float)));); (6, CUDA, CUDA_RT_CALL(cudaMalloc(&a, nx * ny * sizeof(float)));); (63, CUDA, CUDA_RT_CALL(cudaFree(l2_norm_d));); (13, CUDA, CUDA_RT_CALL(cudaGetLastError());); (32, CUDA, CUDA_RT_CALL(cudaMemset(l2_norm_d, 0, sizeof(float)));); (36, CUDA, CUDA_RT_CALL(cudaMemcpy(l2_norm_h, l2_norm_d, sizeof(float), cudaMemcpyDeviceToHost));); (5, CUDA, CUDA_RT_CALL(cudaMemset(a_new, 0, nx * ny * sizeof(float)));); (14, CUDA, CUDA_RT_CALL(cudaMallocHost(&l2_norm_h, sizeof(float)));); (54, CUDA, CUDA_RT_CALL(cudaMemcpy(a_ref_h, a, nx * ny * sizeof(float), cudaMemcpyDeviceToHost));); (58, CUDA, CUDA_RT_CALL(cudaFree(a_new));); (-2, CUDA, CUDA_RT_CALL(cudaMalloc(&a_new, nx * ny * sizeof(float)));); (22, OpenMP, double start = omp_get_wtime();); (8, CUDA, CUDA_RT_CALL(cudaMalloc(&l2_norm_d, sizeof(float)));); (51, CUDA, CUDA_RT_CALL(cudaFreeHost(l2_norm_h));)", "label": "(63, OpenMP, double stop = omp_get_wtime();); (70, CUDA, CUDA_RT_CALL(cudaFree(a));); (18, CUDA, CUDA_RT_CALL(cudaDeviceSynchronize());); (10, CUDA, CUDA_RT_CALL(cudaMemset(a, 0, nx * ny * sizeof(float)));); (6, CUDA, CUDA_RT_CALL(cudaMalloc(&a, nx * ny * sizeof(float)));); (63, CUDA, CUDA_RT_CALL(cudaFree(l2_norm_d));); (13, CUDA, CUDA_RT_CALL(cudaGetLastError());); (32, CUDA, CUDA_RT_CALL(cudaMemset(l2_norm_d, 0, sizeof(float)));); (36, CUDA, CUDA_RT_CALL(cudaMemcpy(l2_norm_h, l2_norm_d, sizeof(float), cudaMemcpyDeviceToHost));); (5, CUDA, CUDA_RT_CALL(cudaMemset(a_new, 0, nx * ny * sizeof(float)));); (14, CUDA, CUDA_RT_CALL(cudaMallocHost(&l2_norm_h, sizeof(float)));); (54, CUDA, CUDA_RT_CALL(cudaMemcpy(a_ref_h, a, nx * ny * sizeof(float), cudaMemcpyDeviceToHost));); (58, CUDA, CUDA_RT_CALL(cudaFree(a_new));); (-2, CUDA, CUDA_RT_CALL(cudaMalloc(&a_new, nx * ny * sizeof(float)));); (22, OpenMP, double start = omp_get_wtime();); (8, CUDA, CUDA_RT_CALL(cudaMalloc(&l2_norm_d, sizeof(float)));); (51, CUDA, CUDA_RT_CALL(cudaFreeHost(l2_norm_h));)"}
{"predict": "(19, MPI, MPI_Comm_size(comm, &size);); (64, MPI, MPI_Error_class(errval, &errclass);); (92, MPI, MPI_Ssend(NULL, 0, MPI_INT, dest, 10, comm);); (39, MPI, errval = MPI_Recv(NULL, 0, MPI_INT, src, 100, comm, MPI_STATUS_IGNORE);); (59, MPI, errval = MPI_Waitsome(2, r, &outcount, indices, s);); (81, MPI, MPI_Ssend(NULL, 0, MPI_INT, dest, 100, comm);); (87, MPI, MPI_Send(b1, 10, MPI_INT, dest, 0, comm);); (25, MPI, errval = MPI_Irecv(b2, 10, MPI_INT, src, 10, comm, &r[1]);); (43, MPI, errval = MPI_Recv(NULL, 0, MPI_INT, src, 10, comm, MPI_STATUS_IGNORE);); (15, MPI, MPI_Comm_set_errhandler(comm, MPI_ERRORS_RETURN);); (16, MPI, errval = MPI_Irecv(b1, 10, MPI_INT, src, 0, comm, &r[0]);); (7, MPI, MPI_Comm_rank(comm, &rank);); (82, MPI, MPI_Send(b2, 11, MPI_INT, dest, 10, comm);)", "label": "(20, MPI, MPI_Comm_size(comm, &size);); (64, MPI, MPI_Error_class(errval, &errclass);); (95, MPI, MPI_Ssend(NULL, 0, MPI_INT, dest, 10, comm);); (39, MPI, errval = MPI_Recv(NULL, 0, MPI_INT, src, 100, comm, MPI_STATUS_IGNORE);); (85, MPI, MPI_Ssend(NULL, 0, MPI_INT, dest, 100, comm);); (59, MPI, errval = MPI_Waitsome(2, r, &outcount, indices, s);); (87, MPI, MPI_Send(b1, 10, MPI_INT, dest, 0, comm);); (25, MPI, errval = MPI_Irecv(b2, 10, MPI_INT, src, 10, comm, &r[1]);); (44, MPI, errval = MPI_Recv(NULL, 0, MPI_INT, src, 10, comm, MPI_STATUS_IGNORE);); (16, MPI, MPI_Comm_set_errhandler(comm, MPI_ERRORS_RETURN);); (16, MPI, errval = MPI_Irecv(b1, 10, MPI_INT, src, 0, comm, &r[0]);); (8, MPI, MPI_Comm_rank(comm, &rank);); (82, MPI, MPI_Send(b2, 11, MPI_INT, dest, 10, comm);)"}
{"predict": "(10, OpenMP, #pragma omp target teams distribute parallel for reduction(+:gsum)); (2, OpenMP, #pragma omp parallel for reduction(+:sum))", "label": "(3, OpenMP, #pragma omp parallel for reduction(+:sum)); (8, OpenMP, #pragma omp target teams distribute parallel for reduction(+:gsum))"}
{"predict": "(34, MPI, MPI_Start(&reqs[root]);); (12, MPI, MPI_Info_create(&info);); (9, MPI, MPI_Type_vector(n, 1, stride, MPI_DOUBLE, &vec);); (51, MPI, MPI_Type_free(&vec);); (31, MPI, MPI_Wait(&reqs[root], MPI_STATUS_IGNORE);); (47, MPI, MPI_Info_free(&info);); (5, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (3, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (24, MPI, MPI_Type_commit(&vec);)", "label": "(35, MPI, MPI_Start(&reqs[root]);); (20, MPI, MPI_Type_vector(n, 1, stride, MPI_DOUBLE, &vec);); (11, MPI, MPI_Info_create(&info);); (8, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (32, MPI, MPI_Wait(&reqs[root], MPI_STATUS_IGNORE);); (5, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (48, MPI, MPI_Type_free(&vec);); (15, MPI, MPI_Type_commit(&vec);); (39, MPI, MPI_Request_free(&reqs[root]);); (44, MPI, MPI_Info_free(&info);)"}
{"predict": "(97, TBB, CHECK_EXCEPTION( eid_invalid_multiple_scheduling, tbb::invalid_multiple_scheduling );); (114, TBB, CHECK_EXCEPTION( eid_bad_last_alloc,              tbb::bad_last_alloc              );); (123, TBB, CHECK_EXCEPTION( eid_improper_lock,               tbb::improper_lock               );); (133, TBB, CHECK_EXCEPTION( eid_missing_wait,                tbb::missing_wait                );); (153, TBB, CHECK_EXCEPTION( eid_user_abort,                  tbb::user_abort                  );); (116, TBB, CHECK_EXCEPTION( eid_improper_unlock,             tbb::improper_unlock             );); (120, TBB, CHECK_EXCEPTION( eid_missing_join,                tbb::missing_join                );); (131, TBB, CHECK_EXCEPTION( eid_user_abort,                  tbb::user_abort                  );); (100, TBB, tbb::task_scheduler_init init( 1 );); (97, TBB, tbb::internal::throw_exception( tbb::internal::id );); (115, TBB, CHECK_EXCEPTION( eid_improper_lock,               tbb::improper_lock               );); (-3, TBB, tbb::runtime_loader rtl( tbb::runtime_loader::em_status );); (85, TBB, CHECK( rtl.status() == tbb::runtime_loader::ec_bad_call );); (96, TBB, tbb::internal::throw_exception( tbb::internal::exception_id( id ) );); (37, TBB, tbb::runtime_loader rtl( tbb::runtime_loader::em_throw );); (128, TBB, CHECK_EXCEPTION( eid_missing_wait,                tbb::missing_wait                );); (36, TBB, tbb::runtime_loader::error_code code = tbb::runtime_loader::ec_ok;); (138, TBB, CHECK_EXCEPTION( eid_invalid_multiple_scheduling, tbb::invalid_multiple_scheduling );); (117, TBB, CHECK_EXCEPTION( eid_bad_last_alloc,              tbb::bad_last_alloc              );); (77, TBB, CHECK_EXCEPTION( eid_invalid_multiple_scheduling, tbb::invalid_multiple_scheduling );); (-6, TBB, CHECK( rtl.status() == tbb::runtime_loader::", "label": "(172, TBB, CHECK( rtl1.status() == tbb::runtime_loader::ec_bad_ver );); (97, TBB, tbb::task_scheduler_init init( 1 );); (136, TBB, CHECK_EXCEPTION( eid_invalid_multiple_scheduling, tbb::invalid_multiple_scheduling );); (40, TBB, CHECK( rtl.status() == tbb::runtime_loader::ec_no_lib );); (8, TBB, tbb::runtime_loader rtl( tbb::runtime_loader::em_status );); (158, TBB, tbb::runtime_loader rtl1( tbb::runtime_loader::em_status );); (158, TBB, CHECK( rtl0.status() == tbb::runtime_loader::ec_ok );); (126, TBB, CHECK_EXCEPTION( eid_bad_last_alloc,              tbb::bad_last_alloc              );); (154, TBB, tbb::runtime_loader rtl0( tbb::runtime_loader::em_status );); (130, TBB, CHECK_EXCEPTION( eid_improper_lock,               tbb::improper_lock               );); (113, TBB, tbb::internal::throw_exception( tbb::internal::id );); (84, TBB, CHECK( rtl.status() == tbb::runtime_loader::ec_bad_call );); (96, TBB, tbb::internal::throw_exception( tbb::internal::exception_id( id ) );); (39, TBB, tbb::runtime_loader rtl( tbb::runtime_loader::em_throw );); (133, TBB, tbb::internal::handle_perror( EAGAIN, \"apple\" );); (-1, TBB, CHECK( rtl.status() == tbb::runtime_loader::ec_ok );); (37, TBB, tbb::runtime_loader::error_code code = tbb::runtime_loader::ec_ok;); (8, TBB, CHECK( rtl.status() == tbb::runtime_loader::ec_bad_arg );); (147, TBB, CHECK( rtl1.status() == tbb::runtime_loader::ec_ok );); (46, TBB, CHECK( code == tbb::runtime_loader::ec_no_lib );); (117, TBB, CHECK_EXCEPTION( eid_missing_wait,                tbb::missing_wait                );); (121, TBB, CHECK_EXCEPTION( eid_user_abort,                  tbb::user_abort                  );); (37, TBB, CHECK( code == tbb::runtime_loader::ec_bad_arg );)"}
{"predict": "(47, OpenMP, #pragma omp parallel for collapse(2)); (35, OpenMP, #pragma omp parallel for)", "label": "(31, OpenMP, #pragma omp teams distribute collapse(2)); (47, OpenMP, #pragma omp parallel for collapse(2)); (34, OpenMP, #pragma omp parallel for)"}
{"predict": "(22, OpenMP, #pragma omp distribute parallel for proc_bind(master); (15, OpenMP, #pragma omp distribute parallel for proc_bind()); (33, OpenMP, #pragma omp distribute parallel for proc_bind(x)); (25, OpenMP, #pragma omp distribute parallel for proc_bind(close), proc_bind(spread)); (-1, OpenMP, #pragma omp distribute parallel for proc_bind); (27, OpenMP, #pragma omp distribute parallel for proc_bind(spread)); (3, OpenMP, #pragma omp distribute parallel for proc_bind(); (-5, OpenMP, #pragma omp target); (33, OpenMP, #pragma omp parallel proc_bind(close)); (-6, OpenMP, #pragma omp teams)", "label": "(20, OpenMP, #pragma omp distribute parallel for proc_bind(master); (4, OpenMP, #pragma omp distribute parallel for proc_bind); (13, OpenMP, #pragma omp distribute parallel for proc_bind()); (7, OpenMP, #pragma omp distribute parallel for proc_bind(); (26, OpenMP, #pragma omp distribute parallel for proc_bind(x)); (38, OpenMP, #pragma omp distribute parallel for proc_bind(spread)); (19, OpenMP, #pragma omp distribute parallel for proc_bind(close), proc_bind(spread)); (-4, OpenMP, #pragma omp target); (32, OpenMP, #pragma omp parallel proc_bind(close)); (27, OpenMP, #pragma omp distribute parallel for proc_bind(master)); (-6, OpenMP, #pragma omp teams)"}
{"predict": "(33, MPI, MPI_Bcast(&rc, 1, MPI_INT, 0, scr_storedesc_cntl->comm);)", "label": "(33, MPI, MPI_Bcast(&rc, 1, MPI_INT, 0, scr_storedesc_cntl->comm);)"}
{"predict": "(10, OpenMP, #pragma omp target parallel ]); (56, OpenMP, #pragma omp target parallel copyin(pvt)); (-1, OpenMP, #pragma omp target parallel); (1, OpenMP, #pragma omp target parallel (); (5, OpenMP, #pragma omp target parallel }); (11, OpenMP, #pragma omp target parallel unknown()); (2, OpenMP, #pragma omp target parallel [); (52, OpenMP, #pragma omp target parallel default(none)); (33, OpenMP, #pragma omp target parallel allocate(argc)); (2, OpenMP, #pragma omp target parallel ))", "label": "(69, OpenMP, #pragma omp cancellation point parallel); (66, OpenMP, #pragma omp cancellation point taskgroup); (60, OpenMP, #pragma omp cancel for); (57, OpenMP, #pragma omp cancel); (64, OpenMP, #pragma omp cancel parallel); (50, OpenMP, #pragma omp target parallel copyin(pvt)); (-5, OpenMP, #pragma omp target parallel); (-4, OpenMP, #pragma omp target parallel (); (53, OpenMP, #pragma omp cancellation point); (57, OpenMP, #pragma omp cancel taskgroup); (-1, OpenMP, #pragma omp target parallel )); (0, OpenMP, #pragma omp target parallel }); (4, OpenMP, #pragma omp target parallel unknown()); (50, OpenMP, #pragma omp cancellation point for); (-9, OpenMP, #pragma omp target parallel [); (49, OpenMP, #pragma omp cancel sections); (49, OpenMP, #pragma omp cancellation point sections); (-10, OpenMP, #pragma omp target parallel ])"}
{"predict": "(9, CUDA, cudaGetDeviceProperties( &prop, 0 );); (5, CUDA, cudaSetDeviceFlags( cudaDeviceMapHost );); (3, CUDA, cudaSetDevice( 0 );)", "label": "(9, CUDA, cudaGetDeviceProperties( &prop, 0 );); (5, CUDA, cudaSetDeviceFlags( cudaDeviceMapHost );); (3, CUDA, cudaSetDevice( 0 );)"}
{"predict": "(1, MPI, MPI_Init(&argc, &argv);); (61, MPI, MPI_Finalize();); (3, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (1, MPI, MPI_Comm_size(MPI_COMM_WORLD, &P);)", "label": "(1, MPI, MPI_Init(&argc, &argv);); (61, MPI, MPI_Finalize();); (3, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (1, MPI, MPI_Comm_size(MPI_COMM_WORLD, &P);)"}
{"predict": "(35, CUDA, setCommonICUDataPointer(gCommonICUDataArray[i], FALSE, pErrorCode);); (108, CUDA, setCommonICUDataPointer(&tData, TRUE, pErrorCode);)", "label": "(43, CUDA, setCommonICUDataPointer(&U_ICUDATA_ENTRY_POINT, FALSE, pErrorCode);)"}
{"predict": "(2, TBB, tbb::task_arena big_arena(num_threads);); (27, TBB, const auto thread_id = tbb::this_task_arena::thread_index();)", "label": "(3, TBB, tbb::task_arena big_arena(static_cast<int>(num_threads));); (28, TBB, int thread_id = tbb::this_task_arena::current_thread_index();); (0, TBB, tbb::global_control concurrency(tbb::global_control::max_allowed_parallelism, num_threads);)"}
{"predict": "(10, OpenMP, #pragma omp parallel for simd collapse (argc); (3, OpenMP, #pragma omp parallel for simd collapse (); (22, OpenMP, #pragma omp parallel for simd collapse (S)); (12, OpenMP, #pragma omp parallel for simd collapse (1)); (31, OpenMP, #pragma omp parallel for simd collapse (N)); (1, OpenMP, #pragma omp parallel for simd collapse ()); (16, OpenMP, #pragma omp parallel for simd collapse (foobool(argc)), collapse (true), collapse (-5)); (30, OpenMP, #pragma omp parallel for simd collapse (2)); (5, OpenMP, #pragma omp parallel for simd collapse (ST); (8, OpenMP, #pragma omp parallel for simd collapse ((ST > 0) ? 1 + ST : 2)); (-8, OpenMP, #pragma omp parallel for simd collapse)", "label": "(13, OpenMP, #pragma omp parallel for simd collapse (ST); (34, OpenMP, #pragma omp parallel for simd collapse (N)); (20, OpenMP, #pragma omp parallel for simd collapse (foobool(argc)), collapse (true), collapse (-5)); (-1, OpenMP, #pragma omp parallel for simd collapse); (13, OpenMP, #pragma omp parallel for simd collapse ((ST > 0) ? 1 + ST : 2)); (19, OpenMP, #pragma omp parallel for simd collapse (S)); (9, OpenMP, #pragma omp parallel for simd collapse (1)); (-3, OpenMP, #pragma omp parallel for simd collapse (); (-2, OpenMP, #pragma omp parallel for simd collapse ()); (1, OpenMP, #pragma omp parallel for simd collapse (argc); (27, OpenMP, #pragma omp parallel for simd collapse (2))"}
{"predict": "(18, TBB, tbb::flow::make_edge( a1, a3 );); (22, TBB, tbb::flow::make_edge( s, a0 );); (22, TBB, tbb::flow::make_edge( a0, a1 );); (17, TBB, tbb::flow::make_edge( a2, a3 );); (19, TBB, tbb::flow::make_edge( c, a2 );); (37, TBB, tbb::flow::queue_node<int> q2(g);); (37, TBB, tbb::flow::make_edge( s2, q2 );); (-2, TBB, tbb::flow::graph g;); (15, TBB, tbb::flow::make_edge( s, a2 );); (3, TBB, tbb::flow::composite_node<std::tuple<int>, std::tuple<int> > s2(g, hidden, adder_body());); (33, TBB, tbb::flow::make_edge( s2, q );); (-1, TBB, tbb::flow::queue_node<int> q(g);); (37, TBB, tbb::flow::make_edge( s2, a3 );); (-6, TBB, tbb::flow::source_node<int> s(g, start_body());); (-9, TBB, tbb::flow::graph g;); (35, TBB, tbb::flow::make_edge( a0, s2 );); (-1, TBB, tbb::flow::composite_node<std::tuple<int>, std::tuple<int> > s(g, hidden, adder_body());); (-5, TBB, tbb::flow::source_node<int> c(g, constant_body(4));)", "label": "(61, TBB, tbb::flow::make_edge( a1, tbb::flow::input_port<1>(a3) );); (58, TBB, tbb::flow::remove_edge( a2, s2 );); (60, TBB, tbb::flow::make_edge( a3, s2 );); (0, TBB, tbb::flow::function_node<int,int> c(g, tbb::flow::unlimited, cube_body());); (19, TBB, CHECK_MESSAGE( (&std::get<1>(a3.input_ports()) == &tbb::flow::input_port<1>(a3.j)), \"input_port1 of j not bound to input port 1 in composite_node a3\");); (25, TBB, tbb::flow::make_edge( c, tbb::flow::input_port<1>(a0) );); (21, TBB, tbb::flow::queue_node<int> q(g);); (25, TBB, tbb::flow::make_edge( c, tbb::flow::input_port<0>(a1) );); (27, TBB, tbb::flow::make_edge( tbb::flow::output_port<0>(a0), tbb::flow::input_port<0>(a2) );); (20, TBB, tbb::flow::make_edge( s, tbb::flow::input_port<0>(a0) );); (16, TBB, tbb::flow::function_node<int,int> s2(g, tbb::flow::unlimited, square_body());); (22, TBB, tbb::flow::make_edge( c, tbb::flow::input_port<1>(a1) );); (24, TBB, tbb::flow::make_edge( tbb::flow::output_port<0>(a1), tbb::flow::input_port<1>(a2) );); (9, TBB, CHECK_MESSAGE( (&std::get<0>(a3.input_ports()) == &tbb::flow::input_port<0>(a3.j)), \"input_port 0 of j not bound to input port 0 in composite_node a3\");); (3, TBB, CHECK_MESSAGE( (&tbb::flow::input_port<0>(a2) == &tbb::flow::input_port<0>(a2.j)), \"input_port 0 of j not bound to input port 0 in composite_node a2\");); (24, TBB, tbb::flow::make_edge( s2, q );); (-15, TBB, tbb::flow::graph g;); (-15, TBB, tbb::flow::function_node<int,int> s(g, tbb::flow::unlimited, square_body());); (0, TBB, CHECK_MESSAGE( (&tbb::flow::input_port<1>(a2) == &tbb::flow::input_port<1>(a2.j)), \"input_port 1 of j not bound to input port 1 in composite_node a2\");); (-12, TBB, CHECK_MESSAGE( (&tbb::flow::input_port<0>(a0) == &tbb::flow::input_port<0>(a0.j)), \"input_port 0 of j not bound to input port 0 in composite_node a0\");); (18, TBB, tbb::flow::make_edge( tbb::flow::output_port<0>(a2), s2 );); (-12, TBB, CHECK_MESSAGE( (&tbb::flow::output_port<0>(a0) == &a0.f), \"f not bound to output port 0 in composite_node a0\");); (-18, TBB, tbb::flow::function_node<int,int> p(g, tbb::flow::unlimited, passthru_body());); (35, TBB, tbb::flow::remove_edge(s2, q);); (-11, TBB, CHECK_MESSAGE( (&std::get<1>(a0.input_ports()) == &tbb::flow::input_port<1>(a0.j)), \"input_port1 of j not bound to input port 1 in composite_node a1\");); (-17, TBB, CHECK_MESSAGE( (&tbb::flow::input_port<1>(a0) == &tbb::flow::input_port<1>(a0.j)), \"input_port 1 of j not bound to input port 1 in composite_node a0\");); (-14, TBB, CHECK_MESSAGE( (&std::get<0>(a0.input_ports()) == &tbb::flow::input_port<0>(a0.j)), \"input_port 0 of j not bound to input port 0 in composite_node a1\");); (-8, TBB, CHECK_MESSAGE( (&tbb::flow::output_port<0>(a2) == &a2.f), \"f not bound to output port 0 in composite_node a2\");); (32, TBB, tbb::flow::make_edge( a0, a3 );)"}
{"predict": "(29, CUDA, CUDASimulation cudaSimulation(model);)", "label": "(29, CUDA, CUDASimulation cudaSimulation(model);)"}
{"predict": "(11, TBB, test_resets<int,tbb::flow::queue_node<int> >();); (7, TBB, test_concurrency_with_body<tbb::flow::queue_node<int> >().run_tests();); (10, TBB, test_resets<float,tbb::flow::queue_node<float> >();)", "label": "(10, TBB, test_extract<tbb::flow::rejecting>();); (10, TBB, test_extract<tbb::flow::queueing>();)"}
{"predict": "(44, CUDA, checkCudaErrors(cudaEventRecord(end, 0));); (42, CUDA, checkCudaErrors(cudaEventElapsedTime(&elapsedTime, start, end));); (46, CUDA, checkCudaErrors(cudaEventSynchronize(end));); (57, CUDA, checkCudaErrors(cudaEventDestroy(end));); (37, CUDA, checkCudaErrors(cudaEventRecord(start, 0));); (53, CUDA, checkCudaErrors(cudaEventDestroy(start));); (3, CUDA, checkCudaErrors(cudaEventCreate(&start));); (3, CUDA, checkCudaErrors(cudaEventCreate(&end));)", "label": "(13, CUDA, checkCudaErrors(cudaEventCreate(&start));); (13, CUDA, checkCudaErrors(cudaEventCreate(&end));); (41, CUDA, checkCudaErrors(cudaDeviceSynchronize());); (38, CUDA, checkCudaErrors(cudaEventRecord(end));); (35, CUDA, checkCudaErrors(cudaEventRecord(start));); (50, CUDA, checkCudaErrors(cudaEventElapsedTime(&elapsedTime, start, end));)"}
{"predict": "(4, OpenMP, #pragma omp parallel num_threads(2)); (1, OpenMP, omp_set_nested(1);)", "label": "(5, OpenMP, #pragma omp parallel num_threads(2)); (1, OpenMP, omp_set_nested(1);); (1, OpenMP, omp_set_max_active_levels(1);)"}
{"predict": "(74, CUDA, EXPECT_EQ(cudaSuccess, cudaStreamSynchronize(stream));); (2, CUDA, EXPECT_EQ(cudaSuccess, cudaStreamCreate(&stream));); (40, CUDA, EXPECT_EQ(cudaSuccess, cudaMemset(outAccess->sampleData(0), 0xFA, outBufferSize));); (72, CUDA, EXPECT_EQ(cudaSuccess, cudaStreamDestroy(stream));)", "label": "(3, CUDA, EXPECT_EQ(cudaSuccess, cudaStreamCreate(&stream));); (73, CUDA, EXPECT_EQ(cudaSuccess, cudaStreamSynchronize(stream));); (40, CUDA, EXPECT_EQ(cudaSuccess, cudaMemset(outAccess->sampleData(0), 0xFA, outBufferSize));); (104, CUDA, EXPECT_EQ(cudaSuccess, cudaStreamDestroy(stream));)"}
{"predict": "(27, OpenMP, #pragma omp target teams distribute parallel for simd firstprivate(ba)); (18, OpenMP, #pragma omp target teams distribute parallel for simd firstprivate (argc) allocate , allocate(, allocate(omp_default , allocate(omp_default_mem_alloc, allocate(omp_default_mem_alloc:, allocate(omp_default_mem_alloc: argc, allocate(omp_default_mem_alloc: argv), allocate(argv)); (33, OpenMP, #pragma omp target teams distribute parallel for simd firstprivate(j)); (5, OpenMP, #pragma omp target teams distribute parallel for simd firstprivate (); (6, OpenMP, #pragma omp target teams distribute parallel for simd firstprivate ()); (7, OpenMP, #pragma omp target teams distribute parallel for simd firstprivate (argc); (20, OpenMP, #pragma omp target teams distribute parallel for simd firstprivate (S1)); (15, OpenMP, #pragma omp target teams distribute parallel for simd firstprivate (a, b, c, d, f)); (27, OpenMP, #pragma omp target teams distribute parallel for simd firstprivate(i)); (-2, OpenMP, #pragma omp target teams distribute parallel for simd firstprivate); (2, OpenMP, #pragma omp target teams distribute parallel for simd firstprivate (argc,); (16, OpenMP, #pragma omp target teams distribute parallel for simd firstprivate (argv[1])); (25, OpenMP, #pragma omp target teams distribute parallel for simd private(i), firstprivate(i)); (8, OpenMP, #pragma omp target teams distribute parallel for simd firstprivate (S2::S2s)); (33, OpenMP, #pragma omp target teams distribute parallel for simd firstprivate(z) private(z)); (26, OpenMP, #pragma omp target teams distribute parallel for simd firstprivate(g)); (16, OpenMP, #pragma omp target teams distribute parallel for simd firstprivate(da)); (18, OpenMP, #pragma omp target teams distribute parallel for simd firstprivate(S2::S2sc)); (31, OpenMP, #pragma omp target teams distribute parallel for simd firstprivate(j) private(j)); (8, OpenMP, #pragma omp target teams distribute parallel for simd firstprivate (2 * 2)); (15, OpenMP, #pragma omp target teams distribute parallel for simd firstprivate(ca))", "label": "(25, OpenMP, #pragma omp target teams distribute parallel for simd shared (argv[1])); (28, OpenMP, #pragma omp target teams distribute parallel for simd shared(ca)); (19, OpenMP, #pragma omp target teams distribute parallel for simd shared (S1)); (42, OpenMP, #pragma omp target teams distribute parallel for simd shared(j)); (29, OpenMP, #pragma omp target teams distribute parallel for simd shared(e, g)); (34, OpenMP, #pragma omp target teams distribute parallel for simd firstprivate(i)); (11, OpenMP, #pragma omp target teams distribute parallel for simd shared (argc > 0 ? argv[1] : argv[2])); (30, OpenMP, #pragma omp target teams distribute parallel for simd private(i), shared(i)); (7, OpenMP, #pragma omp target teams distribute parallel for simd shared (argc,); (22, OpenMP, #pragma omp target teams distribute parallel for simd shared(da)); (3, OpenMP, #pragma omp target teams distribute parallel for simd shared (argc); (24, OpenMP, #pragma omp target teams distribute parallel for simd shared(h, B::x)); (31, OpenMP, #pragma omp target teams distribute parallel for simd shared(i)); (28, OpenMP, #pragma omp target teams distribute parallel for simd private(i)); (-5, OpenMP, #pragma omp target teams distribute parallel for simd shared (); (12, OpenMP, #pragma omp target teams distribute parallel for simd shared(ba)); (-9, OpenMP, #pragma omp target teams distribute parallel for simd shared); (-6, OpenMP, #pragma omp target teams distribute parallel for simd shared ()); (1, OpenMP, #pragma omp target teams distribute parallel for simd shared (argc)); (4, OpenMP, #pragma omp target teams distribute parallel for simd shared (a, b, c, d, f, z))"}
{"predict": "(25, OpenMP, #pragma omp target data map(alloc: u1_real, u1_imag)); (41, OpenMP, #pragma omp parallel for private(x0, t1, t2, t3, t4, a1, a2, x1, x2, z, i)); (10, OpenMP, #pragma omp target data map(to: starts[0:d3])); (25, OpenMP, #pragma omp parallel for)", "label": "(65, OpenMP, #pragma omp target update to(u1_real, u1_imag))"}
{"predict": "(2, CUDA, __shared__ float siftPoint[128*FMC2H];); (3, CUDA, __shared__ float maxScore[FMC2H];); (3, CUDA, __shared__ float maxScor2[FMC2H];); (3, CUDA, __shared__ int maxIndex[FMC2H];)", "label": "(3, CUDA, __shared__ float maxScore[FMC2H];); (4, CUDA, __shared__ int maxIndex[FMC2H];); (2, CUDA, __shared__ float maxScor2[FMC2H];); (-1, CUDA, __shared__ float siftPoint[128*FMC2H];)"}
{"predict": "(16, MPI, MPI_Bcast(&tmp_val, 1, MPI_INT, 0, fd->comm);)", "label": "(25, MPI, MPI_Bcast(&tmp_val, 1, MPI_INT, 0, fd->comm);)"}
{"predict": "(10, TBB, oneapi::tbb::concurrent_set<int> static_init_time_set;)", "label": "(7, TBB, tbb::concurrent_unordered_set<int> static_init_time_set;)"}
{"predict": "(56, OpenMP, #pragma omp simd)", "label": "(56, OpenMP, #pragma omp simd)"}
{"predict": "(73, CUDA, checkCudaErrors(cudaMalloc((void **)&d_idata, bytes));); (134, CUDA, cudaFree(d_odata);); (72, CUDA, checkCudaErrors(cudaMalloc((void **)&d_odata, numBlocks * sizeof(T)));); (131, CUDA, cudaFree(d_idata);)", "label": "(132, CUDA, checkCudaErrors(cudaFree(d_idata));); (71, CUDA, checkCudaErrors(cudaMalloc((void **)&d_idata, bytes));); (131, CUDA, checkCudaErrors(cudaFree(d_odata));); (70, CUDA, checkCudaErrors(cudaMalloc((void **)&d_odata, numBlocks * sizeof(T)));)"}
{"predict": "(175, OpenMP, Solver solve(world, A, rhs, part(A), part(rhs));); (138, OpenMP, Solver solve(world, A, rhs);)", "label": "(17, MPI, MPI_Barrier(world);)"}
{"predict": "(20, TBB, tbb::cache_aligned_allocator<ThreadData>().allocate(thread_sinks.data(), thread_sinks.size());)", "label": "(11, OpenMP, #pragma omp parallel for num_threads(N_THREADS))"}
{"predict": "(extern __shared__ char smem[];)", "label": "(15, CUDA, extern __shared__ char smem[];)"}
{"predict": "(32, OpenCL, retVal = clEnqueueNDRangeKernel(pCmdQ, multiDeviceKernel.get(), 1, nullptr, globalWorkSize, nullptr, 0, nullptr, nullptr);); (20, OpenCL, retVal = clEnqueueMemcpyINTEL(pCmdQ, true, compressedDeviceMemAlloc1, bufferData, bufferSize, 0, nullptr, nullptr);); (14, OpenCL, retVal = clEnqueueMemcpyINTEL(pCmdQ, true, compressedDeviceMemAlloc2, bufferData, bufferSize, 0, nullptr, nullptr);); (37, OpenCL, retVal = clEnqueueMemcpyINTEL(pCmdQ, true, uncompressibleHostMemAlloc, compressedDeviceMemAlloc2, bufferSize, 0, nullptr, nullptr);)", "label": "(31, OpenCL, retVal = clEnqueueNDRangeKernel(pCmdQ, multiDeviceKernel.get(), 1, nullptr, globalWorkSize, nullptr, 0, nullptr, nullptr);); (20, OpenCL, retVal = clEnqueueMemcpyINTEL(pCmdQ, true, compressedDeviceMemAlloc1, bufferData, bufferSize, 0, nullptr, nullptr);); (14, OpenCL, retVal = clEnqueueMemcpyINTEL(pCmdQ, true, compressedDeviceMemAlloc2, bufferData, bufferSize, 0, nullptr, nullptr);); (37, OpenCL, retVal = clEnqueueMemcpyINTEL(pCmdQ, true, uncompressibleHostMemAlloc, compressedDeviceMemAlloc2, bufferSize, 0, nullptr, nullptr);)"}
{"predict": "(13, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (91, MPI, MPI_Allreduce(values, sums, 3, MPI_INT64_T, MPI_SUM, MPI_COMM_WORLD);); (120, MPI, MPI_Allreduce(&rc, &all_rc, 1, MPI_INT, MPI_MIN, MPI_COMM_WORLD);)", "label": "(77, MPI, mfu_copy_stats.wtime_ended = MPI_Wtime();); (12, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (24, MPI, mfu_copy_stats.wtime_started = MPI_Wtime();); (89, MPI, MPI_Allreduce(values, sums, 3, MPI_INT64_T, MPI_SUM, MPI_COMM_WORLD);); (120, MPI, MPI_Allreduce(&rc, &all_rc, 1, MPI_INT, MPI_MIN, MPI_COMM_WORLD);)"}
{"predict": "(179, CUDA, cudaMemcpy(z_cu, z, shape.Z_len * sizeof(DT), cudaMemcpyHostToDevice);); (271, CUDA, cudaFree(x_cu);); (172, CUDA, cudaMalloc(&x_cu, shape.X_len * sizeof(ST));); (175, CUDA, cudaMemcpy(y_cu, y, shape.Y_len * sizeof(ST), cudaMemcpyHostToDevice);); (173, CUDA, cudaMemcpy(x_cu, x, shape.X_len * sizeof(ST), cudaMemcpyHostToDevice);); (268, CUDA, cudaFree(y_cu);); (170, CUDA, cudaMalloc(&z_cu, shape.Z_len * sizeof(DT));); (168, CUDA, cudaMalloc(&y_cu, shape.Y_len * sizeof(ST));); (178, CUDA, CHECK_HIEDNN(hiednnCreateCudaHandle(&handle));); (270, CUDA, CHECK_HIEDNN(hiednnDestroyCudaHandle(handle));); (264, CUDA, cudaFree(z_cu);)", "label": "(169, CUDA, cudaMemcpy(z_cu, z, shape.Z_len * sizeof(DT), cudaMemcpyHostToDevice);); (261, CUDA, cudaFree(x_cu);); (162, CUDA, cudaMalloc(&x_cu, shape.X_len * sizeof(ST));); (165, CUDA, cudaMemcpy(y_cu, y, shape.Y_len * sizeof(ST), cudaMemcpyHostToDevice);); (163, CUDA, cudaMemcpy(x_cu, x, shape.X_len * sizeof(ST), cudaMemcpyHostToDevice);); (258, CUDA, cudaFree(y_cu);); (160, CUDA, cudaMalloc(&z_cu, shape.Z_len * sizeof(DT));); (158, CUDA, cudaMalloc(&y_cu, shape.Y_len * sizeof(ST));); (168, CUDA, CHECK_HIEDNN(hiednnCreateCudaHandle(&handle));); (260, CUDA, CHECK_HIEDNN(hiednnDestroyCudaHandle(handle));); (254, CUDA, cudaFree(z_cu);)"}
{"predict": "(36, MPI, MPI_Start(&req);); (13, MPI, MPI_Comm_size(comm, &size);); (28, MPI, MPI_Info_create(&info);); (34, MPI, MPI_Wait(&req, MPI_STATUS_IGNORE);); (47, MPI, MPI_Info_free(&info);); (28, MPI, MPI_Allgather_init(sbuf, count, MPI_INT, rbuf, count, MPI_INT, comm, info, &req);); (44, MPI, MPI_Request_free(&req);); (7, MPI, MPI_Comm_rank(comm, &rank);)", "label": "(36, MPI, MPI_Start(&req);); (13, MPI, MPI_Comm_size(comm, &size);); (28, MPI, MPI_Info_create(&info);); (34, MPI, MPI_Wait(&req, MPI_STATUS_IGNORE);); (48, MPI, MPI_Info_free(&info);); (45, MPI, MPI_Request_free(&req);); (27, MPI, MPI_Alltoall_init(sbuf, count, MPI_INT, rbuf, count, MPI_INT, comm, info, &req);); (8, MPI, MPI_Comm_rank(comm, &rank);)"}
{"predict": "(28, TBB, tbb::task_arena* result_arena = allocate_and_construct<tbb::task_arena>( dummy_max_concurrency, dummy_reserved_for_masters );); (17, TBB, tbb::task_arena* result_arena = allocate_and_construct<tbb::task_arena>( arena_args... );)", "label": "(30, TBB, result_arena = new tbb::task_arena(tmp);); (18, TBB, result_arena = new tbb::task_arena( arena_args... );); (12, TBB, tbb::task_arena* result_arena = nullptr;); (26, TBB, tbb::task_arena tmp(dummy_max_concurrency, dummy_reserved_for_masters);); (19, TBB, result_arena = new tbb::task_arena;)"}
{"predict": "(5, TBB, tbb::concurrent_hash_map<int, int> a_ch_map;)", "label": "(4, TBB, using ch_map = tbb::concurrent_hash_map<int,int>;)"}
{"predict": "(34, MPI, rc = MPI_Type_get_extent(obj->DTP_datatype, &lb, &extent);); (30, MPI, rc = MPI_Type_get_true_extent(obj->DTP_datatype, &true_lb, &true_extent);)", "label": "(32, MPI, rc = MPI_Type_get_true_extent(obj->DTP_datatype, &true_lb, &true_extent);); (22, MPI, rc = MPI_Type_commit(&obj->DTP_datatype);); (32, MPI, rc = MPI_Type_get_extent(obj->DTP_datatype, &lb, &extent);)"}
{"predict": "(14, MPI, MPI_Comm_size(comm, &size);); (71, MPI, err = MPI_Wait(&req, &status);); (33, MPI, MPI_Comm_set_errhandler(comm, MPI_ERRORS_RETURN);); (10, MPI, MPI_Comm_rank(comm, &rank);)", "label": "(73, MPI, err = MPI_Wait(&req, &status);); (13, MPI, MPI_Comm_size(comm, &size);); (34, MPI, MPI_Comm_set_errhandler(comm, MPI_ERRORS_RETURN);); (10, MPI, MPI_Comm_rank(comm, &rank);)"}
{"predict": "(5, OpenMP, #pragma omp parallel master taskloop); (1, OpenMP, #pragma omp parallel)", "label": "(2, OpenMP, #pragma omp parallel); (4, OpenMP, #pragma omp parallel master taskloop)"}
{"predict": "(24, MPI, MPI_Barrier(scr_comm_world);); (60, MPI, double time_end = MPI_Wtime();); (35, MPI, time_start = MPI_Wtime();)", "label": "(24, MPI, MPI_Barrier(scr_comm_world);); (60, MPI, double time_end = MPI_Wtime();); (35, MPI, time_start = MPI_Wtime();)"}
{"predict": "(10, OpenMP, #pragma omp target data map(tofrom: i) use_device_ptr(k) use_device_addr(i,j)); (14, OpenMP, #pragma omp target data map(tofrom: i) use_device_ptr(z) use_device_addr(i,j,k[:i]))", "label": "(9, OpenMP, #pragma omp target data map(tofrom: i) use_device_ptr(k) use_device_addr(i, j)); (13, OpenMP, #pragma omp target data map(tofrom: i) use_device_ptr(z) use_device_addr(i, j, k[:i]))"}
{"predict": "(24, MPI, MPI_Comm_rank(MPI_COMM_WORLD,&rank);); (61, MPI, MPI_Barrier(MPI_COMM_WORLD);); (60, MPI, MPI_Reduce(&counter, &totalNum, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);)", "label": "(2, MPI, MPI_Init(&argc, &argv);); (86, MPI, MPI_Finalize();); (23, MPI, MPI_Comm_rank(MPI_COMM_WORLD,&rank);); (61, MPI, MPI_Barrier(MPI_COMM_WORLD);); (59, MPI, MPI_Reduce(&counter, &totalNum, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);)"}
{"predict": "(67, OpenCL, clReleaseMemObject(mem[i]);)", "label": "(67, OpenCL, clReleaseMemObject(mem[i]);)"}
{"predict": "(156, CUDA, Candidates.push_back(Candidate(Path, true));); (184, CUDA, if (FS.exists(AtiPath + \"/bin/atiptx.exe\")) Candidates.push_back(Candidate(AtiPath));)", "label": "(123, CUDA, std::string GpuArchName(CudaArchToString(GpuArch));)"}
{"predict": "(19, CUDA, cudaMallocHost((void**)&src_host, sizeof(float) * size);); (31, CUDA, cudaDeviceSynchronize();); (19, CUDA, cudaMallocHost((void**)&tar_host, sizeof(float) * size);); (42, CUDA, cudaFreeHost(tar_host);); (39, CUDA, cudaFreeHost(src_host);)", "label": "(19, CUDA, cudaMallocHost(&tar_host, size * sizeof(float));); (17, CUDA, cudaMallocHost(&src_host, size * sizeof(float));)"}
{"predict": "(63, OpenMP, #define OP_GOMP_CRITICAL_READ(OP, FLAG))", "label": "(63, OpenMP, #define OP_GOMP_CRITICAL_READ(OP, FLAG))"}
{"predict": "(2, OpenMP, omp_autotune(self, OMP_SCALE);)", "label": "(2, OpenMP, omp_autotune(self, OMP_SCALE);)"}
{"predict": "(3, OpenMP, #pragma omp target teams distribute parallel for collapse(2) debug(2))", "label": "(3, OpenMP, #pragma omp parallel num_threads(2)); (12, OpenMP, #pragma omp ordered depend(source)); (7, OpenMP, #pragma omp ordered depend(sink : i - 1, j) depend(sink : i, j - 1)); (1, OpenMP, #pragma omp for ordered(2))"}
{"predict": "(3, OpenMP, #pragma omp parallel); (3, OpenMP, #pragma omp taskloop)", "label": "(3, OpenMP, #pragma omp parallel); (3, OpenMP, #pragma omp taskloop)"}
{"predict": "(13, MPI, MPI_Wait(&request, &status);); (6, MPI, MPI_Isend(p->buff, p->bufflen, MPI_BYTE, p->prot.nbor, 1, MPI_COMM_WORLD, &request);); (10, MPI, MPI_Irecv(p->buff1, p->bufflen, MPI_BYTE, p->prot.nbor, 1, MPI_COMM_WORLD, &request);)", "label": "(9, MPI, MPI_Wait(&request, &status);); (6, MPI, MPI_Irecv(p->buff1, p->bufflen, MPI_BYTE, p->prot.nbor, 1, MPI_COMM_WORLD, &request);); (6, MPI, MPI_Send(p->buff, p->bufflen, MPI_BYTE, p->prot.nbor, 1, MPI_COMM_WORLD);)"}
{"predict": "(23, OpenMP, omp_target_free(d_a, omp_get_default_device());); (13, OpenMP, d_a = (int *)omp_target_alloc(DataSize, omp_get_default_device());); (15, OpenMP, omp_target_associate_ptr(p_a, d_a, DataSize, 0, omp_get_default_device());); (17, OpenMP, omp_target_disassociate_ptr(p_a, omp_get_default_device());)", "label": "(16, OpenMP, omp_target_associate_ptr(p_a, d_a, DataSize, 0, omp_get_default_device());); (21, OpenMP, omp_target_free(d_a, omp_get_default_device());); (12, OpenMP, d_a = (int *)omp_target_alloc(DataSize, omp_get_default_device());); (17, OpenMP, omp_target_disassociate_ptr(p_a, omp_get_default_device());)"}
{"predict": "(50, OpenMP, EXPECT_TRUE(check_test_image(output_file, t_apcomp_baseline_dir()));); (10, MPI, MPI_Comm_rank(comm, &par_rank);); (10, MPI, MPI_Comm_size(comm, &par_size);)", "label": "(50, OpenMP, EXPECT_TRUE(check_test_image(output_file, t_apcomp_baseline_dir()));); (9, MPI, MPI_Comm_rank(comm, &par_rank);); (10, MPI, apcomp::mpi_comm(MPI_Comm_c2f(comm));); (8, MPI, MPI_Comm_size(comm, &par_size);)"}
{"predict": "(40, MPI, MPI_Waitall(1, &request, MPI_STATUSES_IGNORE);); (26, MPI, MPI_Waitall(1, &request, &status);); (16, MPI, MPI_Abort(MPI_COMM_WORLD, 1);); (20, MPI, MPI_Grequest_start(query_fn, free_fn, cancel_fn, NULL, &request);)", "label": "(27, MPI, MPI_Wait(&request, &status);); (40, MPI, MPI_Waitall(1, &request, &status);); (16, MPI, MPI_Abort(MPI_COMM_WORLD, 1);); (31, MPI, MPI_Waitsome(1, &request, &outcount, indices, &status);); (19, MPI, MPI_Grequest_start(query_fn, free_fn, cancel_fn, NULL, &request);)"}
{"predict": "(6, OpenMP, omp_set_dynamic(0);)", "label": "(6, OpenMP, omp_set_dynamic(0);)"}
{"predict": "(14, CUDA, qmc_cuda::cuda_check(cudaDeviceSynchronize());); (12, CUDA, qmc_cuda::cuda_check(cudaGetLastError());)", "label": "(14, CUDA, qmc_cuda::cuda_check(cudaDeviceSynchronize());); (12, CUDA, qmc_cuda::cuda_check(cudaGetLastError());)"}
{"predict": "(6, TBB, tbb::flow::queue_node< q3_input_type >  q3(g);); (7, TBB, tbb::flow::make_edge( q3, my_split );)", "label": "(6, TBB, tbb::flow::queue_node< q3_input_type >  q3(g);); (7, TBB, tbb::flow::make_edge( q3, my_split );)"}
{"predict": "(3, CUDA, cudaGetDevice(&device_id);); (3, CUDA, cudaGetDeviceProperties(&device_prop, device_id);)", "label": "(3, CUDA, cudaGetDevice(&device_id);); (3, CUDA, cudaGetDeviceProperties(&device_prop, device_id);)"}
{"predict": "(5, OpenMP, #pragma omp atomic); (13, OpenMP, #pragma omp atomic nonexclusive)", "label": "(3, OpenMP, #pragma omp atomic)"}
{"predict": "(18, MPI, timers[t] = MPI_Wtime();); (4, MPI, MPI_Type_size(sdt, &outsize);); (21, MPI, timers[t] = (MPI_Wtime() - timers[t]) / cycles;); (10, MPI, MPI_Pack(sbuf, scount, sdt, packed_buf, outsize, &position, MPI_COMM_WORLD);); (4, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &myself);)", "label": "(18, MPI, timers[t] = MPI_Wtime();); (22, MPI, timers[t] = (MPI_Wtime() - timers[t]) / cycles;); (11, MPI, MPI_Pack(sbuf, scount, sdt, packed_buf, outsize, &position, MPI_COMM_WORLD);); (2, MPI, MPI_Type_size(sdt, &outsize);); (4, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &myself);)"}
{"predict": "(26, OpenMP, #pragma omp target parallel device(global + a) depend(in); (102, OpenMP, #pragma omp target parallel if (0) firstprivate(global) depend(out); (84, OpenMP, #pragma omp target parallel device(global + a) nowait depend(inout)", "label": "(86, OpenMP, #pragma omp target teams device(global + a) nowait depend(inout); (25, OpenMP, #pragma omp target teams device(global + a) depend(in); (100, OpenMP, #pragma omp target teams if (0) firstprivate(global) depend(out)"}
{"predict": "(15, CUDA, qmc_cuda::cuda_check(cudaGetLastError(), \"batched_dot_wabn_wban\");); (15, CUDA, qmc_cuda::cuda_check(cudaDeviceSynchronize(), \"batched_dot_wabn_wban\");)", "label": "(16, CUDA, qmc_cuda::cuda_check(cudaDeviceSynchronize(), \"batched_dot_wabn_wban\");); (14, CUDA, qmc_cuda::cuda_check(cudaGetLastError(), \"batched_dot_wabn_wban\");)"}
{"predict": "(48, CUDA, __shared__ TB smemB[cosize_v<BSmemLayout>];); (46, CUDA, __shared__ TA smemA[cosize_v<ASmemLayout>];)", "label": "(48, CUDA, __shared__ TB smemB[cosize_v<BSmemLayout>];); (46, CUDA, __shared__ TA smemA[cosize_v<ASmemLayout>];)"}
{"predict": "(38, CUDA, checkCudaErrors(cudaDeviceSynchronize());); (42, CUDA, getLastCudaError(\"Kernel execution failed\");); (11, CUDA, checkCudaErrors(cudaMallocPitch((void **)(&src), &DeviceStride, Size.width * sizeof(float), Size.height));); (78, CUDA, checkCudaErrors(cudaFree(src));); (44, CUDA, checkCudaErrors(cudaMemcpy2D(ImgF1, StrideF * sizeof(float), dst, DeviceStride * sizeof(float), Size.width * sizeof(float), Size.height, cudaMemcpyDeviceToHost));); (76, CUDA, checkCudaErrors(cudaFree(dst));); (8, CUDA, checkCudaErrors(cudaMallocPitch((void **)(&dst), &DeviceStride, Size.width * sizeof(float), Size.height));)", "label": "(13, CUDA, checkCudaErrors(cudaMallocPitch((void **)&src, &DeviceStride, Size.width * sizeof(float), Size.height));); (79, CUDA, checkCudaErrors(cudaFree(src));); (12, CUDA, checkCudaErrors(cudaMallocPitch((void **)&dst, &DeviceStride, Size.width * sizeof(float), Size.height));); (35, CUDA, checkCudaErrors(cudaDeviceSynchronize());); (40, CUDA, getLastCudaError(\"Kernel execution failed\");); (74, CUDA, checkCudaErrors(cudaFree(dst));)"}
{"predict": "(14, OpenMP, #pragma omp taskloop simd shared(c) num_tasks(a) simdlen(8) safelen(64))", "label": "(14, OpenMP, #pragma omp master taskloop shared(c) num_tasks(a))"}
{"predict": "(35, CUDA, __shared__ _VOLATILE_ float bSmem[16][128+4];); (33, CUDA, __shared__ _VOLATILE_ float aSmem[16][128+4];)", "label": "(35, CUDA, __shared__ _VOLATILE_ float bSmem[16][128+4];); (33, CUDA, __shared__ _VOLATILE_ float aSmem[16][128+4];)"}
{"predict": "(2, OpenMP, #pragma omp parallel); (3, OpenMP, #pragma omp master taskloop simd)", "label": "(4, OpenMP, #pragma omp master taskloop simd); (1, OpenMP, #pragma omp parallel)"}
{"predict": "(27, CUDA, cudaMalloc((void**)&deviceA, size);); (27, CUDA, cudaMalloc((void**)&deviceC, size);); (41, CUDA, cudaMemcpy(hostC, deviceC, size, cudaMemcpyDeviceToHost);); (55, CUDA, cudaFree(deviceB);); (53, CUDA, cudaFree(deviceA);); (22, CUDA, cudaMalloc((void**)&deviceB, size);); (48, CUDA, cudaFree(deviceC);); (25, CUDA, cudaMemcpy(deviceA, hostA, size, cudaMemcpyHostToDevice);); (25, CUDA, cudaMemcpy(deviceB, hostB, size, cudaMemcpyHostToDevice);)", "label": "(28, CUDA, cudaMalloc((void**)&deviceC, size);); (55, CUDA, cudaFree(deviceB);); (40, CUDA, cudaMemcpy(hostC, deviceC, size, cudaMemcpyDeviceToHost);); (54, CUDA, cudaFree(deviceC);); (51, CUDA, cudaFree(deviceA);); (22, CUDA, cudaMalloc((void**)&deviceB, size);); (25, CUDA, cudaMemcpy(deviceA, hostA, size, cudaMemcpyHostToDevice);); (25, CUDA, cudaMemcpy(deviceB, hostB, size, cudaMemcpyHostToDevice);); (18, CUDA, cudaMalloc((void**)&deviceA, size);)"}
{"predict": "(77, MPI, MPI_Comm_size(fd->comm, &nprocs);); (77, MPI, MPI_Comm_rank(fd->comm, &myrank);)", "label": "(77, MPI, MPI_Comm_size(fd->comm, &nprocs);); (77, MPI, MPI_Comm_rank(fd->comm, &myrank);)"}
{"predict": "(13, OpenMP, omp_set_dynamic(0);); (14, OpenMP, sched = omp_get_schedule();); (12, OpenMP, omp_set_schedule(ref_sched, ref_chunk);); (19, OpenMP, omp_set_schedule(sched, chunk);); (12, OpenMP, ref_sched = omp_get_schedule();)", "label": "(11, OpenMP, ref_sched = str2omp_sched(argv[2]);); (13, OpenMP, omp_get_schedule(&sched, &chunk);)"}
{"predict": "(8, CUDA, cudaDeviceSynchronize();); (6, CUDA, getLastCudaError(\"launch_kernel failed\");)", "label": "(7, CUDA, cudaDeviceSynchronize();); (7, CUDA, getLastCudaError(\"launch_kernel failed\");)"}
{"predict": "(6, TBB, tbb::global_control c(tbb::global_control::max_allowed_parallelism, 2);)", "label": "(6, TBB, tbb::global_control global_limit(tbb::global_control::max_allowed_parallelism, idx);)"}
{"predict": "(7, CUDA, __shared__ DT labels[BW * BH * BD];)", "label": "(5, CUDA, __shared__ DT labels[BW * BH * BD];)"}
{"predict": "(12, CUDA, RX_CHECK(ctx->d_scratchpads = cudaMalloc(ctx->d_scratchpads_size, 1));); (13, CUDA, RX_CHECK(ctx->d_ctx_state = cudaMalloc(ctx->d_ctx_state_size, 1));); (9, CUDA, RX_CHECK(ctx->d_dataset = cudaMalloc(ctx->d_dataset_size, 1));); (9, CUDA, RX_CHECK(cudaMemcpy(ctx->d_dataset, dataset, dataset_size, cudaMemcpyHostToDevice));); (4, CUDA, RX_CHECK(ctx->d_rx_rounding = cudaMalloc(ctx->d_rx_rounding_size, 1));); (1, CUDA, RX_CHECK(ctx->d_scratch = cudaMalloc(ctx->d_scratch_size, 1));); (13, CUDA, RX_CHECK(ctx->d_ctx_a = cudaMalloc(ctx->d_ctx_a_size, 1));); (14, CUDA, RX_CHECK(ctx->d_ctx_text = cudaMalloc(ctx->d_ctx_text_size, 1));); (10, CUDA, RX_CHECK(ctx->d_ctx_key1 = cudaMalloc(ctx->d_ctx_key1_size, 1));); (6, CUDA, RX_CHECK(ctx->d_rx_vm_states = cudaMalloc(ctx->d_rx_vm_states_size, 1));); (10, CUDA, RX_CHECK(ctx->d_ctx_key2 = cudaMalloc(ctx->d_ctx_key2_size, 1));)", "label": "(9, CUDA, CUDA_CHECK(ctx->device_id, cudaMalloc(&ctx->d_rx_dataset, dataset_size));); (15, CUDA, CUDA_CHECK(ctx->device_id, cudaMalloc(&ctx->d_rx_vm_states, batch_size * 2560));); (4, CUDA, CUDA_CHECK(ctx->device_id, cudaHostGetDevicePointer(&ctx->d_rx_dataset, const_cast<void *>(dataset), 0));); (7, CUDA, CUDA_CHECK(ctx->device_id, cudaMemcpy(ctx->d_rx_dataset, dataset, dataset_size, cudaMemcpyHostToDevice));); (11, CUDA, CUDA_CHECK(ctx->device_id, cudaMalloc(&ctx->d_rx_entropy, batch_size * (128 + 2560)));); (12, CUDA, CUDA_CHECK(ctx->device_id, cudaMalloc(&ctx->d_rx_rounding, batch_size * sizeof(uint32_t)));); (8, CUDA, CUDA_CHECK(ctx->device_id, cudaMalloc(&ctx->d_rx_hashes, batch_size * 64));); (6, CUDA, CUDA_CHECK(ctx->device_id, cudaMalloc(&ctx->d_long_state, ctx->d_scratchpads_size));)"}
{"predict": "(39, CUDA, cudaFree(res_dev);); (32, CUDA, cudaMalloc(&res_dev, sizeof(float));); (34, CUDA, cudaMemcpy(&res_host, res_dev, sizeof(float), cudaMemcpyDeviceToHost);)", "label": "(39, CUDA, cudaFree(res_dev);); (32, CUDA, cudaMalloc(&res_dev, sizeof(float));); (34, CUDA, cudaMemcpy(&res_host, res_dev, sizeof(float), cudaMemcpyDeviceToHost);)"}
{"predict": "(15, MPI, MPI_Error_string(err, msg, &len);); (7, MPI, err = MPI_Probe(MPI_ANY_SOURCE, MPI_ANY_TAG, MPI_COMM_WORLD, &status);)", "label": "(16, MPI, MPI_Error_string(err, msg, &len);); (8, MPI, err = MPI_Probe(-80, 1, MPI_COMM_WORLD, &status);); (5, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);)"}
{"predict": "(56, OpenMP, #pragma omp target teams distribute parallel for simd); (86, OpenMP, elapsed_time = omp_get_wtime() - start_time;); (51, OpenMP, start_time = omp_get_wtime();); (81, OpenMP, #pragma omp target exit data map(from: xold[0 : Ndim], xnew[0 : Ndim])); (37, OpenMP, #pragma omp target enter data map(to: xold[0 : Ndim], xnew[0 : Ndim],); (45, OpenMP, #pragma omp target); (63, OpenMP, #pragma omp target teams distribute parallel for simd reduction(+ : conv))", "label": "(69, OpenMP, #pragma omp target map(tofrom : conv)); (87, OpenMP, elapsed_time = omp_get_wtime() - start_time;); (53, OpenMP, #pragma omp teams distribute parallel for simd); (83, OpenMP, #pragma omp target exit data map(from : xold[0 : Ndim], xnew[0 : Ndim])); (37, OpenMP, start_time = omp_get_wtime();); (43, OpenMP, #pragma omp target enter data map(to : xold[0 : Ndim], xnew[0 : Ndim],); (48, OpenMP, #pragma omp target); (63, OpenMP, #pragma omp teams distribute parallel for simd reduction(+ : conv))"}
{"predict": "(16, CUDA, CUDA_CHECK(cudaGetLastError());)", "label": "(16, CUDA, CUDA_CHECK(cudaGetLastError());)"}
{"predict": "(55, CUDA, result = cudaFree(0);); (56, CUDA, errPtr = cudaGetErrorName(result);); (292, CUDA, DPRINTF(\"Error in synchronizing stream = %s\\n\", cudaGetErrorName(result));); (199, CUDA, result = cudaMalloc(&inputBufferGPU, inputTensorDesc[0].size);); (89, CUDA, result = cudaStreamCreateWithFlags(&stream, cudaStreamNonBlocking);); (57, CUDA, result = cudaSetDevice(0);); (205, CUDA, result = cudaMalloc(&outputBufferGPU, outputTensorDesc[0].size);); (285, CUDA, result = cudaStreamSynchronize(stream);); (212, CUDA, result = cudaMemcpy(inputBufferGPU, inputBuffer, inputTensorDesc[0].size, cudaMemcpyHostToDevice);)", "label": "(55, CUDA, result = cudaFree(0);); (56, CUDA, errPtr = cudaGetErrorName(result);); (320, CUDA, cudaFree(outputBufferGPU);); (318, CUDA, cudaFree(inputBufferGPU);); (205, CUDA, result = cudaMalloc(&inputBufferGPU, inputTensorDesc[0].size);); (88, CUDA, result = cudaStreamCreateWithFlags(&stream, cudaStreamNonBlocking);); (56, CUDA, result = cudaSetDevice(0);); (211, CUDA, result = cudaMalloc(&outputBufferGPU, outputTensorDesc[0].size);); (324, CUDA, result = cudaStreamDestroy(stream);); (282, CUDA, result = cudaStreamSynchronize(stream);)"}
{"predict": "(49, CUDA, thrust::host_vector<TB> h_B(n*k);); (4, CUDA, std::cerr << \"cudaGetDeviceProperties() returned an error: \" << cudaGetErrorString(error) << std::endl;); (1, CUDA, cudaError_t error = cudaGetDeviceProperties(&props, 0);); (55, CUDA, thrust::device_vector<TC> d_C = h_C;); (46, CUDA, thrust::host_vector<TC> h_C(m*n);); (52, CUDA, thrust::device_vector<TB> d_B = h_B;); (86, CUDA, thrust::host_vector<TC> cute_result = d_C;); (49, CUDA, thrust::device_vector<TA> d_A = h_A;); (40, CUDA, thrust::host_vector<TA> h_A(m*k);)", "label": "(49, CUDA, thrust::host_vector<TB> h_B(n*k);); (4, CUDA, std::cerr << \"cudaGetDeviceProperties() returned an error: \" << cudaGetErrorString(error) << std::endl;); (1, CUDA, cudaError_t error = cudaGetDeviceProperties(&props, 0);); (55, CUDA, thrust::device_vector<TC> d_C = h_C;); (46, CUDA, thrust::host_vector<TC> h_C(m*n);); (52, CUDA, thrust::device_vector<TB> d_B = h_B;); (86, CUDA, thrust::host_vector<TC> cute_result = d_C;); (49, CUDA, thrust::device_vector<TA> d_A = h_A;); (40, CUDA, thrust::host_vector<TA> h_A(m*k);)"}
{"predict": "(6, OpenMP, #pragma omp target map(tofrom : counter_N0)); (7, OpenMP, #pragma omp teams distribute parallel for reduction(+ : counter_N0))", "label": "(8, OpenMP, #pragma omp taskloop shared(counter_N0)); (5, OpenMP, #pragma omp target data map(tofrom : counter_N0)); (8, OpenMP, #pragma omp target teams distribute parallel for map(tofrom : counter_N0) nowait); (9, OpenMP, #pragma omp atomic update)"}
{"predict": "(204, MPI, MPI_Send(&ARRAY(end,j), 1, MPI_DOUBLE, my_ID+1, j, MPI_COMM_WORLD);); (208, MPI, MPI_Send(&ARRAY(end,j), 1, MPI_DOUBLE, my_ID+1, jj, MPI_COMM_WORLD);); (134, MPI, MPI_Bcast(&m,          1, MPI_INT, root, MPI_COMM_WORLD);); (88, MPI, MPI_Bcast(&iterations, 1, MPI_INT, root, MPI_COMM_WORLD);); (135, MPI, MPI_Bcast(&n,          1, MPI_INT, root, MPI_COMM_WORLD);); (136, MPI, MPI_Bcast(&grp,        1, MPI_INT, root, MPI_COMM_WORLD);); (231, MPI, MPI_Recv(&(ARRAY(0,0)),1,MPI_DOUBLE,root,888,MPI_COMM_WORLD,&status);); (203, MPI, MPI_Send(&ARRAY(end,j), 1, MPI_DOUBLE, my_ID+1, j+1, MPI_COMM_WORLD);); (193, MPI, MPI_Recv(inbuf, jjsize, MPI_DOUBLE, my_ID-1, j, MPI_COMM_WORLD, &status);); (206, MPI, MPI_Recv(inbuf, jjsize, MPI_DOUBLE, my_ID-1, jj, MPI_COMM_WORLD, &status);); (144, MPI, MPI_Barrier(MPI_COMM_WORLD);); (195, MPI, MPI_Send(outbuf, jjsize, MPI_DOUBLE, my_ID+1, j, MPI_COMM_WORLD);); (16, MPI, MPI_Init(&argc,&argv);); (233, MPI, MPI_Finalize();); (185, MPI, MPI_Send(outbuf, jjsize, MPI_DOUBLE, my_ID+1, j+1, MPI_COMM_WORLD);); (135, MPI, MPI_Bcast(&start,      1, MPI_INT, root, MPI_COMM_WORLD);); (135, MPI, MPI_Bcast(&end,        1, MPI_INT, root, MPI_COMM_WORLD);); (10, MPI, MPI_Comm_size(MPI_COMM_WORLD, &Num_procs);); (132, MPI, MPI_Bcast(&segment_size, 1, MPI_INT, root, MPI_COMM_WORLD);); (6,", "label": "(177, MPI, MPI_Recv(inbuf, jjsize, MPI_DOUBLE, my_ID-1, j, MPI_COMM_WORLD, &status);); (88, MPI, MPI_Bcast(&m,          1, MPI_INT, root, MPI_COMM_WORLD);); (88, MPI, MPI_Bcast(&n,          1, MPI_INT, root, MPI_COMM_WORLD);); (89, MPI, MPI_Bcast(&iterations, 1, MPI_INT, root, MPI_COMM_WORLD);); (241, MPI, MPI_Finalize();); (163, MPI, MPI_Send(&(ARRAY(end,j)), 1, MPI_DOUBLE, my_ID+1, j, MPI_COMM_WORLD);); (195, MPI, MPI_Send(&corner_val,1,MPI_DOUBLE,0,888,MPI_COMM_WORLD);); (197, MPI, MPI_Recv(&(ARRAY(0,0)),1,MPI_DOUBLE,root,888,MPI_COMM_WORLD,&status);); (18, MPI, MPI_Init(&argc,&argv);); (183, MPI, MPI_Send(outbuf, jjsize, MPI_DOUBLE, my_ID+1, j, MPI_COMM_WORLD);); (138, MPI, MPI_Barrier(MPI_COMM_WORLD);); (17, MPI, MPI_Comm_size(MPI_COMM_WORLD, &Num_procs);); (79, MPI, MPI_Bcast(&grp,        1, MPI_INT, root, MPI_COMM_WORLD);); (14, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &my_ID);)"}
{"predict": "(9, TBB, oneapi::tbb::range<DimAmount> r(data.range());)", "label": "(10, TBB, range_t r = utils_t::make_range((1 << (20 / DimAmount - 1)) - DimAmount, false, &MakeInt, oneapi::tbb::detail::make_index_sequence<DimAmount>());); (1, TBB, using range_t = oneapi::tbb::blocked_nd_range<int, DimAmount>;)"}
{"predict": "(43, MPI, MPI_Send( recvbuf, knsupc * nrhs, MPI_FLOAT, receiver, k,  grid3d->zscp.comm);); (51, MPI, MPI_Recv( recvbuf, knsupc * nrhs, MPI_FLOAT, sender, k, grid3d->zscp.comm, &status );)", "label": "(52, MPI, MPI_Recv( recvbuf, knsupc * nrhs, MPI_FLOAT, sender, k, grid3d->zscp.comm, &status );); (42, MPI, MPI_Send( recvbuf, knsupc * nrhs, MPI_FLOAT, receiver, k,  grid3d->zscp.comm);)"}
{"predict": "(33, MPI, MPI_Barrier(scr_comm_world);)", "label": "(33, MPI, MPI_Barrier(scr_comm_world);)"}
{"predict": "(27, CUDA, cudaGridDependencySynchronize();); (85, CUDA, cudaTriggerProgrammaticLaunchCompletion();)", "label": "(27, CUDA, cudaGridDependencySynchronize();); (85, CUDA, cudaTriggerProgrammaticLaunchCompletion();)"}
{"predict": "(16, OpenCL, context = clCreateContext(nullptr, 1, &device, nullptr, nullptr, &error);)", "label": "(16, OpenCL, context = clCreateContext(nullptr, 1, &device, nullptr, nullptr, &error);)"}
{"predict": "(24, OpenCL, clReleaseEvent(event);)", "label": "(24, OpenCL, clReleaseEvent(event);)"}
{"predict": "(25, CUDA, extern __shared__ __align__(sizeof(MoveEltType)) char loadSmemBuffer[];)", "label": "(31, CUDA, __shared__ char loadSmemBuffer[kUpdateKVCacheKernelShmSize];)"}
{"predict": "(5, OpenMP, #pragma omp target teams distribute parallel for collapse(3)); (19, OpenMP, #pragma omp target teams distribute parallel for collapse(3) map(from: u0_real, u0_imag, u1_real, u1_imag))", "label": "(6, OpenMP, #pragma omp teams distribute); (7, OpenMP, #pragma omp parallel for); (8, OpenMP, #pragma omp simd); (1, OpenMP, #pragma omp target map (alloc: u0_real,u0_imag,u1_real,u1_imag,twiddle))"}
{"predict": "(17, MPI, MPIT_result = MPI_T_pvar_session_create(session);); (12, MPI, MPIT_result = MPI_T_init_thread(MPI_THREAD_SINGLE, &provided);); (14, MPI, MPI_Abort(MPI_COMM_WORLD, MPIT_result);)", "label": "(16, MPI, MPI_Abort(MPI_COMM_WORLD, MPIT_result);); (17, MPI, MPIT_result = MPI_T_pvar_session_create(session);); (11, MPI, MPIT_result = MPI_T_init_thread(MPI_THREAD_SINGLE, &provided);)"}
{"predict": "(11, OpenCL, void *mappedPtr = clEnqueueMapBuffer(cmdQ.get(), buffer.get(), CL_FALSE, CL_MAP_WRITE, offset, size, 1, &clMapEvent, nullptr, &retVal);); (18, OpenCL, retVal = clEnqueueUnmapMemObject(cmdQ.get(), buffer.get(), mappedPtr, 1, &clUnmapEvent, nullptr);)", "label": "(19, OpenCL, retVal = clEnqueueUnmapMemObject(cmdQ.get(), buffer.get(), mappedPtr, 1, &clUnmapEvent, nullptr);); (10, OpenCL, void *mappedPtr = clEnqueueMapBuffer(cmdQ.get(), buffer.get(), CL_FALSE, CL_MAP_WRITE, offset, size, 1, &clMapEvent, nullptr, &retVal);)"}
{"predict": "(35, TBB, tbb::parallel_reduce( tbb::blocked_range<size_t>(0,N,1024), reduce );); (5, TBB, tbb::task_scheduler_init init(tbb::task_scheduler_init::default_num_threads());); (112, TBB, tbb::task_scheduler_init init(128);); (6, TBB, tbb::parallel_for (tbb::blocked_range<size_t>(0,N,10),my_body());); (35, TBB, tbb::affinity_partitioner aff;); (35, TBB, tbb::parallel_reduce( tbb::blocked_range<size_t>(0,N,1024), reduce, aff );); (136, TBB, tbb::parallel_for (tbb::blocked_range<size_t>(0,N,10),reduce_my(tbb::auto_partitioner()));); (2, TBB, double t0 = getSeconds();); (21, TBB, tbb::task_scheduler_init init(128);); (32, TBB, tbb::parallel_for (tbb::blocked_range<size_t>(0,N,10),reduce_my(aff));); (134, TBB, tbb::parallel_reduce( tbb::blocked_range<size_t>(0,N,1024), reduce_my(tbb::auto_partitioner()), aff );)", "label": "(62, TBB, PRINT( tbb::TBB_runtime_interface_version() );); (68, TBB, while (tracker.get_concurrency() < tbb::task_scheduler_init::default_num_threads()) tbb_pi<double> (N);); (11, TBB, tbb::task_scheduler_init init(tbb::task_scheduler_init::default_num_threads());); (82, TBB, TaskSchedulerTBB::create(0);); (90, TBB, TaskSchedulerTBB::destroy();)"}
{"predict": "(10, OpenMP, #pragma omp target enter data map(to:W[0:M])); (16, OpenMP, #pragma omp target teams distribute parallel for); (20, OpenMP, #pragma omp target exit data map(from:W[0:M])); (3, OpenMP, clock_gettime(CLOCK_REALTIME, &t0);); (5, OpenMP, #pragma omp target map(tofrom:t1,t2,t3,t4,t5))", "label": "(7, OpenMP, #pragma omp target data map(tofrom: W[:M])); (12, OpenMP, #pragma omp target teams); (12, OpenMP, #pragma omp distribute parallel for)"}
{"predict": "(66, MPI, MPI_Bcast( ToRecv, nsupers, MPI_INT, 0,  grid3d->zscp.comm);); (39, MPI, MPI_Bcast( supno, n, mpi_int_t, 0,  grid3d->zscp.comm);); (27, MPI, MPI_Bcast( &nsupers, 1, mpi_int_t, 0,  grid3d->zscp.comm);); (69, MPI, MPI_Bcast( ToSendR[i], Pc, MPI_INT, 0,  grid3d->zscp.comm);); (11, MPI, MPI_Bcast( etree, n, mpi_int_t, 0,  grid3d->zscp.comm);); (233, MPI, MPI_Bcast(*((void**)&(Llu->fsendx_plist[lk])), Pr * sizeof (int), MPI_BYTE, 0, grid3d->zscp.comm);); (84, MPI, MPI_Bcast( &(Llu->ldalsum), 1, mpi_int_t, 0,  grid3d->zscp.comm);); (61, MPI, MPI_Bcast( ToSendD, nbr, MPI_INT, 0,  grid3d->zscp.comm);); (29, MPI, MPI_Bcast( xsup, nsupers + 1, mpi_int_t, 0,  grid3d->zscp.comm);); (80, MPI, MPI_Bcast( &(Llu->nbsendx), 1, MPI_INT, 0,  grid3d->zscp.comm);); (78, MPI, MPI_Bcast( &(Llu->nfsendx), 1, MPI_INT, 0,  grid3d->zscp.comm);); (45, MPI, MPI_Bcast( bufmax, NBUFFERS, mpi_int_t, 0,  grid3d->zscp.comm);)", "label": "(66, MPI, MPI_Bcast( ToRecv, nsupers, MPI_INT, 0,  grid3d->zscp.comm);); (39, MPI, MPI_Bcast( supno, n, mpi_int_t, 0,  grid3d->zscp.comm);); (27, MPI, MPI_Bcast( &nsupers, 1, mpi_int_t, 0,  grid3d->zscp.comm);); (69, MPI, MPI_Bcast( ToSendR[i], Pc, MPI_INT, 0,  grid3d->zscp.comm);); (11, MPI, MPI_Bcast( etree, n, mpi_int_t, 0,  grid3d->zscp.comm);); (233, MPI, MPI_Bcast(*((void**)&(Llu->fsendx_plist[lk])), Pr * sizeof (int), MPI_BYTE, 0, grid3d->zscp.comm);); (84, MPI, MPI_Bcast( &(Llu->ldalsum), 1, mpi_int_t, 0,  grid3d->zscp.comm);); (61, MPI, MPI_Bcast( ToSendD, nbr, MPI_INT, 0,  grid3d->zscp.comm);); (29, MPI, MPI_Bcast( xsup, nsupers + 1, mpi_int_t, 0,  grid3d->zscp.comm);); (80, MPI, MPI_Bcast( &(Llu->nbsendx), 1, MPI_INT, 0,  grid3d->zscp.comm);); (78, MPI, MPI_Bcast( &(Llu->nfsendx), 1, MPI_INT, 0,  grid3d->zscp.comm);); (45, MPI, MPI_Bcast( bufmax, NBUFFERS, mpi_int_t, 0,  grid3d->zscp.comm);)"}
{"predict": "(16, OpenCL, retVal = clEnqueueUnmapMemObject(cmdQ.get(), image.get(), mappedPtr, 0, nullptr, nullptr);); (8, OpenCL, void *mappedPtr = clEnqueueMapImage(cmdQ.get(), image.get(), CL_TRUE, CL_MAP_READ, &origin[0], &region[0], nullptr, nullptr, 0, nullptr, nullptr, &retVal);)", "label": "(16, OpenCL, retVal = clEnqueueUnmapMemObject(cmdQ.get(), image.get(), mappedPtr, 0, nullptr, nullptr);); (8, OpenCL, void *mappedPtr = clEnqueueMapImage(cmdQ.get(), image.get(), CL_TRUE, CL_MAP_READ, &origin[0], &region[0], nullptr, nullptr, 0, nullptr, nullptr, &retVal);)"}
{"predict": "(11, OpenMP, #pragma omp parallel); (12, OpenMP, #pragma omp sections); (21, OpenMP, #pragma omp critical); (12, OpenMP, #pragma omp section)", "label": "(13, OpenMP, #pragma omp section); (10, OpenMP, #pragma omp parallel); (21, OpenMP, #pragma omp critical)"}
{"predict": "(57, MPI, MPI_Finalize();); (10, MPI, MPI_Init(&argc,&argv);)", "label": "(57, MPI, MPI_Finalize();); (10, MPI, MPI_Init(&argc,&argv);)"}
{"predict": "(17, CUDA, cudaMalloc((void**)(&d_out), out_bytes);); (14, CUDA, cudaMalloc((void**)(&d_in1), in1_bytes);); (29, CUDA, assert(cudaMemcpyAsync(out.data(), d_out, out_bytes, cudaMemcpyDeviceToHost, gpu_device.stream()) == cudaSuccess);); (16, CUDA, cudaMemcpy(d_in1, in1.data(), in1_bytes, cudaMemcpyHostToDevice);); (40, CUDA, cudaFree(d_out);); (38, CUDA, cudaFree(d_in2);); (26, CUDA, assert(cudaStreamSynchronize(gpu_device.stream()) == cudaSuccess);); (35, CUDA, cudaFree(d_in1);); (8, CUDA, cudaMalloc((void**)(&d_in2), in2_bytes);); (11, CUDA, cudaMemcpy(d_in2, in2.data(), in2_bytes, cudaMemcpyHostToDevice);)", "label": "(17, CUDA, cudaMalloc((void**)(&d_out), out_bytes);); (14, CUDA, cudaMalloc((void**)(&d_in1), in1_bytes);); (29, CUDA, assert(cudaMemcpyAsync(out.data(), d_out, out_bytes, cudaMemcpyDeviceToHost, gpu_device.stream()) == cudaSuccess);); (16, CUDA, cudaMemcpy(d_in1, in1.data(), in1_bytes, cudaMemcpyHostToDevice);); (40, CUDA, cudaFree(d_out);); (38, CUDA, cudaFree(d_in2);); (26, CUDA, assert(cudaStreamSynchronize(gpu_device.stream()) == cudaSuccess);); (35, CUDA, cudaFree(d_in1);); (8, CUDA, cudaMalloc((void**)(&d_in2), in2_bytes);); (11, CUDA, cudaMemcpy(d_in2, in2.data(), in2_bytes, cudaMemcpyHostToDevice);)"}
{"predict": "(26, CUDA, cudaEventRecord(start);); (24, CUDA, cudaEventCreate(&start);); (33, CUDA, cudaEventSynchronize(end);); (28, CUDA, cudaEventRecord(end);); (36, CUDA, cudaEventDestroy(start);); (31, CUDA, cudaEventElapsedTime(&msec, start, end);); (22, CUDA, cudaEventCreate(&end);); (34, CUDA, cudaEventDestroy(end);); (26, CUDA, cudaEventSynchronize(start);)", "label": "(27, CUDA, cudaEventRecord(start);); (31, CUDA, cudaEventRecord(end);); (31, CUDA, cudaEventSynchronize(end);); (23, CUDA, cudaEventCreate(&end);); (21, CUDA, cudaEventCreate(&start);); (31, CUDA, cudaEventElapsedTime(&msec, start, end);)"}
{"predict": "(13, CUDA, cudaMalloc((void **)&d_arr, sizeof(int) * len);); (16, CUDA, cudaMemcpy(d_arr, arr, sizeof(int) * len, cudaMemcpyHostToDevice);); (53, CUDA, cudaFree(d_out);); (11, CUDA, cudaMalloc((void **)&d_out, sizeof(int) * len);); (23, CUDA, cudaMemcpy(out, d_out, sizeof(int) * len, cudaMemcpyDeviceToHost);); (49, CUDA, cudaFree(d_arr);)", "label": "(13, CUDA, cudaMalloc((void **)&d_arr, sizeof(int) * len);); (16, CUDA, cudaMemcpy(d_arr, arr, sizeof(int) * len, cudaMemcpyHostToDevice);); (53, CUDA, cudaFree(d_out);); (11, CUDA, cudaMalloc((void **)&d_out, sizeof(int) * len);); (23, CUDA, cudaMemcpy(out, d_out, sizeof(int) * len, cudaMemcpyDeviceToHost);); (49, CUDA, cudaFree(d_arr);)"}
{"predict": "(17, OpenMP, CUs[i] = omp_get_thread_num();); (13, OpenMP, #pragma omp parallel for schedule(dynamic)); (21, OpenMP, lims[omp_get_team_num()] = omp_get_team_size();); (13, OpenMP, threads[omp_get_team_num()] = omp_get_num_threads();)", "label": "(11, OpenMP, #pragma omp distribute); (16, OpenMP, #pragma omp parallel for); (13, OpenMP, threads[j] = omp_get_num_threads();); (7, OpenMP, #pragma omp target teams num_teams(numTeams) thread_limit(1024) map (tofrom: CUs, lims, threads, Res)); (16, OpenMP, CUs[i] = omp_ext_get_smid();); (9, OpenMP, lims[j] = omp_get_num_teams();)"}
{"predict": "(19, MPI, rc = MPI_Comm_size(MPI_COMM_WORLD, &size);); (14, MPI, MPI_Attr_get(MPI_COMM_WORLD, MPI_UNIVERSE_SIZE, &v, &flag);); (7, MPI, rc = MPI_Comm_get_attr(MPI_COMM_WORLD, MPI_UNIVERSE_SIZE, &v, &flag);)", "label": "(19, MPI, rc = MPI_Comm_size(MPI_COMM_WORLD, &size);); (8, MPI, rc = MPI_Comm_get_attr(MPI_COMM_WORLD, MPI_UNIVERSE_SIZE, &v, &flag);)"}
{"predict": "(5, CUDA, cudaError_t result = cudaSetDevice(i);); (6, CUDA, nvDebug(\"cudaSetDevice() failed: %s\\n\", cudaGetErrorString(result));)", "label": "(4, CUDA, cudaError_t result = cudaSetDevice(i);); (6, CUDA, nvDebug(\"*** CUDA Error: %s\\n\", cudaGetErrorString(result));)"}
{"predict": "(249, MPI, MPI_Recv(&(ARRAY(0,0)),1,MPI_DOUBLE,root,888,MPI_COMM_WORLD,&status);); (234, MPI, MPI_Send(&corner_val,1,MPI_DOUBLE,0,888,MPI_COMM_WORLD);); (90, MPI, MPI_Bcast(&m,          1, MPI_INT, root, MPI_COMM_WORLD);); (92, MPI, MPI_Bcast(&iterations, 1, MPI_INT, root, MPI_COMM_WORLD);); (168, MPI, MPI_Send(&(ARRAY(end,j)), 1, MPI_DOUBLE, my_ID+1, j, MPI_COMM_WORLD);); (24, MPI, MPI_Init(&argc,&argv);); (87, MPI, MPI_Bcast(&n,          1, MPI_INT, root, MPI_COMM_WORLD);); (194, MPI, MPI_Send(outbuf, jjsize, MPI_DOUBLE, my_ID+1, j, MPI_COMM_WORLD);); (153, MPI, MPI_Recv(inbuf, jjsize, MPI_DOUBLE, my_ID-1, j, MPI_COMM_WORLD, &status);); (242, MPI, MPI_Finalize();); (19, MPI, MPI_Comm_size(MPI_COMM_WORLD, &Num_procs);); (82, MPI, MPI_Bcast(&grp,        1, MPI_INT, root, MPI_COMM_WORLD);); (14, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &my_ID);); (176, MPI, MPI_Recv(&(ARRAY(0,0)), 1, MPI_DOUBLE, 0, 888, MPI_COMM_WORLD, &status);)", "label": "(180, MPI, MPI_Recv(inbuf, jjsize, MPI_DOUBLE, my_ID-1, j, MPI_COMM_WORLD, &status);); (91, MPI, MPI_Bcast(&m,          1, MPI_INT, root, MPI_COMM_WORLD);); (91, MPI, MPI_Bcast(&n,          1, MPI_INT, root, MPI_COMM_WORLD);); (92, MPI, MPI_Bcast(&iterations, 1, MPI_INT, root, MPI_COMM_WORLD);); (244, MPI, MPI_Finalize();); (166, MPI, MPI_Send(&(ARRAY(end,j)), 1, MPI_DOUBLE, my_ID+1, j, MPI_COMM_WORLD);); (198, MPI, MPI_Send(&corner_val,1,MPI_DOUBLE,0,888,MPI_COMM_WORLD);); (200, MPI, MPI_Recv(&(ARRAY(0,0)),1,MPI_DOUBLE,root,888,MPI_COMM_WORLD,&status);); (19, MPI, MPI_Init(&argc,&argv);); (186, MPI, MPI_Send(outbuf, jjsize, MPI_DOUBLE, my_ID+1, j, MPI_COMM_WORLD);); (141, MPI, MPI_Barrier(MPI_COMM_WORLD);); (18, MPI, MPI_Comm_size(MPI_COMM_WORLD, &Num_procs);); (82, MPI, MPI_Bcast(&grp,        1, MPI_INT, root, MPI_COMM_WORLD);); (15, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &my_ID);)"}
{"predict": "(15, CUDA, CUDA_CHECK(cudaMalloc(&d_work, workspaceInBytesOnDevice));); (33, CUDA, CUDA_CHECK(cudaFree(d_work));)", "label": "(33, CUDA, CUDA_CHECK(cudaFree(d_work));); (14, CUDA, CUDA_CHECK(cudaMalloc(reinterpret_cast<void **>(&d_work), workspaceInBytesOnDevice));)"}
{"predict": "(13, OpenMP, #pragma omp target enter data map(alloc); (4, OpenMP, #pragma omp target map(tofrom : warp_size)); (149, OpenMP, #pragma omp target exit data map(release)", "label": "(12, OpenMP, #pragma omp target enter data map(alloc); (4, OpenMP, #pragma omp target map(tofrom : warp_size)); (135, OpenMP, #pragma omp target exit data map(release)"}
{"predict": "(56, OpenCL, err = clEnqueueWriteBuffer(queue, bufSB, CL_TRUE, 0, (sizeof(cl_float)*4), Y, 0, NULL, NULL);); (82, OpenCL, clReleaseMemObject(bufC);); (44, OpenCL, bufSB = clCreateBuffer(ctx, CL_MEM_READ_WRITE, (sizeof(cl_float)*4), NULL, &err);); (75, OpenCL, clReleaseEvent(event);); (39, OpenCL, bufSA = clCreateBuffer(ctx, CL_MEM_READ_WRITE, (sizeof(cl_float)*4), NULL, &err);); (46, OpenCL, err = clEnqueueWriteBuffer(queue, bufSA, CL_TRUE, 0, (sizeof(cl_float)*4), X, 0, NULL, NULL);); (70, OpenCL, clReleaseMemObject(bufS);); (38, OpenCL, bufS = clCreateBuffer(ctx, CL_MEM_READ_WRITE, (sizeof(cl_float)), NULL, &err);); (36, OpenCL, bufC = clCreateBuffer(ctx, CL_MEM_READ_WRITE, (sizeof(cl_float)*4), NULL, &err);); (27, OpenCL, clReleaseContext(ctx);); (18, OpenCL, printf( \"clCreateCommandQueue() failed with %d\\n\", err );); (15, OpenCL, queue = clCreateCommandQueue(ctx, device, 0, &err);); (17, OpenCL, clReleaseCommandQueue(queue);); (29, OpenCL, printf( \"clCreateBuffer() failed with %d\\n\", err );); (24, OpenCL, ctx = clCreateContext(props, 1, &device, NULL, NULL, &err);); (52, OpenCL, err = clWaitForEvents(1, &event);); (64, OpenCL, clReleaseMemObject(bufSA);); (62, OpenCL, clReleaseMemObject(bufSB);); (49, OpenCL, err = clEnqueueReadBuffer(queue, bufC, CL_TRUE, 0, (sizeof(cl_float)*4), Y, 0, NULL, NULL);)", "label": "(50, OpenCL, bufSA = clCreateBuffer(ctx, CL_MEM_READ_WRITE, sizeof(cl_float), NULL, &err);); (52, OpenCL, bufS  = clCreateBuffer(ctx, CL_MEM_READ_WRITE, sizeof(cl_float), NULL, &err);); (67, OpenCL, err = clWaitForEvents(1, &event);); (55, OpenCL, err = clEnqueueWriteBuffer(queue, bufS, CL_TRUE, 0, sizeof(cl_float), &S, 0, NULL, NULL);); (83, OpenCL, clReleaseMemObject(bufC);); (77, OpenCL, clReleaseEvent(event);); (79, OpenCL, clReleaseMemObject(bufSA);); (68, OpenCL, err = clEnqueueReadBuffer(queue, bufS, CL_TRUE, 0, sizeof(cl_float), &S, 0, NULL, NULL);); (28, OpenCL, clReleaseContext(ctx);); (63, OpenCL, err = clEnqueueReadBuffer(queue, bufSA, CL_TRUE, 0, sizeof(cl_float), &SA, 0, NULL, NULL);); (47, OpenCL, err = clEnqueueWriteBuffer(queue, bufC, CL_TRUE, 0, sizeof(cl_float), &C, 0, NULL, NULL);); (62, OpenCL, err = clEnqueueReadBuffer(queue, bufSB, CL_TRUE, 0, sizeof(cl_float), &SB, 0, NULL, NULL);); (32, OpenCL, clReleaseCommandQueue(queue);); (38, OpenCL, bufSB = clCreateBuffer(ctx, CL_MEM_READ_WRITE, sizeof(cl_float), NULL, &err);); (74, OpenCL, clReleaseMemObject(bufS);); (71, OpenCL, clReleaseMemObject(bufSB);); (19, OpenCL, printf( \"clCreateCommandQueue() failed with %d\\n\", err );); (16, OpenCL, queue = clCreateCommandQueue(ctx, device, 0, &err);); (34, OpenCL, bufC  = clCreateBuffer(ctx, CL_MEM_READ_WRITE, sizeof(cl_float), NULL, &err);); (8, OpenCL, ctx = clCreateContext(props, 1, &device, NULL, NULL, &err);); (9, OpenCL, printf( \"clCreateContext() failed with %d\\n\", err );); (34, OpenCL, err = clEnqueueWriteBuffer(queue, bufSA, CL_TRUE, 0, sizeof(cl_float), &SA, 0, NULL, NULL);); (34, OpenCL, err = clEnqueueWriteBuffer(queue, bufSB, CL_TRUE, 0, sizeof(cl_float), &SB, 0, NULL, NULL);); (51, OpenCL, err = clEnqueueReadBuffer(queue, bufC, CL_TRUE, 0, sizeof(cl_float), &C, 0, NULL, NULL);)"}
{"predict": "(92, CUDA, throw std::runtime_error(cudaGetErrorString(cudaResult));); (57, CUDA, findCudaDevice(argc, (const char **)argv);); (158, CUDA, checkCudaErrors(cudaFree(d_directions));); (122, CUDA, checkCudaErrors(cudaDeviceSynchronize());); (157, CUDA, checkCudaErrors(cudaFree(d_output));)", "label": "(93, CUDA, throw std::runtime_error(cudaGetErrorString(cudaResult));); (57, CUDA, findCudaDevice(argc, (const char **)argv);); (117, CUDA, checkCudaErrors(cudaDeviceSynchronize());); (211, CUDA, checkCudaErrors(cudaFree(d_output));); (209, CUDA, checkCudaErrors(cudaFree(d_directions));)"}
{"predict": "(82, OpenMP, #pragma omp parallel private(i)); (8, OpenMP, #pragma omp distribute parallel for private); (17, OpenMP, #pragma omp distribute parallel for private()); (26, OpenMP, #pragma omp distribute parallel for private(argc,); (3, OpenMP, #pragma omp target); (91, OpenMP, #pragma omp distribute parallel for private(m)); (53, OpenMP, #pragma omp distribute parallel for private(e, g)); (65, OpenMP, #pragma omp parallel); (61, OpenMP, #pragma omp distribute parallel for nowait); (15, OpenMP, #pragma omp distribute parallel for private(argc); (75, OpenMP, #pragma omp distribute parallel for private(j)); (28, OpenMP, #pragma omp distribute parallel for private(argc)); (42, OpenMP, #pragma omp distribute parallel for private(argv[1])); (31, OpenMP, #pragma omp distribute parallel for private(S1)); (20, OpenMP, #pragma omp distribute parallel for private(argc > 0 ? argv[1] : argv[2])); (-1, OpenMP, #pragma omp distribute parallel for private(); (33, OpenMP, #pragma omp distribute parallel for private(a, b)); (60, OpenMP, #pragma omp distribute parallel for private(i)); (46, OpenMP, #pragma omp distribute parallel for private(h, B::x)); (62, OpenMP, #pragma omp parallel shared(i)); (-12, OpenMP, #pragma omp teams)", "label": "(82, OpenMP, #pragma omp parallel private(i)); (95, OpenMP, #pragma omp distribute parallel for private(m)); (5, OpenMP, #pragma omp target); (26, OpenMP, #pragma omp distribute parallel for private(argc,); (60, OpenMP, #pragma omp distribute parallel for private(h, B::x)); (64, OpenMP, #pragma omp distribute parallel for nowait); (8, OpenMP, #pragma omp distribute parallel for private(); (65, OpenMP, #pragma omp parallel); (16, OpenMP, #pragma omp distribute parallel for private(argc); (40, OpenMP, #pragma omp distribute parallel for private(a, b)); (49, OpenMP, #pragma omp distribute parallel for private(e, g)); (33, OpenMP, #pragma omp distribute parallel for private(S1)); (42, OpenMP, #pragma omp distribute parallel for private(argv[1])); (6, OpenMP, #pragma omp distribute parallel for private()); (-5, OpenMP, #pragma omp distribute parallel for private); (62, OpenMP, #pragma omp distribute parallel for private(i)); (69, OpenMP, #pragma omp distribute parallel for private(j)); (22, OpenMP, #pragma omp distribute parallel for private(argc)); (16, OpenMP, #pragma omp distribute parallel for private(argc > 0 ? argv[1] : argv[2])); (62, OpenMP, #pragma omp parallel shared(i)); (-12, OpenMP, #pragma omp teams)"}
{"predict": "(18, OpenMP, #pragma omp target teams distribute parallel for simd if(argc) if(teams: argc)); (11, OpenMP, #pragma omp target teams distribute parallel for simd if (foobool(argc)), if (true)); (21, OpenMP, #pragma omp target teams distribute parallel for simd if(parallel : argc) if (parallel:argc)); (13, OpenMP, #pragma omp target teams distribute parallel for simd if (argc argc)); (0, OpenMP, #pragma omp target teams distribute parallel for simd if (argc); (14, OpenMP, #pragma omp target teams distribute parallel for simd if(target : argc) if (target:argc)); (-4, OpenMP, #pragma omp target teams distribute parallel for simd if); (17, OpenMP, #pragma omp target teams distribute parallel for simd if(parallel : argc) if (argc)); (1, OpenMP, #pragma omp target teams distribute parallel for simd if (S1)); (-5, OpenMP, #pragma omp target teams distribute parallel for simd if (); (-2, OpenMP, #pragma omp target teams distribute parallel for simd if (argc > 0 ? argv[1] : argv[2])); (-8, OpenMP, #pragma omp target teams distribute parallel for simd if ()); (2, OpenMP, #pragma omp target teams distribute parallel for simd if (1 0)); (7, OpenMP, #pragma omp target teams distribute parallel for simd if(parallel :); (8, OpenMP, #pragma omp target teams distribute parallel for simd if(parallel : argc); (9, OpenMP, #pragma omp target teams distribute parallel for simd if(target : argc)); (-3, OpenMP, #pragma omp target teams distribute parallel for simd if(if(troglodyte : argc)); (1, OpenMP, #pragma omp target teams distribute parallel for simd if(target :); (-8, OpenMP, #pragma omp target teams distribute parallel for simd if (argc)))", "label": "(6, OpenMP, #pragma omp target parallel for device ()); (23, OpenMP, #pragma omp target parallel for device (3.14)); (18, OpenMP, #pragma omp target parallel for device (-2)); (13, OpenMP, #pragma omp target parallel for device (argc), device (argc+1)); (14, OpenMP, #pragma omp target parallel for device (S1)); (5, OpenMP, #pragma omp target parallel for device (argc))); (-4, OpenMP, #pragma omp target parallel for device); (1, OpenMP, #pragma omp target parallel for device (argc); (14, OpenMP, #pragma omp target parallel for device (-10u)); (5, OpenMP, #pragma omp target parallel for device (z + argc)); (-6, OpenMP, #pragma omp target parallel for device (); (1, OpenMP, #pragma omp target parallel for device (argc > 0 ? argv[1] : argv[2]))"}
{"predict": "(6, OpenMP, #pragma omp target map(from:c))", "label": "(6, OpenMP, #pragma omp target map(from:c))"}
{"predict": "(33, CUDA, __shared__ double s_lsum[MAXSUPER];); (34, CUDA, volatile __shared__ int s_bmod;)", "label": "(35, CUDA, volatile __shared__ int s_bmod;); (32, CUDA, __shared__ double s_lsum[MAXSUPER];)"}
{"predict": "(16, MPI, MPI_Comm_dup(comm, &prg->comm);); (43, MPI, MPI_Comm_rank(prg->comm, &rank);); (44, MPI, MPI_Ibcast(NULL, 0, MPI_BYTE, 0, prg->comm, &prg->bcast_req);)", "label": "(47, MPI, MPI_Ibcast(&(prg->keep_going), 1, MPI_INT, 0, prg->comm, &(prg->bcast_req));); (15, MPI, MPI_Comm_dup(comm, &prg->comm);); (37, MPI, prg->time_start = MPI_Wtime();); (42, MPI, MPI_Comm_rank(prg->comm, &rank);)"}
{"predict": "(28, MPI, MPI_DATATYPE_ALLOC(uval_new, lenv);); (25, MPI, MPI_INT_ALLOC(usub_new, lens);); (59, MPI, MPI_INT_ALLOC(lsub_new, len1);); (60, MPI, MPI_DATATYPE_ALLOC(lnzval_new, len2);)", "label": "(28, MPI, MPI_DATATYPE_ALLOC(uval_new, lenv);); (25, MPI, MPI_INT_ALLOC(usub_new, lens);); (59, MPI, MPI_INT_ALLOC(lsub_new, len1);); (60, MPI, MPI_DATATYPE_ALLOC(lnzval_new, len2);)"}
{"predict": "(20, CUDA, getLastCudaError(\"mergeRanksAndIndicesKernel() execution failed\\n\");)", "label": "(28, CUDA, getLastCudaError(\"mergeRanksAndIndicesKernel(B)<<<>>> failed\\n\");); (18, CUDA, getLastCudaError(\"mergeRanksAndIndicesKernel(A)<<<>>> failed\\n\");)"}
{"predict": "(8, CUDA, cudaFuncGetAttributes(&attr,ptr);); (6, CUDA, cudaOccupancyMaxPotentialBlockSize(&mingridsize,&qblocksize,ptr,0,0);)", "label": "(9, CUDA, cudaFuncGetAttributes(&attr,(void*)ptr);); (14, CUDA, fcuda::Check_CudaErroorFun(\"Error collecting kernel information.\");); (5, CUDA, cudaOccupancyMaxPotentialBlockSize(&mingridsize,&qblocksize,(void*)ptr,0,0);)"}
{"predict": "(3, TBB, n_threads = tbb::task_scheduler_init::default_num_threads();); (32, TBB, tbb::enumerable_thread_specific<tbb::task_arena*> tls;); (18, TBB, tbb::task_arena arenas[max_n_arenas];)", "label": "(20, TBB, tbb::global_control control(tbb::global_control::max_allowed_parallelism, n_threads);); (1, TBB, n_threads = tbb::this_task_arena::max_concurrency();); (29, TBB, tbb::enumerable_thread_specific<tbb::task_arena*> tls;); (25, TBB, std::vector<tbb::task_arena> arenas(n_arenas);)"}
{"predict": "(15, OpenCL, int error = clGetDeviceInfo( device, CL_DEVICE_IMAGE2D_MAX_WIDTH, sizeof( maxWidth ), &maxWidth, NULL );); (16, OpenCL, error |= clGetDeviceInfo( device, CL_DEVICE_GLOBAL_MEM_SIZE, sizeof( memSize ), &memSize, NULL );); (14, OpenCL, error |= clGetDeviceInfo( device, CL_DEVICE_MAX_MEM_ALLOC_SIZE, sizeof( maxAllocSize ), &maxAllocSize, NULL );)", "label": "(15, OpenCL, int error = clGetDeviceInfo( device, CL_DEVICE_IMAGE2D_MAX_WIDTH, sizeof( maxWidth ), &maxWidth, NULL );); (16, OpenCL, error |= clGetDeviceInfo( device, CL_DEVICE_GLOBAL_MEM_SIZE, sizeof( memSize ), &memSize, NULL );); (14, OpenCL, error |= clGetDeviceInfo( device, CL_DEVICE_MAX_MEM_ALLOC_SIZE, sizeof( maxAllocSize ), &maxAllocSize, NULL );)"}
{"predict": "(36, MPI, MPI_Comm_size(intercomm, &size);); (56, MPI, MPI_Comm_disconnect(&intercomm);); (102, MPI, MPI_Finalize();); (19, MPI, MPI_Comm_get_parent(&parentcomm);); (47, MPI, MPI_Recv(&data, 1, MPI_INT, RECEIVER_RANK, DATA_TAG, intercomm, &status);); (79, MPI, MPI_Abort(intercomm, 1);); (73, MPI, MPI_Recv(&i, 1, MPI_INT, SENDER_RANK, DATA_TAG, intercomm, &status);); (43, MPI, MPI_Send(&i, 1, MPI_INT, RECEIVER_RANK, DATA_TAG, intercomm);); (29, MPI, MPI_Comm_rank(intercomm, &rank);); (26, MPI, MPI_Comm_remote_size(intercomm, &rsize);); (76, MPI, MPI_Send(&i, 1, MPI_INT, SENDER_RANK, DATA_TAG, intercomm);)", "label": "(36, MPI, MPI_Comm_size(intercomm, &size);); (56, MPI, MPI_Comm_disconnect(&intercomm);); (102, MPI, MPI_Finalize();); (19, MPI, MPI_Comm_get_parent(&parentcomm);); (47, MPI, MPI_Recv(&data, 1, MPI_INT, RECEIVER_RANK, DATA_TAG, intercomm, &status);); (79, MPI, MPI_Abort(intercomm, 1);); (73, MPI, MPI_Recv(&i, 1, MPI_INT, SENDER_RANK, DATA_TAG, intercomm, &status);); (43, MPI, MPI_Send(&i, 1, MPI_INT, RECEIVER_RANK, DATA_TAG, intercomm);); (29, MPI, MPI_Comm_rank(intercomm, &rank);); (26, MPI, MPI_Comm_remote_size(intercomm, &rsize);); (76, MPI, MPI_Send(&i, 1, MPI_INT, SENDER_RANK, DATA_TAG, intercomm);)"}
{"predict": "(236, MPI, MPI_Barrier(MPI_COMM_WORLD);); (293, MPI, MPI_Wait(&(request[0+4]), MPI_STATUSES_IGNORE);); (135, MPI, MPI_Bcast(&n,          1, MPI_INT, root, MPI_COMM_WORLD);); (44, MPI, MPI_Comm_size(MPI_COMM_WORLD, &Num_procs);); (298, MPI, MPI_Wait(&(request[3+4]), MPI_STATUSES_IGNORE);); (255, MPI, MPI_Wait(&(request[0]), MPI_STATUS_IGNORE);); (132, MPI, MPI_Bcast(&iterations, 1, MPI_INT, root, MPI_COMM_WORLD);); (288, MPI, MPI_Wait(&(request[1+4]), MPI_STATUSES_IGNORE);); (37, MPI, MPI_Init(&argc,&argv);); (252, MPI, MPI_Wait(&(request[1]), MPI_STATUS_IGNORE);); (291, MPI, MPI_Wait(&(request[2+4]), MPI_STATUSES_IGNORE);); (256, MPI, MPI_Wait(&(request[2]), MPI_STATUS_IGNORE);); (365, MPI, MPI_Finalize();); (255, MPI, MPI_Wait(&(request[3]), MPI_STATUS_IGNORE);); (324, MPI, MPI_Reduce(&local_norm, &norm, 1, MPI_DTYPE, MPI_SUM, root, MPI_COMM_WORLD);); (31, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &my_ID);)", "label": "(295, MPI, MPI_Wait(&(request[1+4]), MPI_STATUS_IGNORE);); (301, MPI, MPI_Wait(&(request[3+4]), MPI_STATUS_IGNORE);); (234, MPI, MPI_Barrier(MPI_COMM_WORLD);); (128, MPI, MPI_Bcast(&n,          1, MPI_INT, root, MPI_COMM_WORLD);); (43, MPI, MPI_Comm_size(MPI_COMM_WORLD, &Num_procs);); (289, MPI, MPI_Wait(&(request[0+4]), MPI_STATUS_IGNORE);); (254, MPI, MPI_Wait(&(request[0]), MPI_STATUS_IGNORE);); (294, MPI, MPI_Wait(&(request[2+4]), MPI_STATUS_IGNORE);); (124, MPI, MPI_Bcast(&iterations, 1, MPI_INT, root, MPI_COMM_WORLD);); (36, MPI, MPI_Init(&argc,&argv);); (251, MPI, MPI_Wait(&(request[1]), MPI_STATUS_IGNORE);); (256, MPI, MPI_Wait(&(request[2]), MPI_STATUS_IGNORE);); (365, MPI, MPI_Finalize();); (255, MPI, MPI_Wait(&(request[3]), MPI_STATUS_IGNORE);); (324, MPI, MPI_Reduce(&local_norm, &norm, 1, MPI_DTYPE, MPI_SUM, root, MPI_COMM_WORLD);); (31, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &my_ID);)"}
{"predict": "(6, CUDA, extent = make_cudaExtent(30, 40, 0);); (3, CUDA, cudaExtent extent = make_cudaExtent(10, 20, 0);)", "label": "(6, CUDA, extent = make_cudaExtent(30, 40, 0);); (3, CUDA, cudaExtent extent = make_cudaExtent(10, 20, 0);)"}
{"predict": "(13, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &wrank);); (37, MPI, MPI_Comm_free(&cart);); (12, MPI, MPI_Comm_size(MPI_COMM_WORLD, &wsize);)", "label": "(13, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &wrank);); (37, MPI, MPI_Comm_free(&cart);); (12, MPI, MPI_Comm_size(MPI_COMM_WORLD, &wsize);)"}
{"predict": "(5, MPI, MPI_Comm_rank(comm, &rank);); (19, MPI, MPI_Recv(buff, count, type, 0, tag, comm, MPI_STATUS_IGNORE);)", "label": "(20, MPI, MPI_Recv(buff, count, type, 0, tag, comm, MPI_STATUS_IGNORE);); (4, MPI, MPI_Comm_rank(comm, &rank);)"}
{"predict": "(48, OpenMP, #pragma omp parallel for)", "label": "(55, OpenMP, #pragma omp for schedule(guided, 512)); (52, OpenMP, #pragma omp parallel firstprivate(transformation_matrix, constant_vector, slave_solution_vector, master_solution_vector, p_master_node, p_slave_node))"}
{"predict": "(18, MPI, MPI_Irecv(&a, 1, MPI_INT, 0, 0, MPI_COMM_WORLD, &request);); (21, MPI, MPI_Wait(&request, MPI_STATUS_IGNORE);); (5, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (5, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (15, MPI, MPI_Isend(&a, 1, MPI_INT, 1, 0, MPI_COMM_WORLD, &request);); (6, MPI, MPI_Abort(MPI_COMM_WORLD, 1);)", "label": "(24, MPI, MPI_Request_free(&request);); (7, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (5, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (15, MPI, MPI_Psend_init(&a, 1, 1, MPI_INT, 1, 0, MPI_COMM_WORLD, MPI_INFO_NULL, &request);); (16, MPI, MPI_Precv_init(&a, 1, 1, MPI_INT, 0, 0, MPI_COMM_WORLD, MPI_INFO_NULL, &request);); (21, MPI, MPI_Barrier(MPI_COMM_WORLD);); (6, MPI, MPI_Abort(MPI_COMM_WORLD, 1);)"}
{"predict": "(196, MPI, MPI_Get_address(read_buf + real_off - off, &addr);); (107, MPI, MPI_Type_get_extent(datatype, &lb, &buftype_extent);); (70, MPI, MPI_Allreduce(&ntimes, &max_ntimes, 1, MPI_INT, MPI_MAX, fd->comm);); (184, MPI, MPI_Abort(MPI_COMM_WORLD, *error_code);); (304, MPI, MPI_Type_size_x(datatype, &size);)", "label": "(113, MPI, MPI_Comm_rank(fd->comm, &rank);); (180, MPI, MPI_Get_count(&read_status, MPI_BYTE, &actual_size);); (105, MPI, MPI_Type_get_extent(datatype, &lb, &buftype_extent);); (69, MPI, MPI_Allreduce(&ntimes, &max_ntimes, 1, MPI_INT, MPI_MAX, fd->comm);); (219, MPI, MPI_Get_address(read_buf + req_off - real_off, &addr);)"}
{"predict": "(8, OpenMP, double after0=secs_elapsed();); (44, OpenMP, printf(\"Done, took %.2lf seconds total\\n\", secs_elapsed()-after0);)", "label": "(16, OpenMP, #pragma omp target teams distribute parallel for thread_limit(128)); (8, OpenMP, #pragma omp target enter data map(to: Vm[:nCells])); (6, OpenMP, #pragma omp target enter data map(to: m_gate[:nCells]))"}
{"predict": "(6, MPI, MPI_Win_get_attr(win, key[i], &val_p, &flag);)", "label": "(6, MPI, MPI_Win_get_attr(win, key[i], &val_p, &flag);)"}
{"predict": "(23, CUDA, cudaMemcpy(output, data, copySize, cudaMemcpyDeviceToDevice);); (20, CUDA, cudaMemcpy(workspace, transformCoeff, sizeof(int)*nOutputDims,cudaMemcpyHostToDevice );)", "label": "(23, CUDA, cudaMemcpy(output, data, copySize, cudaMemcpyDeviceToDevice);); (20, CUDA, cudaMemcpy(workspace, transformCoeff, sizeof(int)*nOutputDims,cudaMemcpyHostToDevice );)"}
{"predict": "(30, MPI, MPI_Type_free(&vecs[i]);); (17, MPI, MPI_Type_create_struct(3, blockcount, displs, vecs, &mystruct);); (25, MPI, MPI_Type_create_resized(mystruct, 0, 10 * sizeof(int), &vecs[i]);); (19, MPI, MPI_Type_commit(&mystruct);); (9, MPI, MPI_Type_contiguous(4, MPI_INT, &vecs[i]);)", "label": "(19, MPI, MPI_Type_commit(&mystruct);); (27, MPI, MPI_Type_create_hvector(0, 1, stride, MPI_INT, &vecs[i]);); (19, MPI, MPI_Type_free(&mystruct);); (8, MPI, MPI_Type_commit(&vecs[i]);); (14, MPI, MPI_Type_create_struct(3, blockcount, displs, vecs, &mystruct);); (5, MPI, MPI_Type_create_hvector(i, 1, stride, MPI_INT, &vecs[i]);); (17, MPI, MPI_Type_free(&vecs[i]);)"}
{"predict": "(14, CUDA, checkCudaErrors(cudaMalloc(&info, sizeof(int)));); (48, CUDA, checkCudaErrors(cudaFree(buffer));); (52, CUDA, checkCudaErrors(cudaFree(A));); (36, CUDA, checkCudaErrors(cusolverDnDpotrs(handle, uplo, n, A, lda, b, n));); (42, CUDA, checkCudaErrors(cudaFree(info));); (10, CUDA, checkCudaErrors(cudaMalloc(&buffer, sizeof(double) * bufferSize));); (10, CUDA, checkCudaErrors(cudaMalloc(&A, sizeof(double) * lda * n));)", "label": "(14, CUDA, checkCudaErrors(cudaMalloc(&info, sizeof(int)));); (14, CUDA, checkCudaErrors(cudaMalloc(&buffer, sizeof(double) * bufferSize));); (14, CUDA, checkCudaErrors(cudaMalloc(&A, sizeof(double) * lda * n));); (36, CUDA, checkCudaErrors(cusolverDnDpotrs(handle, uplo, n, 1, A, lda, x, n, info));); (37, CUDA, checkCudaErrors(cudaDeviceSynchronize());); (43, CUDA, checkCudaErrors(cudaFree(info));); (45, CUDA, checkCudaErrors(cudaFree(buffer));); (14, CUDA, checkCudaErrors(cudaMemset(info, 0, sizeof(int)));); (46, CUDA, checkCudaErrors(cudaFree(A));)"}
{"predict": "(3, OpenMP, #pragma omp target map(tofrom : tmp)); (11, OpenMP, #pragma omp target parallel map(tofrom : tmp))", "label": "(12, OpenMP, #pragma omp target map(tofrom: N) map(from:tmp)); (2, OpenMP, #pragma omp target map(to: N) map(tofrom: tmp))"}
{"predict": "(4, MPI, MPI_Init(&argc, &argv);); (52, MPI, MPI_Finalize();); (6, MPI, ierr = MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (3, MPI, int ierr = MPI_Comm_size(MPI_COMM_WORLD, &comm_size);)", "label": "(4, MPI, MPI_Init(&argc, &argv);); (52, MPI, MPI_Finalize();); (6, MPI, ierr = MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (3, MPI, int ierr = MPI_Comm_size(MPI_COMM_WORLD, &comm_size);)"}
{"predict": "(114, CUDA, FastllmCudaFinishOutput(output, cudaOutput);); (37, CUDA, cudaFp16Input = (half *) FastllmCudaMalloc(n * m * sizeof(half));); (12, CUDA, state = cudaMemcpy(cudaMins, mins, k * sizeof(float), cudaMemcpyHostToDevice);); (18, CUDA, state = cudaMemset(cudaBiasData, 0, k * sizeof(float));); (107, CUDA, FastllmCudaFinishInput(input, cudaInput);); (40, CUDA, cudaFp16Output = (half *) FastllmCudaMalloc(n * k * sizeof(half));); (-2, CUDA, state = cudaMemcpy(cudaScales, weight.scales.data(), k * sizeof(float), cudaMemcpyHostToDevice);); (16, CUDA, state = cudaMalloc(&cudaBiasData, k * sizeof(float));); (8, CUDA, state = cudaMalloc(&cudaMins, k * sizeof(float));); (101, CUDA, FastllmCudaFree(cudaFp16Input);); (102, CUDA, FastllmCudaFree(cudaFp16Weight);); (104, CUDA, FastllmCudaFree(cudaFp16Output);); (97, CUDA, FastllmCudaFree(cudaBiasData);); (21, CUDA, float *cudaOutput = (float*)FastllmCudaPrepareOutput(output);); (18, CUDA, float *cudaInput = (float*)FastllmCudaPrepareInput(input);); (-11, CUDA, state = cudaMalloc(&cudaScales, k * sizeof(float));); (8, CUDA, checkCudaErrors(\"Error: CUDA error when moving bias to device!\", state);); (100, CUDA, FastllmCudaFree(cudaMins);); (102, CUDA, FastllmCudaFree(cudaScales);); (85, CUDA, FastllmCudaHalf2FloatKernel <<< (len - 1) / threadPerBlock + 1, threadPerBlock >>>(cudaFp16Output, cudaOutput, len);); (95, CUDA, FastllmCudaFree(cudaOutput);); (96, CUDA, FastllmCudaFree(cudaInput);)", "label": "(119, CUDA, FastllmCudaFinishOutput(output, cudaOutput);); (39, CUDA, cudaFp16Input = (half *) FastllmCudaMalloc(n * m * sizeof(half));); (21, CUDA, state = cudaMemset(cudaBiasData, 0, k * sizeof(float));); (115, CUDA, FastllmCudaFinishInput(input, cudaInput);); (43, CUDA, cudaFp16Output = (half *) FastllmCudaMalloc(n * k * sizeof(half));); (9, CUDA, state = cudaMemcpy(cudaMins, mins, k * sizeof(float), cudaMemcpyHostToDevice);); (-2, CUDA, state = cudaMalloc(&cudaScales, k * sizeof(float));); (94, CUDA, FastllmCudaFree(cudaFp16Input);); (103, CUDA, FastllmCudaFree(cudaFp16Output);); (32, CUDA, cudaFp16Weight = (half *) FastllmCudaMalloc(k * m * sizeof(half));); (-1, CUDA, state = cudaMalloc(&cudaMins, k * sizeof(float));); (-6, CUDA, state = cudaMemcpy(cudaScales, weight.scales.data(), k * sizeof(float), cudaMemcpyHostToDevice);); (7, CUDA, state = cudaMalloc(&cudaBiasData, k * sizeof(float));); (12, CUDA, checkCudaErrors(\"Error: CUDA error when moving bias to device!\", state);); (7, CUDA, state = cudaMemcpy(cudaBiasData, (uint8_t*)bias.cudaData, k * sizeof(float), cudaMemcpyDeviceToDevice);); (87, CUDA, FastllmCudaFree(cudaFp16Weight);); (18, CUDA, float *cudaOutput = (float*)FastllmCudaPrepareOutput(output);); (16, CUDA, float *cudaInput = (float*)FastllmCudaPrepareInput(input);)"}
{"predict": "(12, TBB, g.reset(tbb::flow::rf_clear_edges);); (4, TBB, tbb::flow::queue_node<int> qout(g);); (5, TBB, tbb::flow::make_edge(on,qout);); (0, TBB, tbb::flow::graph g;)", "label": "(12, TBB, g.reset(tbb::flow::rf_clear_edges);); (4, TBB, tbb::flow::queue_node<int> qout(g);); (5, TBB, tbb::flow::make_edge(on,qout);); (0, TBB, tbb::flow::graph g;)"}
{"predict": "(31, CUDA, CSC(cudaGetLastError(), STATUS_FAILURE);)", "label": "(34, CUDA, CSC(cudaGetLastError(), STATUS_FAILURE);)"}
{"predict": "(4, OpenMP, #pragma omp target teams distribute parallel for reduction(+:tmp2)); (8, OpenMP, #pragma omp target teams distribute parallel for reduction(+:tmp) map(tofrom: M))", "label": "(8, OpenMP, #pragma omp target teams distribute parallel for reduction(+:tmp) map(A, N, M) map(tofrom:M))"}
{"predict": "(1, OpenMP, #pragma omp for simd collapse); (8, OpenMP, #pragma omp for simd collapse (2+2))); (30, OpenMP, #pragma omp for simd collapse (2)); (13, OpenMP, #pragma omp for simd collapse (foobool(argc)), collapse (true), collapse (-5)); (8, OpenMP, #pragma omp for simd collapse (foobool(1) > 0 ? 1 : 2)); (2, OpenMP, #pragma omp for simd collapse (4); (-3, OpenMP, #pragma omp for simd collapse (); (23, OpenMP, #pragma omp for simd collapse(collapse(tmain<int, char, -1, -2>(argc, argv)); (-3, OpenMP, #pragma omp for simd collapse ()); (10, OpenMP, #pragma omp for simd collapse (S1))", "label": "(12, OpenMP, #pragma omp for simd collapse (foobool(1) > 0 ? 1 : 2)); (8, OpenMP, #pragma omp for simd collapse (2+2))); (-1, OpenMP, #pragma omp for simd collapse); (16, OpenMP, #pragma omp for simd collapse (S1)); (-1, OpenMP, #pragma omp for simd collapse (); (0, OpenMP, #pragma omp for simd collapse ()); (26, OpenMP, #pragma omp for simd collapse (2)); (10, OpenMP, #pragma omp for simd collapse (foobool(argc)), collapse (true), collapse (-5)); (-1, OpenMP, #pragma omp for simd collapse (4); (21, OpenMP, #pragma omp for simd collapse(collapse(tmain<int, char, -1, -2>(argc, argv))"}
{"predict": "(16, MPI, MPI_Bcast(&tmp_val, 1, MPI_INT, 0, fd->comm);)", "label": "(35, MPI, MPI_Bcast(&tmp_val, 1, MPI_INT, 0, fd->comm);)"}
{"predict": "(2, MPI, MPIDataCommunicator mpi_world_communicator(MPI_COMM_WORLD);)", "label": "(2, MPI, MPIDataCommunicator mpi_world_communicator(MPI_COMM_WORLD);)"}
{"predict": "(2, TBB, tbb::task_arena sequential_arena(1);); (3, TBB, tbb::task_arena parallel_arena(num_threads);)", "label": "(1, TBB, tbb::task_arena sequential_arena(1);)"}
{"predict": "(201, OpenCL, error = clSetKernelArg(kernel, 10, sizeof(dstStride), &dstStride);); (197, OpenCL, error = clSetKernelArg(kernel, 9, sizeof(srcStride), &srcStride);); (186, OpenCL, error = clSetKernelArg(kernel, 0, sizeof(streams[0]), &streams[0]);); (187, OpenCL, error = clSetKernelArg(kernel, 1, sizeof(streams[1]), &streams[1]);); (197, OpenCL, error = clSetKernelArg(kernel, 8, localBufferSize, NULL);)", "label": "(169, OpenCL, error = clSetKernelArg(kernel, 0, sizeof(streams[0]), &streams[0]);); (170, OpenCL, error = clSetKernelArg(kernel, 1, sizeof(streams[1]), &streams[1]);); (184, OpenCL, error = clSetKernelArg(kernel, 7, sizeof(dstStride), &dstStride);); (170, OpenCL, error = clSetKernelArg(kernel, 2, localBufferSize, NULL);); (180, OpenCL, error = clSetKernelArg(kernel, 6, sizeof(srcStride), &srcStride);)"}
{"predict": "(11, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);)", "label": "(11, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);)"}
{"predict": "(7, CUDA, __shared__ float shared_val[32];)", "label": "(4, CUDA, __shared__ float shared_val[32];)"}
{"predict": "(60, CUDA, CUDA_CHECK(cudaStreamSynchronize(stream));); (78, CUDA, CUDA_CHECK(cudaDeviceReset());); (75, CUDA, CUDA_CHECK(cudaStreamDestroy(stream));); (40, CUDA, CUDA_CHECK(cudaMalloc(reinterpret_cast<void **>(&d_A), sizeof(data_type) * A.size()));); (41, CUDA, CUDA_CHECK(cudaMalloc(reinterpret_cast<void **>(&d_y), sizeof(data_type) * y.size()));); (39, CUDA, CUDA_CHECK(cudaMalloc(reinterpret_cast<void **>(&d_x), sizeof(data_type) * x.size()));); (67, CUDA, CUDA_CHECK(cudaFree(d_y));); (65, CUDA, CUDA_CHECK(cudaFree(d_x));); (63, CUDA, CUDA_CHECK(cudaFree(d_A));); (30, CUDA, CUDA_CHECK(cudaStreamCreateWithFlags(&stream, cudaStreamNonBlocking));)", "label": "(60, CUDA, CUDA_CHECK(cudaStreamSynchronize(stream));); (78, CUDA, CUDA_CHECK(cudaDeviceReset());); (75, CUDA, CUDA_CHECK(cudaStreamDestroy(stream));); (40, CUDA, CUDA_CHECK(cudaMalloc(reinterpret_cast<void **>(&d_A), sizeof(data_type) * A.size()));); (41, CUDA, CUDA_CHECK(cudaMalloc(reinterpret_cast<void **>(&d_y), sizeof(data_type) * y.size()));); (39, CUDA, CUDA_CHECK(cudaMalloc(reinterpret_cast<void **>(&d_x), sizeof(data_type) * x.size()));); (67, CUDA, CUDA_CHECK(cudaFree(d_y));); (65, CUDA, CUDA_CHECK(cudaFree(d_x));); (63, CUDA, CUDA_CHECK(cudaFree(d_A));); (30, CUDA, CUDA_CHECK(cudaStreamCreateWithFlags(&stream, cudaStreamNonBlocking));)"}
{"predict": "(37, TBB, tbb::flow::make_edge(source2, tbb::flow::input_port<1>(merge));); (35, TBB, tbb::flow::make_edge(source1, tbb::flow::input_port<0>(merge));); (36, TBB, tbb::flow::make_edge(merge, output);); (-1, TBB, tbb::flow::graph g;)", "label": "(37, TBB, tbb::flow::make_edge(source2, tbb::flow::input_port<1>(merge));); (35, TBB, tbb::flow::make_edge(source1, tbb::flow::input_port<0>(merge));); (36, TBB, tbb::flow::make_edge(merge, output);); (-2, TBB, tbb::flow::graph g;)"}
{"predict": "(37, CUDA, CHECK(cudaMalloc(&d_matrix_org, M));); (37, CUDA, CHECK(cudaMalloc(&d_matrix_res, M));); (37, CUDA, CHECK(cudaMemcpy(d_matrix_org, h_matrix_org, M, cudaMemcpyDefault));); (42, CUDA, CHECK(cudaEventCreate(&stop));); (49, CUDA, CHECK(cudaEventRecord(stop));); (46, CUDA, CHECK(cudaMemcpy(h_matrix_res, d_matrix_res, M, cudaMemcpyDefault));); (41, CUDA, cudaEventQuery(start);); (48, CUDA, CHECK(cudaEventSynchronize(stop));); (48, CUDA, CHECK(cudaEventElapsedTime(&curr_time, start, stop));); (86, CUDA, CHECK(cudaFree(d_matrix_org));); (86, CUDA, CHECK(cudaFree(d_matrix_res));); (35, CUDA, CHECK(cudaEventRecord(start));); (32, CUDA, CHECK(cudaEventCreate(&start));); (2, CUDA, CHECK(cudaMemcpyFromSymbol(&SIZE, c_TILE_DIM, sizeof(int)));)", "label": "(37, CUDA, CHECK(cudaMalloc(&d_matrix_org, M));); (37, CUDA, CHECK(cudaMalloc(&d_matrix_res, M));); (37, CUDA, CHECK(cudaMemcpy(d_matrix_org, h_matrix_org, M, cudaMemcpyDefault));); (42, CUDA, CHECK(cudaEventCreate(&stop));); (50, CUDA, CHECK(cudaEventRecord(stop));); (46, CUDA, CHECK(cudaMemcpy(h_matrix_res, d_matrix_res, M, cudaMemcpyDefault));); (41, CUDA, cudaEventQuery(start);); (48, CUDA, CHECK(cudaEventSynchronize(stop));); (48, CUDA, CHECK(cudaEventElapsedTime(&curr_time, start, stop));); (86, CUDA, CHECK(cudaFree(d_matrix_org));); (86, CUDA, CHECK(cudaFree(d_matrix_res));); (35, CUDA, CHECK(cudaEventRecord(start));); (32, CUDA, CHECK(cudaEventCreate(&start));); (3, CUDA, CHECK(cudaMemcpyFromSymbol(&SIZE, c_TILE_DIM, sizeof(int)));)"}
{"predict": "(12, OpenCL, cl_kernel k1 = clCreateKernel(program, \"compiler_test_func1\", &err);); (39, OpenCL, clReleaseKernel(k1);); (10, OpenCL, cl_kernel k0 = clCreateKernel(program, \"compiler_test_func0\", &err);); (50, OpenCL, clReleaseKernel(k0);)", "label": "(55, OpenCL, clReleaseProgram(program);); (52, OpenCL, clReleaseKernel(k0);); (52, OpenCL, clReleaseKernel(k1);); (11, OpenCL, cl_kernel k1 = clCreateKernel(program, \"compiler_program_global1\", &err);); (8, OpenCL, cl_kernel k0 = clCreateKernel(program, \"compiler_program_global0\", &err);)"}
{"predict": "(10, OpenMP, #pragma omp target map(from: a[0:N])); (11, OpenMP, #pragma omp target teams distribute parallel for)", "label": "(10, OpenMP, #pragma omp target map(tofrom: a[0:100])); (12, OpenMP, #pragma omp simd)"}
{"predict": "(72, CUDA, CUDA_CHECK_AND_EXIT(cudaStreamCreate(&stream));); (64, CUDA, CUDA_CHECK_AND_EXIT(cudaMalloc(&device_buffer, input_size_bytes));); (67, CUDA, CUDA_CHECK_AND_EXIT(cudaMemcpy(device_buffer, input.data(), input_size_bytes, cudaMemcpyHostToDevice));); (78, CUDA, CUDA_CHECK_AND_EXIT(cudaFree(device_buffer));); (64, CUDA, CUDA_CHECK_AND_EXIT(cudaDeviceSynchronize());)", "label": "(66, CUDA, CUDA_CHECK_AND_EXIT(cudaMalloc(&device_buffer, input_size_bytes));); (56, CUDA, CUDA_CHECK_AND_EXIT(cudaStreamCreate(&stream));); (80, CUDA, CUDA_CHECK_AND_EXIT(cudaFree(device_buffer));); (67, CUDA, CUDA_CHECK_AND_EXIT(cudaDeviceSynchronize());); (65, CUDA, CUDA_CHECK_AND_EXIT(cudaMemcpy(device_buffer, input.data(), input_size_bytes, cudaMemcpyHostToDevice));)"}
{"predict": "(14, OpenMP, #pragma omp distribute parallel for simd private(x);); (2, OpenMP, #pragma omp target); (2, OpenMP, #pragma omp distribute parallel for simd;); (16, OpenMP, #pragma omp distribute parallel for simd, private(x);); (21, OpenMP, #pragma omp distribute parallel for simd)); (0, OpenMP, #pragma omp teams)", "label": "(12, OpenMP, #pragma omp distribute parallel for simd firstprivate(x);); (5, OpenMP, #pragma omp distribute parallel for simd;); (24, OpenMP, #pragma omp distribute parallel for simd, private(x);); (0, OpenMP, #pragma omp target); (15, OpenMP, #pragma omp distribute parallel for simd private(x);); (-1, OpenMP, #pragma omp teams)"}
{"predict": "(95, OpenCL, err = clSetKernelArg(kernel, 0, sizeof(streams), &streams);); (105, OpenCL, clReleaseKernel(kernel);); (85, OpenCL, err = clGetDeviceInfo(dev, CL_DEVICE_MAX_WORK_GROUP_SIZE, sizeof(local_size), &local_size, NULL);); (59, OpenCL, err = clBuildProgram(program, 0, NULL, includes, NULL, NULL);); (103, OpenCL, clReleaseProgram(program);); (48, OpenCL, cl_program program = clCreateProgramWithSource(ctx, 4, sources, NULL, &err);); (96, OpenCL, err = clEnqueueNDRangeKernel(commQueues[0], kernel, 1, NULL, &streamCount, &local_size, numWaitEvents, waitEvents, outEvents);); (89, OpenCL, err |= clSetKernelArg(kernel, 1, sizeof(number_count_per_stream), &number_count_per_stream);); (89, OpenCL, err |= clSetKernelArg(kernel, 2, sizeof(outBuffer), &outBuffer);); (68, OpenCL, cl_kernel kernel = clCreateKernel(program, \"fillBufferU01\", &err);)", "label": "(95, OpenCL, err = clSetKernelArg(kernel, 0, sizeof(streams), &streams);); (105, OpenCL, clReleaseKernel(kernel);); (85, OpenCL, err = clGetDeviceInfo(dev, CL_DEVICE_MAX_WORK_GROUP_SIZE, sizeof(local_size), &local_size, NULL);); (59, OpenCL, err = clBuildProgram(program, 0, NULL, includes, NULL, NULL);); (103, OpenCL, clReleaseProgram(program);); (48, OpenCL, cl_program program = clCreateProgramWithSource(ctx, 4, sources, NULL, &err);); (96, OpenCL, err = clEnqueueNDRangeKernel(commQueues[0], kernel, 1, NULL, &streamCount, &local_size, numWaitEvents, waitEvents, outEvents);); (89, OpenCL, err |= clSetKernelArg(kernel, 1, sizeof(number_count_per_stream), &number_count_per_stream);); (89, OpenCL, err |= clSetKernelArg(kernel, 2, sizeof(outBuffer), &outBuffer);); (68, OpenCL, cl_kernel kernel = clCreateKernel(program, \"fillBufferU01\", &err);)"}
{"predict": "(3, OpenMP, #pragma omp target); (4, OpenMP, #pragma omp target data map(to: arr[50:51]))", "label": "(3, OpenMP, #pragma omp target)"}
{"predict": "(28, OpenMP, #pragma omp teams reduction(+:sum)); (25, OpenMP, #pragma omp target map(tofrom: b, sum, t) map(alloc: a)); (28, OpenMP, #pragma omp distribute parallel for reduction(+:sum)); (30, OpenMP, t[i] = omp_get_team_num();)", "label": "(28, OpenMP, #pragma omp teams reduction(+:sum)); (25, OpenMP, #pragma omp target map(tofrom: b, sum, t) map(alloc: a)); (28, OpenMP, #pragma omp distribute parallel for reduction(+:sum)); (30, OpenMP, t[i] = omp_get_team_num();)"}
{"predict": "(21, CUDA, extern __shared__ char shared_memory[];)", "label": "(38, CUDA, extern __shared__ char shared_memory[];)"}
{"predict": "(35, MPI, MPI_Get_count(&status, mpi::MpiType::kBYTE, &count);); (26, MPI, MPI_Get_dims(&status, mpi::MpiType::kINT64, 2, dims);); (14, MPI, MPI_Get_count(&status, mpi::MpiType::kUINT64, &count);); (37, MPI, tensor->copyFromWorldComm(msg);)", "label": "(28, MPI, MPICHECK(MPI_Mrecv(&dims, count, MPI_INT64_T, &msg, &status));); (36, MPI, MPICHECK(MPI_Get_count(&status, MPI_UINT8_T, &count));); (40, MPI, MPICHECK(MPI_Mrecv(tensor->data(), count, MPI_UINT8_T, &msg, &status));); (16, MPI, MPICHECK(MPI_Mrecv(&mpiId, count, MPI_UINT64_T, &msg, &status));); (20, MPI, MPICHECK(MPI_Get_count(&status, MPI_INT64_T, &count));); (11, MPI, MPICHECK(MPI_Get_count(&status, MPI_UINT64_T, &count));)"}
{"predict": "(15, CUDA, extern __shared__ float sdata[];)", "label": "(15, CUDA, extern __shared__ float sdata[];)"}
{"predict": "(11, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);)", "label": "(11, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);)"}
{"predict": "(24, OpenCL, error |= clSetKernelArg(kernel, 1, sizeof(dst), &dst);); (14, OpenCL, clKernelWrapper kernel = clCreateKernel(prog, \"read_user_semantic\", &error);); (22, OpenCL, error |= clSetKernelArg(kernel, 0, sizeof(deviceID), &deviceID);)", "label": "(15, OpenCL, clKernelWrapper kernel = clCreateKernel(prog, \"usersemantic_test\", &error);); (22, OpenCL, error |= clSetKernelArg(kernel, 0, sizeof(dst), &dst);)"}
{"predict": "(20, CUDA, getLastCudaError(\"mergeElementaryIntervalsKernel<0> failed\\n\");); (14, CUDA, getLastCudaError(\"mergeElementaryIntervalsKernel<1> failed\\n\");)", "label": "(15, CUDA, getLastCudaError(\"mergeElementaryIntervalsKernel<1> failed\\n\");); (19, CUDA, getLastCudaError(\"mergeElementaryIntervalsKernel<0> failed\\n\");)"}
{"predict": "(87, MPI, MPI_Bcast( asub, nnz, mpi_int_t,  0, grid.comm );); (224, MPI, MPI_Finalize();); (83, MPI, MPI_Bcast( &nnz, 1,   mpi_int_t,  0, grid.comm );); (83, MPI, MPI_Bcast( a,    nnz, MPI_DOUBLE, 0, grid.comm );); (22, MPI, MPI_Init( &argc, &argv );); (83, MPI, MPI_Bcast( xa,   n+1, mpi_int_t,  0, grid.comm );); (78, MPI, MPI_Bcast( &n,   1,   mpi_int_t,  0, grid.comm );); (76, MPI, MPI_Bcast( &m,   1,   mpi_int_t,  0, grid.comm );)", "label": "(87, MPI, MPI_Bcast( asub, nnz, mpi_int_t,  0, grid.comm );); (224, MPI, MPI_Finalize();); (83, MPI, MPI_Bcast( &nnz, 1,   mpi_int_t,  0, grid.comm );); (83, MPI, MPI_Bcast( a,    nnz, MPI_DOUBLE, 0, grid.comm );); (22, MPI, MPI_Init( &argc, &argv );); (83, MPI, MPI_Bcast( xa,   n+1, mpi_int_t,  0, grid.comm );); (78, MPI, MPI_Bcast( &n,   1,   mpi_int_t,  0, grid.comm );); (76, MPI, MPI_Bcast( &m,   1,   mpi_int_t,  0, grid.comm );)"}
{"predict": "(26, MPI, MPI_Isend(buf, cnt, MPI_INT, thread_num, tag, MPI_COMM_WORLD, &r[thread_num - 1]);); (37, MPI, t = MPI_Wtime() - t;); (23, MPI, t = MPI_Wtime();); (10, MPI, MPI_Comm_size(MPI_COMM_WORLD, &wsize);); (30, MPI, MPI_Waitall(wsize - 1, r, MPI_STATUSES_IGNORE);); (23, MPI, MPI_Wait(&r[thread_num - 1], MPI_STATUS_IGNORE);)", "label": "(26, MPI, MPI_Isend(buf, cnt, MPI_INT, thread_num, tag, MPI_COMM_WORLD, &r[thread_num - 1]);); (36, MPI, t = MPI_Wtime() - t;); (21, MPI, t = MPI_Wtime();); (9, MPI, MPI_Comm_size(MPI_COMM_WORLD, &wsize);); (29, MPI, MPI_Waitall(wsize - 1, r, MPI_STATUSES_IGNORE);); (23, MPI, MPI_Wait(&r[thread_num - 1], MPI_STATUS_IGNORE);)"}
{"predict": "(12, OpenMP, #pragma omp parallel master taskloop lastprivate(s) firstprivate(s)); (8, OpenMP, #pragma omp parallel master taskloop firstprivate(s)); (13, OpenMP, #pragma omp parallel master taskloop lastprivate(s)); (-1, OpenMP, #pragma omp parallel); (15, OpenMP, #pragma omp parallel master taskloop firstprivate(s) lastprivate(s)); (0, OpenMP, #pragma omp parallel master taskloop)", "label": "(8, OpenMP, #pragma omp target parallel for simd order(); (13, OpenMP, #pragma omp target parallel for simd order(concurrent); (15, OpenMP, #pragma omp target parallel for simd order(concurrent)); (2, OpenMP, #pragma omp target parallel for simd order); (-2, OpenMP, #pragma omp target parallel for simd lastprivate(s) firstprivate(s)); (6, OpenMP, #pragma omp target parallel for simd order(none)"}
{"predict": "(7, CUDA, __shared__ block_radix_sort_t::TempStorage temp_storage;)", "label": "(7, CUDA, __shared__ block_radix_sort_t::TempStorage temp_storage;)"}
{"predict": "(69, CUDA, ASSERT_EQ(cudaSuccess, cudaStreamSynchronize(stream));); (2, CUDA, ASSERT_EQ(cudaSuccess, cudaStreamCreate(&stream));); (60, CUDA, ASSERT_EQ(cudaSuccess, cudaMemcpy(inData->basePtr(), inVec.data(), inBufSize, cudaMemcpyHostToDevice));); (72, CUDA, ASSERT_EQ(cudaSuccess, cudaMemcpy(testVec.data(), outData->basePtr(), outBufSize, cudaMemcpyDeviceToHost));); (66, CUDA, ASSERT_EQ(cudaSuccess, cudaStreamDestroy(stream));)", "label": "(68, CUDA, ASSERT_EQ(cudaSuccess, cudaStreamSynchronize(stream));); (2, CUDA, ASSERT_EQ(cudaSuccess, cudaStreamCreate(&stream));); (59, CUDA, ASSERT_EQ(cudaSuccess, cudaMemcpy(inData->basePtr(), inVec.data(), inBufSize, cudaMemcpyHostToDevice));); (72, CUDA, ASSERT_EQ(cudaSuccess, cudaMemcpy(testVec.data(), outData->basePtr(), outBufSize, cudaMemcpyDeviceToHost));); (65, CUDA, ASSERT_EQ(cudaSuccess, cudaStreamDestroy(stream));)"}
{"predict": "(26, CUDA, CUDA_CHECK(cudaMalloc((void **)&dev_max, sizeof(FP) * SEQLEN * DIM));); (46, CUDA, cudaFree(dev_max);); (28, CUDA, CUDA_CHECK(cudaMemcpy(dev_denom, host_denom, sizeof(FP) * SEQLEN * DIM, cudaMemcpyHostToDevice));); (24, CUDA, CUDA_CHECK(cudaMalloc((void **)&dev_denom, sizeof(FP) * SEQLEN * DIM));); (24, CUDA, CUDA_CHECK(cudaMalloc((void **)&QK, sizeof(FP) * SEQLEN * SEQLEN));); (24, CUDA, CUDA_CHECK(cudaMemcpy(dev_max, host_max, sizeof(FP) * SEQLEN * DIM, cudaMemcpyHostToDevice));); (40, CUDA, cudaFree(QK);); (38, CUDA, cudaFree(dev_denom);)", "label": "(26, CUDA, CUDA_CHECK(cudaMalloc((void **)&dev_max, sizeof(FP) * SEQLEN * DIM));); (45, CUDA, cudaFree(dev_max);); (28, CUDA, CUDA_CHECK(cudaMemcpy(dev_denom, host_denom, sizeof(FP) * SEQLEN * DIM, cudaMemcpyHostToDevice));); (24, CUDA, CUDA_CHECK(cudaMalloc((void **)&dev_denom, sizeof(FP) * SEQLEN * DIM));); (24, CUDA, CUDA_CHECK(cudaMalloc((void **)&QK, sizeof(FP) * SEQLEN * SEQLEN));); (24, CUDA, CUDA_CHECK(cudaMemcpy(dev_max, host_max, sizeof(FP) * SEQLEN * DIM, cudaMemcpyHostToDevice));); (39, CUDA, cudaFree(QK);); (40, CUDA, cudaFree(dev_denom);)"}
{"predict": "(17, OpenMP, #pragma omp for schedule(runtime) reduction(+:total) linear(idx:1)); (13, OpenMP, thread_num = omp_get_thread_num();); (15, OpenMP, #pragma omp master); (7, OpenMP, #pragma omp parallel shared(data, std::cerr, total, idx) default(none))", "label": "(19, OpenMP, #pragma omp for schedule(runtime) reduction(+:total) linear(idx:1)); (13, OpenMP, thread_num = omp_get_thread_num();); (15, OpenMP, #pragma omp master); (7, OpenMP, #pragma omp parallel shared(data, std::cerr, total, idx) default(none))"}
{"predict": "(32, MPI, MPI_Abort(MPI_COMM_WORLD, mpi_errno);)", "label": "(62, MPI, MPI_Type_commit(newtype);)"}
{"predict": "(20, OpenMP, #pragma omp parallel for); (15, OpenMP, #pragma omp parallel); (21, OpenMP, #pragma omp parallel for private(instance))", "label": "(21, CUDA, $GPU(cudaMemcpy(compare, gpu_outputs, sizeof(typename types<params>::output_t)*count, cudaMemcpyDeviceToHost));); (15, CUDA, $GPU(cudaMalloc((void **)&gpu_outputs, sizeof(typename types<params>::output_t)*count));); (15, CUDA, $GPU(cudaMemset(gpu_outputs, 0, sizeof(typename types<params>::output_t)*count));); (58, CUDA, $GPU(cudaFree(gpu_outputs));)"}
{"predict": "(38, CUDA, CUDA_CHECK(cudaStreamSynchronize(stream));); (40, CUDA, CUDA_CHECK(cudaFree(d_data));)", "label": "(38, CUDA, CUDA_CHECK(cudaStreamSynchronize(stream));); (40, CUDA, CUDA_CHECK(cudaFree(d_data));)"}
{"predict": "(48, CUDA, __shared__ doublecomplex temp2[MAXSUPER];)", "label": "(45, CUDA, __shared__ doublecomplex temp2[MAXSUPER];)"}
{"predict": "(10, OpenCL, auto mappedPtr = clEnqueueMapBuffer(&cmdQ, buffer.get(), CL_TRUE, CL_MAP_WRITE, 0, 1, 0, nullptr, nullptr, &retVal);); (12, OpenCL, retVal = clEnqueueUnmapMemObject(&cmdQ, buffer.get(), mappedPtr, 0, nullptr, nullptr);)", "label": "(10, OpenCL, auto mappedPtr = clEnqueueMapBuffer(&cmdQ, buffer.get(), CL_TRUE, CL_MAP_READ, 0, 1, 0, nullptr, nullptr, &retVal);); (12, OpenCL, retVal = clEnqueueUnmapMemObject(&cmdQ, buffer.get(), mappedPtr, 0, nullptr, nullptr);)"}
{"predict": "(47, OpenMP, #pragma omp target teams firstprivate(j)); (38, OpenMP, #pragma omp target teams firstprivate(h, B::x)); (31, OpenMP, #pragma omp target teams firstprivate(S2::S2s)); (8, OpenMP, #pragma omp target teams firstprivate (); (32, OpenMP, #pragma omp target teams firstprivate(e, g)); (46, OpenMP, #pragma omp target teams firstprivate(m)); (8, OpenMP, #pragma omp target teams firstprivate ()); (3, OpenMP, #pragma omp target teams firstprivate); (22, OpenMP, #pragma omp target teams firstprivate (argv[1])); (36, OpenMP, #pragma omp target teams firstprivate(i)); (28, OpenMP, #pragma omp target teams firstprivate(da, z)); (17, OpenMP, #pragma omp target teams firstprivate(ba)); (3, OpenMP, #pragma omp target teams firstprivate (argc); (17, OpenMP, #pragma omp target teams firstprivate(ca)); (4, OpenMP, #pragma omp target teams firstprivate (S1)); (20, OpenMP, #pragma omp target teams firstprivate(S2::S2sc)); (34, OpenMP, #pragma omp target teams firstprivate); (26, OpenMP, #pragma omp target teams private(i), firstprivate(i)); (1, OpenMP, #pragma omp target teams firstprivate (argc,); (17, OpenMP, #pragma omp target teams firstprivate(ca,z)); (-4, OpenMP, #pragma omp target teams firstprivate (argc > 0 ? argv[1] : argv[2])); (-12, OpenMP, #pragma omp target teams firstprivate (argc); (23, OpenMP, #pragma omp target teams shared(i)); (15, OpenMP, #pragma omp target teams firstprivate(threadvar, B::x))", "label": "(24, OpenMP, #pragma omp target parallel firstprivate (a, b, c, d, f)); (43, OpenMP, #pragma omp target parallel shared(i)); (46, OpenMP, #pragma omp target parallel firstprivate(j)); (19, OpenMP, #pragma omp target parallel firstprivate (S1)); (6, OpenMP, #pragma omp target parallel firstprivate (); (11, OpenMP, #pragma omp target parallel firstprivate (argc,); (28, OpenMP, #pragma omp target parallel firstprivate(S2::S2s)); (35, OpenMP, #pragma omp target parallel private(i), firstprivate(i)); (12, OpenMP, #pragma omp target parallel firstprivate (argc) allocate , allocate(, allocate(omp_default , allocate(omp_default_mem_alloc, allocate(omp_default_mem_alloc:, allocate(omp_default_mem_alloc: argc, allocate(omp_default_mem_alloc: argv), allocate(argv)); (29, OpenMP, #pragma omp target parallel firstprivate(e, g)); (30, OpenMP, #pragma omp target parallel firstprivate(h, B::x)); (19, OpenMP, #pragma omp target parallel firstprivate(ca, z)); (16, OpenMP, #pragma omp target parallel firstprivate(ba) allocate(omp_thread_mem_alloc: ba)); (-1, OpenMP, #pragma omp target parallel firstprivate ()); (36, OpenMP, #pragma omp target parallel firstprivate(m)); (-1, OpenMP, #pragma omp target parallel firstprivate (argc); (-8, OpenMP, #pragma omp target parallel firstprivate); (29, OpenMP, #pragma omp target parallel firstprivate(i)); (18, OpenMP, #pragma omp target parallel firstprivate(S2::S2sc)); (7, OpenMP, #pragma omp target parallel firstprivate (argv[1])); (-2, OpenMP, #pragma omp target parallel firstprivate (argc > 0 ? argv[1] : argv[2])); (11, OpenMP, #pragma omp target parallel firstprivate(da))"}
{"predict": "(7, TBB, start = tbb::tick_count::now();); (18, TBB, tbb::tick_count now = tbb::tick_count::now();); (-1, TBB, tbb::tick_count start;); (1, TBB, agg_cpq = new tbb::concurrent_priority_queue<my_data_type, my_less >;); (5, TBB, now = tbb::tick_count::now();)", "label": "(8, TBB, start = tbb::tick_count::now();); (0, TBB, tbb::tick_count now;); (8, TBB, now = tbb::tick_count::now();)"}
{"predict": "(3, OpenMP, #pragma omp parallel); (6, OpenMP, #pragma omp barrier); (-1, OpenMP, int me = omp_get_thread_num();)", "label": "(17, OpenMP, #pragma omp barrier); (2, OpenMP, #pragma omp parallel); (3, OpenMP, int me = omp_get_thread_num();)"}
{"predict": "(26, OpenCL, error |= clGetDeviceInfo( device, CL_DEVICE_IMAGE_MAX_ARRAY_SIZE, sizeof( maxArraySize ), &maxArraySize, NULL );); (28, OpenCL, error |= clGetDeviceInfo( device, CL_DEVICE_GLOBAL_MEM_SIZE, sizeof( memSize ), &memSize, NULL );); (26, OpenCL, error |= clGetDeviceInfo( device, CL_DEVICE_MAX_MEM_ALLOC_SIZE, sizeof( maxAllocSize ), &maxAllocSize, NULL );); (23, OpenCL, error = clGetDeviceInfo( device, CL_DEVICE_IMAGE2D_MAX_WIDTH, sizeof( maxWidth ), &maxWidth, NULL );)", "label": "(27, OpenCL, error |= clGetDeviceInfo( device, CL_DEVICE_IMAGE_MAX_ARRAY_SIZE, sizeof( maxArraySize ), &maxArraySize, NULL );); (28, OpenCL, error |= clGetDeviceInfo( device, CL_DEVICE_GLOBAL_MEM_SIZE, sizeof( memSize ), &memSize, NULL );); (26, OpenCL, error |= clGetDeviceInfo( device, CL_DEVICE_MAX_MEM_ALLOC_SIZE, sizeof( maxAllocSize ), &maxAllocSize, NULL );); (23, OpenCL, error = clGetDeviceInfo( device, CL_DEVICE_IMAGE2D_MAX_WIDTH, sizeof( maxWidth ), &maxWidth, NULL );)"}
{"predict": "(11, CUDA, __shared__ thrust::cuda_cub::core::uninitialized_array<T, SUM_SIZE> sum;)", "label": "(11, CUDA, __shared__ uninitialized_array<T, SUM_SIZE> sum;)"}
{"predict": "(2, TBB, typedef tbb::concurrent_cache<value_type,cache_size> cache_type;)", "label": "(10, TBB, static const size_t number_of_threads = 8 * tbb::task_scheduler_init::default_num_threads();)"}
{"predict": "(7, CUDA, __shared__ typename BlockReduce::TempStorage temp_storage;)", "label": "(7, CUDA, __shared__ typename BlockReduce::TempStorage temp_storage;)"}
{"predict": "(2, TBB, using namespace tbb::internal;)", "label": "(2, TBB, using namespace tbb::internal;)"}
{"predict": "(2, OpenMP, #pragma omp taskyield allocate(argc)); (3, OpenMP, #pragma omp taskyield untied); (3, OpenMP, #pragma omp taskyield)", "label": "(2, OpenMP, #pragma omp taskyield allocate(argc)); (3, OpenMP, #pragma omp taskyield untied); (3, OpenMP, #pragma omp taskyield)"}
{"predict": "(13, CUDA, CHECK_CudaErroorFun(\"min_w_pattern_kernel\");); (3, CUDA, double *d_ptr = thrust::raw_pointer_cast(&d1[0]);); (7, CUDA, thrust::device_ptr<double> dev_ptr = thrust::device_pointer_cast(d_ptr);); (8, CUDA, thrust::reduce(dev_ptr, dev_ptr + n, ret_host[0], thrust::minimum<double>());)", "label": "(14, CUDA, cudaError_t cuerr = cudaMemcpy(ret_host, ret_ptr, (1)*sizeof(double), cudaMemcpyDeviceToHost);); (3, CUDA, double* d_ptr = thrust::raw_pointer_cast(dv_ptr);); (7, CUDA, thrust::device_ptr<double> ret_dev_ptr = thrust::min_element(thrust::device, dv_ptr, dv_ptr+n);); (10, CUDA, double *ret_ptr = thrust::raw_pointer_cast(ret_dev_ptr);); (-1, CUDA, thrust::device_ptr<double> dv_ptr = thrust::device_malloc(n*sizeof(double));); (14, CUDA, thrust::device_free(dv_ptr);)"}
{"predict": "(14, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);)", "label": "(14, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);)"}
{"predict": "(40, MPI, MPI_Pack(a, 1, xpose, buffer, bufsize, &position, MPI_COMM_WORLD);); (56, MPI, MPI_Type_free(&row);); (28, MPI, MPI_Type_commit(&xpose);); (53, MPI, MPI_Type_free(&xpose);); (25, MPI, MPI_Type_hvector(100, 1, sizeofint, row, &xpose);); (20, MPI, MPI_Type_get_extent(MPI_INT, &tmp_lb, &sizeofint);); (27, MPI, MPI_Pack_size(1, xpose, MPI_COMM_WORLD, &bufsize);); (31, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);); (36, MPI, MPI_Unpack(buffer, bufsize, &position, b, 100 * 100, MPI_INT, MPI_COMM_WORLD);); (19, MPI, MPI_Type_vector(100, 1, 100, MPI_INT, &row);)", "label": "(25, MPI, MPI_Type_get_extent(MPI_INT, &tmp_lb, &sizeofint);); (39, MPI, MPI_Pack(a, 1, xpose, buffer, bufsize, &position, MPI_COMM_WORLD);); (55, MPI, MPI_Type_free(&row);); (27, MPI, MPI_Type_commit(&xpose);); (52, MPI, MPI_Type_free(&xpose);); (28, MPI, MPI_Pack_size(1, xpose, MPI_COMM_WORLD, &bufsize);); (23, MPI, MPI_Type_create_hvector(100, 1, sizeofint, row, &xpose);); (31, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);); (36, MPI, MPI_Unpack(buffer, bufsize, &position, b, 100 * 100, MPI_INT, MPI_COMM_WORLD);); (19, MPI, MPI_Type_vector(100, 1, 100, MPI_INT, &row);)"}
{"predict": "(34, CUDA, CUDA_CHECK(cudaStreamSynchronize(stream));); (36, CUDA, CUDA_CHECK(cudaFree(d_data));)", "label": "(34, CUDA, CUDA_CHECK(cudaStreamSynchronize(stream));); (36, CUDA, CUDA_CHECK(cudaFree(d_data));)"}
{"predict": "(191, OpenMP, #pragma omp barrier); (98, OpenMP, const int np     = omp_get_num_threads();); (112, OpenMP, #pragma omp master); (135, OpenMP, #pragma omp private(tt, vgh_t_loc, v_t_loc, my_accepted, my_vals)); (256, OpenMP, double dTotalThreads = omp_get_max_threads();); (72, OpenMP, #pragma omp parallel reduction(+ : t0, tInit, ratio, vgh_t, val_t, nspheremoves, dNumVGHCalls)); (212, OpenMP, #pragma omp critical); (93, OpenMP, const int ip     = omp_get_thread_num();); (132, OpenMP, #pragma omp nested); (248, OpenMP, #pragma omp parallel reduction(+ : ratio, vgh_t, val_t, nspheremoves, dNumVGHCalls)); (107, OpenMP, #pragma omp parallel private(nptcl, nknots_copy)); (66, OpenMP, #pragma omp parallel); (219, OpenMP, #pragma omp atomic); (132, OpenMP, clock_a.touch();); (68, OpenMP, #pragma omp master); (94, OpenMP, #pragma omp parallel private(tau, Rmax, np, ip)); (59, OpenMP, t0 = omp_get_wtime();); (227, OpenMP, #pragma omp parallel reduction(min : ratio)); (128, OpenMP, #pragma omp parallel private(els, ions, spo, my_random)); (143, OpenMP, #pragma omp parallel shared(t0, nsteps, np, ip)); (64, OpenMP, #pragma omp parallel private(nsteps, iseed, tileSize, na, nb, nc, nx, ny, nz, tmat, nions, nels, nels3, nTiles)); (243, OpenMP, #pragma omp parallel reduction(max : vgh_t, val_t)); (243, OpenMP, #pragma omp master); (47, OpenMP, cout << \"Thread \" << omp_get_thread_num() << \" is using seed = \" << MakeSeed(ip, np) << endl;); (117, OpenMP, #", "label": "(115, OpenMP, ncrews = omp_get_max_threads();); (98, OpenMP, const int np = omp_get_num_threads();); (189, OpenMP, #pragma omp barrier); (233, OpenMP, double dTotalThreads = omp_get_max_threads();); (268, OpenMP, double nMajorThreads  = omp_get_max_threads();); (137, OpenMP, #pragma omp parallel reduction(+ : vgh_t_loc, v_t_loc, my_vals)); (106, OpenMP, #pragma omp master); (278, OpenMP, cout << \"\\nMPI: \" << nmpi << \" and Threads: \" << omp_get_max_threads();); (92, OpenMP, const int ip = omp_get_thread_num();); (86, OpenMP, #pragma omp parallel reduction(+ : t0, tInit, ratio, vgh_t, val_t, nspheremoves, dNumVGHCalls))"}
{"predict": "(45, CUDA, cudaEventDestroy(start);); (40, CUDA, cudaEventSynchronize(stop);); (45, CUDA, cudaEventDestroy(stop);); (37, CUDA, cudaEventRecord(stop, 0);); (42, CUDA, cudaEventElapsedTime(&time, start, stop);); (16, CUDA, cudaMalloc((void **)&b_device, N * sizeof(half));); (27, CUDA, cudaDeviceSynchronize();); (31, CUDA, cudaEventRecord(start, 0);); (14, CUDA, cudaMalloc((void **)&c_device, N * sizeof(half));); (4, CUDA, cudaMalloc((void **)&a_device, N * sizeof(half));); (38, CUDA, cudaMemcpy(c_host, c_device, N * sizeof(half), cudaMemcpyDeviceToHost);); (13, CUDA, cudaMemcpy(a_device, a_host, N * sizeof(half), cudaMemcpyHostToDevice);); (13, CUDA, cudaMemcpy(b_device, b_host, N * sizeof(half), cudaMemcpyHostToDevice);); (28, CUDA, cudaEventCreate(&stop);); (26, CUDA, cudaEventCreate(&start);); (18, CUDA, cudaFree(a_device);); (18, CUDA, cudaFree(b_device);); (38, CUDA, cudaEventDestroy(stop);)", "label": "(25, CUDA, cudaMalloc((void **)&c_device, N * sizeof(half));); (49, CUDA, cudaEventSynchronize(stop);); (50, CUDA, cudaEventDestroy(start);); (155, CUDA, cudaFree(a_device);); (32, CUDA, cudaDeviceSynchronize();); (155, CUDA, cudaFree(c_device);); (43, CUDA, cudaEventRecord(stop, 0);); (46, CUDA, cudaEventDestroy(stop);); (151, CUDA, cudaFree(b_device);); (33, CUDA, cudaEventRecord(start, 0);); (11, CUDA, cudaMemcpy(b_device, b_host, N * sizeof(half), cudaMemcpyHostToDevice);); (30, CUDA, cudaEventCreate(&stop);); (6, CUDA, cudaMalloc((void **)&b_device, N * sizeof(half));); (-2, CUDA, cudaMalloc((void **)&a_device, N * sizeof(half));); (37, CUDA, cudaEventElapsedTime(&time, start, stop);); (-1, CUDA, cudaMemcpy(a_device, a_host, N * sizeof(half), cudaMemcpyHostToDevice);); (24, CUDA, cudaEventCreate(&start);); (39, CUDA, cudaMemcpy(c_host, c_device, N * sizeof(half), cudaMemcpyDeviceToHost);)"}
{"predict": "(28, CUDA, CHECK(cudaFree(x));); (28, CUDA, CHECK(cudaFree(y));); (20, CUDA, CHECK(cudaMemset(z, 0, M));); (9, CUDA, CHECK(cudaMalloc((void **)&z, M));); (3, CUDA, CHECK(cudaSetDevice(device_id));); (6, CUDA, CHECK(cudaMalloc((void **)&x, M));); (26, CUDA, CHECK(cudaFree(z));); (14, CUDA, CHECK(cudaMemcpy(y, z, M, cudaMemcpyDeviceToDevice));); (2, CUDA, CHECK(cudaMalloc((void **)&y, M));)", "label": "(27, CUDA, CHECK(cudaMemPrefetchAsync(z, M, cudaCpuDeviceId, NULL));); (20, CUDA, CHECK(cudaMemPrefetchAsync(x, M, device_id, NULL));); (20, CUDA, CHECK(cudaMemPrefetchAsync(y, M, device_id, NULL));); (7, CUDA, CHECK(cudaMallocManaged((void **)&z, M));); (28, CUDA, CHECK(cudaFree(x));); (-2, CUDA, CHECK(cudaGetDevice(&device_id));); (2, CUDA, CHECK(cudaMallocManaged((void **)&x, M));); (26, CUDA, CHECK(cudaFree(y));); (26, CUDA, CHECK(cudaFree(z));); (14, CUDA, CHECK(cudaMemPrefetchAsync(z, M, device_id, NULL));); (19, CUDA, CHECK(cudaDeviceSynchronize());); (-2, CUDA, CHECK(cudaMallocManaged((void **)&y, M));)"}
{"predict": "(13, CUDA, HANDLE_ERROR( cudaGraphicsGLSetGLDevice( dev ) );); (3, CUDA, HANDLE_ERROR( cudaGetDevice( &dev ) );)", "label": "(14, CUDA, HANDLE_ERROR( cudaGLSetGLDevice( dev ) );); (51, CUDA, HANDLE_ERROR( cudaGraphicsUnmapResources( 1, &resource, NULL ) );); (39, CUDA, HANDLE_ERROR( cudaGraphicsMapResources( 1, &resource, NULL ) );); (4, CUDA, HANDLE_ERROR( cudaChooseDevice( &dev, &prop ) );)"}
{"predict": "(19, MPI, MPI_Init(&argc, &argv);); (25, MPI, MPI_Finalize();); (19, MPI, MPI_Comm_size(MPI_COMM_WORLD, &num_procs);); (17, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &myid);)", "label": "(19, MPI, MPI_Init(&argc, &argv);); (25, MPI, MPI_Finalize();); (19, MPI, MPI_Comm_size(MPI_COMM_WORLD, &num_procs);); (17, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &myid);)"}
{"predict": "(22, OpenMP, #pragma omp for private(int)); (15, OpenMP, #pragma omp for private(, )); (29, OpenMP, #pragma omp for private(0)); (35, OpenMP, #pragma omp for private(x, y)); (39, OpenMP, #pragma omp for private(x, y, z)); (6, OpenMP, #pragma omp for private(,); (31, OpenMP, #pragma omp for private(x)); (-3, OpenMP, #pragma omp parallel); (1, OpenMP, #pragma omp for private(); (19, OpenMP, #pragma omp for private(x,); (36, OpenMP, #pragma omp for private(x, y, z, w : 0)); (-6, OpenMP, #pragma omp for private); (37, OpenMP, #pragma omp parallel private(x, y, z, w : 0)); (15, OpenMP, #pragma omp for private(x :, )); (2, OpenMP, #pragma omp for private())", "label": "(26, OpenMP, #pragma omp for private(int)); (10, OpenMP, #pragma omp for private(,); (35, OpenMP, #pragma omp for private(x)); (2, OpenMP, #pragma omp for private(); (-2, OpenMP, #pragma omp parallel); (26, OpenMP, #pragma omp for private(0)); (10, OpenMP, #pragma omp for private(, )); (34, OpenMP, #pragma omp for private(x, y)); (13, OpenMP, #pragma omp for private()); (36, OpenMP, #pragma omp for private(x, y, z))"}
{"predict": "(9, TBB, test_extract_on_node<tbb::flow::overwrite_node, int>();); (9, TBB, test_extract_on_node<tbb::flow::overwrite_node, float>();); (3, TBB, tbb::task_scheduler_init init(p);)", "label": "(7, TBB, test_reserving_nodes<tbb::flow::write_once_node, size_t>();); (3, TBB, tbb::task_scheduler_init init(p);); (8, TBB, test_extract_on_node<tbb::flow::write_once_node, int>();)"}
{"predict": "(13, MPI, MPI_Isend(buffer, buf_size, MPI_BYTE, 1, tag1, MPI_COMM_WORLD, &request1);); (15, MPI, MPI_Wait(&request2, &status);); (17, MPI, MPI_Irecv(buffer, buf_size, MPI_BYTE, 0, tag1, MPI_COMM_WORLD, &request1);); (15, MPI, MPI_Irecv(buffer, buf_size, MPI_BYTE, 0, tag2, MPI_COMM_WORLD, &request2);); (17, MPI, MPI_Wait(&request1, &status);); (9, MPI, MPI_Isend(buffer, buf_size, MPI_BYTE, 1, tag2, MPI_COMM_WORLD, &request2);)", "label": "(13, MPI, MPI_Isend(buffer, buf_size, MPI_BYTE, 1, tag1, MPI_COMM_WORLD, &request1);); (15, MPI, MPI_Wait(&request2, &status);); (12, MPI, MPI_Isend(buffer, buf_size, MPI_BYTE, 1, tag2, MPI_COMM_WORLD, &request2);); (16, MPI, MPI_Irecv(buffer, buf_size, MPI_BYTE, 0, tag1, MPI_COMM_WORLD, &request2);); (11, MPI, MPI_Wait(&request1, &status);); (13, MPI, MPI_Irecv(buffer, buf_size, MPI_BYTE, 0, tag2, MPI_COMM_WORLD, &request1);)"}
{"predict": "(15, CUDA, cudaDeviceSynchronize();)", "label": "(15, CUDA, cudaDeviceSynchronize();)"}
{"predict": "(12, OpenMP, #pragma omp parallel for private(i,j,k) shared(a,b,c,row_a,col_a,row_b,col_b))", "label": "(12, OpenMP, #pragma omp parallel for private(i,j,k) num_threads(dtn(border, 1)))"}
{"predict": "(36, OpenMP, #pragma omp target parallel for map(a, b))", "label": "(36, OpenMP, #pragma omp target parallel for map(a, b))"}
{"predict": "(4, CUDA, extern __shared__ int shared[];)", "label": "(4, CUDA, extern __shared__ int shared[];)"}
{"predict": "(25, OpenMP, omp_target_disassociate_ptr(p_a, DefaultDeviceNum);); (11, OpenMP, d_a = (int *)omp_target_alloc(DataSize, DefaultDeviceNum);); (29, OpenMP, omp_target_free(d_a, DefaultDeviceNum);); (14, OpenMP, omp_target_associate_ptr(p_a, d_a, DataSize, 0, DefaultDeviceNum);); (20, OpenMP, #pragma omp target update to(p_a))", "label": "(32, OpenMP, omp_target_free(d_a, DefaultDeviceNum);); (23, OpenMP, #pragma omp target update to(p_a)); (12, OpenMP, d_a = (int *)omp_target_alloc(DataSize, DefaultDeviceNum);); (6, OpenMP, int DefaultDeviceNum = omp_get_default_device();); (14, OpenMP, omp_target_associate_ptr(p_a, d_a, DataSize, 0, DefaultDeviceNum);); (23, OpenMP, omp_target_disassociate_ptr(p_a, DefaultDeviceNum);)"}
{"predict": "(6, TBB, tbb::filter<void, void> one_filter( filter_table[i], i_filter );); (9, TBB, tbb::parallel_pipeline( n_tokens, one_filter, context... );)", "label": "(9, TBB, tbb::parallel_pipeline( n_tokens, one_filter, context... );); (5, TBB, tbb::filter<void, void> one_filter( filter_table[i], i_filter );)"}
{"predict": "(13, MPI, MPI_Bcast(dims, RANK, MPI_INT, 0, comm);); (2, MPI, MPI_Comm_rank(comm, &comm_rank);)", "label": "(13, MPI, MPI_Bcast(dims, 2, MPI_INT, 0, comm);); (2, MPI, MPI_Comm_rank(comm, &comm_rank);)"}
{"predict": "(72, CUDA, CHECK_CUDA_ERROR(cudaSetDevice(dev));); (72, CUDA, CHECK_CUDA_ERROR(cudaGetDeviceProperties(&deviceProp, dev));); (9, CUDA, CHECK_CUDA_ERROR(cudaRuntimeGetVersion(&runtime_version));); (4, CUDA, CHECK_CUDA_ERROR(cudaDriverGetVersion(&driver_version));)", "label": "(10, CUDA, CHECK_CUDA_ERROR(cudaRuntimeGetVersion(&runtime_version));); (72, CUDA, CHECK_CUDA_ERROR(cudaSetDevice(dev));); (26, CUDA, CHECK_CUDA_ERROR(cudaGetDeviceProperties(&deviceProp, dev));); (3, CUDA, CHECK_CUDA_ERROR(cudaDriverGetVersion(&driver_version));); (20, CUDA, CHECK_CUDA_ERROR(cudaGetDeviceProperties(&deviceProp, i));)"}
{"predict": "(15, CUDA, as::cuda::CUDAContext device(device_id);); (163, CUDA, cudaCheck(cudaMalloc(&ws, shape_ws[0]));); (183, CUDA, cudaCheck(cudaFree(v_span));); (180, CUDA, cudaCheck(cudaFree(k_span));); (177, CUDA, cudaCheck(cudaFree(span_pool));); (178, CUDA, cudaCheck(cudaFree(out));); (179, CUDA, cudaCheck(cudaFree(ref));); (168, CUDA, cudaCheck(cudaMalloc(&k_span, shape_k_span[0] * sizeof(int)));); (175, CUDA, cudaCheck(cudaFree(q));); (170, CUDA, cudaCheck(cudaMalloc(&span_pool, shape_span_pool[0]));); (176, CUDA, cudaCheck(cudaFree(ws));); (161, CUDA, cudaCheck(cudaMalloc(&v_span, shape_v_span[0] * sizeof(int)));); (164, CUDA, cudaCheck(cudaMalloc(&out, shape_out[0] * shape_out[1] * sizeof(T)));); (165, CUDA, cudaCheck(cudaMalloc(&ref, shape_ref[0] * shape_ref[1] * sizeof(T)));); (166, CUDA, cudaCheck(cudaMalloc(&q, shape_q[0] * shape_q[1] * sizeof(T)));)", "label": "(90, CUDA, ASSERT_EQ(cudaSuccess, cudaMallocHost(&host_ws, host_ws_bytes));); (297, CUDA, ASSERT_EQ(cudaSuccess, cudaEventDestroy(ref_start));); (230, CUDA, ASSERT_EQ(cudaSuccess, cudaEventElapsedTime(&ref_time, ref_start, ref_end));); (297, CUDA, ASSERT_EQ(cudaSuccess, cudaEventDestroy(out_start));); (297, CUDA, ASSERT_EQ(cudaSuccess, cudaEventDestroy(out_end));); (249, CUDA, ASSERT_EQ(cudaSuccess, cudaEventElapsedTime(&out_time, out_start, out_end));); (201, CUDA, ASSERT_EQ(cudaSuccess, cudaEventCreate(&ref_end));); (292, CUDA, ASSERT_EQ(cudaSuccess, cudaEventDestroy(ref_end));); (244, CUDA, ASSERT_EQ(cudaSuccess, cudaEventRecord(out_end, cuda_stream));); (199, CUDA, ASSERT_EQ(cudaSuccess, cudaEventCreate(&out_start));); (199, CUDA, ASSERT_EQ(cudaSuccess, cudaEventCreate(&out_end));); (220, CUDA, ASSERT_EQ(cudaSuccess, cudaEventSynchronize(ref_end));); (241, CUDA, ASSERT_EQ(cudaSuccess, cudaEventSynchronize(out_end));); (217, CUDA, ASSERT_EQ(cudaSuccess, cudaEventRecord(ref_end, cuda_stream));); (192, CUDA, ASSERT_EQ(cudaSuccess, cudaEventCreate(&ref_start));)"}
{"predict": "(18, CUDA, __shared__ uint32_t sharedMemory[1024];); (29, CUDA, __shared__ uint32_t shuffleMem[64];)", "label": "(18, CUDA, __shared__ uint32_t sharedMemory[1024];); (29, CUDA, extern __shared__ uint32_t shuffleMem[];)"}
{"predict": "(6, MPI, MPI_Attr_get(comm, lkey[i], &val_p, &flag);)", "label": "(6, MPI, MPI_Comm_get_attr(comm, lkey[i], &val_p, &flag);)"}
{"predict": "(90, CUDA, CUDA(cudaMemcpy(d_points, points, GRID_POINTS * sizeof(PointVertex), cudaMemcpyHostToDevice));); (164, CUDA, CUDA(cudaFree(d_points));); (88, CUDA, CUDA(cudaMemset(d_points, 0, GRID_POINTS * sizeof(PointVertex)));)", "label": "(89, CUDA, CUDA(cudaGeneratePointGrid(points, GRID_N, GRID_WORLD_SIZE, apptime()));); (89, CUDA, CUDA(cudaDeviceSynchronize());)"}
{"predict": "(2, OpenMP, #pragma omp target teams distribute parallel for simd thread_limit); (4, OpenMP, #pragma omp target teams distribute parallel for simd thread_limit (); (21, OpenMP, #pragma omp target teams distribute parallel for simd thread_limit (argc), thread_limit (argc+1)); (23, OpenMP, #pragma omp target teams distribute parallel for simd thread_limit (S1)); (4, OpenMP, #pragma omp target teams distribute parallel for simd thread_limit ()); (24, OpenMP, #pragma omp target teams distribute parallel for simd thread_limit (-2)); (29, OpenMP, #pragma omp target teams distribute parallel for simd thread_limit (3.14)); (4, OpenMP, #pragma omp target teams distribute parallel for simd thread_limit (argc); (12, OpenMP, #pragma omp target teams distribute parallel for simd thread_limit (argc + argc-z)); (5, OpenMP, #pragma omp target teams distribute parallel for simd thread_limit (argc))); (22, OpenMP, #pragma omp target teams distribute parallel for simd thread_limit (-10u)); (6, OpenMP, #pragma omp target teams distribute parallel for simd thread_limit (argc > 0 ? argv[1] : argv[2]))", "label": "(29, OpenMP, #pragma omp target teams distribute num_teams (-2)); (4, OpenMP, #pragma omp target teams distribute num_teams (); (30, OpenMP, #pragma omp target teams distribute num_teams (-10u)); (5, OpenMP, #pragma omp target teams distribute num_teams ()); (7, OpenMP, #pragma omp target teams distribute num_teams (argc); (15, OpenMP, #pragma omp target teams distribute num_teams (argc + argc+z)); (17, OpenMP, #pragma omp target teams distribute num_teams (argc), num_teams (argc+1)); (28, OpenMP, #pragma omp target teams distribute num_teams (3.14)); (-6, OpenMP, #pragma omp target teams distribute num_teams); (5, OpenMP, #pragma omp target teams distribute num_teams (argc))); (7, OpenMP, #pragma omp target teams distribute num_teams (argc > 0 ? argv[1] : argv[2])); (15, OpenMP, #pragma omp target teams distribute num_teams (S1))"}
{"predict": "(13, CUDA, double term = thrust::reduce(thrust::device, v_temp.begin(), v_temp.end(), 0.0, thrust::plus<double>());); (7, CUDA, thrust::device_vector<double> v_temp(n);); (7, CUDA, double* dv_ptr = thrust::raw_pointer_cast(v_temp.data());)", "label": "(14, CUDA, double term = thrust::reduce(thrust::device, v_temp.begin(), v_temp.end(), 0.0, thrust::plus<double>());); (7, CUDA, thrust::device_vector<double> v_temp(n);); (7, CUDA, double* dv_ptr = thrust::raw_pointer_cast(v_temp.data());)"}
{"predict": "(2, CUDA, extern __shared__ int sums[];)", "label": "(2, CUDA, extern __shared__ int sums[];)"}
{"predict": "(18, MPI, MPI_Grequest_complete(aio_reqlist[i]->req);); (23, MPI, double start_time = MPI_Wtime();)", "label": "(24, MPI, double start_time = MPI_Wtime();); (16, MPI, errcode = MPI_Grequest_complete(aio_reqlist[i]->req);)"}
{"predict": "(13, OpenMP, #pragma omp barrier); (1, OpenMP, #pragma omp parallel); (4, OpenMP, #pragma omp critical)", "label": "(13, OpenMP, printf(\"main parallel 2 from %d of %d\\n\", omp_get_thread_num(), omp_get_num_threads() );); (1, OpenMP, #pragma omp parallel); (2, OpenMP, printf(\"main parallel 1 from %d of %d\\n\", omp_get_thread_num(), omp_get_num_threads() );)"}
{"predict": "(8, OpenMP, #pragma omp parallel for default(none) private(index) shared(count, failed, params, max_threads, local, saved_key, cur_salt, crypt_out)); (15, OpenMP, int t = omp_get_thread_num();)", "label": "(8, OpenMP, #pragma omp parallel for default(none) private(index) shared(count, failed, params, max_threads, local, saved_key, cur_salt, crypt_out)); (15, OpenMP, int t = omp_get_thread_num();)"}
{"predict": "(146, OpenCL, error = clSetKernelArg(kernel, 1, sizeof(tinfo->inBuf), &tinfo->inBuf);)", "label": "(146, OpenCL, error = clSetKernelArg(kernel, 1, sizeof(tinfo->inBuf), &tinfo->inBuf);)"}
{"predict": "(13, MPI, MPI_Info_get(i1, \"key2\", sizeof(value), value, &flag);); (9, MPI, MPI_Info_create(&i1);); (14, MPI, MPI_Info_free(&i1);); (9, MPI, MPI_Info_set(i1, \"key1\", \"value1\");); (10, MPI, MPI_Info_dup(i1, &i2);); (15, MPI, MPI_Info_free(&i2);); (6, MPI, MPI_Info_set(i1, \"key2\", \"value2\");); (10, MPI, MPI_Info_get(i2, \"key1\", sizeof(value), value, &flag);)", "label": "(20, MPI, MPI_Info_get(i1, (char *) \"key1\", 64, value, &flag);); (28, MPI, MPI_Info_free(&i1);); (11, MPI, MPI_Info_set(i2, (char *) \"key2\", (char *) \"value2\");); (9, MPI, MPI_Info_set(i1, (char *) \"key1\", (char *) \"value1\");); (11, MPI, MPI_Info_get(i1, (char *) \"key2\", 64, value, &flag);); (25, MPI, MPI_Info_free(&i2);); (3, MPI, MPI_Info_create(&i1);); (3, MPI, MPI_Info_create(&i2);)"}
{"predict": "(73, CUDA, thrust::host_vector<int> H(4);); (108, CUDA, thrust::device_vector<int> D(H);); (78, CUDA, thrust::host_vector<int> H2(4);); (94, CUDA, copy(H.begin(), H.end(), D.begin());)", "label": "(15, CUDA, multi::array<double, 1, thrust::device_allocator<double>> BB(10, 99.);); (34, CUDA, thrust::copy(begin(rotated(A2)[0]), end(rotated(A2)[0]), begin(rotated(B2)[0]));); (16, CUDA, multi::array<std::complex<double>, 1, thrust::device_allocator<std::complex<double> >> BBB_cpy = BBB;); (14, CUDA, multi::array<std::complex<double>, 1, thrust::device_allocator<std::complex<double> >> BBB(10, 99.);); (97, CUDA, thrust::device_vector<int> D = H;); (78, CUDA, multi::array<int, 1, thrust::device_allocator<int>> H2(4, 99); assert(size(H2) == 4);); (69, CUDA, thrust::host_vector<int> H(4);); (21, CUDA, thrust::copy(begin(B), end(B), begin(C));)"}
{"predict": "(8, OpenMP, const std::string comp_name(x.first);)", "label": "(8, OpenMP, const std::string comp_name(x.first);)"}
{"predict": "(27, OpenCL, status = clBuildProgram(program, 1, &device, buildOptions, NULL, NULL);); (9, OpenCL, cl_program program = clCreateProgramWithSource(context, 1, &source, NULL, &status);)", "label": "(27, OpenCL, status = clBuildProgram(program, 1, &device, buildOptions, NULL, NULL);); (9, OpenCL, cl_program program = clCreateProgramWithSource(context,1, &source, NULL, &status);)"}
{"predict": "(15, MPI, MPI_Abort(MPI_COMM_WORLD, -1);)", "label": "(15, MPI, MPI_Abort(MPI_COMM_WORLD, -1);)"}
{"predict": "(2, OpenMP, #pragma omp target teams distribute parallel for simd)", "label": "(2, OpenMP, #pragma omp target teams distribute parallel for simd)"}
{"predict": "(34, MPI, MPI_Get(locbuf, i, MPI_INT, target_rank, 0, i, MPI_INT, win);); (24, MPI, MPI_Win_unlock(rank, win);); (5, MPI, MPI_Comm_size(MPI_COMM_WORLD, &nproc);); (31, MPI, MPI_Flush_local(target_rank, win);); (4, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (46, MPI, MPI_Win_free(&win);); (17, MPI, MPI_Win_create(winbuf, BUFCNT * sizeof(int), sizeof(int), MPI_INFO_NULL, MPI_COMM_WORLD, &win);)", "label": "(25, MPI, MPI_Win_unlock(rank, win);); (48, MPI, MPI_Win_unlock_all(win);); (7, MPI, MPI_Comm_size(MPI_COMM_WORLD, &nproc);); (5, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (31, MPI, MPI_Win_flush_local(target_rank, win);); (45, MPI, MPI_Win_free(&win);); (23, MPI, MPI_Win_lock_all(0, win);); (11, MPI, MPI_Win_create(winbuf, BUFCNT * sizeof(int), sizeof(int), MPI_INFO_NULL, MPI_COMM_WORLD, &win);); (26, MPI, MPI_Get(locbuf, BUFCNT, MPI_INT, target_rank, 0, BUFCNT, MPI_INT, win);); (18, MPI, MPI_Barrier(MPI_COMM_WORLD);)"}
{"predict": "(9, MPI, return MPI_Wait(&tmprequest, MPI_STATUS_IGNORE);); (26, MPI, return MPI_Waitall(num_ep, block_coll_request, MPI_STATUSES_IGNORE);)", "label": "(27, MPI, return MPI_Waitall(num_ep, block_coll_request, MPI_STATUS_IGNORE);); (8, MPI, return MPI_Wait(&tmprequest, MPI_STATUS_IGNORE);)"}
{"predict": "(26, OpenCL, int error = clGetDeviceInfo( device, CL_DEVICE_IMAGE2D_MAX_WIDTH, sizeof( maxWidth ), &maxWidth, NULL );); (27, OpenCL, error |= clGetDeviceInfo( device, CL_DEVICE_IMAGE_MAX_ARRAY_SIZE, sizeof( maxArraySize ), &maxArraySize, NULL );); (28, OpenCL, error |= clGetDeviceInfo( device, CL_DEVICE_GLOBAL_MEM_SIZE, sizeof( memSize ), &memSize, NULL );); (26, OpenCL, error |= clGetDeviceInfo( device, CL_DEVICE_MAX_MEM_ALLOC_SIZE, sizeof( maxAllocSize ), &maxAllocSize, NULL );); (24, OpenCL, error |= clGetDeviceInfo( device, CL_DEVICE_IMAGE2D_MAX_HEIGHT, sizeof( maxHeight ), &maxHeight, NULL );)", "label": "(28, OpenCL, error |= clGetDeviceInfo( device, CL_DEVICE_IMAGE_MAX_ARRAY_SIZE, sizeof( maxArraySize ), &maxArraySize, NULL );); (25, OpenCL, int error = clGetDeviceInfo( device, CL_DEVICE_IMAGE2D_MAX_WIDTH, sizeof( maxWidth ), &maxWidth, NULL );); (28, OpenCL, error |= clGetDeviceInfo( device, CL_DEVICE_GLOBAL_MEM_SIZE, sizeof( memSize ), &memSize, NULL );); (26, OpenCL, error |= clGetDeviceInfo( device, CL_DEVICE_MAX_MEM_ALLOC_SIZE, sizeof( maxAllocSize ), &maxAllocSize, NULL );); (23, OpenCL, error |= clGetDeviceInfo( device, CL_DEVICE_IMAGE2D_MAX_HEIGHT, sizeof( maxHeight ), &maxHeight, NULL );)"}
{"predict": "(4, CUDA, extern __shared__ int shist[];)", "label": "(3, CUDA, extern __shared__ int shist[];)"}
{"predict": "(4, OpenMP, int nt = omp_get_max_threads();); (27, OpenMP, #pragma omp parallel); (34, OpenMP, #pragma omp barrier); (26, OpenMP, int me = omp_get_thread_num();)", "label": "(33, OpenMP, #pragma omp barrier); (28, OpenMP, int me    = omp_get_thread_num();); (25, OpenMP, #pragma omp parallel reduction(min:dtmin) reduction(max:dtmax) reduction(+:dtavg)); (-1, OpenMP, int nt = omp_get_max_threads();); (35, OpenMP, #pragma omp critical)"}
{"predict": "(20, CUDA, checkCudaErrors(cudaSetDevice(0));)", "label": "(20, CUDA, checkCudaErrors(cudaSetDevice(0));)"}
{"predict": "(2, TBB, typedef std::vector<T, oneapi::tbb::tbb_allocator<T> > container_type;); (5, TBB, oneapi::tbb::task_scheduler_init init(p);); (12, TBB, if (Verbose && t == 0) oneapi::tbb::tick_count t0 = oneapi::tbb::tick_count::now();); (26, TBB, oneapi::tbb::parallel_for ( oneapi::tbb::blocked_range<std::size_t>(0, N, RANGE_MIN), parallel_vector_for_body<T, Allocator>( vs, allocator_name ) );); (12, TBB, typedef typename oneapi::tbb::enumerable_thread_specific< container_type, Allocator<container_type>, oneapi::tbb::ets_key_per_instance > ets_tlskey_type;); (3, TBB, typedef oneapi::tbb::enumerable_thread_specific< container_type, Allocator<container_type>, oneapi::tbb::ets_no_key > ets_nokey_type;); (48, TBB, double duration = (oneapi::tbb::tick_count::now() - t0).seconds();); (22, TBB, oneapi::tbb::parallel_reduce ( vs3.range(1), pvrb );); (44, TBB, oneapi::tbb::concurrent_vector<T> cfvs2 = flatten2d<ets_nokey_type>(fvs);); (26, TBB, oneapi::tbb::flattened2d<ets_nokey_type> fvs = flatten2d<ets_nokey_type>(vs3);); (21, TBB, oneapi::tbb::flattened2d<ets_nokey_type> fvs2 = flatten2d<ets_nokey_type>(vs);)", "label": "(3, TBB, typedef std::vector<T, oneapi::tbb::tbb_allocator<T> > container_type;); (33, TBB, oneapi::tbb::flattened2d<ets_nokey_type> fvs = flatten2d(vs3);); (11, TBB, typedef typename oneapi::tbb::enumerable_thread_specific< container_type, Allocator<container_type>, oneapi::tbb::ets_key_per_instance > ets_tlskey_type;); (9, TBB, typedef typename oneapi::tbb::enumerable_thread_specific< container_type, Allocator<container_type>, oneapi::tbb::ets_no_key > ets_nokey_type;); (44, TBB, oneapi::tbb::flattened2d<ets_nokey_type> fvs2 = flatten2d(vs3, vs3.begin(), std::next(vs3.begin()));); (23, TBB, oneapi::tbb::parallel_reduce ( vs3.range(1), pvrb );); (0, TBB, oneapi::tbb::global_control gc(oneapi::tbb::global_control::max_allowed_parallelism, p);); (10, TBB, oneapi::tbb::parallel_for ( oneapi::tbb::blocked_range<int> (0, N*p, RANGE_MIN), parallel_vector_for_body<T, Allocator>( vs, allocator_name ) );); (42, TBB, const oneapi::tbb::flattened2d<ets_nokey_type>& cfvs2(fvs2);)"}
{"predict": "(65, OpenMP, #define OP_GOMP_CRITICAL_READ(OP, FLAG))", "label": "(65, OpenMP, #define OP_GOMP_CRITICAL_READ(OP, FLAG))"}
{"predict": "(17, OpenMP, #pragma omp parallel for); (49, OpenMP, #pragma omp for); (14, OpenMP, #pragma omp master); (36, OpenMP, #pragma omp for private(i,j))", "label": "(17, OpenMP, s += gsl_linalg_cholesky_decomp_unit(v, dv);)"}
{"predict": "(20, OpenMP, #pragma omp target teams distribute parallel for simd if (parallel: false)); (10, OpenMP, #pragma omp target teams distribute parallel for simd if(simd: true) nontemporal(Arg))", "label": "(19, OpenMP, #pragma omp target teams distribute parallel for simd if (parallel: false)); (10, OpenMP, #pragma omp target teams distribute parallel for simd if(simd: true) nontemporal(Arg))"}
{"predict": "(19, CUDA, cudaSetDevice(currentDevice);)", "label": "(19, CUDA, cudaSetDevice(currentDevice);)"}
{"predict": "(45, OpenMP, #pragma omp distribute parallel for simd shared(ca)); (127, OpenMP, #pragma omp distribute parallel for simd private(k), shared(k)); (65, OpenMP, #pragma omp distribute parallel for simd shared(e, g)); (135, OpenMP, #pragma omp target); (18, OpenMP, #pragma omp distribute parallel for simd shared()); (58, OpenMP, #pragma omp distribute parallel for simd shared(ba, z)); (107, OpenMP, #pragma omp distribute parallel for simd shared(i)); (47, OpenMP, #pragma omp distribute parallel for simd shared(a, b, c, d, f)); (8, OpenMP, #pragma omp distribute parallel for simd shared(); (4, OpenMP, #pragma omp target); (120, OpenMP, #pragma omp distribute parallel for simd shared(i)); (59, OpenMP, #pragma omp distribute parallel for simd shared(ca)); (129, OpenMP, #pragma omp distribute parallel for simd shared(fl)); (13, OpenMP, #pragma omp distribute parallel for simd shared(argc); (91, OpenMP, #pragma omp distribute parallel for simd shared(h, B::x)); (69, OpenMP, #pragma omp distribute parallel for simd shared(S2::S2s)); (73, OpenMP, #pragma omp distribute parallel for simd shared(S2::S2sc)); (59, OpenMP, #pragma omp distribute parallel for simd shared(da)); (117, OpenMP, #pragma omp distribute parallel for simd firstprivate(i), shared(i)); (82, OpenMP, #pragma omp distribute parallel for simd shared(in)); (64, OpenMP, #pragma omp distribute parallel for simd shared(qa)); (2, OpenMP, #pragma omp distribute parallel for simd shared(argc,); (11, OpenMP, #pragma omp distribute parallel for simd shared(argc > 0 ? argv[1] : argv[2])); (91, OpenMP, #pragma omp distribute parallel for simd shared(j)); (21, OpenMP, #pragma omp distribute parallel for simd shared(argc)); (14, OpenMP, #pragma omp distribute parallel for simd shared(S1)); (83, OpenMP, #pragma omp distribute parallel for simd private(i)); (6, OpenMP, #pragma omp distribute parallel for simd", "label": "(109, OpenMP, #pragma omp distribute parallel for reduction(^ : fl)); (154, OpenMP, #pragma omp distribute parallel for reduction(+ : r)); (117, OpenMP, #pragma omp distribute parallel for reduction(&& : S2::S2sc)); (126, OpenMP, #pragma omp distribute parallel for reduction(+ : h, k, B::x)); (164, OpenMP, #pragma omp distribute parallel for reduction(+ : fl, z)); (39, OpenMP, #pragma omp distribute parallel for reduction(\\)); (6, OpenMP, #pragma omp target); (87, OpenMP, #pragma omp distribute parallel for reduction(+ : ba)); (81, OpenMP, #pragma omp distribute parallel for reduction(max : h.b)); (60, OpenMP, #pragma omp distribute parallel for reduction(&& : argc)); (161, OpenMP, #pragma omp parallel reduction(* : fl)); (28, OpenMP, #pragma omp distribute parallel for reduction(*)); (102, OpenMP, #pragma omp distribute parallel for reduction(&& : S2::S2s)); (6, OpenMP, #pragma omp distribute parallel for reduction +); (85, OpenMP, #pragma omp distribute parallel for reduction(* : ca)); (39, OpenMP, #pragma omp distribute parallel for reduction(| : argc,); (118, OpenMP, #pragma omp distribute parallel for reduction(+ : o)); (125, OpenMP, #pragma omp parallel private(k)); (6, OpenMP, #pragma omp distribute parallel for reduction(); (143, OpenMP, #pragma omp distribute parallel for reduction(max : j)); (44, OpenMP, #pragma omp distribute parallel for reduction(~ : argc)); (138, OpenMP, #pragma omp parallel reduction(min : i)); (143, OpenMP, #pragma omp parallel private(fl)); (26, OpenMP, #pragma omp distribute parallel for reduction(foo : argc); (50, OpenMP, #pragma omp distribute parallel for reduction(^ : S1)); (34, OpenMP, #pragma omp distribute parallel for reduction(|| : argc > 0 ? argv[1] : argv[2])); (-12, OpenMP, #pragma omp distribute parallel for reduction); (153, OpenMP, #pragma omp distribute parallel for reduction(+ : m)); (76, OpenMP, #pragma omp distribute parallel for reduction(- : da)); (95, OpenMP, #pragma omp distribute parallel for reduction(& : e, g)); (144, OpenMP, #pragma omp distribute parallel for reduction(+ : fl)); (-2, OpenMP, #pragma omp distribute parallel for reduction(-); (47, OpenMP, #pragma omp distribute parallel for reduction(+ : a, b, c, d, f)); (112, OpenMP, #pragma omp distribute parallel for reduction(+ : p), reduction(+ : p)); (151, OpenMP, #pragma omp distribute parallel for reduction(task, + : m)); (49, OpenMP, #pragma omp distribute parallel for reduction(min : a, b, c, d, f)); (122, OpenMP, #pragma omp parallel shared(i)); (102, OpenMP, #pragma omp distribute parallel for private(i), reduction(+ : j), reduction(+ : q)); (-4, OpenMP, #pragma omp distribute parallel for reduction()); (-26, OpenMP, #pragma omp teams)"}
{"predict": "(41, CUDA, cudaError_t result = cudaGetLastError();); (41, CUDA, EXPECT_EQ(result, cudaSuccess) << \" - CUDA error: \" << cudaGetErrorString(result);)", "label": "(41, CUDA, cudaError_t result = cudaGetLastError();); (41, CUDA, EXPECT_EQ(result, cudaSuccess) << \" - CUDA error: \" << cudaGetErrorString(result);)"}
{"predict": "(8, OpenMP, #pragma omp parallel for)", "label": "(8, OpenMP, #pragma omp parallel for)"}
{"predict": "(53, OpenMP, #pragma omp target parallel for map(alloc : c) map(tofrom : a)); (27, OpenMP, #pragma omp target enter data map(to : a)); (45, OpenMP, #pragma omp target exit data map(from : a)); (64, OpenMP, #pragma omp target update from(c) nowait); (28, OpenMP, #pragma omp target parallel for map(tofrom : a, b)); (13, OpenMP, #pragma omp target enter data map(to : c) map(always, tofrom : a))", "label": "(54, OpenMP, #pragma omp target parallel for map(alloc : c)); (64, OpenMP, #pragma omp barrier); (44, OpenMP, #pragma omp target exit data map(from : a)); (61, OpenMP, #pragma omp target update from(c) nowait); (21, OpenMP, #pragma omp target enter data map(to : a)); (30, OpenMP, #pragma omp target parallel for)"}
{"predict": "(162, MPI, MPI_Bcast(&log2nstarts,      1, MPI_INT,           root, MPI_COMM_WORLD);); (46, MPI, MPI_Comm_size(MPI_COMM_WORLD,&Num_procs);); (155, MPI, MPI_Bcast(&log2nproc,        1, MPI_INT,           root, MPI_COMM_WORLD);); (306, MPI, MPI_Finalize();); (154, MPI, MPI_Bcast(&log2tablesize,    1, MPI_INT,           root, MPI_COMM_WORLD);); (155, MPI, MPI_Bcast(&log2update_ratio, 1, MPI_INT,           root, MPI_COMM_WORLD);); (42, MPI, MPI_Comm_rank(MPI_COMM_WORLD,&my_ID);); (160, MPI, MPI_Bcast(&nupdate,          1, MPI_LONG_LONG_INT, root, MPI_COMM_WORLD);); (154, MPI, MPI_Bcast(&nstarts,          1, MPI_INT,           root, MPI_COMM_WORLD);); (155, MPI, MPI_Bcast(&tablesize,        1, MPI_LONG_LONG_INT, root, MPI_COMM_WORLD);); (156, MPI, MPI_Bcast(&tablespace,       1, MPI_LONG_LONG_INT, root, MPI_COMM_WORLD);); (154, MPI, MPI_Bcast(&loctablesize,     1, MPI_LONG_LONG_INT, root, MPI_COMM_WORLD);); (213, MPI, MPI_Barrier(MPI_COMM_WORLD);); (146, MPI, MPI_Bcast(&update_ratio,     1, MPI_INT,           root, MPI_COMM_WORLD);); (283, MPI, MPI_Reduce(&error, &tot_error, 1, MPI_LONG_LONG_INT, MPI_SUM, root, MPI_COMM_WORLD);)", "label": "(162, MPI, MPI_Bcast(&log2nstarts,      1, MPI_INT,           root, MPI_COMM_WORLD);); (46, MPI, MPI_Comm_size(MPI_COMM_WORLD,&Num_procs);); (155, MPI, MPI_Bcast(&log2nproc,        1, MPI_INT,           root, MPI_COMM_WORLD);); (303, MPI, MPI_Finalize();); (154, MPI, MPI_Bcast(&log2tablesize,    1, MPI_INT,           root, MPI_COMM_WORLD);); (155, MPI, MPI_Bcast(&log2update_ratio, 1, MPI_INT,           root, MPI_COMM_WORLD);); (42, MPI, MPI_Comm_rank(MPI_COMM_WORLD,&my_ID);); (159, MPI, MPI_Bcast(&nupdate,          1, MPI_LONG_LONG_INT, root, MPI_COMM_WORLD);); (153, MPI, MPI_Bcast(&nstarts,          1, MPI_INT,           root, MPI_COMM_WORLD);); (154, MPI, MPI_Bcast(&tablesize,        1, MPI_LONG_LONG_INT, root, MPI_COMM_WORLD);); (155, MPI, MPI_Bcast(&tablespace,       1, MPI_LONG_LONG_INT, root, MPI_COMM_WORLD);); (153, MPI, MPI_Bcast(&loctablesize,     1, MPI_LONG_LONG_INT, root, MPI_COMM_WORLD);); (213, MPI, MPI_Barrier(MPI_COMM_WORLD);); (146, MPI, MPI_Bcast(&update_ratio,     1, MPI_INT,           root, MPI_COMM_WORLD);); (280, MPI, MPI_Reduce(&error, &tot_error, 1, MPI_LONG_LONG_INT, MPI_SUM, root, MPI_COMM_WORLD);)"}
{"predict": "(64, MPI, MPI_Comm_free(&dtcmp_comm_self);); (48, MPI, MPI_Op_free(&dtcmp_reduceop_randroot);); (58, MPI, MPI_Type_free(&dtcmp_type_3uint64t);); (52, MPI, MPI_Type_free(&dtcmp_type_3int);); (47, MPI, MPI_Op_free(&dtcmp_reduceop_mms_3uint64t);)", "label": "(45, MPI, MPI_Op_free(&dtcmp_reduceop_randroot);); (49, MPI, MPI_Op_free(&dtcmp_reduceop_mms_3uint64t);); (64, MPI, MPI_Comm_free(&dtcmp_comm_self);); (52, MPI, MPI_Type_free(&dtcmp_type_3int);); (56, MPI, MPI_Type_free(&dtcmp_type_3uint64t);)"}
{"predict": "(70, OpenMP, kmp_gomp_depends_info_t gomp_depends(depend);); (104, OpenMP, __kmpc_omp_wait_deps(&loc, gtid, ndeps, dep_list, 0, NULL);); (67, OpenMP, __kmpc_omp_task(&loc, gtid, task);); (77, OpenMP, __kmpc_omp_task_with_deps(&loc, gtid, task, ndeps_cnv, dep_list, 0, NULL);)", "label": "(70, OpenMP, kmp_gomp_depends_info_t gomp_depends(depend);); (103, OpenMP, __kmpc_omp_wait_deps(&loc, gtid, ndeps, dep_list, 0, NULL);); (77, OpenMP, __kmpc_omp_task(&loc, gtid, task);); (74, OpenMP, __kmpc_omp_task_with_deps(&loc, gtid, task, ndeps_cnv, dep_list, 0, NULL);)"}
{"predict": "(14, MPI, MPI_Comm_size(comm, &size);); (9, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &worldrank);); (25, MPI, MPI_Group_free(&basegroup);); (15, MPI, MPI_Comm_group(dupcomm, &g2);); (17, MPI, mpi_errno = MPI_Group_difference(g1, g2, NULL);); (22, MPI, MPI_Comm_free(&dupcomm);); (15, MPI, MPI_Error_class(mpi_errno, &errclass);); (8, MPI, MPI_Comm_group(newcomm, &g1);); (8, MPI, MPI_Comm_dup(comm, &dupcomm);); (20, MPI, MPI_Group_free(&g2);); (6, MPI, MPI_Comm_set_name(newcomm, (char *) \"newcomm\");); (2, MPI, MPI_Comm_split(comm, 0, size - rank, &newcomm);); (18, MPI, MPI_Group_free(&g1);); (12, MPI, MPI_Comm_free(&newcomm);); (-1, MPI, MPI_Comm_rank(comm, &rank);); (1, MPI, MPI_Comm_group(comm, &basegroup);)", "label": "(14, MPI, MPI_Comm_size(comm, &size);); (19, MPI, MPI_Comm_group(dupcomm, &g2);); (28, MPI, MPI_Group_free(&g2);); (7, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &worldrank);); (28, MPI, MPI_Comm_free(&dupcomm);); (23, MPI, MPI_Group_free(&basegroup);); (12, MPI, MPI_Comm_group(newcomm, &g1);); (12, MPI, MPI_Comm_dup(comm, &dupcomm);); (15, MPI, mpi_errno = MPI_Group_difference(g1, g2, NULL);); (22, MPI, MPI_Comm_free(&newcomm);); (14, MPI, MPI_Error_class(mpi_errno, &errclass);); (4, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);); (5, MPI, MPI_Comm_split(comm, 0, size - rank, &newcomm);); (16, MPI, MPI_Group_free(&g1);); (-1, MPI, MPI_Comm_rank(comm, &rank);); (-3, MPI, MPI_Comm_group(comm, &basegroup);)"}
{"predict": "(9, CUDA, HANDLE_ERROR(cudaMalloc((void**)&colored_noise_d, sizeof(float) * full_buffer_size));); (11, CUDA, cudaStreamCreate(&stream);); (18, CUDA, HANDLE_ERROR(cudaStreamSynchronize(stream));)", "label": "(9, CUDA, HANDLE_ERROR(cudaMalloc((void**)&colored_noise_d, sizeof(float) * full_buffer_size));); (11, CUDA, cudaStreamCreate(&stream);); (18, CUDA, HANDLE_ERROR(cudaStreamSynchronize(stream));)"}
{"predict": "(17, OpenMP, #pragma omp target teams distribute collapse(,); (40, OpenMP, #pragma omp target teams distribute collapse(4, )); (3, OpenMP, #pragma omp target teams distribute collapse); (67, OpenMP, #pragma omp target teams distribute collapse(2.5)); (27, OpenMP, #pragma omp target teams distribute collapse(4); (4, OpenMP, #pragma omp target teams distribute collapse(); (60, OpenMP, #pragma omp target teams distribute collapse(4, 8)); (67, OpenMP, #pragma omp target teams distribute collapse(foo())); (28, OpenMP, #pragma omp target teams distribute collapse(4,); (74, OpenMP, #pragma omp target teams distribute collapse(5 - 5)); (2, OpenMP, #pragma omp target teams distribute collapse()); (76, OpenMP, #pragma omp target teams distribute collapse(2) firstprivate(i)); (71, OpenMP, #pragma omp target teams distribute collapse(0)); (34, OpenMP, #pragma omp target teams distribute collapse(4 4)); (58, OpenMP, #pragma omp target teams distribute collapse(-5)); (8, OpenMP, #pragma omp target teams distribute collapse 4)); (41, OpenMP, #pragma omp target teams distribute collapse(4, , 4)); (3, OpenMP, #pragma omp target teams distribute collapse(, )); (14, OpenMP, #pragma omp target teams distribute collapse(4,); (24, OpenMP, #pragma omp target teams distribute collapse(4))", "label": "(41, OpenMP, #pragma omp target teams distribute collapse(4, )); (90, OpenMP, #pragma omp target teams distribute collapse(2) firstprivate(i)); (15, OpenMP, #pragma omp target teams distribute collapse(,); (33, OpenMP, #pragma omp target teams distribute collapse(4,); (74, OpenMP, #pragma omp target teams distribute collapse(-5)); (8, OpenMP, #pragma omp target teams distribute collapse()); (15, OpenMP, #pragma omp target teams distribute collapse(, )); (79, OpenMP, #pragma omp target teams distribute collapse(5 - 5)); (66, OpenMP, #pragma omp target teams distribute collapse(foo())); (73, OpenMP, #pragma omp target teams distribute collapse(0)); (-1, OpenMP, #pragma omp target teams distribute collapse(); (55, OpenMP, #pragma omp target teams distribute collapse(4, 8)); (38, OpenMP, #pragma omp target teams distribute collapse(4 4)); (32, OpenMP, #pragma omp target teams distribute collapse(4)); (-9, OpenMP, #pragma omp target teams distribute collapse); (40, OpenMP, #pragma omp target teams distribute collapse(4, , 4)); (15, OpenMP, #pragma omp target teams distribute collapse(4); (9, OpenMP, #pragma omp target teams distribute collapse 4)); (52, OpenMP, #pragma omp target teams distribute collapse(2.5))"}
{"predict": "(14, CUDA, checkCudaErrors(cudaMemcpy(cd, c, size * sizeof(double), cudaMemcpyHostToDevice));); (16, CUDA, checkCudaErrors(cudaDeviceSynchronize());); (65, CUDA, checkCudaErrors(cudaMemcpy(c, cd, size * sizeof(double), cudaMemcpyDeviceToHost));); (66, CUDA, checkCudaErrors(cudaFree(cd));); (5, CUDA, checkCudaErrors(cudaMalloc((void **)&cd, size * sizeof(double)));)", "label": "(64, CUDA, CUDA_SAFE_CALL( cudaMemcpy(c, cd, size*sizeof(double), cudaMemcpyDeviceToHost) );); (67, CUDA, CUDA_SAFE_CALL( cudaDeviceReset() );); (12, CUDA, CUDA_SAFE_CALL( cudaMemset(cd, 0, size*sizeof(double)) );); (8, CUDA, CUDA_SAFE_CALL( cudaMalloc((void**)&cd, size*sizeof(double)) );); (62, CUDA, CUDA_SAFE_CALL( cudaFree(cd) );); (12, CUDA, CUDA_SAFE_CALL( cudaThreadSynchronize() );)"}
{"predict": "(71, CUDA, cudaMemcpy(&((int *)cuda_mem)[j*size], ptrs[i], size * Mtypes(i), cudaMemcpyHostToDevice);); (68, CUDA, cudaMalloc(&cuda_mem, size * Mtypes(i) * maxGPT);); (64, CUDA, cudaMemcpy(cuda_mem, ptrs[i], size * Mtypes(i), cudaMemcpyHostToDevice);); (62, CUDA, cudaMalloc(&cuda_mem, size * Mtypes(i));)", "label": "(71, CUDA, cudaMemcpy(&((int *)cuda_mem)[j*size], ptrs[i], size * Mtypes(i), cudaMemcpyHostToDevice);); (68, CUDA, cudaMalloc(&cuda_mem, size * Mtypes(i) * maxGPT);); (65, CUDA, cudaMemcpy(cuda_mem, ptrs[i], size * Mtypes(i), cudaMemcpyHostToDevice);); (63, CUDA, cudaMalloc(&cuda_mem, size * Mtypes(i));)"}
{"predict": "(3, CUDA, extern __shared__ Element shared_storage[];)", "label": "(3, CUDA, __shared__ typename Epilogue::SharedStorage shared_storage;)"}
{"predict": "(4, CUDA, using T = thrust::complex<double>;)", "label": "(3, CUDA, cudaSetDevice(WORLD.rank());); (11, CUDA, using T = thrust::complex<double>;); (40, CUDA, cudaStreamSynchronize(NULL);); (14, CUDA, thrust::host_vector<T> H = A;)"}
{"predict": "(9, OpenMP, #pragma omp target teams distribute parallel for reduction(min : min_t)); (6, OpenMP, #pragma omp target data map(to : arr_t[0 : N])); (11, OpenMP, #pragma omp target teams distribute parallel for reduction(max : max_t))", "label": "(9, OpenMP, #pragma omp target teams distribute parallel for reduction(min : min_t)); (6, OpenMP, #pragma omp target data map(to : arr_t[0 : N])); (11, OpenMP, #pragma omp target teams distribute parallel for reduction(max : max_t))"}
{"predict": "(93, OpenCL, error = clEnqueueReadBuffer( queueB, mainBuffer, CL_TRUE, 0, mainSize, (void *)actualResults, 0, NULL, NULL );); (22, OpenCL, mainBuffer = clCreateBuffer( context, CL_MEM_READ_WRITE, mainSize, NULL, &error );); (93, OpenCL, error = clEnqueueReadBuffer( queueA, mainBuffer, CL_TRUE, 0, mainSize, (void *)actualResults, 0, NULL, NULL );)", "label": "(23, OpenCL, mainBuffer = clCreateBuffer( context, CL_MEM_READ_WRITE | CL_MEM_COPY_HOST_PTR, mainSize, mainBufferContents, &error );); (93, OpenCL, error = clEnqueueReadBuffer( queueA, mainBuffer, CL_TRUE, 0, mainSize, actualResults, 0, NULL, NULL );)"}
{"predict": "(20, MPI, err = MPI_Waitany(10, requests, &index, statuses);); (34, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_ARE_FATAL);); (34, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (16, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);)", "label": "(20, MPI, err = MPI_Waitany(10, requests, &index, statuses);); (33, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_ARE_FATAL);); (33, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (15, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);)"}
{"predict": "(68, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &mpi_rank);); (64, MPI, MPI_Finalized(&mpi_finalized);); (62, MPI, MPI_Initialized(&mpi_initialized);)", "label": "(69, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &mpi_rank);); (65, MPI, MPI_Finalized(&mpi_finalized);); (63, MPI, MPI_Initialized(&mpi_initialized);)"}
{"predict": "(166, MPI, if ( SendCounts[p] ) MPI_Wait(&send_req[p], &status);); (166, MPI, if ( RecvCounts[p] ) MPI_Wait(&recv_req[p], &status);)", "label": "(166, MPI, if ( SendCounts[p] ) MPI_Wait(&send_req[p], &status);); (166, MPI, if ( RecvCounts[p] ) MPI_Wait(&recv_req[p], &status);)"}
{"predict": "(3, OpenMP, mz_uint comp_flags = TDEFL_COMPUTE_ADLER32 | tdefl_create_comp_flags_from_zip_params(level, window_bits, strategy);)", "label": "(3, OpenMP, mz_uint comp_flags = TDEFL_COMPUTE_ADLER32 | tdefl_create_comp_flags_from_zip_params(level, window_bits, strategy);)"}
{"predict": "(29, OpenMP, #pragma omp target simd simdlen(4); (23, OpenMP, #pragma omp target simd simdlen 4)); (45, OpenMP, #pragma omp target simd simdlen(4 4)); (4, OpenMP, #pragma omp target simd simdlen(); (30, OpenMP, #pragma omp target simd simdlen(4,); (67, OpenMP, #pragma omp target simd simdlen(-5)); (13, OpenMP, #pragma omp target simd simdlen(, )); (-4, OpenMP, #pragma omp target simd simdlen); (34, OpenMP, #pragma omp target simd simdlen(4)); (43, OpenMP, #pragma omp target simd simdlen(4, , 4)); (5, OpenMP, #pragma omp target simd simdlen(,); (0, OpenMP, #pragma omp target simd simdlen()); (48, OpenMP, #pragma omp target simd simdlen(4, 8)); (51, OpenMP, #pragma omp target simd simdlen(2.5)); (62, OpenMP, #pragma omp target simd simdlen(0)); (65, OpenMP, #pragma omp target simd simdlen(5 - 5)); (52, OpenMP, #pragma omp target simd simdlen(foo())); (22, OpenMP, #pragma omp target simd simdlen(4, ))", "label": "(3, OpenMP, #pragma omp target simd simdlen); (18, OpenMP, #pragma omp target simd simdlen(, )); (70, OpenMP, #pragma omp target simd simdlen(-5)); (31, OpenMP, #pragma omp target simd simdlen(4,); (72, OpenMP, #pragma omp target simd simdlen(0)); (2, OpenMP, #pragma omp target simd simdlen(); (46, OpenMP, #pragma omp target simd simdlen(4, , 4)); (61, OpenMP, #pragma omp target simd simdlen(foo())); (3, OpenMP, #pragma omp target simd simdlen()); (55, OpenMP, #pragma omp target simd simdlen(2.5)); (5, OpenMP, #pragma omp target simd simdlen(,); (31, OpenMP, #pragma omp target simd simdlen(4)); (68, OpenMP, #pragma omp target simd simdlen(5 - 5)); (26, OpenMP, #pragma omp target simd simdlen(4, )); (33, OpenMP, #pragma omp target simd simdlen(4 4)); (45, OpenMP, #pragma omp target simd simdlen(4, 8)); (13, OpenMP, #pragma omp target simd simdlen(4); (7, OpenMP, #pragma omp target simd simdlen 4))"}
{"predict": "(110, CUDA, checkCudaErrors(cudaMemcpy(h_PutResultGPU, d_PutResult, OPT_SZ, cudaMemcpyDeviceToHost));); (48, CUDA, checkCudaErrors(cudaMalloc((void **)&d_OptionYears,  OPT_SZ));); (101, CUDA, checkCudaErrors(cudaMemcpy(h_CallResultGPU, d_CallResult, OPT_SZ, cudaMemcpyDeviceToHost));); (71, CUDA, checkCudaErrors(cudaDeviceSynchronize());); (139, CUDA, checkCudaErrors(cudaFree(d_StockPrice));); (44, CUDA, checkCudaErrors(cudaMalloc((void **)&d_PutResult,  OPT_SZ));); (138, CUDA, checkCudaErrors(cudaFree(d_OptionStrike));); (138, CUDA, checkCudaErrors(cudaFree(d_OptionYears));); (134, CUDA, checkCudaErrors(cudaFree(d_CallResult));); (37, CUDA, checkCudaErrors(cudaMalloc((void **)&d_StockPrice, OPT_SZ));); (62, CUDA, checkCudaErrors(cudaMemcpy(d_OptionYears,  h_OptionYears,  OPT_SZ, cudaMemcpyHostToDevice));); (36, CUDA, checkCudaErrors(cudaMalloc((void **)&d_OptionStrike, OPT_SZ));); (39, CUDA, checkCudaErrors(cudaMalloc((void **)&d_CallResult, OPT_SZ));); (56, CUDA, checkCudaErrors(cudaMemcpy(d_StockPrice,   h_StockPrice,   OPT_SZ, cudaMemcpyHostToDevice));); (129, CUDA, checkCudaErrors(cudaFree(d_PutResult));); (55, CUDA, checkCudaErrors(cudaMemcpy(d_OptionStrike, h_OptionStrike, OPT_SZ, cudaMemcpyHostToDevice));); (98, CUDA, checkCudaErrors(cudaMemcpy(h_StockPrice,   d_StockPrice,   OPT_SZ, cudaMemcpyDeviceToHost));); (100, CUDA, checkCudaErrors(cudaMemcpy(h_OptionYears,  d_OptionYears,  OPT_SZ, cudaMemcpyDeviceToHost));); (102, CUDA, checkCudaErrors(cudaMemcpy(h_OptionStrike, d_OptionStrike, OPT_SZ, cudaMemcpyDeviceToHost));); (44, CUDA, checkCudaErrors(cudaMemcpy(d_CallResult,   h_CallResultCPU, OPT_SZ", "label": "(49, CUDA, checkCudaErrors(cudaMalloc((void **)&d_CallResult,   OPT_SZ));); (155, CUDA, checkCudaErrors(cudaFree(d_OptionYears));); (155, CUDA, checkCudaErrors(cudaFree(d_OptionStrike));); (155, CUDA, checkCudaErrors(cudaFree(d_StockPrice));); (155, CUDA, checkCudaErrors(cudaFree(d_PutResult));); (66, CUDA, checkCudaErrors(cudaMemcpy(d_OptionStrike, h_OptionStrike,  OPT_SZ, cudaMemcpyHostToDevice));); (45, CUDA, checkCudaErrors(cudaMalloc((void **)&d_StockPrice,   OPT_SZ));); (43, CUDA, checkCudaErrors(cudaMalloc((void **)&d_PutResult,    OPT_SZ));); (26, CUDA, findCudaDevice(argc, (const char **)argv);); (68, CUDA, checkCudaErrors(cudaDeviceSynchronize());); (42, CUDA, checkCudaErrors(cudaMalloc((void **)&d_OptionStrike, OPT_SZ));); (149, CUDA, checkCudaErrors(cudaFree(d_CallResult));); (81, CUDA, getLastCudaError(\"BlackScholesGPU() execution failed\\n\");); (98, CUDA, checkCudaErrors(cudaMemcpy(h_CallResultGPU, d_CallResult, OPT_SZ, cudaMemcpyDeviceToHost));); (58, CUDA, checkCudaErrors(cudaMemcpy(d_OptionYears,  h_OptionYears,   OPT_SZ, cudaMemcpyHostToDevice));); (97, CUDA, checkCudaErrors(cudaMemcpy(h_PutResultGPU,  d_PutResult,  OPT_SZ, cudaMemcpyDeviceToHost));); (37, CUDA, checkCudaErrors(cudaMalloc((void **)&d_OptionYears,  OPT_SZ));); (53, CUDA, checkCudaErrors(cudaMemcpy(d_StockPrice,  h_StockPrice,   OPT_SZ, cudaMemcpyHostToDevice));)"}
{"predict": "(20, MPI, t[k].endSync = MPI_Wtime();); (9, MPI, t[k].startOp = MPI_Wtime();); (10, MPI, MPI_Put(&one, sz, MPI_INT, destRank, j, sz, MPI_INT, win);); (12, MPI, t[k].endOp = MPI_Wtime();); (15, MPI, MPI_Win_wait(win);); (2, MPI, MPI_Win_post(exposureGroup, 0, win);); (12, MPI, MPI_Win_complete(win);); (-1, MPI, MPI_Barrier(MPI_COMM_WORLD);); (0, MPI, MPI_Win_start(accessGroup, 0, win);)", "label": "(20, MPI, t[k].endSync = MPI_Wtime();); (9, MPI, t[k].startOp = MPI_Wtime();); (10, MPI, MPI_Put(&one, sz, MPI_INT, destRank, j, sz, MPI_INT, win);); (12, MPI, t[k].endOp = MPI_Wtime();); (15, MPI, MPI_Win_wait(win);); (2, MPI, MPI_Win_post(exposureGroup, 0, win);); (12, MPI, MPI_Win_complete(win);); (-1, MPI, MPI_Barrier(MPI_COMM_WORLD);); (0, MPI, MPI_Win_start(accessGroup, 0, win);)"}
{"predict": "(17, CUDA, cudaMemsetAsync(nulls.data(), 0xcccc, nulls.size(), rmm::cuda_stream_default.value());)", "label": "(17, CUDA, cudaMemsetAsync(nulls.data(), 0xcccc, nulls.size(), rmm::cuda_stream_default.value());)"}
{"predict": "(29, MPI, MPI_Bcast(&len, 1, MPI_INT, 0, MPI_COMM_WORLD);); (54, MPI, errcode = MPI_File_iwrite(fh, buf, nints, MPI_INT, \"native\", &request);); (82, MPI, errcode = MPI_File_iread(fh, buf, nints, MPI_INT, \"native\", &request);); (5, MPI, MPI_Init(&argc, &argv);); (63, MPI, MPI_Barrier(MPI_COMM_WORLD);); (90, MPI, MPI_Allreduce(&errs, &toterrs, 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);); (55, MPI, MPI_Wait(&request, &status);); (23, MPI, MPI_Bcast(filename, len + 10, MPI_CHAR, 0, MPI_COMM_WORLD);); (108, MPI, MPI_Finalize();); (15, MPI, MPI_Abort(MPI_COMM_WORLD, 1);); (1, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (43, MPI, errcode = MPI_File_set_view(fh, 0, MPI_INT, MPI_INT, \"native\", MPI_INFO_NULL);)", "label": "(29, MPI, MPI_Bcast(&len, 1, MPI_INT, 0, MPI_COMM_WORLD);); (51, MPI, errcode = MPI_File_set_view(fh, 0, MPI_INT, MPI_INT, \"native\", MPI_INFO_NULL);); (8, MPI, MPI_Init(&argc, &argv);); (59, MPI, MPI_Wait(&request, &status);); (112, MPI, MPI_Finalize();); (25, MPI, MPI_Bcast(filename, len + 10, MPI_CHAR, 0, MPI_COMM_WORLD);); (5, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (96, MPI, MPI_Allreduce(&errs, &toterrs, 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);); (74, MPI, errcode = MPI_File_iread(fh, buf, nints, MPI_INT, &request);); (14, MPI, MPI_Abort(MPI_COMM_WORLD, 1);); (47, MPI, errcode = MPI_File_iwrite(fh, buf, nints, MPI_INT, &request);)"}
{"predict": "(8, MPI, MPI_Alloc_mem(COUNT * sizeof(int), MPI_INFO_NULL, &local_b);); (13, MPI, MPI_Win_fence(0, win[id]);); (28, MPI, MPI_Win_unlock(0, win[id]);); (11, MPI, MPI_Put(local_b, COUNT, MPI_INT, 0, 0, COUNT, MPI_INT, win[id]);); (2, MPI, MPI_Win_lock(MPI_LOCK_SHARED, 0, 0, win[id]);); (27, MPI, MPI_Free_mem(local_b);)", "label": "(30, MPI, MPI_Get(local_b, COUNT, MPI_INT, 0, 0, COUNT, MPI_INT, win[id]);); (11, MPI, MPI_Win_fence(0, win[id]);); (43, MPI, MPI_Free_mem(local_b);); (11, MPI, MPI_Put(local_b, COUNT, MPI_INT, 0, 0, COUNT, MPI_INT, win[id]);); (4, MPI, MPI_Alloc_mem(COUNT * sizeof(int), MPI_INFO_NULL, &local_b);)"}
{"predict": "(46, MPI, MPI_Type_create_struct(1, &len, &disp, &typevec, &tmptype);); (43, MPI, MPI_Type_vector(SIZE / 2, 1, 2, MPI_INT, &typevec);); (14, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &mynod);); (103, MPI, MPI_CHECK(MPI_File_close(&fh));); (57, MPI, MPI_Error_class(err, &errorclass);); (77, MPI, MPI_CHECK(MPI_File_set_view(fh, 0, MPI_INT, newtype, \"native\", MPI_INFO_NULL));); (61, MPI, MPI_Barrier(MPI_COMM_WORLD);); (77, MPI, MPI_CHECK(MPI_File_read_all(fh, buf, SIZE, MPI_INT, &status));); (122, MPI, MPI_CHECK(MPI_File_write_all(fh, buf, SIZE, MPI_INT, &status));); (44, MPI, MPI_Type_free(&typevec);); (33, MPI, MPI_Bcast(&len, 1, MPI_INT, 0, MPI_COMM_WORLD);); (192, MPI, MPI_CHECK(MPI_File_read_all(fh, buf, SIZE, MPI_INT, &status));); (43, MPI, MPI_Type_commit(&newtype);); (151, MPI, MPI_CHECK(MPI_File_write_all(fh, buf, SIZE, MPI_INT, &status));); (2, MPI, MPI_Init(&argc, &argv);); (133, MPI, MPI_CHECK(MPI_File_set_view(fh, 0, MPI_INT, MPI_INT, \"native\", MPI_INFO_NULL));); (22, MPI, MPI_Bcast(filename, len + 1, MPI_CHAR, 0, MPI_COMM_WORLD);); (98, MPI, MPI_Type_free(&tmptype);); (40, MPI, MPI_Type_free(&newtype);); (18, MPI, MPI_Abort(MPI_COMM_WORLD, 1);); (6, MPI, MPI_Comm_size(MPI_COMM_WORLD, &nprocs);); (38, MPI, MPI_Type_create_resized(tmptype, 0, extent, &newtype);); (98, MPI, MPI_CHECK(MPI_File_close(&fh));); (130, MPI, MPI_CHECK(MPI_File_read_all(fh, buf, SIZE, MPI_INT, &status));); (", "label": "(197, MPI, MPI_CHECK(MPI_File_write_all(fh, buf, SIZE, MPI_INT, &status));); (9, MPI, MPI_Init(&argc, &argv);); (80, MPI, MPI_CHECK(MPI_File_write_all(fh, buf, 1, newtype, &status));); (42, MPI, MPI_Type_vector(SIZE / 2, 1, 2, MPI_INT, &typevec);); (49, MPI, MPI_Type_create_struct(1, &len, &disp, &typevec, &tmptype);); (73, MPI, MPI_CHECK(MPI_File_set_view(fh, 0, MPI_INT, newtype, \"native\", MPI_INFO_NULL));); (67, MPI, MPI_Barrier(MPI_COMM_WORLD);); (107, MPI, MPI_CHECK(MPI_File_close(&fh));); (4, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &mynod);); (48, MPI, MPI_Type_free(&tmptype);); (136, MPI, MPI_CHECK(MPI_File_read_at_all(fh, mynod * (SIZE / 2) * sizeof(int), buf, 1, newtype, &status));); (5, MPI, MPI_Abort(MPI_COMM_WORLD, 1);); (192, MPI, MPI_CHECK(MPI_File_read_at_all(fh, 0, buf, SIZE, MPI_INT, &status));); (22, MPI, MPI_Bcast(&len, 1, MPI_INT, 0, MPI_COMM_WORLD);); (54, MPI, MPI_Error_class(err, &errorclass);); (-4, MPI, MPI_Comm_size(MPI_COMM_WORLD, &nprocs);); (42, MPI, MPI_Type_commit(&newtype);); (72, MPI, MPI_CHECK(MPI_File_read_at_all(fh, 0, buf, 1, newtype, &status));); (36, MPI, MPI_Type_free(&typevec);); (37, MPI, MPI_Type_create_resized(tmptype, 0, extent, &newtype);); (220, MPI, MPI_Finalize();); (15, MPI, MPI_Bcast(filename, len + 1, MPI_CHAR, 0, MPI_COMM_WORLD);); (206, MPI, MPI_Allreduce(&errs, &toterrs, 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);); (214, MPI, MPI_Type_free(&newtype);)"}
{"predict": "(10, TBB, tbb::filter_t<void, void> one_filter( filter_table[i], i_filter );); (15, TBB, tbb::atomic<int> counter;); (11, TBB, tbb::parallel_pipeline( n_tokens, one_filter );)", "label": "(10, TBB, tbb::filter_t<void, void> one_filter( filter_table[i], i_filter );); (15, TBB, tbb::atomic<int> counter;); (11, TBB, tbb::parallel_pipeline( n_tokens, one_filter );)"}
{"predict": "(47, CUDA, CubDebugExit(cudaMemcpy(d_in, h_in, sizeof(int) * num_items, cudaMemcpyHostToDevice));)", "label": "(47, CUDA, CubDebugExit(cudaMemcpy(d_in, h_in, sizeof(int) * num_items, cudaMemcpyHostToDevice));)"}
{"predict": "(34, CUDA, cudaFree(d_inPtr);); (18, CUDA, cudaMalloc((void**)&d_outPtr, size * sizeof(float));); (23, CUDA, cudaMemcpy(&result_gpu, &d_outPtr[0], sizeof(float), cudaMemcpyDeviceToHost);); (18, CUDA, cudaMemcpy(d_inPtr, h_inPtr, size * sizeof(float), cudaMemcpyHostToDevice);); (30, CUDA, cudaFree(d_outPtr);); (13, CUDA, cudaMalloc((void**)& d_inPtr, size * sizeof(float));)", "label": "(34, CUDA, cudaFree(d_inPtr);); (18, CUDA, cudaMalloc((void**)&d_outPtr, size * sizeof(float));); (24, CUDA, cudaMemcpy(&result_gpu, &d_outPtr[0], sizeof(float), cudaMemcpyDeviceToHost);); (18, CUDA, cudaMemcpy(d_inPtr, h_inPtr, size * sizeof(float), cudaMemcpyHostToDevice);); (29, CUDA, cudaFree(d_outPtr);); (13, CUDA, cudaMalloc((void**)& d_inPtr, size * sizeof(float));)"}
{"predict": "(199, OpenMP, #pragma omp barrier); (148, OpenMP, nthread = omp_get_num_threads();); (192, OpenMP, #pragma omp for); (142, OpenMP, #pragma omp master); (53, OpenMP, omp_set_num_threads(nthread_input);); (147, OpenMP, #pragma omp parallel private(i, j, ran, round, index, my_ID) reduction(+:error)); (219, OpenMP, #pragma omp atomic); (137, OpenMP, my_ID   = omp_get_thread_num();)", "label": "(202, OpenMP, #pragma omp barrier); (150, OpenMP, nthread = omp_get_num_threads();); (197, OpenMP, #pragma omp for); (146, OpenMP, #pragma omp master); (54, OpenMP, omp_set_num_threads(nthread_input);); (137, OpenMP, #pragma omp parallel private(i, j, ran, round, index, my_ID) reduction(+:error)); (223, OpenMP, #pragma omp atomic); (140, OpenMP, my_ID   = omp_get_thread_num();)"}
{"predict": "(23, MPI, MPI_Type_contiguous((int)chars, MPI_CHAR, &dt_filepath);); (18, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (18, MPI, MPI_Comm_size(MPI_COMM_WORLD, &ranks);); (110, MPI, MPI_Type_get_extent(dt_key, &key_lb, &key_extent);); (107, MPI, MPI_Type_get_extent(dt_sat, &sat_lb, &sat_extent);); (139, MPI, MPI_Type_free(&dt_key);); (140, MPI, MPI_Type_free(&dt_keysat);); (102, MPI, MPI_Type_get_extent(dt_keysat, &keysat_lb, &keysat_extent);); (9, MPI, MPI_Type_contiguous((int)bytes, MPI_BYTE, &dt_sat);); (9, MPI, MPI_Type_commit(&dt_sat);); (138, MPI, MPI_Type_free(&dt_filepath);); (7, MPI, MPI_Type_commit(&dt_filepath);)", "label": "(106, MPI, MPI_Type_get_extent(dt_key, &key_lb, &key_extent);); (174, MPI, MPI_Type_free(&dt_key);); (16, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (16, MPI, MPI_Comm_size(MPI_COMM_WORLD, &ranks);); (20, MPI, MPI_Type_commit(&dt_filepath);); (169, MPI, MPI_Type_free(&dt_keysat);); (170, MPI, MPI_Type_free(&dt_filepath);); (107, MPI, MPI_Type_get_extent(dt_sat, &sat_lb, &sat_extent);); (102, MPI, MPI_Type_get_extent(dt_keysat, &keysat_lb, &keysat_extent);); (5, MPI, MPI_Type_contiguous((int)bytes, MPI_BYTE, &dt_sat);); (13, MPI, MPI_Type_contiguous((int)chars, MPI_CHAR, &dt_filepath);); (171, MPI, MPI_Type_free(&dt_sat);)"}
{"predict": "(12, OpenMP, iget = omp_get_teams_thread_limit();); (3, OpenMP, omp_set_num_teams(iset);); (3, OpenMP, iget = omp_get_max_teams();); (8, OpenMP, omp_set_teams_thread_limit(iset);)", "label": "(12, OpenMP, iget = omp_get_teams_thread_limit();); (3, OpenMP, omp_set_num_teams(iset);); (3, OpenMP, iget = omp_get_max_teams();); (8, OpenMP, omp_set_teams_thread_limit(iset);)"}
{"predict": "(13, TBB, test_resets<float,tbb::flow::queue_node<float> >();); (20, TBB, test_buffer_extract<tbb::flow::queue_node<int> >().run_tests();); (10, TBB, test_resets<int,tbb::flow::queue_node<int> >();); (0, TBB, tbb::task_scheduler_init init(p);); (5, TBB, stop = tbb::tick_count::now();); (-4, TBB, tbb::tick_count start = tbb::tick_count::now(), stop;)", "label": "(12, TBB, test_resets<int, tbb::flow::queue_node<int> >();); (2, TBB, tbb::task_scheduler_init init(p);); (7, TBB, stop = tbb::tick_count::now();); (18, TBB, test_buffer_extract<tbb::flow::queue_node<int> >().run_tests();); (-3, TBB, tbb::tick_count start = tbb::tick_count::now(), stop;); (8, TBB, test_resets<float, tbb::flow::queue_node<float> >();)"}
{"predict": "(16, CUDA, cudaDeviceSynchronize();); (26, CUDA, cudaFree(y);); (4, CUDA, cudaMallocManaged(&y, N*sizeof(float));); (2, CUDA, cudaMallocManaged(&x, N*sizeof(float));); (22, CUDA, cudaFree(x);)", "label": "(16, CUDA, cudaDeviceSynchronize();); (6, CUDA, cudaMallocManaged(&y, N*sizeof(float));); (4, CUDA, cudaMallocManaged(&x, N*sizeof(float));); (23, CUDA, cudaFree(y);); (21, CUDA, cudaFree(x);)"}
{"predict": "(13, CUDA, cudaError_t err = cudaFree(ptr);)", "label": "(13, CUDA, cudaError_t err = cudaFree(ptr);)"}
{"predict": "(5, OpenMP, #pragma omp parallel for num_threads(n))", "label": "(17, OpenMP, #pragma omp parallel for num_threads(num_devices)); (10, OpenMP, #pragma omp target teams distribute parallel for); (3, OpenMP, size_t num_devices = omp_get_num_devices();); (17, OpenMP, #pragma omp target teams distribute parallel for device(omp_get_thread_num()))"}
{"predict": "(9, MPI, MPI_Reduce(&time, &max_time, 1, MPI_LONG_LONG, MPI_MAX, 0, MPI_COMM_WORLD);); (9, MPI, MPI_Reduce(&time, &sum_time, 1, MPI_LONG_LONG, MPI_SUM, 0, MPI_COMM_WORLD);); (7, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (5, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (6, MPI, MPI_Reduce(&time, &min_time, 1, MPI_LONG_LONG, MPI_MIN, 0, MPI_COMM_WORLD);)", "label": "(9, MPI, MPI_Reduce(&time, &sum_time, 1, MPI_LONG_LONG, MPI_SUM, 0, comm_);); (6, MPI, MPI_Reduce(&time, &max_time, 1, MPI_LONG_LONG, MPI_MAX, 0, comm_);); (10, MPI, MPI_Comm_size(comm_, &size);); (8, MPI, MPI_Comm_rank(comm_, &rank);); (4, MPI, MPI_Reduce(&time, &min_time, 1, MPI_LONG_LONG, MPI_MIN, 0, comm_);)"}
{"predict": "(61, MPI, MPI_Type_size(type, &type_size);); (18, MPI, MPI_Barrier(MSG_COMM_WORLD);); (7, MPI, MPI_Init_thread(&argc, &argv, MPI_THREAD_MULTIPLE, &provided);); (134, MPI, MPI_Finalize();); (7, MPI, MPI_Comm_rank(MSG_COMM_WORLD, &rank);); (5, MPI, MPI_Comm_size(MSG_COMM_WORLD, &size);); (16, MPI, MPI_Win_fence(MPI_MODE_NOSUCCEED, win);); (95, MPI, MPI_Win_fence(MPI_MODE_NOPRECEDE, win);); (85, MPI, MPI_Win_acc(target, &win, 0, smallcount, type, op, in);); (94, MPI, MPI_Win_get(target, &win, 0, smallcount, type, out);); (31, MPI, MPI_Win_put(target, &win, 0, smallcount, MPI_BYTE, in);); (33, MPI, MPI_Win_flush(target);); (124, MPI, MPI_Win_free(&win);); (4, MPI, MPI_Win_set_errhandler(win, MPI_ERRORS_RETURN);)", "label": "(9, MPI, MPI_Comm_dup(MPI_COMM_WORLD, &MSG_COMM_WORLD);); (4, MPI, MPI_Init_thread(&argc, &argv, MPI_THREAD_MULTIPLE, &provided);); (63, MPI, MPI_Type_size(type, &type_size);); (16, MPI, MPI_Barrier(MSG_COMM_WORLD);); (130, MPI, MPI_Comm_free(&MSG_COMM_WORLD);); (131, MPI, MPI_Finalize();); (5, MPI, MPI_Comm_rank(MSG_COMM_WORLD, &rank);); (5, MPI, MPI_Comm_size(MSG_COMM_WORLD, &size);)"}
{"predict": "(38, CUDA, cudaFreeHost( hptr );)", "label": "(37, CUDA, cudaFreeHost( hptr );)"}
{"predict": "(22, OpenMP, #pragma omp target simd aligned(::z)); (19, OpenMP, #pragma omp target simd aligned(B,rp,::z: X::x)); (1, OpenMP, #pragma omp target simd aligned(B:bfoo())); (5, OpenMP, #pragma omp target simd aligned(B:B::bfoo())); (24, OpenMP, #pragma omp target simd aligned(B::ib,B:C1+C2)); (1, OpenMP, #pragma omp target simd aligned(B::ib:B:bfoo())); (11, OpenMP, #pragma omp target simd aligned(X::x : ::z)); (4, OpenMP, #pragma omp target simd aligned(z:B:bfoo())); (17, OpenMP, #pragma omp target simd aligned(B::bfoo()))", "label": "(17, OpenMP, #pragma omp target simd aligned(X::x : ::z)); (2, OpenMP, #pragma omp target simd aligned(B:bfoo())); (23, OpenMP, #pragma omp target simd aligned(B::bfoo())); (17, OpenMP, #pragma omp target simd aligned(B,rp,::z: X::x)); (24, OpenMP, #pragma omp target simd aligned(B::ib,B:C1+C2)); (6, OpenMP, #pragma omp target simd aligned(z:B:bfoo())); (0, OpenMP, #pragma omp target simd aligned(B::ib:B:bfoo())); (1, OpenMP, #pragma omp target simd aligned(B:B::bfoo())); (14, OpenMP, #pragma omp target simd aligned(::z))"}
{"predict": "(10, OpenMP, __kmpc_omp_task(NULL, 0, task);); (2, OpenMP, printf(\"%d: creating task\\n\", omp_get_thread_num());)", "label": "(10, OpenMP, __kmpc_omp_task(NULL, 0, task);); (2, OpenMP, printf(\"%d: creating task\\n\", omp_get_thread_num());)"}
{"predict": "(25, TBB, tbb::parallel_for(tbb::blocked_range<size_t>(0, n_cams), vtask);)", "label": "(25, TBB, tbb::task_scheduler_init init;); (25, TBB, tbb::parallel_for( tbb::blocked_range<int>(0,n_cams), vtask);)"}
{"predict": "(2, MPI, MPIDataCommunicator mpi_world_communicator(MPI_COMM_WORLD);)", "label": "(2, MPI, MPIDataCommunicator mpi_world_communicator(MPI_COMM_WORLD);)"}
{"predict": "(72, CUDA, CubDebugExit(cudaPeekAtLastError());); (33, CUDA, CubDebugExit(cudaGetDevice(&device_ordinal));); (42, CUDA, CubDebugExit(cudaDeviceGetAttribute(&max_block_threads, cudaDevAttrMaxThreadsPerBlock, device_ordinal));); (70, CUDA, CubDebugExit(cudaDeviceSynchronize());); (39, CUDA, CubDebugExit(cudaDeviceGetAttribute(&sm_count, cudaDevAttrMultiProcessorCount, device_ordinal));)", "label": "(34, CUDA, CubDebugExit(cudaGetDevice(&device_ordinal));); (42, CUDA, CubDebugExit(cudaDeviceGetAttribute(&max_block_threads, cudaDevAttrMaxThreadsPerBlock, device_ordinal));); (40, CUDA, CubDebugExit(cudaDeviceGetAttribute(&sm_count, cudaDevAttrMultiProcessorCount, device_ordinal));); (69, CUDA, retval = CubDebug(cudaDeviceSynchronize());)"}
{"predict": "(92, OpenMP, double tic = omp_get_wtime();); (108, OpenMP, #pragma omp target exit data map(from: u[0:n*n])); (116, OpenMP, double stop = omp_get_wtime();); (103, OpenMP, double toc = omp_get_wtime();); (5, OpenMP, double start = omp_get_wtime();); (79, OpenMP, #pragma omp target enter data map(to: u[0:n*n], u_tmp[0:n*n]))", "label": "(92, OpenMP, double tic = omp_get_wtime();); (108, OpenMP, #pragma omp target exit data map(from: u[0:n*n])); (116, OpenMP, double stop = omp_get_wtime();); (103, OpenMP, double toc = omp_get_wtime();); (6, OpenMP, double start = omp_get_wtime();); (80, OpenMP, #pragma omp target enter data map(to: u[0:n*n], u_tmp[0:n*n]))"}
{"predict": "(46, OpenCL, actualSampler = clCreateSampler( context, CL_FALSE, CL_ADDRESS_NONE, CL_FILTER_NEAREST, &error );); (55, OpenCL, clEnqueueWriteBuffer( queue, results, CL_TRUE, 0, resultValuesSize, resultValues, 0, NULL, NULL );); (76, OpenCL, error = clEnqueueNDRangeKernel( queue, kernel, 3, NULL, threads, NULL, 0, NULL, NULL );); (61, OpenCL, error = clSetKernelArg( kernel, idx++, sizeof( cl_mem ), &read_write_image );); (98, OpenCL, clReleaseMemObject(results);); (41, OpenCL, cl_mem results = clCreateBuffer( context, 0, imageInfo->width * imageInfo->height * imageInfo->arraySize * sizeof(cl_int), NULL, &error);); (56, OpenCL, error = clSetKernelArg( kernel, idx++, sizeof( cl_mem ), &read_only_image );); (60, OpenCL, error = clSetKernelArg( kernel, idx++, sizeof( cl_mem ), &results );); (94, OpenCL, clReleaseSampler(actualSampler);); (98, OpenCL, clReleaseMemObject(read_write_image);); (56, OpenCL, error = clSetKernelArg( kernel, idx++, sizeof( cl_sampler ), &actualSampler );); (71, OpenCL, error = clEnqueueReadBuffer( queue, results, CL_TRUE, 0, resultValuesSize, resultValues, 0, NULL, NULL );); (93, OpenCL, clReleaseMemObject(read_only_image);)", "label": "(46, OpenCL, actualSampler = clCreateSampler( context, CL_FALSE, CL_ADDRESS_NONE, CL_FILTER_NEAREST, &error );); (55, OpenCL, clEnqueueWriteBuffer( queue, results, CL_TRUE, 0, resultValuesSize, resultValues, 0, NULL, NULL );); (80, OpenCL, error = clEnqueueReadBuffer( queue, results, CL_TRUE, 0, resultValuesSize, resultValues, 0, NULL, NULL );); (75, OpenCL, error = clEnqueueNDRangeKernel( queue, kernel, 3, NULL, threads, NULL, 0, NULL, NULL );); (60, OpenCL, error = clSetKernelArg( kernel, idx++, sizeof( cl_mem ), &read_write_image );); (98, OpenCL, clReleaseMemObject(results);); (96, OpenCL, clReleaseSampler(actualSampler);); (100, OpenCL, clReleaseMemObject(read_write_image);); (96, OpenCL, clReleaseMemObject(read_only_image);); (51, OpenCL, error = clSetKernelArg( kernel, idx++, sizeof( cl_mem ), &read_only_image );); (59, OpenCL, error = clSetKernelArg( kernel, idx++, sizeof( cl_mem ), &results );); (56, OpenCL, error = clSetKernelArg( kernel, idx++, sizeof( cl_sampler ), &actualSampler );); (38, OpenCL, cl_mem results = clCreateBuffer( context, 0, imageInfo->width * imageInfo->height * imageInfo->arraySize * sizeof(cl_int), NULL, &error);)"}
{"predict": "(47, OpenMP, int i = omp_get_thread_num();); (50, CUDA, cudaMalloc((void**)&d_a, bufsize);); (50, CUDA, cudaMalloc((void**)&d_b, bufsize);); (78, CUDA, cudaFree(d_c);); (50, CUDA, cudaMalloc((void**)&d_c, bufsize);); (75, CUDA, cudaFree(d_b);); (21, CUDA, cudaMallocManaged((void**)&h_a, bufsize);); (44, OpenMP, omp_set_num_threads(num_operator);); (15, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (78, CUDA, cudaFree(d_a);); (72, CUDA, cudaFreeHost(h_b);); (72, CUDA, cudaFreeHost(h_a);); (10, MPI, MPI_Init(&argc, &argv);); (70, CUDA, cudaFreeHost(h_c);); (33, OpenMP, #pragma omp parallel); (10, MPI, MPI_Comm_size(MPI_COMM_WORLD, &np);); (64, CUDA, cudaFree(d);); (17, CUDA, cudaMallocManaged((void**)&h_c, bufsize);); (49, CUDA, cudaFree(d_a);); (47, CUDA, cudaFree(d_b);); (74, MPI, MPI_Finalize();); (12, CUDA, cudaMallocManaged((void**)&h_b, bufsize);); (50, CUDA, cudaFree(d_c);)", "label": "(51, OpenMP, omp_set_num_threads(num_operator);); (16, MPI, MPI_Init(&argc, &argv);); (37, CUDA, cudaMalloc((void**)&d_a, bufsize);); (80, CUDA, cudaFree(d_a);); (24, CUDA, cudaMallocHost((void**)&h_a, bufsize);); (25, CUDA, cudaMallocHost((void**)&h_c, bufsize);); (58, CUDA, cudaDeviceSynchronize();); (78, CUDA, cudaFree(d_c);); (44, OpenMP, #pragma omp parallel); (75, CUDA, cudaFree(d_b);); (30, CUDA, cudaMalloc((void**)&d_b, bufsize);); (43, OpenMP, int i = omp_get_thread_num();); (7, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (16, CUDA, cudaMallocHost((void**)&h_b, bufsize);); (75, CUDA, cudaFreeHost(h_b);); (73, CUDA, cudaFreeHost(h_a);); (25, CUDA, cudaMalloc((void**)&d_c, bufsize);); (1, MPI, MPI_Comm_size(MPI_COMM_WORLD, &np);); (74, MPI, MPI_Finalize();); (71, CUDA, cudaFreeHost(h_c);)"}
{"predict": "(7, OpenMP, #pragma omp simd private(myind, g_ind), linear(ind), aligned(arr) linear(uval(ref)))", "label": "(7, OpenMP, #pragma omp simd private(myind, g_ind), linear(ind), aligned(arr), linear(uval(ref)))"}
{"predict": "(38, MPI, MPI_Send(&sendbuf, 1, struct_type, rank, 0, MPI_COMM_WORLD);); (54, MPI, MPI_Get_elements(&status, struct_type, &count);); (38, MPI, MPI_Recv(&recvbuf, 1, struct_type, rank, 0, MPI_COMM_WORLD, &status);); (25, MPI, MPI_Type_commit(&struct_type);); (54, MPI, MPI_Type_free(&contig);); (35, MPI, MPI_Send(&sendbuf, 1, contig, rank, 0, MPI_COMM_WORLD);); (22, MPI, MPI_Type_create_struct(3, blens, displs, types, &struct_type);); (52, MPI, MPI_Type_free(&struct_type);); (32, MPI, MPI_Recv(&recvbuf, 1, contig, rank, 0, MPI_COMM_WORLD, &status);); (1, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (18, MPI, MPI_Type_contiguous(3, MPI_INT, &contig);)", "label": "(29, MPI, MPI_Type_contiguous(1, struct_type, &contig);); (51, MPI, MPI_Type_free(&struct_type);); (26, MPI, MPI_Type_create_struct(3, blens, displs, types, &struct_type);); (27, MPI, MPI_Type_commit(&struct_type);); (8, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (26, MPI, MPI_Type_commit(&contig);); (45, MPI, MPI_Get_elements(&status, contig, &count);); (34, MPI, MPI_Sendrecv(&sendbuf, 1, contig, 0, 0, &recvbuf, 1, contig, 0, 0, MPI_COMM_SELF, &status);); (45, MPI, MPI_Type_free(&contig);)"}
{"predict": "(13, MPI, MPI_Finalize();); (2, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (0, MPI, MPI_Init(NULL, NULL);); (3, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);)", "label": "(4, MPI, MPI_Init(&argc, &argv);); (4, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (11, MPI, MPI_Finalize();); (3, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);)"}
{"predict": "(28, TBB, tbb_list_time = (tbb::tick_count::now() - t0).seconds();); (42, TBB, serial_tree_time = (tbb::tick_count::now() - t0).seconds();); (15, TBB, serial_list_time = (tbb::tick_count::now() - t0).seconds();); (12, TBB, tbb::tick_count t0 = tbb::tick_count::now();); (50, TBB, tbb_tree_time = (tbb::tick_count::now() - t0).seconds();)", "label": "(28, TBB, tbb_list_time = (tbb::tick_count::now() - t0).seconds();); (42, TBB, serial_tree_time = (tbb::tick_count::now() - t0).seconds();); (15, TBB, serial_list_time = (tbb::tick_count::now() - t0).seconds();); (12, TBB, tbb::tick_count t0 = tbb::tick_count::now();); (50, TBB, tbb_tree_time = (tbb::tick_count::now() - t0).seconds();)"}
{"predict": "(18, OpenMP, #pragma omp target parallel for collapse(,); (40, OpenMP, #pragma omp target parallel for collapse(4, )); (3, OpenMP, #pragma omp target parallel for collapse(); (67, OpenMP, #pragma omp target parallel for collapse(2.5)); (27, OpenMP, #pragma omp target parallel for collapse(4); (4, OpenMP, #pragma omp target parallel for collapse()); (60, OpenMP, #pragma omp target parallel for collapse(4, 8)); (67, OpenMP, #pragma omp target parallel for collapse(foo())); (28, OpenMP, #pragma omp target parallel for collapse(4,); (73, OpenMP, #pragma omp target parallel for collapse(0)); (38, OpenMP, #pragma omp target parallel for collapse(4 4)); (77, OpenMP, #pragma omp target parallel for collapse(2) firstprivate(i)); (44, OpenMP, #pragma omp target parallel for collapse(4, , 4)); (83, OpenMP, #pragma omp target parallel for collapse(3 - 3)); (57, OpenMP, #pragma omp target parallel for collapse(-5)); (-1, OpenMP, #pragma omp target parallel for collapse(, )); (15, OpenMP, #pragma omp target parallel for collapse(4,); (60, OpenMP, #pragma omp target parallel for collapse(-10u))", "label": "(31, OpenMP, #pragma omp target parallel for collapse(4); (54, OpenMP, #pragma omp target parallel for collapse(4, , 4)); (43, OpenMP, #pragma omp target parallel for collapse(4)); (2, OpenMP, #pragma omp target parallel for collapse); (22, OpenMP, #pragma omp target parallel for collapse 4)); (73, OpenMP, #pragma omp target parallel for collapse(-5)); (3, OpenMP, #pragma omp target parallel for collapse(); (79, OpenMP, #pragma omp target parallel for collapse(5 - 5)); (82, OpenMP, #pragma omp target parallel for collapse(2) firstprivate(i)); (41, OpenMP, #pragma omp target parallel for collapse(4 4)); (60, OpenMP, #pragma omp target parallel for collapse(2.5)); (63, OpenMP, #pragma omp target parallel for collapse(foo())); (29, OpenMP, #pragma omp target parallel for collapse(4, )); (0, OpenMP, #pragma omp target parallel for collapse()); (68, OpenMP, #pragma omp target parallel for collapse(0)); (2, OpenMP, #pragma omp target parallel for collapse(,); (20, OpenMP, #pragma omp target parallel for collapse(4,); (4, OpenMP, #pragma omp target parallel for collapse(, )); (48, OpenMP, #pragma omp target parallel for collapse(4, 8))"}
{"predict": "(32, CUDA, CUDA_CHECK(cudaStreamSynchronize(stream));); (34, CUDA, CUDA_CHECK(cudaFree(d_data));)", "label": "(32, CUDA, CUDA_CHECK(cudaStreamSynchronize(stream));); (34, CUDA, CUDA_CHECK(cudaFree(d_data));)"}
{"predict": "(5, CUDA, err = cudaMalloc(&numErr_d, sizeof(int));); (22, CUDA, cudaFree(numErr_d);); (9, CUDA, err = cudaDeviceSynchronize();); (14, CUDA, err = cudaMemcpy(&numErr_h, numErr_d, sizeof(int), cudaMemcpyDeviceToHost);); (1, CUDA, printf(\"Cuda Main: cudaMalloc failed with %s\\n\", cudaGetErrorString(err));)", "label": "(5, CUDA, err = cudaMalloc(&numErr_d, sizeof(int));); (25, CUDA, printf(\"Cuda Main: cudaFree failed with %s\\n\", cudaGetErrorString(err));); (11, CUDA, err = cudaDeviceSynchronize();); (4, CUDA, printf(\"Cuda Main: cudaMemcpy failed with %s\\n\", cudaGetErrorString(err));); (20, CUDA, err = cudaFree(numErr_d);); (13, CUDA, err = cudaMemcpy(&numErr_h, numErr_d, sizeof(int), cudaMemcpyDeviceToHost);); (2, CUDA, cudaFree(numErr_d);)"}
{"predict": "(5, CUDA, __shared__ uint s_Hist[HISTOGRAM256_THREADBLOCK_MEMORY];)", "label": "(5, CUDA, __shared__ uint s_Hist[HISTOGRAM256_THREADBLOCK_MEMORY];)"}
{"predict": "(55, MPI, ascent_opts[\"mpi_comm\"] = MPI_Comm_c2f(comm);); (7, MPI, MPI_Comm_rank(comm, &par_rank);); (7, MPI, MPI_Comm_size(comm, &par_size);)", "label": "(55, MPI, ascent_opts[\"mpi_comm\"] = MPI_Comm_c2f(comm);); (7, MPI, MPI_Comm_rank(comm, &par_rank);); (7, MPI, MPI_Comm_size(comm, &par_size);)"}
{"predict": "(17, OpenMP, #pragma omp target teams distribute parallel for map(tofrom:sum)); (18, OpenMP, #pragma omp parallel for); (17, OpenMP, #pragma omp atomic)", "label": "(17, OpenMP, #pragma omp parallel for default(shared) private(i))"}
{"predict": "(35, CUDA, cudaFree(res_dev);); (28, CUDA, cudaMalloc(&res_dev, sizeof(float));); (30, CUDA, cudaMemcpy(&res_host, res_dev, sizeof(float), cudaMemcpyDeviceToHost);)", "label": "(35, CUDA, cudaFree(res_dev);); (28, CUDA, cudaMalloc(&res_dev, sizeof(float));); (30, CUDA, cudaMemcpy(&res_host, res_dev, sizeof(float), cudaMemcpyDeviceToHost);)"}
{"predict": "(43, MPI, ascent_opts[\"mpi_comm\"] = MPI_Comm_c2f(comm);); (15, MPI, MPI_Comm_rank(comm, &par_rank);); (15, MPI, MPI_Comm_size(comm, &par_size);)", "label": "(43, MPI, ascent_opts[\"mpi_comm\"] = MPI_Comm_c2f(comm);); (15, MPI, MPI_Comm_rank(comm, &par_rank);); (15, MPI, MPI_Comm_size(comm, &par_size);)"}
{"predict": "(199, CUDA, CUDA_CHECK(cudaStreamDestroy(stream));); (109, CUDA, CUDA_CHECK(cudaMemcpyAsync(d_A, h_A.data(), llda * loc_n_a * sizeof(double), cudaMemcpyHostToDevice, stream));); (199, MPI, MPI_Barrier(MPI_COMM_WORLD);); (48, CUDA, CUDA_CHECK(cudaFree(nullptr));); (188, CUDA, CUDA_CHECK(cudaFreeAsync(d_C, stream));); (45, CUDA, CUDA_CHECK(cudaSetDevice(local_device));); (20, MPI, MPI_Init(nullptr, nullptr);); (186, CUDA, CUDA_CHECK(cudaFreeAsync(d_work, stream));); (99, CUDA, CUDA_CHECK(cudaMallocAsync(&d_A, llda * loc_n_a * sizeof(double), stream));); (142, MPI, const double begin = MPI_Wtime();); (181, CUDA, CUDA_CHECK(cudaFreeAsync(d_A, stream));); (33, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (96, CUDA, CUDA_CHECK(cudaMallocAsync(&d_C, lldc * loc_n_c * sizeof(double), stream));); (98, CUDA, CUDA_CHECK(cudaMemcpyAsync(d_C, h_C.data(), lldc * loc_n_c * sizeof(double), cudaMemcpyHostToDevice, stream));); (55, CUDA, CUDA_CHECK(cudaStreamCreate(&stream));); (188, MPI, MPI_Finalize();); (27, MPI, MPI_Comm_size(MPI_COMM_WORLD, &nranks);); (127, CUDA, CUDA_CHECK(cudaMallocAsync(&d_work, workspaceInBytesOnDevice, stream));); (159, MPI, const double end = MPI_Wtime();)", "label": "(197, CUDA, CUDA_CHECK(cudaStreamDestroy(stream));); (109, CUDA, CUDA_CHECK(cudaMemcpyAsync(d_A, h_A.data(), llda * loc_n_a * sizeof(double), cudaMemcpyHostToDevice, stream));); (197, MPI, MPI_Barrier(MPI_COMM_WORLD);); (48, CUDA, CUDA_CHECK(cudaFree(nullptr));); (186, CUDA, CUDA_CHECK(cudaFreeAsync(d_C, stream));); (45, CUDA, CUDA_CHECK(cudaSetDevice(local_device));); (20, MPI, MPI_Init(nullptr, nullptr);); (184, CUDA, CUDA_CHECK(cudaFreeAsync(d_work, stream));); (99, CUDA, CUDA_CHECK(cudaMallocAsync(&d_A, llda * loc_n_a * sizeof(double), stream));); (141, MPI, const double begin = MPI_Wtime();); (179, CUDA, CUDA_CHECK(cudaFreeAsync(d_A, stream));); (33, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (96, CUDA, CUDA_CHECK(cudaMallocAsync(&d_C, lldc * loc_n_c * sizeof(double), stream));); (98, CUDA, CUDA_CHECK(cudaMemcpyAsync(d_C, h_C.data(), lldc * loc_n_c * sizeof(double), cudaMemcpyHostToDevice, stream));); (55, CUDA, CUDA_CHECK(cudaStreamCreate(&stream));); (186, MPI, MPI_Finalize();); (27, MPI, MPI_Comm_size(MPI_COMM_WORLD, &nranks);); (126, CUDA, CUDA_CHECK(cudaMallocAsync(&d_work, workspaceInBytesOnDevice, stream));); (157, MPI, const double end = MPI_Wtime();)"}
{"predict": "(1, CUDA, if (!IsGoogleCudaEnabled()) return;)", "label": "(1, CUDA, if (!IsGoogleCudaEnabled()) return;)"}
{"predict": "(3, CUDA, extern __shared__ unsigned scx1[];)", "label": "(3, CUDA, extern __shared__ unsigned scx1[];)"}
{"predict": "(3, CUDA, extern __shared__ float shared[];)", "label": "(3, CUDA, extern __shared__ float shared[];)"}
{"predict": "(48, MPI, MPI_Startall(2, requests);); (41, MPI, MPI_Barrier(MPI_COMM_WORLD);); (13, MPI, MPI_Init(&argc, &argv);); (58, MPI, t1 = MPI_Wtime();); (12, MPI, MPI_Comm_size(MPI_COMM_WORLD, &ntasks);); (12, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (59, MPI, MPI_Finalize();); (31, MPI, t0 = MPI_Wtime();)", "label": "(48, MPI, MPI_Startall(2, requests);); (50, MPI, MPI_Waitall(2, requests, statuses);); (57, MPI, t1 = MPI_Wtime();); (12, MPI, MPI_Init(&argc, &argv);); (61, MPI, MPI_Finalize();); (11, MPI, MPI_Comm_size(MPI_COMM_WORLD, &ntasks);); (11, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (31, MPI, MPI_Barrier(MPI_COMM_WORLD);); (31, MPI, t0 = MPI_Wtime();)"}
{"predict": "(12, OpenCL, retVal = clGetDeviceInfo(device, CL_DEVICE_PROFILE, sizeof(profile), profile, NULL);)", "label": "(12, OpenCL, retVal = clGetDeviceInfo(device, CL_DEVICE_PROFILE, sizeof(profile), profile, NULL);)"}
{"predict": "(22, CUDA, writeAccessPolicyWindowToJava(env, nativeObject.window, javaWindow);)", "label": "(21, CUDA, setCudaAccessPolicyWindow(env, javaObject, nativeObject.accessPolicyWindow);)"}
{"predict": "(22, CUDA, fptype ret = thrust::norm(totalAmp);)", "label": "(22, CUDA, fptype ret = thrust::norm(totalAmp);)"}
{"predict": "(6, OpenMP, #pragma omp parallel for)", "label": "(6, OpenMP, #pragma omp parallel for)"}
{"predict": "(36, MPI, MPI_Type_create_struct(num, blocklens, displs, types, &aligned_type);); (36, MPI, MPI_Type_commit(&aligned_type, newtype);); (26, MPI, MPI_Type_get_true_extent(oldtypes[i], &true_lb, &true_extent);)", "label": "(38, MPI, MPI_Type_free(&aligned_type);); (36, MPI, MPI_Type_commit(newtype);); (33, MPI, MPI_Type_create_struct(num, blocklens, displs, types, &aligned_type);); (33, MPI, MPI_Type_create_resized(aligned_type, 0, disp, newtype);); (23, MPI, MPI_Type_get_true_extent(oldtypes[i], &true_lb, &true_extent);)"}
{"predict": "(8, OpenCL, void *mappedPtr = clEnqueueMapImage(cmdQ.get(), image.get(), CL_TRUE, CL_MAP_WRITE, &origin[0], &region[0], nullptr, nullptr, 0, nullptr, nullptr, &retVal);); (14, OpenCL, retVal = clEnqueueUnmapMemObject(cmdQ.get(), image.get(), mappedPtr, 0, nullptr, nullptr);)", "label": "(8, OpenCL, void *mappedPtr = clEnqueueMapImage(cmdQ.get(), image.get(), CL_TRUE, CL_MAP_WRITE, &origin[0], &region[0], nullptr, nullptr, 0, nullptr, nullptr, &retVal);); (14, OpenCL, retVal = clEnqueueUnmapMemObject(cmdQ.get(), image.get(), mappedPtr, 0, nullptr, nullptr);)"}
{"predict": "(2, OpenMP, #pragma omp target teams distribute parallel for simd defaultmap); (7, OpenMP, #pragma omp target teams distribute parallel for simd defaultmap()); (16, OpenMP, #pragma omp target teams distribute parallel for simd defaultmap(tofrom)); (24, OpenMP, #pragma omp target teams distribute parallel for simd defaultmap(tofrom,); (10, OpenMP, #pragma omp target teams distribute parallel for simd defaultmap (tofrom:); (15, OpenMP, #pragma omp target teams distribute parallel for simd defaultmap(tofrom scalar)); (21, OpenMP, #pragma omp target teams distribute parallel for simd defaultmap(tofrom, scalar); (4, OpenMP, #pragma omp target teams distribute parallel for simd defaultmap(tofrom); (-4, OpenMP, #pragma omp target teams distribute parallel for simd defaultmap(); (16, OpenMP, #pragma omp target teams distribute parallel for simd defaultmap (scalar:)", "label": "(29, OpenMP, #pragma omp target simd defaultmap(tofrom, scalar); (1, OpenMP, #pragma omp target simd defaultmap); (9, OpenMP, #pragma omp target simd defaultmap(tofrom); (20, OpenMP, #pragma omp target simd defaultmap(tofrom,); (10, OpenMP, #pragma omp target simd defaultmap(tofrom:); (15, OpenMP, #pragma omp target simd defaultmap(tofrom scalar)); (20, OpenMP, #pragma omp target simd defaultmap(scalar:); (-2, OpenMP, #pragma omp target simd defaultmap(); (9, OpenMP, #pragma omp target simd defaultmap(tofrom)); (-1, OpenMP, #pragma omp target simd defaultmap())"}
{"predict": "(85, MPI, ascent_opts[\"mpi_comm\"] = MPI_Comm_c2f(comm);); (91, MPI, MPI_Barrier(comm);); (16, MPI, MPI_Comm_rank(comm, &par_rank);); (16, MPI, MPI_Comm_size(comm, &par_size);)", "label": "(85, MPI, ascent_opts[\"mpi_comm\"] = MPI_Comm_c2f(comm);); (91, MPI, MPI_Barrier(comm);); (16, MPI, MPI_Comm_rank(comm, &par_rank);); (16, MPI, MPI_Comm_size(comm, &par_size);)"}
{"predict": "(2, OpenMP, #pragma omp parallel); (6, OpenMP, #pragma omp barrier); (4, OpenMP, #pragma omp single)", "label": "(2, OpenMP, #pragma omp target map(alloc:colstat[0:NZ])); (5, OpenMP, #pragma omp target map(alloc:colstat[:0])); (9, OpenMP, #pragma omp target update from(colstat))"}
{"predict": "(12, TBB, ASSERT( !err, \"Setting process affinity failed\" );)", "label": "(41, TBB, ASSERT( (int)tbb::tbb_thread::hardware_concurrency() == availableProcs, NULL );); (39, TBB, ASSERT( tbb::task_scheduler_init::default_num_threads() == availableProcs, NULL );)"}
{"predict": "(3, CUDA, thrust::device_sort(d_tmp_buffer, d_tmp_buffer + num_items);); (7, CUDA, auto err = thrust::mismatch(d_reference_begin, d_reference_end, d_data);); (8, CUDA, int index = thrust::distance(d_reference_begin, err.first);)", "label": "(7, CUDA, auto err = thrust::mismatch(thrust::device, d_reference_begin, d_reference_end, d_data);); (2, CUDA, CubDebugExit(cudaMemcpy(d_tmp_buffer, host_reference, sizeof(T) * num_items, cudaMemcpyHostToDevice));); (9, CUDA, const auto index = thrust::distance(d_reference_begin, err.first);)"}
{"predict": "(12, CUDA, CUDA_SAFE_CALL(cudaMalloc(&device_buffer, buffer_size * sizeof(value_type)));)", "label": "(12, CUDA, CUDA_SAFE_CALL(cudaMalloc(&device_buffer, buffer_size * sizeof(value_type)));)"}
{"predict": "(6, CUDA, cudaMalloc(&ptr, size);); (30, CUDA, cudaFree(ptr);); (28, CUDA, cudaMemcpy((*samples)[devi].get(), ptr, size, cudaMemcpyDeviceToDevice);)", "label": "(8, CUDA, cudaSetDevice(devs[0]);); (5, CUDA, CUCH(cudaMallocManaged(&ptr, size), kmcudaMemoryAllocationFailure);); (7, CUDA, CUCH(cudaMemcpy(ptr, (*samples)[0].get(), size, cudaMemcpyDefault), kmcudaMemoryCopyError);)"}
{"predict": "(63, CUDA, CUDA_CHECK(cudaFree(d_B));); (50, CUDA, CUDA_CHECK(cudaStreamSynchronize(stream));); (32, CUDA, CUDA_CHECK(cudaMalloc(reinterpret_cast<void **>(&d_B), sizeof(data_type) * B.size()));); (66, CUDA, CUDA_CHECK(cudaDeviceReset());); (63, CUDA, CUDA_CHECK(cudaStreamDestroy(stream));); (28, CUDA, CUDA_CHECK(cudaMalloc(reinterpret_cast<void **>(&d_A), sizeof(data_type) * A.size()));); (56, CUDA, CUDA_CHECK(cudaFree(d_A));); (22, CUDA, CUDA_CHECK(cudaStreamCreateWithFlags(&stream, cudaStreamNonBlocking));)", "label": "(51, CUDA, CUDA_CHECK(cudaStreamSynchronize(stream));); (33, CUDA, CUDA_CHECK(cudaMalloc(reinterpret_cast<void **>(&d_B), sizeof(data_type) * B.size()));); (61, CUDA, CUDA_CHECK(cudaFree(d_B));); (66, CUDA, CUDA_CHECK(cudaDeviceReset());); (63, CUDA, CUDA_CHECK(cudaStreamDestroy(stream));); (28, CUDA, CUDA_CHECK(cudaMalloc(reinterpret_cast<void **>(&d_A), sizeof(data_type) * A.size()));); (56, CUDA, CUDA_CHECK(cudaFree(d_A));); (22, CUDA, CUDA_CHECK(cudaStreamCreateWithFlags(&stream, cudaStreamNonBlocking));)"}
{"predict": "(3, CUDA, __shared__ float local[threads];)", "label": "(3, CUDA, __shared__ float local[threads];)"}
{"predict": "(47, OpenMP, EXPECT_TRUE(check_test_image(output_file, t_apcomp_baseline_dir()));); (8, MPI, MPI_Comm_rank(comm, &par_rank);); (8, MPI, MPI_Comm_size(comm, &par_size);); (10, MPI, apcomp::mpi_comm(MPI_Comm_c2f(comm));)", "label": "(47, OpenMP, EXPECT_TRUE(check_test_image(output_file, t_apcomp_baseline_dir()));); (9, MPI, MPI_Comm_rank(comm, &par_rank);); (10, MPI, apcomp::mpi_comm(MPI_Comm_c2f(comm));); (8, MPI, MPI_Comm_size(comm, &par_size);)"}
{"predict": "(28, MPI, MPI_Comm_split_type(MPI_COMM_WORLD, MPI_COMM_TYPE_SHARED, rank, MPI_INFO_NULL, &shm_comm);); (13, MPI, MPI_Win_allocate_shared(size, sizeof(int), MPI_INFO_NULL, MPI_COMM_SELF, &my_base, &shm_win);); (35, MPI, MPI_Win_allocate_shared(size, sizeof(int), MPI_INFO_NULL, shm_comm, &query_base, &shm_win);); (33, MPI, MPI_Win_create(NULL, 0, 1, MPI_INFO_NULL, shm_comm, &shm_win);); (67, MPI, MPI_Comm_free(&shm_comm);); (7, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (22, MPI, MPI_Comm_size(shm_comm, &shm_nproc);); (20, MPI, MPI_Comm_rank(shm_comm, &shm_rank);); (31, MPI, MPI_Win_start(MPI_PROC_NULL, 0, shm_win);); (61, MPI, MPI_Win_free(&shm_win);); (37, MPI, MPI_Win_wait(shm_win);); (9, MPI, MPI_Win_shared_query(shm_win, MPI_PROC_NULL, &query_size, &query_disp_unit, &query_base);)", "label": "(28, MPI, MPI_Comm_rank(shm_comm, &shm_rank);); (15, MPI, MPI_Win_shared_query(shm_win, MPI_PROC_NULL, &query_size, &query_disp_unit, &query_base);); (13, MPI, MPI_Win_allocate_shared(size, sizeof(int), MPI_INFO_NULL, MPI_COMM_SELF, &my_base, &shm_win);); (23, MPI, MPI_Comm_split_type(MPI_COMM_WORLD, MPI_COMM_TYPE_SHARED, rank, MPI_INFO_NULL, &shm_comm);); (34, MPI, MPI_Win_allocate_shared(0, sizeof(int), MPI_INFO_NULL, shm_comm, &my_base, &shm_win);); (20, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (67, MPI, MPI_Comm_free(&shm_comm);); (15, MPI, MPI_Win_free(&shm_win);); (21, MPI, MPI_Comm_size(shm_comm, &shm_nproc);); (31, MPI, MPI_Win_allocate_shared(size, sizeof(int), MPI_INFO_NULL, shm_comm, &my_base, &shm_win);)"}
{"predict": "(13, CUDA, cudaMalloc((void **)&d_arr, sizeof(int) * len);); (16, CUDA, cudaMemcpy(d_arr, arr, sizeof(int) * len, cudaMemcpyHostToDevice);); (53, CUDA, cudaFree(d_out);); (11, CUDA, cudaMalloc((void **)&d_out, sizeof(int) * len);); (23, CUDA, cudaMemcpy(out, d_out, sizeof(int) * len, cudaMemcpyDeviceToHost);); (49, CUDA, cudaFree(d_arr);)", "label": "(13, CUDA, cudaMalloc((void **)&d_arr, sizeof(int) * len);); (16, CUDA, cudaMemcpy(d_arr, arr, sizeof(int) * len, cudaMemcpyHostToDevice);); (53, CUDA, cudaFree(d_out);); (11, CUDA, cudaMalloc((void **)&d_out, sizeof(int) * len);); (23, CUDA, cudaMemcpy(out, d_out, sizeof(int) * len, cudaMemcpyDeviceToHost);); (49, CUDA, cudaFree(d_arr);)"}
{"predict": "(3, OpenMP, int* shared_ptr = (int*)omp_target_alloc(N * sizeof(int), omp_get_default_device());); (4, OpenMP, #pragma omp target teams distribute parallel for map(tofrom:sum))", "label": "(4, OpenMP, int *shared_ptr = llvm_omp_target_alloc_shared(N * sizeof(int), device);); (5, OpenMP, #pragma omp target teams distribute parallel for device(device)); (0, OpenMP, const int device = omp_get_default_device();); (13, OpenMP, omp_target_free(shared_ptr, device);)"}
{"predict": "(52, TBB, tbb::flow::make_edge( b2, b3 );); (50, TBB, tbb::flow::make_edge( b, b2 );); (73, TBB, tbb::flow::buffer_node<T> b_copy(b);); (2, TBB, tbb::flow::buffer_node<T> b3(g);); (0, TBB, tbb::flow::buffer_node<T> b2(g);); (-3, TBB, tbb::flow::graph g;); (-3, TBB, tbb::flow::buffer_node<T> b(g);)", "label": "(52, TBB, tbb::flow::make_edge( b2, b3 );); (50, TBB, tbb::flow::make_edge( b, b2 );); (73, TBB, tbb::flow::buffer_node<T> b_copy(b);); (2, TBB, tbb::flow::buffer_node<T> b3(g);); (0, TBB, tbb::flow::buffer_node<T> b2(g);); (-3, TBB, tbb::flow::graph g;); (-3, TBB, tbb::flow::buffer_node<T> b(g);)"}
{"predict": "(22, OpenCL, clReleaseEvent(outEvent1);)", "label": "(22, OpenCL, clReleaseEvent(outEvent1);)"}
{"predict": "(59, CUDA, cudaFree( deviceThreadIDs );); (59, CUDA, cudaFree( deviceClockValues );); (59, CUDA, cudaFreeHost( hostOut );)", "label": "(59, CUDA, cudaFree( deviceClockValues );); (60, CUDA, cudaFreeHost( hostOut );); (61, CUDA, cudaEventDestroy( stop );); (59, CUDA, cudaEventDestroy( start );); (56, CUDA, cudaFree( deviceThreadIDs );)"}
{"predict": "(64, MPI, t2 = MPI_Wtime();); (58, MPI, t1 = MPI_Wtime();)", "label": "(63, MPI, t2 = MPI_Wtime();); (58, MPI, t1 = MPI_Wtime();)"}
{"predict": "(172, CUDA, int accepted = thrust::count_if(flags.begin(), flags.end(), thrust::identity<bool>());)", "label": "(184, CUDA, long accepted  = thrust::count_if(flags.begin(), flags.end(), thrust::identity<bool>());)"}
{"predict": "(34, MPI, MPI_Comm_size(MPI_COMM_WORLD,&mpi_size);); (34, MPI, MPI_Comm_rank(MPI_COMM_WORLD,&mpi_rank);)", "label": "(34, MPI, MPI_Comm_size(MPI_COMM_WORLD,&mpi_size);); (34, MPI, MPI_Comm_rank(MPI_COMM_WORLD,&mpi_rank);)"}
{"predict": "(6, CUDA, extern __shared__ uint64_t s_QHatModp[];)", "label": "(6, CUDA, extern __shared__ uint64_t s_QHatModp[];)"}
{"predict": "(44, MPI, MPI_Accumulate(mine, 1, MPI_2INT, 0, 0, 1, MPI_2INT, MPI_REPLACE, win);); (78, MPI, MPI_Info_set(info_in, \"win_ordering\", \"none\");); (49, MPI, MPI_Win_fence(0, win);); (84, MPI, MPI_Info_free(&info_in);); (59, MPI, MPI_Accumulate(mine, ARRAY_LEN, MPI_2INT, 0, 0, ARRAY_LEN, MPI_2INT, MPI_REPLACE, win);); (11, MPI, MPI_Comm_size(MPI_COMM_WORLD, &nproc);); (68, MPI, MPI_Win_free(&win);); (71, MPI, MPI_Info_create(&info_in);); (36, MPI, MPI_Win_fence(0, win);); (31, MPI, MPI_Accumulate(mine_plus, 1, MPI_2INT, 0, 0, 1, MPI_2INT, MPI_REPLACE, win);); (5, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &me);); (2, MPI, MPI_Info_create(&info_in);); (39, MPI, MPI_Accumulate(mine_plus, ARRAY_LEN, MPI_2INT, 0, 0, ARRAY_LEN, MPI_2INT, MPI_REPLACE, win);); (25, MPI, MPI_Win_create(data, ARRAY_LEN * sizeof(twoint_t), sizeof(twoint_t), info_in, MPI_COMM_WORLD, &win);); (6, MPI, MPI_Info_set(info_in, \"win_ordering\", \"default\");); (3, MPI, MPI_Abort(MPI_COMM_WORLD, 1);); (15, MPI, MPI_Win_create(NULL, 0, 1, info_in, MPI_COMM_WORLD, &win);)", "label": "(81, MPI, MPI_Win_create(data, sizeof(twoint_t) * ARRAY_LEN, 1, info_in, MPI_COMM_WORLD, &win);); (81, MPI, MPI_Info_free(&info_in);); (134, MPI, MPI_Accumulate(mine_plus, 1, MPI_2INT, 0, 0, 1, MPI_2INT, MPI_MAXLOC, win);); (151, MPI, MPI_Accumulate(mine_plus, ARRAY_LEN, MPI_2INT, 0, 0, ARRAY_LEN, MPI_2INT, MPI_MAXLOC, win);); (34, MPI, MPI_Win_fence(0, win);); (56, MPI, MPI_Accumulate(mine, ARRAY_LEN, MPI_2INT, 0, 0, ARRAY_LEN, MPI_2INT, MPI_REPLACE, win);); (7, MPI, MPI_Comm_size(MPI_COMM_WORLD, &nproc);); (5, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &me);); (63, MPI, MPI_Win_free(&win);); (70, MPI, MPI_Info_create(&info_in);); (70, MPI, MPI_Info_set(info_in, \"accumulate_ordering\", \"none\");); (32, MPI, MPI_Accumulate(mine, 1, MPI_2INT, 0, 0, 1, MPI_2INT, MPI_REPLACE, win);); (181, MPI, MPI_Accumulate(mine, ARRAY_LEN, MPI_2INT, 0, 0, ARRAY_LEN, MPI_2INT, MPI_MINLOC, win);); (31, MPI, MPI_Accumulate(mine_plus, 1, MPI_2INT, 0, 0, 1, MPI_2INT, MPI_REPLACE, win);); (48, MPI, MPI_Accumulate(mine_plus, ARRAY_LEN, MPI_2INT, 0, 0, ARRAY_LEN, MPI_2INT, MPI_REPLACE, win);); (160, MPI, MPI_Accumulate(mine, 1, MPI_2INT, 0, 0, 1, MPI_2INT, MPI_MINLOC, win);); (1, MPI, MPI_Abort(MPI_COMM_WORLD, 1);); (20, MPI, MPI_Win_create(data, sizeof(twoint_t) * ARRAY_LEN, 1, MPI_INFO_NULL, MPI_COMM_WORLD, &win);)"}
{"predict": "(55, CUDA, CUDA_CHECK(cudaEventRecord(stop, 0));); (52, CUDA, CUDA_CHECK(cudaEventElapsedTime(&milliseconds, start, stop));); (23, CUDA, CUDA_CHECK(cudaDeviceSynchronize());); (48, CUDA, CUDA_CHECK(cudaGetLastError());); (54, CUDA, CUDA_CHECK(cudaEventSynchronize(stop));); (44, CUDA, CUDA_CHECK(cudaEventRecord(start, 0));); (13, CUDA, cudaDeviceGetLimit(&size_value, cudaLimitStackSize);)", "label": "(56, CUDA, cudaEventRecord(stop);); (22, CUDA, CUDA_CHECK(cudaDeviceSetLimit(cudaLimitStackSize, 2 * 1024));); (55, CUDA, cudaEventSynchronize(stop);); (58, CUDA, cudaEventDestroy(start);); (5, CUDA, CUDA_CHECK(cudaDeviceReset());); (21, CUDA, CUDA_CHECK(cudaDeviceSynchronize());); (46, CUDA, cudaEventRecord(start);); (55, CUDA, cudaEventDestroy(stop);); (57, CUDA, CUDA_CHECK(cudaGetLastError());); (8, CUDA, cudaDeviceGetLimit(&size_value, cudaLimitStackSize);); (12, CUDA, CUDA_CHECK(cudaDeviceSetLimit(cudaLimitMallocHeapSize, heap_size));); (40, CUDA, cudaEventCreate(&stop);); (46, CUDA, cudaEventElapsedTime(&milliseconds, start, stop);); (37, CUDA, cudaEventCreate(&start);)"}
{"predict": "(19, OpenMP, #pragma omp parallel for reduction(+:s)); (10, OpenMP, #pragma omp parallel for)", "label": "(19, OpenMP, #pragma omp parallel for reduction(+:s)); (10, OpenMP, #pragma omp parallel for)"}
{"predict": "(10, MPI, MPI_Allreduce(input, output, 1, dtcmp_type_64bit_uint, dtcmp_reduceop_min_max_sum, comm);)", "label": "(10, MPI, MPI_Allreduce(input, output, 1, dtcmp_type_3uint64t, dtcmp_reduceop_mms_3uint64t, comm);)"}
{"predict": "(19, MPI, MPI_Bcast(&array_size, 1, MPI_INT, 0, MPI_COMM_WORLD);); (27, MPI, MPI_Wait(&request, &status);); (41, MPI, end_time = MPI_Wtime();); (66, MPI, MPI_Finalize();); (5, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (34, MPI, start_time = MPI_Wtime();); (2, MPI, MPI_Init(NULL, NULL);); (2, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (9, MPI, MPI_Bcast(&nr_iters, 1, MPI_INT, 0, MPI_COMM_WORLD);); (6, MPI, MPI_Abort(MPI_COMM_WORLD, EXIT_FAILURE);)", "label": "(19, MPI, MPI_Bcast(&array_size, 1, MPI_INT, 0, MPI_COMM_WORLD);); (26, MPI, MPI_Wait(&request, &status);); (41, MPI, end_time = MPI_Wtime();); (66, MPI, MPI_Finalize();); (5, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (2, MPI, MPI_Init(NULL, NULL);); (2, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (25, MPI, start_time = MPI_Wtime();); (12, MPI, MPI_Bcast(&nr_iters, 1, MPI_INT, 0, MPI_COMM_WORLD);); (6, MPI, MPI_Abort(MPI_COMM_WORLD, EXIT_FAILURE);)"}
{"predict": "(2, OpenMP, omp_autotune(self, OMP_SCALE);)", "label": "(2, OpenMP, omp_autotune(self, OMP_SCALE);)"}
{"predict": "(173, MPI, *ierr = MPI_Comm_spawn_multiple( (MPI_Info)(*v5), p2, *v1, v3, *v6, (MPI_Comm *)(v8), (MPI_Info *)(v9) );); (5, MPI, *ierr = MPI_Comm_spawn( (const char *)v2, (const char **)p2, *v1, (MPI_Info)(*v5), *v6, (MPI_Comm *)(v8), (MPI_Info *)(v9) );)", "label": "(127, MPI, *ierr = MPI_Comm_spawn_multiple( *v1, p2, p3, v4, v5, *v6, (MPI_Comm)(*v7), (MPI_Comm *)(v8), (int *)v9 );)"}
{"predict": "(10, OpenMP, #pragma omp parallel); (96, OpenMP, #pragma omp critical)", "label": "(10, OpenMP, #pragma omp parallel); (14, OpenMP, #pragma omp for); (95, OpenMP, #pragma omp critical)"}
{"predict": "(19, MPI, MPI_Start(&requests[1]);); (25, MPI, MPI_Waitall(2, requests, MPI_STATUSES_IGNORE);); (6, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (28, MPI, MPI_Request_free(&requests[0]);); (5, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (17, MPI, MPI_Psend(&a, 1, MPI_INT, 1, 0, MPI_COMM_WORLD, &requests[0]);); (27, MPI, MPI_Request_free(&requests[1]);); (17, MPI, MPI_Start(&requests[0]);); (3, MPI, MPI_Abort(MPI_COMM_WORLD, 1);); (12, MPI, MPI_Precv(&a, 1, MPI_INT, 0, 0, MPI_COMM_WORLD, &requests[1]);)", "label": "(22, MPI, MPI_Start(&requests[0]);); (17, MPI, MPI_Barrier_init(MPI_COMM_WORLD, MPI_INFO_NULL, &requests[1]);); (6, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (14, MPI, MPI_Bcast_init(&a, 1, MPI_INT, 0, MPI_COMM_WORLD, MPI_INFO_NULL, &requests[0]);); (3, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (18, MPI, MPI_Start(&requests[1]);); (23, MPI, MPI_Waitall(2, requests, MPI_STATUSES_IGNORE);); (5, MPI, MPI_Abort(MPI_COMM_WORLD, 1);); (27, MPI, MPI_Request_free(&requests[0]);); (27, MPI, MPI_Request_free(&requests[1]);)"}
{"predict": "(11, OpenMP, #pragma omp target teams distribute parallel for map(tofrom:sum1) reduction(+:sum1) collapse(2))", "label": "(11, OpenMP, #pragma omp target teams distribute parallel for map(tofrom:sum1) reduction(+:sum1) collapse(2))"}
{"predict": "(16, TBB, tbb::tick_count t0 = tbb::tick_count::now();); (22, TBB, serial_tiled_time = (tbb::tick_count::now() - t0).seconds();); (27, TBB, tbb_time = (tbb::tick_count::now() - t0).seconds();); (15, TBB, serial_time = (tbb::tick_count::now() - t0).seconds();)", "label": "(16, TBB, tbb::tick_count t0 = tbb::tick_count::now();); (22, TBB, serial_tiled_time = (tbb::tick_count::now() - t0).seconds();); (27, TBB, tbb_time = (tbb::tick_count::now() - t0).seconds();); (15, TBB, serial_time = (tbb::tick_count::now() - t0).seconds();)"}
{"predict": "(113, CUDA, cudaFreeHost(h_bCached);); (27, CUDA, cudaMalloc((void**)&d_a, bytes);); (27, CUDA, cudaMalloc((void**)&d_b, bytes);); (118, CUDA, cudaFree(d_b);); (110, CUDA, cudaFreeHost(h_aPinned);); (110, CUDA, cudaFreeHost(h_bPinned);); (114, CUDA, cudaFree(d_a);); (20, CUDA, cudaMallocHost((void**)&h_aCached, bytes);); (17, CUDA, cudaMallocHost((void**)&h_bPinned, bytes);); (15, CUDA, cudaMallocHost((void**)&h_bCached, bytes);); (0, CUDA, cudaGetDeviceCount(&count);); (40, CUDA, cudaGetDeviceProperties(&prop, deviceID);); (-6, CUDA, cudaSetDevice(deviceID);); (105, CUDA, cudaFreeHost(h_aCached);); (15, CUDA, cudaMallocHost((void**)&h_aPinned, bytes);)", "label": "(50, CUDA, cudaGetDeviceProperties(&prop, 0);); (125, CUDA, cudaFree(h_aCached);); (29, CUDA, cudaMallocHost((void**)&h_aCached, bytes);); (119, CUDA, cudaFreeHost(h_aPinned);); (119, CUDA, cudaFreeHost(h_bPinned);); (29, CUDA, cudaHostAlloc((void**)&h_bPinned, bytes, cudaHostAllocWriteCombined);); (24, CUDA, cudaMalloc((void**)&d_b, bytes);); (26, CUDA, cudaHostAlloc((void**)&h_aPinned, bytes, cudaHostAllocWriteCombined);); (24, CUDA, cudaMallocHost((void**)&h_bCached, bytes);); (116, CUDA, cudaFree(d_b);); (-1, CUDA, cudaSetDevice(0);); (113, CUDA, cudaFree(d_a);); (115, CUDA, cudaFree(h_bCached);); (-10, CUDA, cudaGetDeviceCount(&count);); (-2, CUDA, cudaGetDevice(&deviceID);); (14, CUDA, cudaMalloc((void**)&d_a, bytes);)"}
{"predict": "(30, OpenCL, err = clEnqueueWriteBuffer( queue, streams[0], true, 0, sizeof(int)*num_elements, (void *)int_input_ptr, 0, NULL, NULL );); (107, OpenCL, err = clEnqueueReadBuffer( queue, streams[1], true, 0, sizeof(int)*num_elements, (void *)int_output_ptr, 0, NULL, NULL );); (35, OpenCL, err = clEnqueueCopyBuffer( queue, streams[0], streams[1], 0, 0, sizeof(int)*num_elements, 0, NULL, &copyEvent );); (46, OpenCL, clReleaseEvent(copyEvent);); (43, OpenCL, clReleaseMemObject( streams[1] );); (125, OpenCL, clReleaseMemObject( streams[1] );); (38, OpenCL, clReleaseMemObject( streams[0] );); (40, OpenCL, err = clWaitForEvents( 1, &copyEvent );)", "label": "(30, OpenCL, err = clEnqueueWriteBuffer( queue, streams[0], true, 0, sizeof(cl_int)*num_elements, (void *)int_input_ptr, 0, NULL, NULL );); (39, OpenCL, err = clEnqueueCopyBuffer( queue, streams[0], streams[1], 0, 0, sizeof(cl_int)*num_elements, 0, NULL, &copyEvent );); (32, OpenCL, clReleaseMemObject( streams[1] );); (107, OpenCL, err = clEnqueueReadBuffer( queue, streams[1], true, 0, sizeof(cl_int)*num_elements, (void *)int_output_ptr, 0, NULL, NULL );); (48, OpenCL, err = clWaitForEvents( 1, &copyEvent );); (28, OpenCL, clReleaseMemObject( streams[0] );); (49, OpenCL, clReleaseEvent(copyEvent);)"}
{"predict": "(17, MPI, MPI_Send(buffer, 10, MPI_INT, left, 1, MPI_COMM_WORLD);); (6, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &myid);); (10, MPI, MPI_Send(buffer, 10, MPI_INT, right, 2, MPI_COMM_WORLD);); (17, MPI, MPI_Recv(buffer, 10, MPI_INT, right, 1, MPI_COMM_WORLD, &status);); (4, MPI, MPI_Comm_size(MPI_COMM_WORLD, &numprocs);); (13, MPI, MPI_Recv(buffer, 10, MPI_INT, left, 2, MPI_COMM_WORLD, &status);); (1, MPI, MPI_Init(&argc, &argv);); (15, MPI, MPI_Finalize();)", "label": "(9, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &myid);); (7, MPI, MPI_Comm_size(MPI_COMM_WORLD, &numprocs);); (16, MPI, MPI_Finalize();); (4, MPI, MPI_Init(&argc,&argv);); (12, MPI, MPI_Sendrecv_replace(buffer, 10, MPI_INT, left, 123, right, 123, MPI_COMM_WORLD, &status);)"}
{"predict": "(3, TBB, REMARK(\"is_large_object<int>::value=%d\\n\", tbb::interface6::internal::is_large_object<int>::value);); (4, TBB, REMARK(\"is_large_object<int *>::value=%d\\n\", tbb::interface6::internal::is_large_object<int *>::value);); (2, TBB, REMARK(\"is_large_object<double>::value=%d\\n\", tbb::interface6::internal::is_large_object<double>::value);); (4, TBB, REMARK(\"is_large_object<check_type<int>* >::value=%d\\n\", tbb::interface6::internal::is_large_object<check_type<int>* >::value);); (2, TBB, REMARK(\"is_large_object<check_type<int> >::value=%d\\n\", tbb::interface6::internal::is_large_object<check_type<int> >::value);); (3, TBB, REMARK(\"is_large_object<check_type<short> >::value=%d\\n\\n\", tbb::interface6::internal::is_large_object<check_type<short> >::value);); (8, TBB, tbb::task_scheduler_init init(nthread);)", "label": "(3, TBB, REMARK(\"is_large_object<int>::value=%d\\n\", tbb::interface6::internal::is_large_object<int>::value);); (4, TBB, REMARK(\"is_large_object<int *>::value=%d\\n\", tbb::interface6::internal::is_large_object<int *>::value);); (2, TBB, REMARK(\"is_large_object<double>::value=%d\\n\", tbb::interface6::internal::is_large_object<double>::value);); (4, TBB, REMARK(\"is_large_object<check_type<int>* >::value=%d\\n\", tbb::interface6::internal::is_large_object<check_type<int>* >::value);); (2, TBB, REMARK(\"is_large_object<check_type<int> >::value=%d\\n\", tbb::interface6::internal::is_large_object<check_type<int> >::value);); (3, TBB, REMARK(\"is_large_object<check_type<short> >::value=%d\\n\\n\", tbb::interface6::internal::is_large_object<check_type<short> >::value);); (8, TBB, tbb::task_scheduler_init init(nthread);)"}
{"predict": "(2, MPI, MPIDataCommunicator mpi_world_communicator(MPI_COMM_WORLD);)", "label": "(2, MPI, MPIDataCommunicator mpi_world_communicator(MPI_COMM_WORLD);)"}
{"predict": "(46, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_ARE_FATAL);); (21, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (21, MPI, MPI_Comm_size(MPI_COMM_WORLD, &num_ranks);); (18, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);); (38, MPI, MPI_Error_string(ierr, str, &slen);)", "label": "(47, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_ARE_FATAL);); (21, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (21, MPI, MPI_Comm_size(MPI_COMM_WORLD, &num_ranks);); (18, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);); (38, MPI, MPI_Error_string(ierr, str, &slen);)"}
{"predict": "(53, CUDA, extern __shared__ float s_float[];)", "label": "(53, CUDA, extern __shared__ float s_float[];)"}
{"predict": "(15, OpenMP, #pragma omp parallel for); (26, CUDA, RAFT_CUDA_TRY(cudaPeekAtLastError());); (19, CUDA, RAFT_CUDA_TRY(cudaDeviceSynchronize());); (21, CUDA, RAFT_CUDA_TRY(cudaSetDevice(0));); (10, OpenMP, int i = omp_get_thread_num();)", "label": "(26, OpenMP, #pragma omp barrier); (19, OpenMP, common::nvtx::range omp_scope(\"interruptible::thread-%d\", i);); (13, OpenMP, omp_set_dynamic(0);); (14, OpenMP, #pragma omp parallel reduction(+ : n_finished) reduction(+ : n_cancelled) num_threads(n_threads)); (12, OpenMP, omp_set_num_threads(n_threads);); (14, OpenMP, auto i = omp_get_thread_num();)"}
{"predict": "(25, MPI, MPI_Send(lnzval, len2, MPI_DOUBLE, receiver, k, grid3d->zscp.comm);)", "label": "(25, MPI, MPI_Send(lnzval, len2, MPI_DOUBLE, receiver, k, grid3d->zscp.comm);)"}
{"predict": "(47, OpenMP, lis2mdl_offset_temp_comp_set(&dev_ctx, PROPERTY_ENABLE);)", "label": "(47, OpenMP, lis2mdl_offset_temp_comp_set(&dev_ctx, PROPERTY_ENABLE);)"}
{"predict": "(2, OpenMP, #pragma omp for schedule(dynamic))", "label": "(2, OpenMP, #pragma omp for schedule(nonmonotonic: dynamic))"}
{"predict": "(21, MPI, MPI_Abort(MPI_COMM_WORLD, 1);)", "label": "(21, MPI, MPI_Abort(MPI_COMM_WORLD, 1);)"}
{"predict": "(36, CUDA, cudaFree(d_ret);); (34, CUDA, cudaFree(d_clk);); (31, CUDA, cudaFree(d_stride);); (6, CUDA, cudaMallocHost(&h_stride, STRIDE_MEM_SIZE);); (25, CUDA, cudaMemcpy(h_clk, d_clk, 32 * sizeof(uint32_t), cudaMemcpyDeviceToHost);); (11, CUDA, cudaMemcpy(d_stride, h_stride, STRIDE_MEM_SIZE, cudaMemcpyHostToDevice);); (7, CUDA, cudaMalloc(&d_ret, sizeof(uint32_t));); (5, CUDA, cudaMalloc(&d_stride, STRIDE_MEM_SIZE);); (15, CUDA, cudaMalloc(&d_clk, 32 * sizeof(uint32_t));); (28, CUDA, cudaFreeHost(h_stride);)", "label": "(35, CUDA, cudaFree(d_ret);); (7, CUDA, cudaMallocHost(&h_stride, STRIDE_MEM_SIZE);); (14, CUDA, cudaMalloc(&d_ret, sizeof(uint32_t));); (31, CUDA, cudaFree(d_stride);); (32, CUDA, cudaFree(d_clk);); (32, CUDA, cudaFreeHost(h_stride);); (25, CUDA, cudaMemcpy(h_clk, d_clk, 32 * sizeof(uint32_t), cudaMemcpyDeviceToHost);); (10, CUDA, cudaMemcpy(d_stride, h_stride, STRIDE_MEM_SIZE, cudaMemcpyHostToDevice);); (7, CUDA, cudaMalloc(&d_stride, STRIDE_MEM_SIZE);); (11, CUDA, cudaMalloc(&d_clk, 32 * sizeof(uint32_t));)"}
{"predict": "(2, MPI, MPIDataCommunicator mpi_world_communicator(MPI_COMM_WORLD);)", "label": "(2, MPI, MPIDataCommunicator mpi_world_communicator(MPI_COMM_WORLD);)"}
{"predict": "(4, OpenMP, #pragma omp target enter data map(alloc:a[:N])); (6, OpenMP, #pragma omp target map(alloc:b[:N]))", "label": "(5, OpenMP, #pragma omp target enter data map(to:a[:N]))"}
{"predict": "(15, TBB, test_basic<MyCheckedStateSet>(\"concurrent unordered set (checked state of elements)\", tbb::internal::true_type());)", "label": "(15, TBB, test_basic<MyCheckedStateSet>(\"concurrent unordered set (checked element state)\", tbb::internal::true_type());)"}
{"predict": "(17, CUDA, extern __shared__ _VOLATILE_ float sMem[];)", "label": "(17, CUDA, extern __shared__ _VOLATILE_ float sMem[];)"}
{"predict": "(9, CUDA, factory = *internal::MakeCUDAExecutorImplementation();)", "label": "(9, CUDA, factory = *internal::MakeCUDAExecutorImplementation();)"}
{"predict": "(103, OpenMP, printf(\"Number of threads    = %d\\n\", omp_get_max_threads());); (25, MPI, MPI_Comm_size(MPI_COMM_WORLD,&Num_procs);); (150, MPI, MPI_Finalize();); (106, OpenMP, #pragma omp parallel for simd); (76, MPI, MPI_Bcast(&length,        1, MPI_LONG, root, MPI_COMM_WORLD);); (21, MPI, MPI_Comm_rank(MPI_COMM_WORLD,&my_ID);); (77, MPI, MPI_Bcast(&nthread_input, 1, MPI_INT,  root, MPI_COMM_WORLD);); (78, OpenMP, omp_set_num_threads(nthread_input);); (18, MPI, MPI_Init(&argc,&argv);); (73, MPI, MPI_Bcast(&iterations,    1, MPI_INT,  root, MPI_COMM_WORLD);); (114, MPI, MPI_Barrier(MPI_COMM_WORLD);); (70, MPI, MPI_Bcast(&offset,        1, MPI_LONG, root, MPI_COMM_WORLD);)", "label": "(103, OpenMP, printf(\"Number of threads    = %d\\n\", omp_get_max_threads());); (25, MPI, MPI_Comm_size(MPI_COMM_WORLD,&Num_procs);); (107, OpenMP, #pragma omp parallel for simd); (147, MPI, MPI_Finalize();); (76, MPI, MPI_Bcast(&length,        1, MPI_LONG, root, MPI_COMM_WORLD);); (22, MPI, MPI_Comm_rank(MPI_COMM_WORLD,&my_ID);); (77, MPI, MPI_Bcast(&nthread_input, 1, MPI_INT,  root, MPI_COMM_WORLD);); (78, OpenMP, omp_set_num_threads(nthread_input);); (17, MPI, MPI_Init(&argc,&argv);); (73, MPI, MPI_Bcast(&iterations,    1, MPI_INT,  root, MPI_COMM_WORLD);); (114, MPI, MPI_Barrier(MPI_COMM_WORLD);); (70, MPI, MPI_Bcast(&offset,        1, MPI_LONG, root, MPI_COMM_WORLD);)"}
{"predict": "(37, CUDA, CHECK(cudaEventCreate(&stop));); (76, CUDA, CHECK(cudaFree(d_y));); (27, CUDA, CHECK(cudaMalloc(&d_y, size));); (39, CUDA, CHECK(cudaEventRecord(stop));); (40, CUDA, CHECK(cudaEventSynchronize(stop));); (40, CUDA, CHECK(cudaEventElapsedTime(&curr_time, start, stop));); (23, CUDA, CHECK(cudaMemcpy(d_x, h_x, M, cudaMemcpyDefault));); (70, CUDA, CHECK(cudaFree(d_x));); (24, CUDA, CHECK(cudaGetLastError());); (18, CUDA, CHECK(cudaMalloc(&d_x, M));); (28, CUDA, CHECK(cudaEventRecord(start));); (20, CUDA, CHECK(cudaMemcpy(h_y, d_y, size, cudaMemcpyDefault));); (24, CUDA, CHECK(cudaEventCreate(&start));); (34, CUDA, CHECK(cudaMemcpy(h_y, d_y, size, cudaMemcpyDefault));); (34, CUDA, CHECK(cudaGetLastError());)", "label": "(6, CUDA, CHECK(cudaMemcpyFromSymbol(&block_size, BLOCK_DIM, sizeof(real)));); (34, CUDA, CHECK(cudaEventCreate(&stop));); (43, CUDA, CHECK(cudaEventRecord(stop));); (78, CUDA, CHECK(cudaFree(d_y));); (33, CUDA, cudaEventQuery(start);); (41, CUDA, CHECK(cudaEventSynchronize(stop));); (41, CUDA, CHECK(cudaEventElapsedTime(&curr_time, start, stop));); (34, CUDA, CHECK(cudaMemcpy(h_y, d_y, size, cudaMemcpyDefault));); (28, CUDA, CHECK(cudaEventRecord(start));); (20, CUDA, CHECK(cudaMalloc(&d_x, M));); (70, CUDA, CHECK(cudaFree(d_x));); (20, CUDA, CHECK(cudaMemcpy(d_x, h_x, M, cudaMemcpyDefault));); (30, CUDA, CHECK(cudaGetLastError());); (21, CUDA, CHECK(cudaEventCreate(&start));); (16, CUDA, CHECK(cudaMalloc(&d_y, size));)"}
{"predict": "(27, MPI, MPI_Type_get_extent(fd->filetype, &lb, &filetype_extent);); (27, MPI, MPI_Type_size_x(fd->filetype, &filetype_size);)", "label": "(28, MPI, MPI_Type_get_extent(fd->filetype, &lb, &filetype_extent);); (28, MPI, MPI_Type_size_x(fd->filetype, &filetype_size);)"}
{"predict": "(60, CUDA, CHECK_ERROR(cudaFree(device_params));); (12, CUDA, CHECK_ERROR(cudaMalloc((void **)&device_signals, complex_size_bytes));); (50, CUDA, CHECK_ERROR(cudaMemcpy(output_signals, device_signals, complex_size_bytes, cudaMemcpyDeviceToHost));); (56, CUDA, CHECK_ERROR(cudaFree(device_signals));); (34, CUDA, CHECK_ERROR(cudaMemcpyFromSymbol(&host_callback_ptr, device_callback_ptr, sizeof(host_callback_ptr)));); (9, CUDA, CHECK_ERROR(cudaMemcpy(device_signals, input_signals, complex_size_bytes, cudaMemcpyHostToDevice));); (17, CUDA, CHECK_ERROR(cudaMalloc((void **)&device_params, sizeof(cb_params)));); (17, CUDA, CHECK_ERROR(cudaMemcpy(device_params, &host_params, sizeof(cb_params), cudaMemcpyHostToDevice));)", "label": "(60, CUDA, CHECK_ERROR(cudaFree(device_params));); (12, CUDA, CHECK_ERROR(cudaMalloc((void **)&device_signals, complex_size_bytes));); (50, CUDA, CHECK_ERROR(cudaMemcpy(output_signals, device_signals, complex_size_bytes, cudaMemcpyDeviceToHost));); (56, CUDA, CHECK_ERROR(cudaFree(device_signals));); (34, CUDA, CHECK_ERROR(cudaMemcpyFromSymbol(&host_callback_ptr, device_callback_ptr, sizeof(host_callback_ptr)));); (9, CUDA, CHECK_ERROR(cudaMemcpy(device_signals, input_signals, complex_size_bytes, cudaMemcpyHostToDevice));); (17, CUDA, CHECK_ERROR(cudaMalloc((void **)&device_params, sizeof(cb_params)));); (17, CUDA, CHECK_ERROR(cudaMemcpy(device_params, &host_params, sizeof(cb_params), cudaMemcpyHostToDevice));)"}
{"predict": "(25, CUDA, cudaDeviceSynchronize();)", "label": "(25, CUDA, cudaDeviceSynchronize();)"}
{"predict": "(15, CUDA, checkCudaRuntime(cudaMemcpyAsync(image_device, image_host, size_image, cudaMemcpyHostToDevice, stream));)", "label": "(15, CUDA, checkCudaRuntime(cudaMemcpyAsync(image_device, image_host, size_image, cudaMemcpyHostToDevice, stream));)"}
{"predict": "(35, CUDA, __shared__ float sub_results[x128::size][bdx][bdy];)", "label": "(35, CUDA, __shared__ float sub_results[x128::size][32][bdy];)"}
{"predict": "(120, CUDA, checkCudaErrors(cudaMemcpy(h_odata, d_data, size, cudaMemcpyDeviceToHost));); (105, CUDA, getLastCudaError(\"Kernel execution failed\");); (43, CUDA, checkCudaErrors(cudaMalloc((void **)&d_data, size));); (6, CUDA, checkCudaErrors(cudaGetDeviceProperties(&deviceProps, devID));); (105, CUDA, checkCudaErrors(cudaDeviceSynchronize());); (90, CUDA, checkCudaErrors(cudaGetLastError());); (120, CUDA, checkCudaErrors(cudaFreeArray(cu_3darray));); (122, CUDA, checkCudaErrors(cudaFree(d_data));); (75, CUDA, checkCudaErrors(cudaCreateTextureObject(&tex, &texRes, &texDescr, NULL));); (-7, CUDA, int devID = findCudaDevice(argc, (const char **)argv);); (86, CUDA, checkCudaErrors(cudaGetLastError());); (90, CUDA, getLastCudaError(\"warmup Kernel execution failed\");); (67, CUDA, myparms.dstPos = make_cudaPos(0, 0, 0);); (40, CUDA, myparms.srcPos = make_cudaPos(0, 0, 0);); (58, CUDA, checkCudaErrors(cudaMemcpy3D(&myparms));); (64, CUDA, myparms.extent = make_cudaExtent(width, width, num_faces);)", "label": "(59, CUDA, myparms.dstPos = make_cudaPos(0, 0, 0);); (9, CUDA, checkCudaErrors(cudaGetDeviceProperties(&deviceProps, devID));); (56, CUDA, myparms.srcPos = make_cudaPos(0, 0, 0);); (119, CUDA, checkCudaErrors(cudaMemcpy(h_odata, d_data, size, cudaMemcpyDeviceToHost));); (94, CUDA, getLastCudaError(\"warmup Kernel execution failed\");); (60, CUDA, checkCudaErrors(cudaMemcpy3D(&myparms));); (57, CUDA, myparms.extent = make_cudaExtent(width, width, num_faces);); (137, CUDA, checkCudaErrors(cudaFreeArray(cu_3darray));); (76, CUDA, checkCudaErrors(cudaCreateTextureObject(&tex, &texRes, &texDescr, NULL));); (91, CUDA, checkCudaErrors(cudaDeviceSynchronize());); (36, CUDA, checkCudaErrors(cudaMalloc((void **)&d_data, size));); (99, CUDA, getLastCudaError(\"Kernel execution failed\");); (131, CUDA, checkCudaErrors(cudaFree(d_data));); (-10, CUDA, int devID = findCudaDevice(argc, (const char **)argv);); (128, CUDA, checkCudaErrors(cudaDestroyTextureObject(tex));)"}
{"predict": "(80, OpenMP, test_comp_vlen_strings(COMP_VL_STRS_FILE, \"group\", 1);); (80, OpenMP, test_comp_vlen_strings(COMP_VL_STRS_FILE, \"group_copy\", 0);)", "label": "(80, OpenMP, test_comp_vlen_strings(COMP_VL_STRS_FILE, \"group\", 1);); (80, OpenMP, test_comp_vlen_strings(COMP_VL_STRS_FILE, \"group_copy\", 0);)"}
{"predict": "(48, MPI, MPI_Waitall(WINDOW, req, status);); (23, MPI, start = MPI_Wtime();); (49, MPI, end = MPI_Wtime();)", "label": "(48, MPI, MPI_Waitall(WINDOW, req, status);); (23, MPI, start = MPI_Wtime();); (50, MPI, end = MPI_Wtime();)"}
{"predict": "(8, SYCL, *shrd_x = x;); (7, SYCL, return *shrd_x;)", "label": "(8, SYCL, return hipsycl::libkernel::sscp::wg_broadcast(sender, x, shrd_x);)"}
{"predict": "(62, OpenMP, #pragma omp distribute parallel for dist_schedule(static)); (18, OpenMP, #pragma omp distribute parallel for); (102, OpenMP, #pragma omp distribute parallel for dist_schedule(static, ch)); (134, OpenMP, #pragma omp distribute parallel for schedule(static)); (165, OpenMP, #pragma omp distribute parallel for schedule(static, ch)); (11, OpenMP, #pragma omp target); (196, OpenMP, #pragma omp distribute parallel for schedule(dynamic)); (224, OpenMP, #pragma omp distribute parallel for schedule(dynamic, ch)); (9, OpenMP, #pragma omp teams)", "label": "(169, OpenMP, #pragma omp distribute parallel for schedule(static, ch)); (201, OpenMP, #pragma omp distribute parallel for schedule(dynamic)); (17, OpenMP, #pragma omp distribute parallel for); (59, OpenMP, #pragma omp distribute parallel for dist_schedule(static)); (227, OpenMP, #pragma omp distribute parallel for schedule(dynamic, ch)); (132, OpenMP, #pragma omp distribute parallel for schedule(static)); (10, OpenMP, #pragma omp target); (97, OpenMP, #pragma omp distribute parallel for dist_schedule(static, ch)); (9, OpenMP, #pragma omp teams)"}
{"predict": "(43, CUDA, checkCudaErrors(cudaSetDevice(targetDevice));); (192, CUDA, checkCudaErrors(cudaFree(bufferOut));); (38, CUDA, targetDevice = findCudaDevice(argc, (const char **)argv);); (108, CUDA, checkCudaErrors(cudaEventCreate(&profileEnd));); (188, CUDA, checkCudaErrors(cudaFree(bufferIn));); (64, CUDA, checkCudaErrors(cudaFuncGetAttributes(&funcAttrib, FiniteDifferencesKernel));); (115, CUDA, checkCudaErrors(cudaEventRecord(profileStart, 0));); (162, CUDA, checkCudaErrors(cudaEventElapsedTime(&elapsedTimeMS, profileStart, profileEnd));); (100, CUDA, checkCudaErrors(cudaEventCreate(&profileStart));); (25, CUDA, checkCudaErrors(cudaGetDeviceCount(&deviceCount));); (138, CUDA, checkCudaErrors(cudaEventSynchronize(profileEnd));); (19, CUDA, printf(\" CUDA is not available, GPU FDTD loop will not run.\\n\");)", "label": "(109, CUDA, checkCudaErrors(cudaEventCreate(&profileStart));); (43, CUDA, checkCudaErrors(cudaSetDevice(targetDevice));); (40, CUDA, targetDevice = findCudaDevice(argc, (const char **)argv);); (193, CUDA, checkCudaErrors(cudaEventDestroy(profileEnd));); (140, CUDA, checkCudaErrors(cudaEventRecord(profileEnd, 0));); (116, CUDA, checkCudaErrors(cudaEventRecord(profileStart, 0));); (186, CUDA, checkCudaErrors(cudaEventDestroy(profileStart));); (61, CUDA, checkCudaErrors(cudaFuncGetAttributes(&funcAttrib, FiniteDifferencesKernel));); (31, CUDA, checkCudaErrors(cudaGetDeviceCount(&deviceCount));); (101, CUDA, checkCudaErrors(cudaEventCreate(&profileEnd));); (176, CUDA, checkCudaErrors(cudaFree(bufferOut));); (171, CUDA, checkCudaErrors(cudaFree(bufferIn));)"}
{"predict": "(38, CUDA, cudaFree(res_dev);); (31, CUDA, cudaMalloc(&res_dev, sizeof(float));); (33, CUDA, cudaMemcpy(&res_host, res_dev, sizeof(float), cudaMemcpyDeviceToHost);)", "label": "(38, CUDA, cudaFree(res_dev);); (31, CUDA, cudaMalloc(&res_dev, sizeof(float));); (33, CUDA, cudaMemcpy(&res_host, res_dev, sizeof(float), cudaMemcpyDeviceToHost);)"}
{"predict": "(19, CUDA, checkCudaErrors(cudaGetLastError());); (17, CUDA, checkCudaErrors(cudaStreamSynchronize(stream));)", "label": "(18, CUDA, checkCudaErrors(cudaDeviceSynchronize());); (18, CUDA, checkCudaErrors(cudaGetLastError());)"}
{"predict": "(8, CUDA, cudaError_t error = cudaGetDeviceProperties(&props, 0);); (9, CUDA, std::cerr << \"cudaGetDeviceProperties() returned an error: \" << cudaGetErrorString(error) << std::endl;)", "label": "(8, CUDA, cudaError_t error = cudaGetDeviceProperties(&props, 0);); (9, CUDA, std::cerr << \"cudaGetDeviceProperties() returned an error: \" << cudaGetErrorString(error) << std::endl;)"}
{"predict": "(23, OpenMP, #pragma omp task); (10, OpenMP, #pragma omp parallel); (11, OpenMP, #pragma omp single); (26, OpenMP, #pragma omp critical)", "label": "(29, OpenMP, #pragma omp taskwait); (22, OpenMP, #pragma omp task); (9, OpenMP, #pragma omp parallel); (10, OpenMP, #pragma omp single)"}
{"predict": "(2, SYCL, sycl::queue q = get_queue();); (3, SYCL, int* data = sycl::malloc_shared<int>(1024, q);); (3, SYCL, const int* table = sycl::malloc_shared<int>(4, q);); (3, SYCL, sycl::free(table, q);); (1, SYCL, sycl::free(data, q);)", "label": "(2, SYCL, sycl::queue q = get_queue();); (3, SYCL, int* data = sycl::malloc_device<int>(1024, q);)"}
{"predict": "(7, MPI, MPI_Comm_rank(comm, &rank);); (109, MPI, MPI_Allreduce(&all_valid, &scr_all_valid_groupdescs, 1, MPI_INT, MPI_LAND, comm);)", "label": "(7, MPI, MPI_Comm_rank(comm, &rank);); (49, MPI, MPI_Bcast(&num_groups, 1, MPI_INT, 0, comm);)"}
{"predict": "(4, OpenMP, #pragma omp sections); (50, OpenMP, #pragma omp barrier)", "label": "(4, OpenMP, #pragma omp sections); (49, OpenMP, #pragma omp sections nowait); (28, OpenMP, #pragma omp section)"}
{"predict": "(36, CUDA, CUDA_CHECK(cudaStreamSynchronize(stream));); (38, CUDA, CUDA_CHECK(cudaFree(d_data));)", "label": "(36, CUDA, CUDA_CHECK(cudaStreamSynchronize(stream));); (38, CUDA, CUDA_CHECK(cudaFree(d_data));)"}
{"predict": "(16, CUDA, _CUDASimulationContextCreation_result = false;)", "label": "(5, CUDA, c.CUDAConfig().device_id = 0;)"}
{"predict": "(65, MPI, MPI_Gatherv(sendbuf, bytes, MPI_BYTE, recvbuf, counts, disps, MPI_BYTE, 0, MPI_COMM_WORLD);); (13, MPI, MPI_Comm_size(MPI_COMM_WORLD, &ranks);); (11, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (36, MPI, MPI_Gather(&bytes, 1, MPI_INT, counts, 1, MPI_INT, 0, MPI_COMM_WORLD);)", "label": "(65, MPI, MPI_Gatherv(sendbuf, bytes, MPI_BYTE, recvbuf, counts, disps, MPI_BYTE, 0, MPI_COMM_WORLD);); (13, MPI, MPI_Comm_size(MPI_COMM_WORLD, &ranks);); (11, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (36, MPI, MPI_Gather(&bytes, 1, MPI_INT, counts, 1, MPI_INT, 0, MPI_COMM_WORLD);)"}
{"predict": "(30, MPI, MPI_Comm_set_name(newcomm, (char *) \"Odd rank processes in local group\");); (32, MPI, MPI_Comm_test_inter(intercomm, &flag);); (5, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (22, MPI, MPI_Comm_split(intercomm, color, key, &newcomm);); (67, MPI, MPI_Comm_free(&newcomm);); (29, MPI, MPI_Comm_remote_size(newcomm, &new_rsize);); (27, MPI, MPI_Comm_size(newcomm, &new_size);); (6, MPI, MPI_Abort(MPI_COMM_WORLD, 1);); (13, MPI, MPI_Comm_rank(intercomm, &key);); (24, MPI, MPI_Comm_get_name(newcomm, MPI_MAX_NAME, &flag);); (20, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &key);); (6, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);)", "label": "(32, MPI, MPI_Comm_test_inter(intercomm, &flag);); (23, MPI, MPI_Comm_rank(intercomm, &key);); (90, MPI, MPI_Comm_free(&intercomm);); (38, MPI, MPI_Comm_size(intercomm, &orig_size);); (38, MPI, MPI_Comm_size(newcomm, &new_size);); (3, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (33, MPI, MPI_Comm_remote_size(intercomm, &orig_rsize);); (19, MPI, MPI_Comm_split(intercomm, color, key, &newcomm);); (3, MPI, MPI_Abort(MPI_COMM_WORLD, 1);); (31, MPI, MPI_Comm_remote_size(newcomm, &new_rsize);)"}
{"predict": "(6, CUDA, extern __shared__ float shared[];)", "label": "(6, CUDA, extern __shared__ float shared[];)"}
{"predict": "(35, CUDA, cudaFree(control_d);); (33, CUDA, cudaFree(state_der_d);); (24, CUDA, cudaDeviceSynchronize();); (30, CUDA, cudaFree(state_d);); (21, CUDA, CudaCheckError();)", "label": "(34, CUDA, cudaFree(control_d);); (32, CUDA, cudaFree(state_der_d);); (22, CUDA, CudaCheckError();); (29, CUDA, cudaFree(state_d);)"}
{"predict": "(7, CUDA, fcuda::Check_CudaErroorFun(\"DgReduSumUint\");); (5, CUDA, cudaMemcpy(data,datag+inidata,sizeof(unsigned)*ndata,cudaMemcpyDeviceToHost);)", "label": "(7, CUDA, fcuda::Check_CudaErroorFun(\"DgReduSumUint\");); (5, CUDA, cudaMemcpy(data,datag+inidata,sizeof(unsigned)*ndata,cudaMemcpyDeviceToHost);)"}
{"predict": "(37, TBB, tbb::spin_mutex::scoped_lock lock (MyMutex);)", "label": "(37, TBB, tbb::spin_mutex::scoped_lock lock (MyMutex);)"}
{"predict": "(24, CUDA, extern __shared__ float sram[];)", "label": "(24, CUDA, extern __shared__ float sram[];)"}
{"predict": "(14, OpenMP, #pragma omp parallel); (14, OpenMP, #pragma omp task if (task: false))", "label": "(14, OpenMP, #pragma omp parallel); (14, OpenMP, #pragma omp task if (task: false))"}
{"predict": "(5, OpenMP, #pragma omp target teams distribute parallel for collapse (); (12, OpenMP, #pragma omp target teams distribute parallel for collapse (4); (15, OpenMP, #pragma omp target teams distribute parallel for collapse (2+2))); (-2, OpenMP, #pragma omp target teams distribute parallel for collapse); (43, OpenMP, #pragma omp target teams distribute parallel for collapse(collapse(tmain<int, char, -1, -2>(argc, argv)); (23, OpenMP, #pragma omp target teams distribute parallel for collapse (foobool(argc)), collapse (true), collapse (-5)); (44, OpenMP, #pragma omp target teams distribute parallel for collapse (2)); (25, OpenMP, #pragma omp target teams distribute parallel for collapse (S1)); (1, OpenMP, #pragma omp target teams distribute parallel for collapse ()); (12, OpenMP, #pragma omp target teams distribute parallel for collapse (foobool(1) > 0 ? 1 : 2))", "label": "(47, OpenMP, #pragma omp target teams distribute parallel for collapse(collapse(tmain<int, char, -1, -2>(argc, argv)); (4, OpenMP, #pragma omp target teams distribute parallel for collapse (); (7, OpenMP, #pragma omp target teams distribute parallel for collapse ()); (18, OpenMP, #pragma omp target teams distribute parallel for collapse (foobool(1) > 0 ? 1 : 2)); (13, OpenMP, #pragma omp target teams distribute parallel for collapse (2+2))); (23, OpenMP, #pragma omp target teams distribute parallel for collapse (foobool(argc)), collapse (true), collapse (-5)); (7, OpenMP, #pragma omp target teams distribute parallel for collapse (4); (25, OpenMP, #pragma omp target teams distribute parallel for collapse (S1)); (-7, OpenMP, #pragma omp target teams distribute parallel for collapse); (41, OpenMP, #pragma omp target teams distribute parallel for collapse (2))"}
{"predict": "(32, CUDA, cudaFree(resourceList->outputBufferGPU);); (27, CUDA, cudaFree(resourceList->inputBufferGPU);); (44, CUDA, cudaStreamDestroy(resourceList->stream);)", "label": "(32, CUDA, cudaFree(resourceList->outputBufferGPU);); (27, CUDA, cudaFree(resourceList->inputBufferGPU);); (44, CUDA, cudaStreamDestroy(resourceList->stream);)"}
{"predict": "(75, CUDA, EXPECT_EQ(cudaSuccess, cudaMemcpy(test.data(), output->basePtr(), outBufSize, cudaMemcpyDeviceToHost));); (2, CUDA, EXPECT_EQ(cudaSuccess, cudaStreamCreate(&stream));); (65, CUDA, EXPECT_EQ(cudaSuccess, cudaMemset(input->basePtr(), 0xFF, inSampleStride * inAccess->numSamples()));); (79, CUDA, EXPECT_EQ(cudaSuccess, cudaStreamSynchronize(stream));); (72, CUDA, EXPECT_EQ(cudaSuccess, cudaMemcpy(testIn.data(), input->basePtr(), inBufSize, cudaMemcpyDeviceToHost));); (78, CUDA, EXPECT_EQ(cudaSuccess, cudaStreamDestroy(stream));)", "label": "(77, CUDA, EXPECT_EQ(cudaSuccess, cudaMemcpy(test.data(), output->basePtr(), outBufSize, cudaMemcpyDeviceToHost));); (2, CUDA, ASSERT_EQ(cudaSuccess, cudaStreamCreate(&stream));); (64, CUDA, EXPECT_EQ(cudaSuccess, cudaMemset(input->basePtr(), 0xFF, inSampleStride * inAccess->numSamples()));); (72, CUDA, EXPECT_EQ(cudaSuccess, cudaStreamSynchronize(stream));); (72, CUDA, EXPECT_EQ(cudaSuccess, cudaMemcpy(testIn.data(), input->basePtr(), inBufSize, cudaMemcpyDeviceToHost));); (62, CUDA, EXPECT_EQ(cudaSuccess, cudaMemset(output->basePtr(), 0xFF, outSampleStride * outAccess->numSamples()));); (78, CUDA, EXPECT_EQ(cudaSuccess, cudaStreamDestroy(stream));)"}
{"predict": "(20, OpenMP, threadLimit = omp_get_max_threads();); (25, OpenMP, #pragma omp parallel num_threads(32)); (17, OpenMP, check1[omp_get_thread_num()] += omp_get_max_threads();); (21, OpenMP, check2[omp_get_thread_num()] += omp_get_max_threads();); (12, OpenMP, #pragma omp parallel); (23, OpenMP, check3[omp_get_thread_num()] += omp_get_max_threads();); (7, OpenMP, #pragma omp target teams thread_limit(32) map(tofrom : check1[:], check2[:], check3[:], threadLimit))", "label": "(28, OpenMP, #pragma omp parallel num_threads(NumThreads3)); (29, OpenMP, check3[omp_get_thread_num()] += omp_get_num_threads();); (15, OpenMP, #pragma omp parallel); (10, OpenMP, threadLimit = omp_get_thread_limit();); (6, OpenMP, #pragma omp target teams num_teams(1) thread_limit(ThreadLimit)); (20, OpenMP, check2[omp_get_thread_num()] += omp_get_num_threads();); (16, OpenMP, omp_set_num_threads(NumThreads2);); (12, OpenMP, check1[omp_get_thread_num()] += omp_get_num_threads();)"}
{"predict": "(19, CUDA, getLastCudaError(\"mergeElementaryIntervalsKernel() execution failed\\n\");)", "label": "(13, CUDA, getLastCudaError(\"mergeElementaryIntervalsKernel<1> failed\\n\");); (17, CUDA, getLastCudaError(\"mergeElementaryIntervalsKernel<0> failed\\n\");)"}
{"predict": "(42, CUDA, cudaFree(B);); (109, CUDA, result = cudaMemcpy(host_cutlass.data(), C_cutlass, sizeof_C, cudaMemcpyDeviceToHost);); (59, CUDA, cudaFree(C_reference);); (52, CUDA, result = cudaMemcpy(C_reference, C_cutlass, sizeof_C, cudaMemcpyDeviceToDevice);); (47, CUDA, cudaFree(C_cutlass);); (119, CUDA, result = cudaMemcpy(host_reference.data(), C_reference, sizeof_C, cudaMemcpyDeviceToHost);); (28, CUDA, cudaFree(A);)", "label": "(42, CUDA, cudaFree(B);); (109, CUDA, result = cudaMemcpy(host_cutlass.data(), C_cutlass, sizeof_C, cudaMemcpyDeviceToHost);); (59, CUDA, cudaFree(C_reference);); (52, CUDA, result = cudaMemcpy(C_reference, C_cutlass, sizeof_C, cudaMemcpyDeviceToDevice);); (47, CUDA, cudaFree(C_cutlass);); (119, CUDA, result = cudaMemcpy(host_reference.data(), C_reference, sizeof_C, cudaMemcpyDeviceToHost);); (28, CUDA, cudaFree(A);)"}
{"predict": "(40, OpenMP, #pragma omp teams reduction(+:sum)); (37, OpenMP, #pragma omp target map(tofrom: b, sum, t) map(alloc: a)); (40, OpenMP, #pragma omp distribute parallel for reduction(+:sum)); (42, OpenMP, t[i] = omp_get_team_num();)", "label": "(40, OpenMP, #pragma omp teams reduction(+:sum)); (37, OpenMP, #pragma omp target map(tofrom: b, sum, t) map(alloc: a)); (40, OpenMP, #pragma omp distribute parallel for reduction(+:sum)); (42, OpenMP, t[i] = omp_get_team_num();)"}
{"predict": "(14, CUDA, fprintf(stderr, \"CUDA kernel failed : %s\\n\", cudaGetErrorString(err));); (11, CUDA, err = cudaGetLastError();)", "label": "(14, CUDA, fprintf(stderr, \"CUDA kernel failed : %s\\n\", cudaGetErrorString(err));); (11, CUDA, err = cudaGetLastError();)"}
{"predict": "(4, CUDA, cudaError_t error = cudaGetDeviceProperties(&props, 0);); (5, CUDA, std::cerr << \"cudaGetDeviceProperties() returned an error: \" << cudaGetErrorString(error) << std::endl;)", "label": "(4, CUDA, cudaError_t error = cudaGetDeviceProperties(&props, 0);); (5, CUDA, std::cerr << \"cudaGetDeviceProperties() returned an error: \" << cudaGetErrorString(error) << std::endl;)"}
{"predict": "(4, CUDA, CudaCheckError();)", "label": "(4, CUDA, CudaCheckError();)"}
{"predict": "(82, MPI, MPI_Comm_rank( MPI_COMM_WORLD, &iam );); (257, MPI, MPI_Finalize();); (24, MPI, MPI_Init_thread( &argc, &argv, MPI_THREAD_MULTIPLE, &omp_mpi_level);); (25, MPI, MPI_Comm_size( MPI_COMM_WORLD, &nprocs );)", "label": "(82, MPI, MPI_Comm_rank( MPI_COMM_WORLD, &iam );); (257, MPI, MPI_Finalize();); (24, MPI, MPI_Init_thread( &argc, &argv, MPI_THREAD_MULTIPLE, &omp_mpi_level);); (25, MPI, MPI_Comm_size( MPI_COMM_WORLD, &nprocs );)"}
{"predict": "(343, CUDA, __shared__ int cur_send_num;); (341, CUDA, __shared__ int recv_num, finish_num;)", "label": "(343, CUDA, __shared__ int cur_send_num;); (341, CUDA, __shared__ int recv_num, finish_num;)"}
{"predict": "(4, CUDA, __shared__ float sdata[THREAD_PER_BLOCK];)", "label": "(4, CUDA, __shared__ float sdata[THREAD_PER_BLOCK];)"}
{"predict": "(9, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (76, MPI, MPI_Bcast(footer, 7, MPI_UINT64_T, 0, MPI_COMM_WORLD);); (8, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (218, MPI, MPI_Barrier(MPI_COMM_WORLD);); (135, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_ARE_FATAL);)", "label": "(10, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (76, MPI, MPI_Bcast(&footer_flag, 1, MPI_INT, 0, MPI_COMM_WORLD);); (76, MPI, MPI_Bcast(&footer, 8, MPI_UINT64_T, 0, MPI_COMM_WORLD);); (6, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);)"}
{"predict": "(2, CUDA, __shared__ float smem[DIM];)", "label": "(2, CUDA, __shared__ float smem[1024];)"}
{"predict": "(38, CUDA, CUDASimulation cudaSimulation(model);)", "label": "(38, CUDA, CUDASimulation cudaSimulation(model);)"}
{"predict": "(29, CUDA, checkCudaErrors(cudaSetDevice(gpuID));)", "label": "(29, CUDA, checkCudaErrors(cudaSetDevice(gpuID));)"}
{"predict": "(192, OpenCL, clReleaseKernel(kernel);); (189, OpenCL, clReleaseProgram(program);); (41, OpenCL, context = clCreateContext(NULL, 1, &device_id, NULL, NULL, &err);); (79, OpenCL, clReleaseProgram(program);); (105, OpenCL, buffer = clCreateBuffer(context, flags, bufferSize, NULL, &err);); (89, OpenCL, clReleaseContext(context);); (168, OpenCL, err = clEnqueueUnmapMemObject(queue, buffer, ptr, 0, NULL, NULL);); (138, OpenCL, ptr = (int *)clEnqueueMapBuffer(queue, buffer, CL_TRUE, CL_MAP_READ, 0, sizeof(int), 0, NULL, NULL, &err);); (63, OpenCL, program = clCreateProgramWithSource(context, 1, &strings, NULL, &err);); (177, OpenCL, clReleaseCommandQueue(queue);); (39, OpenCL, queue = clCreateCommandQueue(context, device_id, 0, &err);); (90, OpenCL, kernel = clCreateKernel(program, \"hello\", &err);); (84, OpenCL, clReleaseProgram(program);); (108, OpenCL, void *ptr = clEnqueueMapBuffer(queue, buffer, CL_TRUE, CL_MAP_WRITE, 0, sizeof(int), 0, NULL, NULL, &err);); (138, OpenCL, err = clEnqueueNDRangeKernel(queue, kernel, dimension, offset, gws, lws, 0, NULL, NULL);); (168, OpenCL, clReleaseMemObject(buffer);); (54, OpenCL, err = clBuildProgram(program, 1, &device_id, NULL, NULL, NULL);)", "label": "(69, OpenCL, program = clCreateProgramWithSource(context, 1, &strings, 0, &err);); (129, OpenCL, err = clSetKernelArg(kernel, 0, sizeof(cl_mem), &buffer);); (190, OpenCL, clReleaseKernel(kernel);); (191, OpenCL, clReleaseCommandQueue(queue);); (189, OpenCL, clReleaseProgram(program);); (139, OpenCL, err = clEnqueueNDRangeKernel(queue, kernel, dimension, offset, gws, lws, 0, 0, nullptr);); (189, OpenCL, clReleaseContext(context);); (101, OpenCL, buffer = clCreateBuffer(context, flags, bufferSize, nullptr, &err);); (115, OpenCL, err = clEnqueueUnmapMemObject(queue, buffer, ptr, 0, nullptr, nullptr);); (106, OpenCL, void *ptr = clEnqueueMapBuffer(queue, buffer, CL_TRUE, CL_MAP_WRITE, 0, bufferSize, 0, nullptr, nullptr, &err);); (38, OpenCL, queue = clCreateCommandQueue(context, device_id, 0, &err);); (140, OpenCL, void *ptr = clEnqueueMapBuffer(queue, buffer, CL_TRUE, CL_MAP_READ, 0, bufferSize, 0, nullptr, nullptr, &err);); (64, OpenCL, err = clBuildProgram(program, 1, &device_id, nullptr, nullptr, nullptr);); (178, OpenCL, clReleaseMemObject(buffer);); (28, OpenCL, context = clCreateContext(0, 1, &device_id, NULL, NULL, &err);); (84, OpenCL, kernel = clCreateKernel(program, \"hello\", &err);)"}
{"predict": "(6, MPI, MPI_Comm_size(comm, &nproc);); (4, MPI, MPI_Comm_rank(comm, &rank);)", "label": "(6, MPI, MPI_Comm_size(comm, &nproc);); (4, MPI, MPI_Comm_rank(comm, &rank);)"}
{"predict": "(6, TBB, c.set_core_type(tbb::info::core_types().back());); (3, TBB, tbb::task_arena::constraints c;); (19, TBB, auto v4 = timeExample<tbb::auto_partitioner>(num_intervals, gs);); (15, TBB, auto v1 = timeExample<tbb::simple_partitioner>(num_intervals, gs);); (17, TBB, auto v2 = timeExample<tbb::static_partitioner>(num_intervals, gs);); (19, TBB, auto v3 = timeExample<tbb::auto_partitioner>(num_intervals, gs);); (5, TBB, c.set_numa_id(tbb::info::numa_nodes()[0]);); (1, TBB, c.set_max_concurrency(std::min(8, tbb::info::default_concurrency(c)));); (1, TBB, tbb::task_arena a(c);); (7, TBB, auto t1 = tbb::tick_count::now();); (13, TBB, auto t4 = tbb::tick_count::now();); (9, TBB, auto t2 = tbb::tick_count::now();); (3, TBB, auto t0 = tbb::tick_count::now();); (5, TBB, auto t3 = tbb::tick_count::now();)", "label": "(27, TBB, tbb::tick_count t1 = tbb::tick_count::now();); (23, TBB, reducePiExample<tbb::auto_partitioner>(num_intervals, gs);); (6, TBB, c.set_max_concurrency(std::min(8, tbb::info::default_concurrency(c)));); (29, TBB, double v3 = deterministicReducePiExample<tbb::simple_partitioner>(num_intervals, gs);); (27, TBB, tbb::tick_count t3 = tbb::tick_count::now();); (-1, TBB, tbb::task_arena::constraints c;); (11, TBB, tbb::tick_count ts_1 = tbb::tick_count::now();); (18, TBB, tbb::tick_count t0 = tbb::tick_count::now();); (27, TBB, tbb::tick_count t5 = tbb::tick_count::now();); (25, TBB, double v4 = deterministicReducePiExample<tbb::static_partitioner>(num_intervals, gs);); (5, TBB, tbb::tick_count ts_0 = tbb::tick_count::now();); (-2, TBB, tbb::task_arena a(c);); (-6, TBB, c.set_core_type(tbb::info::core_types().back());); (20, TBB, tbb::tick_count t4 = tbb::tick_count::now();); (14, TBB, double v1 = reducePiExample<tbb::simple_partitioner>(num_intervals, gs);); (15, TBB, double v2 = reducePiExample<tbb::static_partitioner>(num_intervals, gs);); (-11, TBB, c.set_numa_id(tbb::info::numa_nodes()[0]);); (12, TBB, tbb::tick_count t2 = tbb::tick_count::now();); (8, TBB, double v0 = reducePiExample<tbb::auto_partitioner>(num_intervals, gs);)"}
{"predict": "(31, CUDA, cuda_safe_call(cudaStreamSynchronize(stream));); (7, CUDA, cuda_safe_call(cudaMalloc(&d_ptrB, N * sizeof(double)));); (9, CUDA, cuda_safe_call(cudaStreamCreate(&stream));); (4, CUDA, cuda_safe_call(cudaMalloc(&d_ptrA, N * sizeof(double)));)", "label": "(18, CUDA, cuda_safe_call(cudaStreamSynchronize(stream));); (7, CUDA, cuda_safe_call(cudaMalloc(&d_ptrB, N * sizeof(double)));); (9, CUDA, cuda_safe_call(cudaStreamCreate(&stream));); (4, CUDA, cuda_safe_call(cudaMalloc(&d_ptrA, N * sizeof(double)));)"}
{"predict": "(13, CUDA, __shared__ float Bs[BLOCK_SIZE][BLOCK_SIZE];); (8, CUDA, __shared__ float As[BLOCK_SIZE][BLOCK_SIZE];)", "label": "(13, CUDA, __shared__ alignas(alignof(float4)) float Bs[BLOCK_SIZE][BLOCK_SIZE];); (8, CUDA, __shared__ alignas(alignof(float4)) float As[BLOCK_SIZE][BLOCK_SIZE];)"}
{"predict": "(78, OpenMP, lis2mdl_offset_temp_comp_set(&mag_ctx, PROPERTY_ENABLE);)", "label": "(78, OpenMP, lis2mdl_offset_temp_comp_set(&mag_ctx, PROPERTY_ENABLE);)"}
{"predict": "(2, OpenMP, int num_devices = omp_get_num_devices();); (5, OpenMP, #pragma omp target device(i) map(from: num)); (7, OpenMP, num = omp_get_device_num();); (4, OpenMP, #pragma omp target data map(to: i) use_device_ptr(i))", "label": "(2, OpenMP, const int num_devices = omp_get_num_devices();); (6, OpenMP, #pragma omp target map(from : num) device(i)); (6, OpenMP, num = omp_get_device_num();)"}
{"predict": "(55, OpenCL, clReleaseEvent(clEvent);)", "label": "(55, OpenCL, clReleaseEvent(clEvent);)"}
{"predict": "(46, CUDA, cudaDeviceCanAccessPeer(&access, dev1, dev2);); (54, CUDA, cudaSetDevice(dev);); (55, CUDA, auto err = cudaDeviceEnablePeerAccess(odev, 0);); (13, CUDA, auto err = cudaGetDeviceProperties(&props, dev);); (0, CUDA, cudaGetDeviceCount(reinterpret_cast<int *>(&device));)", "label": "(47, CUDA, cudaDeviceCanAccessPeer(&access, dev1, dev2);); (53, CUDA, cudaSetDevice(dev);); (57, CUDA, auto err = cudaDeviceEnablePeerAccess(odev, 0);); (14, CUDA, auto err = cudaGetDeviceProperties(&props, dev);); (9, CUDA, INFO(\"failed to cudaSetDevice(%d)\\n\", dev);); (-2, CUDA, cudaGetDeviceCount(reinterpret_cast<int *>(&device));)"}
{"predict": "(21, TBB, tbb::spin_mutex::scoped_lock lock(edges_mutex);); (7, TBB, tbb::spin_mutex::scoped_lock lock(g_distances_mutex);)", "label": "(9, TBB, oneapi::tbb::spin_mutex::scoped_lock l(locks[u]);); (20, TBB, oneapi::tbb::spin_mutex::scoped_lock l(locks[v]);)"}
{"predict": "(21, MPI, MPI_Bcast(&nccl_id, sizeof(nccl_id), MPI_BYTE, 0, MPI_COMM_WORLD);); (5, MPI, MPI_Init(NULL, NULL);); (16, MPI, MPI_Bcast(&nccl_id, sizeof(nccl_id), MPI_BYTE, 0, MPI_COMM_WORLD);); (22, CUDA, CUDA_CHECK(cudaFree(0));); (4, CUDA, CUDA_CHECK(cudaSetDevice(rank % world_size));)", "label": "(6, MPI, MPI_CHECK(MPI_Init(NULL, NULL));); (15, MPI, MPI_CHECK(MPI_Bcast((void *)&nccl_id, sizeof(nccl_id), MPI_BYTE, 0, MPI_COMM_WORLD));); (16, CUDA, cudaSetDevice(rank);)"}
{"predict": "(22, CUDA, __shared__ float v[_N_], r[_N_], k[_N_], gy[_N_];)", "label": "(22, CUDA, __shared__ float v[_N_], r[_N_], k[_N_], gy[_N_];)"}
{"predict": "(93, OpenMP, #pragma omp target teams distribute parallel for); (86, OpenMP, #pragma omp target parallel for)", "label": "(93, OpenMP, #pragma omp target teams distribute parallel for); (86, OpenMP, #pragma omp target parallel for)"}
{"predict": "(11, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (209, MPI, MPI_Win_free(&win);); (9, MPI, MPI_Comm_size(MPI_COMM_WORLD, &wsize);); (45, MPI, MPI_Put(&localbuf[i], 1, MPI_INT, trank, rank + i * wsize, 1, MPI_INT, win);); (43, MPI, MPI_Win_lock(MPI_LOCK_EXCLUSIVE, trank, 0, win);); (46, MPI, MPI_Put(&localbuf[i], 1, MPI_INT, trank, rank + (i + NELM) * wsize, 1, MPI_INT, win);); (43, MPI, MPI_Win_unlock(trank, win);); (129, MPI, MPI_Get(&vals[i], 1, MPI_INT, trank, i, 1, MPI_INT, win);); (181, MPI, MPI_Accumulate(&localbuf[i], 1, MPI_INT, trank, rank + i * wsize, 1, MPI_INT, MPI_SUM, win);); (42, MPI, MPI_Barrier(MPI_COMM_WORLD);); (2, MPI, MPI_Abort(MPI_COMM_WORLD, 1);)", "label": "(12, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (208, MPI, MPI_Win_free(&win);); (9, MPI, MPI_Comm_size(MPI_COMM_WORLD, &wsize);); (46, MPI, MPI_Put(&localbuf[i], 1, MPI_INT, trank, rank + i * wsize, 1, MPI_INT, win);); (44, MPI, MPI_Win_lock(MPI_LOCK_EXCLUSIVE, trank, 0, win);); (45, MPI, MPI_Put(&localbuf[i], 1, MPI_INT, trank, rank + (i + NELM) * wsize, 1, MPI_INT, win);); (45, MPI, MPI_Win_unlock(trank, win);); (127, MPI, MPI_Get(&vals[i], 1, MPI_INT, trank, i, 1, MPI_INT, win);); (183, MPI, MPI_Accumulate(&localbuf[i], 1, MPI_INT, trank, rank + i * wsize, 1, MPI_INT, MPI_SUM, win);); (37, MPI, MPI_Barrier(MPI_COMM_WORLD);); (6, MPI, MPI_Abort(MPI_COMM_WORLD, 1);)"}
{"predict": "(14, CUDA, thrust::device_vector<Element> d_src = h_src;); (8, CUDA, thrust::host_vector<Element> h_src(kNumel);)", "label": "(14, CUDA, thrust::device_vector<Element> d_src = h_src;); (8, CUDA, thrust::host_vector<Element> h_src(kNumel);)"}
{"predict": "(51, CUDA, cudaFree(res_dev);); (44, CUDA, cudaMalloc(&res_dev, sizeof(float));); (46, CUDA, cudaMemcpy(&res_host, res_dev, sizeof(float), cudaMemcpyDeviceToHost);)", "label": "(51, CUDA, cudaFree(res_dev);); (44, CUDA, cudaMalloc(&res_dev, sizeof(float));); (46, CUDA, cudaMemcpy(&res_host, res_dev, sizeof(float), cudaMemcpyDeviceToHost);)"}
{"predict": "(184, OpenMP, #pragma omp simd); (77, OpenMP, #pragma\tomp\ttaskloop private (nn,lbstart,lbend,thread_id1) untied); (155, OpenMP, #pragma omp simd lastprivate(irow)); (80, OpenMP, #pragma\tomp\ttaskloop private (nn,lbstart,lbend,thread_id1) nogroup untied); (105, OpenMP, #pragma omp simd); (72, OpenMP, #pragma omp parallel default (shared)); (177, OpenMP, #pragma omp simd lastprivate(i)); (102, OpenMP, #pragma omp simd lastprivate(gik,iknsupc,ikfrow,iklrow,i,irow,j,jj,lk,lk1,nroot_send_tmp) if (nrhs>30)); (71, OpenMP, #pragma omp parallel default (shared) num_threads(num_thread)); (222, OpenMP, #pragma omp atomic capture); (255, OpenMP, #pragma omp critical)", "label": "(82, OpenMP, #pragma\tomp\ttaskloop firstprivate (stat) private (thread_id1,Uinv,nn,lbstart,lbend,ub,temp,rtemp_loc,ik,lk1,gik,gikcol,usub,uval,lsub,lusup,iknsupc,il,i,irow,bmod_tmp,p,ii,jj,t1,t2,j,ikfrow,iklrow,dest,y,uptr,fnz,nsupr,nroot_send_tmp) untied nogroup); (126, OpenMP, #pragma omp simd); (146, OpenMP, #pragma omp atomic capture); (75, OpenMP, #pragma\tomp\tparallel for private (thread_id1,Uinv,nn,lbstart,lbend,ub,temp,rtemp_loc,ik,lk1,gik,gikcol,usub,uval,lsub,lusup,iknsupc,il,i,irow,bmod_tmp,p,ii,jj,t1,t2,j,ikfrow,iklrow,dest,y,uptr,fnz,nsupr))"}
{"predict": "(48, CUDA, CubDebugExit(cudaMemcpy(d_flags, h_flags, sizeof(unsigned char) * num_items, cudaMemcpyHostToDevice));); (46, CUDA, CubDebugExit(cudaMemcpy(d_in, h_in, sizeof(int) * num_items, cudaMemcpyHostToDevice));)", "label": "(48, CUDA, CubDebugExit(cudaMemcpy(d_flags, h_flags, sizeof(unsigned char) * num_items, cudaMemcpyHostToDevice));); (46, CUDA, CubDebugExit(cudaMemcpy(d_in, h_in, sizeof(int) * num_items, cudaMemcpyHostToDevice));)"}
{"predict": "(6, CUDA, __shared__ uint s_key[SHARED_SIZE_LIMIT];); (6, CUDA, __shared__ uint s_val[SHARED_SIZE_LIMIT];)", "label": "(6, CUDA, __shared__ uint s_key[SHARED_SIZE_LIMIT];); (6, CUDA, __shared__ uint s_val[SHARED_SIZE_LIMIT];)"}
{"predict": "(84, OpenMP, if (bOCSP) comp_add_script_line(\"Flag=OCSP\\n\");); (20, OpenMP, comp_add_script_line(\"Hash=%s\\n\", comp_get_script_hash_name());); (71, OpenMP, comp_add_script_line(\"Flag=PASSWORD\\n\");); (54, OpenMP, if (keys_base16_in1_type) comp_add_script_line(\"KeysBase16In1=%s\\n\", keys_base16_in1_type);); (55, OpenMP, if (keys_hex_len) comp_add_script_line(\"KeysHexLen=%d\\n\", keys_hex_len);); (125, OpenMP, if (bUseAesKey) comp_add_script_line(\"UseAesKey=%d\\n\", bUseAesKey);); (121, OpenMP, if (bUseAesIv) comp_add_script_line(\"UseAesIv=%d\\n\", bUseAesIv);); (131, OpenMP, if (nMinLen) comp_add_script_line(\"MinLen=%d\\n\", nMinLen);); (131, OpenMP, if (nMaxLen) comp_add_script_line(\"MaxLen=%d\\n\", nMaxLen);); (120, OpenMP, if (bUseAesCbc) comp_add_script_line(\"UseAesCbc=%d\\n\", bUseAesCbc);); (122, OpenMP, if (bUseAesHmac) comp_add_script_line(\"UseAesHmac=%d\\n\", bUseAesHmac);); (42, OpenMP, if (bPassInSalt) comp_add_script_line(\"PassInSalt=%d\\n\", bPassInSalt);); (38, OpenMP, if (bHaveSalt) comp_add_script_line(\"HaveSalt=%d\\n\", bHaveSalt);); (129, OpenMP, if (nMaxTime) comp_add_script_line(\"MaxTime=%d\\n\", nMaxTime);); (121, OpenMP, if (bUseAesEcb) comp_add_script_line(\"UseAesEcb=%d\\n\", bUseAesEcb);); (41, OpenMP, if (salt_as_hex_type) comp_add_script_line(\"SaltAsHexType=%s\\n\", salt_as_hex_type", "label": "(31, OpenMP, comp_add_script_line(\"Flag=MGF_SALT_AS_HEX_%s\\n\", tmp);); (19, OpenMP, comp_do_parse(0, nSyms-1);); (222, OpenMP, comp_add_script_line(\"Func=DynamicFunc__append_keys_pad20\\n\"); if (use_inp1) len_comp += 20; else len_comp2 += 20; }); (58, OpenMP, if (bNeedS) comp_add_script_line(\"Flag=MGF_SALTED\\n\");); (153, OpenMP, comp_add_script_line(\"Func=DynamicFunc__LargeHash_OUTMode_raw\\n\");); (18, OpenMP, comp_add_script_line(\"Expression=dynamic=%s\\n\", p->pExpr);); (306, OpenMP, comp_add_script_line(\"Flag=MGF_INPBASE64b\\n\");); (307, OpenMP, comp_add_script_line(\"Flag=MGF_INPBASE64m\\n\");); (186, OpenMP,"}
{"predict": "(18, MPI, MPI_Type_vector(COUNT, 1, noncontig_stride, MPI_INT, &dt_vector);); (10, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (10, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (41, MPI, MPI_Type_free(&dt_vector);); (27, MPI, MPI_Type_commit(&dt_noncontig);); (39, MPI, MPI_Op_free(&op);); (5, MPI, MPI_Type_noncontiguous(COUNT, dt_vector, &dt_noncontig);)", "label": "(38, MPI, MPI_Op_free(&op);); (16, MPI, MPI_Type_free(&dt_vector);); (35, MPI, MPI_Type_free(&dt_noncontig);); (8, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (8, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (13, MPI, MPI_Type_commit(&dt_noncontig);); (9, MPI, MPI_Type_vector(1, 1, noncontig_stride, MPI_INT, &dt_vector);); (9, MPI, MPI_Type_create_resized(dt_vector, 0, sizeof(int) * noncontig_stride, &dt_noncontig);)"}
{"predict": "(6, CUDA, __shared__ int s_data[32][32];)", "label": "(6, CUDA, __shared__ int s_data[32][33];)"}
{"predict": "(13, CUDA, CUDA_CHECK(cudaGetDeviceProperties(&props, 0));)", "label": "(13, CUDA, CUDA_CHECK(cudaGetDeviceProperties(&props, 0));)"}
{"predict": "(5, CUDA, st = cudaMalloc(&test_ptr, 1024 * 1024);); (12, CUDA, cudaFree(test_ptr);); (6, CUDA, EXPECT_EQ(cudaSuccess, st);)", "label": "(6, CUDA, st = cudaMalloc(&test_ptr, TEST_ALLOC_SIZE);); (11, CUDA, cudaFree(test_ptr);)"}
{"predict": "(19, TBB, tbb::tick_count t0 = tbb::tick_count::now();); (25, TBB, serial_tiled_time = (tbb::tick_count::now() - t0).seconds();); (30, TBB, tbb_time = (tbb::tick_count::now() - t0).seconds();); (18, TBB, serial_time = (tbb::tick_count::now() - t0).seconds();)", "label": "(19, TBB, tbb::tick_count t0 = tbb::tick_count::now();); (25, TBB, serial_tiled_time = (tbb::tick_count::now() - t0).seconds();); (30, TBB, tbb_time = (tbb::tick_count::now() - t0).seconds();); (18, TBB, serial_time = (tbb::tick_count::now() - t0).seconds();)"}
{"predict": "(52, CUDA, flamegpu::CUDASimulation  cudaSimulation(model);)", "label": "(52, CUDA, flamegpu::CUDASimulation cudaSimulation(model);)"}
{"predict": "(7, OpenMP, #pragma omp section); (7, OpenMP, #pragma omp parallel)", "label": "(8, OpenMP, #pragma omp section); (6, OpenMP, #pragma omp parallel)"}
{"predict": "(11, MPI, MPI_Abort(MPI_COMM_WORLD, 1);); (20, MPI, MPI_Type_get_true_extent(keysat, &keysat_lb, &keysat_extent);); (23, MPI, MPI_Type_get_true_extent(key, &key_true_lb, &key_true_extent);); (82, MPI, MPI_Allreduce(counts, all_counts, 2, MPI_UINT64_T, MPI_SUM, comm);)", "label": "(25, MPI, MPI_Type_get_true_extent(key, &key_true_lb, &key_true_extent);); (15, MPI, MPI_Abort(MPI_COMM_WORLD, 1);); (83, MPI, MPI_Allreduce(counts, all_counts, 2, MPI_UINT64_T, MPI_SUM, comm);); (18, MPI, MPI_Type_get_extent(keysat, &keysat_lb, &keysat_extent);)"}
{"predict": "(23, CUDA, checkCudaErrors(cudaMalloc(&bLines_d, N_LINES * sizeof(BezierLine)));); (37, CUDA, checkCudaErrors(cudaFree(bLines_d));); (29, CUDA, checkCudaErrors(cudaDeviceSynchronize());)", "label": "(24, CUDA, checkCudaErrors(cudaMalloc((void **)&bLines_d, N_LINES * sizeof(BezierLine)));); (35, CUDA, checkCudaErrors(cudaFree(bLines_d));)"}
{"predict": "(7, CUDA, __shared__ float shared_sum2[32];); (5, CUDA, __shared__ float shared_sum[32];)", "label": "(7, CUDA, __shared__ float shared_sum2[32];); (5, CUDA, __shared__ float shared_sum[32];)"}
{"predict": "(2, OpenMP, #pragma omp parallel for)", "label": "(2, OpenMP, #pragma omp parallel for schedule(static))"}
{"predict": "(235, OpenMP, #pragma omp parallel for simd firstprivate(ii)); (224, OpenMP, #pragma omp parallel for simd private(ii)); (4, OpenMP, #pragma omp parallel for simd); (228, OpenMP, #pragma omp parallel for simd lastprivate(ii)); (237, OpenMP, #pragma omp parallel for simd collapse(2)); (248, OpenMP, #pragma omp parallel for simd linear(ii)); (252, OpenMP, #pragma omp parallel for simd aligned(c:ii)); (222, OpenMP, #pragma omp parallel for simd linear(ii) collapse(2)); (242, OpenMP, #pragma omp parallel for simd private(ii) collapse(2)); (225, OpenMP, #pragma omp parallel for simd private(ii)); (235, OpenMP, #pragma omp parallel for simd firstprivate(ii) collapse(2)); (227, OpenMP, #pragma omp parallel for simd linear(c:ii)); (240, OpenMP, #pragma omp parallel for simd aligned(c:ii) collapse(2)); (1, OpenMP, #pragma omp parallel for simd ii); (219, OpenMP, #pragma omp parallel for simd lastprivate(ii) collapse(2)); (229, OpenMP, #pragma omp parallel for simd aligned(c) collapse(2)); (218, OpenMP, #pragma omp parallel for simd aligned(c:) collapse(2)); (223, OpenMP, #pragma omp parallel for simd aligned(ii)); (223, OpenMP, #pragma omp parallel for simd aligned(ii:); (223, OpenMP, #pragma omp parallel for simd aligned(ii:)); (226, OpenMP, #pragma omp parallel for simd aligned(c,ii)); (227, OpenMP, #pragma omp parallel for simd aligned(c) private(ii)); (228, OpenMP, #pragma omp parallel for simd aligned(c:ii) private(ii)); (231, OpenMP, #pragma omp parallel for simd aligned(ii) private(ii)); (232, OpenMP, #pragma omp parallel for simd aligned(ii) linear(ii)); (213, OpenMP, #pragma omp parallel for simd lastprivate(ii)); (215, OpenMP, #pragma omp parallel for simd linear(ii)); (2", "label": "(235, OpenMP, #pragma omp parallel for simd private(ii)); (5, OpenMP, #pragma omp parallel for simd); (257, OpenMP, #pragma omp parallel for simd collapse(2)); (226, OpenMP, #pragma omp parallel for simd linear(ii)); (237, OpenMP, #pragma omp parallel for simd lastprivate(ii)); (220, OpenMP, #pragma omp parallel for simd firstprivate(ii))"}
{"predict": "(12, TBB, tbb::parallel_sort(iter, iter + n, *compare );)", "label": "(12, TBB, tbb::parallel_sort(iter, iter + n, *compare );)"}
{"predict": "(10, TBB, double serial_time = (tbb::tick_count::now() - t0).seconds();); (7, TBB, tbb::tick_count t0 = tbb::tick_count::now();); (16, TBB, double tbb_time = (tbb::tick_count::now() - t1).seconds();); (13, TBB, tbb::tick_count t1 = tbb::tick_count::now();)", "label": "(10, TBB, double serial_time = (tbb::tick_count::now() - t0).seconds();); (7, TBB, tbb::tick_count t0 = tbb::tick_count::now();); (16, TBB, double tbb_time = (tbb::tick_count::now() - t1).seconds();); (13, TBB, tbb::tick_count t1 = tbb::tick_count::now();)"}
{"predict": "(24, CUDA, CHECK(cudaMalloc(&d_B, M));); (24, CUDA, CHECK(cudaMemcpy(d_A, h_A, M, cudaMemcpyHostToDevice));); (42, CUDA, CHECK(cudaFree(d_B));); (20, CUDA, CHECK(cudaMalloc(&d_A, M));); (28, CUDA, CHECK(cudaMemcpy(h_B, d_B, M, cudaMemcpyDeviceToHost));); (38, CUDA, CHECK(cudaFree(d_A));)", "label": "(24, CUDA, CHECK(cudaMalloc(&d_B, M));); (24, CUDA, CHECK(cudaMemcpy(d_A, h_A, M, cudaMemcpyHostToDevice));); (42, CUDA, CHECK(cudaFree(d_B));); (20, CUDA, CHECK(cudaMalloc(&d_A, M));); (28, CUDA, CHECK(cudaMemcpy(h_B, d_B, M, cudaMemcpyDeviceToHost));); (38, CUDA, CHECK(cudaFree(d_A));)"}
{"predict": "(16, CUDA, EXPECT_EQ(cudaStreamDestroy(stream), cudaSuccess) << \"Stream destruction failure.\");); (3, CUDA, EXPECT_EQ(cudaStreamCreate(&stream), cudaSuccess) << \"Stream creation failure.\");)", "label": "(4, CUDA, HANDLE_ERROR(cudaStreamCreate(&stream));); (15, CUDA, HANDLE_ERROR(cudaStreamDestroy(stream));)"}
{"predict": "(5, CUDA, __shared__ uint data[MERGE_THREADBLOCK_SIZE];)", "label": "(12, CUDA, __shared__ uint data[MERGE_THREADBLOCK_SIZE];)"}
{"predict": "(2, OpenMP, #pragma omp critical)", "label": "(2, OpenMP, #pragma omp critical)"}
{"predict": "(38, OpenCL, retVal = clReleaseMemObject(clBuffer);)", "label": "(38, OpenCL, retVal = clReleaseMemObject(clBuffer);)"}
{"predict": "(26, CUDA, CUDA_CHECK_AND_EXIT(cudaMallocManaged(&data, size_bytes));); (20, CUDA, CUDA_CHECK_AND_EXIT(cudaStreamCreate(&stream));); (48, CUDA, CUDA_CHECK_AND_EXIT(cudaDeviceSynchronize());); (46, CUDA, CUDA_CHECK_AND_EXIT(cudaPeekAtLastError());); (53, CUDA, CUDA_CHECK_AND_EXIT(cudaFree(data));); (53, CUDA, CUDA_CHECK_AND_EXIT(cudaStreamDestroy(stream));)", "label": "(26, CUDA, CUDA_CHECK_AND_EXIT(cudaMallocManaged(&data, size_bytes));); (19, CUDA, CUDA_CHECK_AND_EXIT(cudaStreamCreate(&stream));); (48, CUDA, CUDA_CHECK_AND_EXIT(cudaDeviceSynchronize());); (46, CUDA, CUDA_CHECK_AND_EXIT(cudaPeekAtLastError());); (53, CUDA, CUDA_CHECK_AND_EXIT(cudaFree(data));); (53, CUDA, CUDA_CHECK_AND_EXIT(cudaStreamDestroy(stream));)"}
{"predict": "(24, OpenMP, void * px_device = omp_target_ptr_translate(x, 0, nullptr);); (7, OpenMP, #pragma omp target enter data map(to:x[0:count])); (31, OpenMP, uintptr_t px_device = omp_target_addr_translate(x, 0, nullptr);); (14, OpenMP, #pragma omp target map(from:px)); (26, OpenMP, #pragma omp target map(from:x[0:count])); (3, OpenMP, #pragma omp target data use_device_ptr(x))", "label": "(15, OpenMP, #pragma omp target map(from:px)); (7, OpenMP, #pragma omp target data map(to:x[0:count])); (21, OpenMP, #pragma omp target data use_device_ptr(x)); (26, OpenMP, #pragma omp target data use_device_addr(x[0:0]))"}
{"predict": "(64, CUDA, CHECKED_CALL(cudaEventRecord(stop, 0));); (13, CUDA, CHECKED_CALL(cudaGetDeviceProperties(&deviceProp, devID));); (54, CUDA, cudaEventQuery(start);); (84, CUDA, CHECKED_CALL(cudaEventElapsedTime(&time, start, stop));); (54, CUDA, CHECKED_CALL(cudaEventSynchronize(stop));); (98, CUDA, CHECKED_CALL(cudaFree(d_result));); (54, CUDA, CHECKED_CALL(cudaMemcpy(d_nresults, h_nresults, THREADS * sizeof(*d_nresults), cudaMemcpyHostToDevice));); (102, CUDA, CHECKED_CALL(cudaEventDestroy(stop));); (45, CUDA, CHECKED_CALL(cudaFuncSetAttribute(test_interval_newton<T>, cudaFuncAttributeMaxDynamicSharedMemorySize, 4 * 1024));); (5, CUDA, int devID = findCudaDevice(argc, (const char **)argv);); (36, CUDA, CHECKED_CALL(cudaEventCreate(&start));); (95, CUDA, CHECKED_CALL(cudaEventDestroy(start));); (36, CUDA, CHECKED_CALL(cudaEventCreate(&stop));); (89, CUDA, CHECKED_CALL(cudaFree(d_nresults));); (28, CUDA, CHECKED_CALL(cudaMalloc((void **)&d_nresults, THREADS * sizeof(*d_nresults)));); (48, CUDA, CHECKED_CALL(cudaEventRecord(start, 0));)", "label": "(59, CUDA, CHECKED_CALL(cudaEventRecord(start, 0));); (52, CUDA, CHECKED_CALL(cudaDeviceSetLimit(cudaLimitStackSize, 8192));); (62, CUDA, CHECKED_CALL(cudaGetLastError());); (41, CUDA, CHECKED_CALL(cudaEventCreate(&start));); (36, CUDA, CHECKED_CALL(cudaSetDevice(devID));); (88, CUDA, CHECKED_CALL(cudaEventDestroy(start));); (89, CUDA, CHECKED_CALL(cudaFree(d_result));); (61, CUDA, CHECKED_CALL(cudaDeviceSynchronize());); (6, CUDA, cudaGetDeviceProperties(&deviceProp, devID);); (3, CUDA, int devID = findCudaDevice(argc, (const char **)argv);); (78, CUDA, CHECKED_CALL(cudaEventElapsedTime(&time, start, stop));); (56, CUDA, CHECKED_CALL(cudaEventRecord(stop, 0));); (84, CUDA, CHECKED_CALL(cudaFree(d_nresults));); (30, CUDA, CHECKED_CALL(cudaMalloc((void **)&d_nresults, THREADS * sizeof(*d_nresults)));); (80, CUDA, CHECKED_CALL(cudaEventDestroy(stop));); (30, CUDA, CHECKED_CALL(cudaEventCreate(&stop));)"}
{"predict": "(6, OpenMP, double st = omp_get_wtime();); (3, OpenACC, #pragma acc enter data create(out[:w*h])); (12, OpenACC, #pragma acc loop vector); (18, OpenACC, #pragma acc exit data delete(in1,in2) copyout(out[:w*h])); (16, OpenMP, printf(\"Time taken for OpenACC merge(kernel only) with pipelining: %.4f seconds\\n\", omp_get_wtime()-st);); (7, OpenACC, #pragma acc parallel loop gang present(in1, in2,out)); (-1, OpenACC, #pragma acc enter data copyin(in1[:w*h],in2[:h*w]))", "label": "(4, OpenACC, #pragma acc enter data create(in1[:w*h], in2[:h*w], out[:w*h])); (12, OpenACC, #pragma acc loop); (8, OpenACC, #pragma acc update device(in1[lower*w:(upper-lower)*w],in2[lower*w:(upper-lower)*w]) async(block%2)); (17, OpenACC, #pragma acc wait); (7, OpenACC, #pragma acc parallel loop present(in1,in2, out) async(block%2)); (13, OpenACC, #pragma acc update self(out[lower*w:(upper-lower)*w]) async(block%2)); (15, OpenACC, #pragma acc exit data delete(in1, in2, out))"}
{"predict": "(35, CUDA, checkCudaErrors(cudaCreateTextureObject(&texObj, &resDesc, &texDesc, NULL));); (55, CUDA, checkCudaErrors(cudaMemcpy(&totPts, d_PointCounterAddr, sizeof(unsigned int), cudaMemcpyDeviceToHost));); (3, CUDA, checkCudaErrors(cudaGetSymbolAddress((void**)&d_PointCounterAddr, d_PointCounter));); (42, CUDA, checkCudaErrors(cudaDeviceSynchronize());); (57, CUDA, checkCudaErrors(cudaFreeTextureObject(texObj));); (2, CUDA, checkCudaErrors(cudaMemcpy(&fstPts, d_PointCounterAddr, sizeof(unsigned int), cudaMemcpyDeviceToHost));)", "label": "(5, CUDA, safeCall(cudaGetSymbolAddress((void**)&d_PointCounterAddr, d_PointCounter));); (57, CUDA, safeCall(cudaMemcpy(&totPts, &d_PointCounterAddr[2*octave+1], sizeof(int), cudaMemcpyDeviceToHost));); (5, CUDA, safeCall(cudaMemcpy(&fstPts, &d_PointCounterAddr[2*octave-1], sizeof(int), cudaMemcpyDeviceToHost));); (50, CUDA, safeCall(cudaDestroyTextureObject(texObj));); (32, CUDA, cudaCreateTextureObject(&texObj, &resDesc, &texDesc, NULL);)"}
{"predict": "(52, TBB, tbb::flow::make_edge( q2, q3 );); (50, TBB, tbb::flow::queue_node<T> q2(g);); (50, TBB, tbb::flow::queue_node<T> q3(g);); (48, TBB, tbb::flow::make_edge( q, q2 );); (-2, TBB, tbb::flow::graph g;); (70, TBB, tbb::flow::queue_node<T> q_copy(q);); (-2, TBB, tbb::flow::queue_node<T> q(g);)", "label": "(4, TBB, tbb::flow::queue_node<T> q2(g);); (51, TBB, tbb::flow::make_edge( q2, q3 );); (3, TBB, tbb::flow::queue_node<T> q3(g);); (48, TBB, tbb::flow::make_edge( q, q2 );); (-2, TBB, tbb::flow::graph g;); (68, TBB, tbb::flow::queue_node<T> q_copy(q);); (-3, TBB, tbb::flow::queue_node<T> q(g);)"}
{"predict": "(27, MPI, MPI_Win_set_attr(win, key[0], &attrval[0]);); (12, MPI, MPI_Win_create(buf, sizeof(int), sizeof(int), MPI_INFO_NULL, comm, &win);); (24, MPI, MPI_Win_set_attr(win, key[2], &attrval[2]);); (24, MPI, MPI_Win_set_attr(win, key[1], &attrval[1]);); (56, MPI, MPI_Win_free_keyval(&key[i]);); (26, MPI, MPI_Win_delete_attr(win, key[0]);); (26, MPI, MPI_Win_delete_attr(win, key[1]);); (26, MPI, MPI_Win_delete_attr(win, key[2]);); (55, MPI, MPI_Win_free(&win);)", "label": "(27, MPI, MPI_Win_set_attr(win, key[0], &attrval[0]);); (12, MPI, MPI_Win_create(buf, sizeof(int), sizeof(int), MPI_INFO_NULL, comm, &win);); (29, MPI, MPI_Win_delete_attr(win, key[0]);); (30, MPI, MPI_Win_delete_attr(win, key[2]);); (58, MPI, MPI_Win_free_keyval(&key[i]);); (20, MPI, MPI_Win_set_attr(win, key[2], &attrval[2]);); (58, MPI, MPI_Win_free(&win);); (19, MPI, MPI_Win_set_attr(win, key[1], &attrval[1]);); (24, MPI, MPI_Win_delete_attr(win, key[1]);)"}
{"predict": "(11, OpenMP, #pragma omp parallel for); (38, OpenMP, #pragma omp atomic)", "label": "(11, OpenMP, #pragma omp parallel for); (38, OpenMP, #pragma omp atomic)"}
{"predict": "(19, MPI, MPI_Comm_rank(comm, &rank);)", "label": "(19, MPI, MPI_Comm_rank(comm, &rank);)"}
{"predict": "(28, MPI, MPI_Init(&argc, &argv);); (83, MPI, MPI_Comm_disconnect(&icomm);); (27, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (81, MPI, rc = MPI_Comm_set_errhandler(MPI_COMM_SELF, MPI_ERRORS_ARE_FATAL);); (76, MPI, MPI_Comm_spawn(argv[0], &spawn_argv[1], 1, spawn_info, 0, MPI_COMM_WORLD, &icomm, spawn_err);); (44, MPI, MPI_Info_get(MPI_INFO_ENV, \"mpi_initial_errhandler\", MPI_MAX_INFO_VAL, init_errh_info, &flag);); (65, MPI, MPI_Comm_get_errhandler(MPI_COMM_SELF, &errh);); (84, MPI, MPI_Error_string(rc, estr, &slen);); (95, MPI, rc = MPI_Error_string(MPI_ERR_WIN, estr, &slen);); (88, MPI, rc = MPI_Finalize();); (68, MPI, MPI_Info_set(spawn_info, \"mpi_initial_errhandler\", \"mpi_errors_return\");); (47, MPI, MPI_Abort(MPI_COMM_WORLD, 1);)", "label": "(28, MPI, MPI_Init(&argc, &argv);); (82, MPI, MPI_Comm_disconnect(&icomm);); (76, MPI, MPI_Comm_spawn(argv[0], &spawn_argv[1], 1, spawn_info, 0, MPI_COMM_WORLD, &icomm, spawn_err);); (26, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (83, MPI, rc = MPI_Comm_set_errhandler(MPI_COMM_SELF, MPI_ERRORS_ARE_FATAL);); (43, MPI, MPI_Info_get(MPI_INFO_ENV, \"mpi_initial_errhandler\", MPI_MAX_INFO_VAL, init_errh_info, &flag);); (68, MPI, MPI_Info_set(spawn_info, \"mpi_initial_errhandler\", \"mpi_errors_return\");); (90, MPI, rc = MPI_Finalize();); (74, MPI, MPI_Barrier(icomm);); (80, MPI, MPI_Error_string(rc, estr, &slen);); (49, MPI, MPI_Comm_get_errhandler(MPI_COMM_SELF, &errh);); (62, MPI, MPI_Info_create(&spawn_info);); (93, MPI, rc = MPI_Error_string(MPI_ERR_WIN, estr, &slen);)"}
{"predict": "(3, OpenMP, #pragma omp target map(tofrom: threadCount)); (4, OpenMP, #pragma omp metadirective)", "label": "(3, OpenMP, #pragma omp target map(tofrom: threadCount)); (4, OpenMP, #pragma omp metadirective)"}
{"predict": "(4, OpenMP, xomp_get_device_version(&major, &minor);)", "label": "(14, OpenMP, printf(\"Error: xomp_get_maxThreadBlocksPerMultiprocessor(): unhandled Compute Capability numbers%d.%d \\n\", major, minor);); (3, CUDA, major = xomp_getCudaDeviceProp(devID)-> major;); (3, CUDA, minor = xomp_getCudaDeviceProp(devID)-> minor;)"}
{"predict": "(17, MPI, MPI_Comm_dup(MPI_COMM_SELF, &self_dup);); (25, MPI, MPI_Comm_dup(comm, &self_dup);); (19, MPI, MPI_Comm_free(&self_dup);); (27, MPI, MPI_Comm_free(&comm);); (13, MPI, MPI_Comm_rank(self_dup, &rank);); (2, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (5, MPI, MPI_Comm_dup(MPI_COMM_WORLD, &comm);)", "label": "(26, MPI, MPI_Comm_dup(comms[*(int *) arg], &comm);); (4, MPI, MPI_Comm_rank(comms[*(int *) arg], &rank);); (20, MPI, MPI_Comm_free(&self_dup);); (24, MPI, MPI_Comm_free(&comm);); (13, MPI, MPI_Comm_dup(MPI_COMM_SELF, &self_dup);)"}
{"predict": "(40, CUDA, HANDLE_ERROR(cudaStreamSynchronize(stream));); (12, CUDA, HANDLE_ERROR(cudaStreamCreate(&stream));); (76, CUDA, HANDLE_ERROR(cudaFree(costs_dev_only_d));); (27, CUDA, HANDLE_ERROR(cudaMalloc((void**)&costs_host_only_d, sizeof(float) * num_rollouts));); (75, CUDA, HANDLE_ERROR(cudaFree(costs_host_only_d));); (75, CUDA, HANDLE_ERROR(cudaFree(baseline_and_normalizer_d));); (23, CUDA, HANDLE_ERROR(cudaMalloc((void**)&costs_dev_only_d, sizeof(float) * num_rollouts));); (24, CUDA, HANDLE_ERROR(cudaMalloc((void**)&baseline_and_normalizer_d, sizeof(float2)));)", "label": "(12, CUDA, cudaStreamCreate(&stream);); (37, CUDA, HANDLE_ERROR(cudaStreamSynchronize(stream));); (17, CUDA, HANDLE_ERROR(cudaMalloc((void**)&costs_dev_only_d, sizeof(float) * num_rollouts));); (15, CUDA, HANDLE_ERROR(cudaMalloc((void**)&baseline_and_normalizer_d, sizeof(float2)));); (16, CUDA, HANDLE_ERROR(cudaMalloc((void**)&costs_host_only_d, sizeof(float) * num_rollouts));)"}
{"predict": "(3, CUDA, __shared__ typename BlockReduce<float>::TempStorage m_storage, v_storage;)", "label": "(2, CUDA, __shared__ typename BlockReduce<float>::TempStorage v_storage;); (0, CUDA, __shared__ typename BlockReduce<float>::TempStorage m_storage;)"}
{"predict": "(33, TBB, tbb::tick_count t0 = tbb::tick_count::now();); (41, TBB, reduce_time = (tbb::tick_count::now() - t0).seconds();); (47, TBB, graph_time = (tbb::tick_count::now() - t0).seconds();); (32, TBB, serial_time = (tbb::tick_count::now() - t0).seconds();)", "label": "(33, TBB, tbb::tick_count t0 = tbb::tick_count::now();); (41, TBB, reduce_time = (tbb::tick_count::now() - t0).seconds();); (47, TBB, graph_time = (tbb::tick_count::now() - t0).seconds();); (32, TBB, serial_time = (tbb::tick_count::now() - t0).seconds();)"}
{"predict": "(6, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);); (4, MPI, MPI_Comm_size(MPI_COMM_WORLD, &world_size);)", "label": "(6, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);); (4, MPI, MPI_Comm_size(MPI_COMM_WORLD, &world_size);)"}
{"predict": "(9, OpenMP, rec = get_decomp_record(code);)", "label": "(8, OpenMP, rec = get_decomp_record(code);)"}
{"predict": "(10, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (10, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (16, MPI, MPI_Abort(MPI_COMM_WORLD, -1);); (5, MPI, MPI_Abort(MPI_COMM_WORLD, pmode);)", "label": "(10, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (10, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (5, MPI, MPI_Abort(MPI_COMM_WORLD, -1);)"}
{"predict": "(7, CUDA, __shared__ float sdata[THREAD_PER_BLOCK];); (7, CUDA, __shared__ float sdata2[THREAD_PER_BLOCK];); (30, CUDA, __shared__ float mean;); (30, CUDA, __shared__ float var;)", "label": "(6, CUDA, __shared__ float sdata[THREAD_PER_BLOCK];); (8, CUDA, __shared__ float var;); (5, CUDA, __shared__ float sdata2[THREAD_PER_BLOCK];); (5, CUDA, __shared__ float mean;)"}
{"predict": "(88, TBB, TestFuncDefinitionPresence( parallel_deterministic_reduce, (const tbb::blocked_range<int>&, Body2&, const tbb::simple_partitioner&, tbb::task_group_context&), void );); (43, TBB, TestTypeDefinitionPresence3(flow::async_node<int, int, tbb::flow::queueing_lightweight> );); (83, TBB, TestFuncDefinitionPresence( parallel_for_each, (const intarray&, const Body1&, tbb::task_group_context&), void );); (78, TBB, TestFuncDefinitionPresence( parallel_invoke, (const Body&, const Body&, tbb::task_group_context&), void );); (78, TBB, TestFuncDefinitionPresence( parallel_do, (const intarray&, const Body1a&, tbb::task_group_context&), void );); (83, TBB, TestFuncDefinitionPresence( parallel_scan, (const tbb::blocked_range<int>&, const int&, const Body3a&, const Body1b&), int );); (93, TBB, TestFuncDefinitionPresence( info::default_concurrency, (tbb::numa_node_id), int );); (86, TBB, TestFuncDefinitionPresence( parallel_reduce, (const tbb::blocked_range<int>&, const int&, const Body2a&, const Body1b&), int );); (80, TBB, TestFuncDefinitionPresence( parallel_for, (const tbb::blocked_range<int>&, const Body2&, const tbb::simple_partitioner&), void );); (89, TBB, TestFuncDefinitionPresence( info::numa_nodes, (), std::vector<tbb::numa_node_id> );); (83, TBB, TestFuncDefinitionPresence( parallel_scan, (const tbb::blocked_range2d<int>&, Body3&, const tbb::auto_partitioner&), void ); );(90, TBB, TestFuncDefinitionPresence( parallel_deterministic_reduce, (const tbb::blocked_range<int>&, Body2&, tbb::affinity_partitioner&), void );); (73, TBB, TestFuncDefinitionPresence( parallel_reduce, (const tbb::blocked_range<int>&, const int&, const Body2a&, const Body1b&), int, tbb::affinity_partitioner& );); (7", "label": "(103, TBB, TestFuncDefinitionPresence( parallel_deterministic_reduce, (const tbb::blocked_range<int>&, Body2&, const tbb::simple_partitioner&, tbb::task_group_context&), void );); (32, TBB, TestTypeDefinitionPresence3(flow::async_node<int, int, tbb::flow::queueing_lightweight> );); (96, TBB, TestFuncDefinitionPresence( parallel_for_each, (const intarray&, const Body1&, tbb::task_group_context&), void );); (93, TBB, TestFuncDefinitionPresence( parallel_invoke, (const Body&, const Body&, tbb::task_group_context&), void );); (93, TBB, TestFuncDefinitionPresence( parallel_do, (const intarray&, const Body1a&, tbb::task_group_context&), void );); (27, TBB, TestTypeDefinitionPresence3(flow::multifunction_node<int, intpair, tbb::flow::queueing> );); (30, TBB, TestTypeDefinitionPresence2(flow::join_node<intpair, tbb::flow::key_matching<int> > );); (82, TBB, TestFuncDefinitionPresence( parallel_scan, (const tbb::blocked_range<int>&, const int&, const Body3a&, const Body1b&), int );); (75, TBB, TestFuncDefinitionPresence( parallel_for, (const tbb::blocked_range<int>&, const Body2&, const tbb::simple_partitioner&), void );); (79, TBB, TestFuncDefinitionPresence( parallel_scan, (const tbb::blocked_range2d<int>&, Body3&, const tbb::auto_partitioner&), void );); (74, TBB, TestFuncDefinitionPresence( parallel_reduce, (const tbb::blocked_range<int>&, const int&, const Body2a&, const Body1b&), int );); (23, TBB, TestTypeDefinitionPresence2(flow::continue_node<int, tbb::flow::lightweight> );); (73, TBB, TestFuncDefinitionPresence( parallel_reduce, (const tbb::blocked_range<int>&, Body2&, tbb::affinity_partitioner&), void );); (74, TBB, TestFuncDefinitionPresence( parallel_deterministic_reduce, (const tbb::blocked_range<int>&, Body2&, const tbb::static_partitioner&), void );); (14, TBB, typedef tbb::flow::tuple<int, int> intpair;); (33, TBB, TestTypeDefinitionPresence2(flow::composite_node<tbb::flow::tuple<int>, tbb::flow::tuple<int> > );); (15, TBB, TestTypeDefinitionPresence3(flow::function_node<int, int, tbb::flow::rejecting> );); (82, TBB, TestFuncDefinitionPresence( parallel_for, (int, int, const Body1&, const tbb::auto_partitioner&, tbb::task_group_context&), void );); (68, TBB, TestFuncDefinitionPresence( parallel_deterministic_reduce, (const tbb::blocked_range<int>&, const int&, const Body2a&, const Body1b&), int );); (75, TBB, TestFuncDefinitionPresence( parallel_pipeline, (size_t, const tbb::filter_t<void,void>&), void );); (81, TBB, TestFuncDefinitionPresence( parallel_reduce, (const tbb::blocked_range<int>&, Body2&, const tbb::auto_partitioner&, tbb::task_group_context&), void );); (5, TBB, TestFuncDefinitionPresence( flow::make_edge, (tbb::flow::sender<Msg>&, tbb::flow::receiver<Msg>&), void );); (82, TBB, TestFuncDefinitionPresence( parallel_deterministic_reduce, (const tbb::blocked_range<int>&, Body2&, tbb::task_group_context&), void );); (4, TBB, TestFuncDefinitionPresence( flow::remove_edge, (tbb::flow::sender<Msg>&, tbb::flow::receiver<Msg>&), void );); (76, TBB, TestFuncDefinitionPresence( parallel_for, (int, int, const Body1&, tbb::task_group_context&), void );); (77, TBB, TestFuncDefinitionPresence( parallel_reduce, (const tbb::blocked_range<int>&, Body2&, tbb::task_group_context&), void );); (9, TBB, TestTypeDefinitionPresence2(flow::join_node<intpair, tbb::flow::reserving> );)"}
{"predict": "(148, OpenMP, __kmp_omp_schedule_layered(sched, chunk, layer);); (129, OpenMP, __kmp_omp_schedule_simple(sched, chunk);)", "label": "(30, OpenMP, __kmp_omp_schedule_restore();)"}
{"predict": "(12, MPI, MPI_Comm_size(team.comm, &nprocs);); (10, MPI, MPI_Comm_rank(team.comm, &rank);)", "label": "(12, MPI, MPI_Comm_rank(team.comm, &rank);); (12, MPI, MPI_Comm_size(team.comm, &nprocs);)"}
{"predict": "(9, OpenCL, err = clCreateKernelsInProgram(program, 1, &kernel_info->kernel, NULL);)", "label": "(9, OpenCL, kernel_info->kernel = clCreateKernel(program, kernel_info->kernel_name, &err);)"}
{"predict": "(14, OpenCL, error = clEnqueueNDRangeKernel(cmdq, kernel_verify_lists, 1, NULL, &numLists, NULL, 0, NULL, NULL);); (5, OpenCL, cl_int *pNumCorrect = (cl_int *) clEnqueueMapBuffer(cmdq, num_correct, CL_TRUE, CL_MAP_WRITE, 0, sizeof(cl_int), 0, NULL,NULL, &error);); (9, OpenCL, error = clEnqueueUnmapMemObject(cmdq, num_correct, pNumCorrect, 0,NULL,NULL);); (14, OpenCL, pNumCorrect = (cl_int *) clEnqueueMapBuffer(cmdq, num_correct, CL_TRUE, CL_MAP_READ, 0, sizeof(cl_int), 0, NULL,NULL, &error);)", "label": "(6, OpenCL, cl_int *pNumCorrect = (cl_int*) clEnqueueMapBuffer(cmdq, num_correct, CL_TRUE, CL_MAP_READ | CL_MAP_WRITE, 0, sizeof(cl_int), 0, NULL,NULL, &error);); (10, OpenCL, error = clEnqueueUnmapMemObject(cmdq, num_correct, pNumCorrect, 0,NULL,NULL);); (15, OpenCL, pNumCorrect = (cl_int*) clEnqueueMapBuffer(cmdq, num_correct, CL_TRUE, CL_MAP_READ | CL_MAP_WRITE, 0, sizeof(cl_int), 0, NULL,NULL, &error);); (11, OpenCL, error = clEnqueueNDRangeKernel(cmdq, kernel_verify_lists, 1, NULL, &numLists, NULL, 0, NULL, NULL);)"}
{"predict": "(8, TBB, tbb::task_scheduler_init init(MaxThread);)", "label": "(8, TBB, tbb::task_scheduler_init init_market_p_plus_one(MaxThread + 1);)"}
{"predict": "(7, MPI, MPI_Comm_size(MPI_COMM_WORLD, &comm_size);); (69, MPI, MPI_Comm_split(MPI_COMM_WORLD, 0, rand(), &comm);); (57, MPI, MPI_Comm_split(MPI_COMM_WORLD, (comm_rank == comm_size - 1) ? 0 : 1, 0, &comm);); (58, MPI, MPI_Comm_free(&comm);); (7, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &comm_rank);); (5, MPI, MPI_Abort(MPI_COMM_WORLD, 1);); (31, MPI, MPI_Abort(MPI_COMM_WORLD, -1);)", "label": "(7, MPI, MPI_Comm_size(MPI_COMM_WORLD, &comm_size);); (69, MPI, MPI_Comm_split(MPI_COMM_WORLD, 0, rand(), &comm);); (57, MPI, MPI_Comm_split(MPI_COMM_WORLD, (comm_rank == comm_size - 1) ? 0 : 1, 0, &comm);); (5, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &comm_rank);); (58, MPI, MPI_Comm_free(&comm);); (7, MPI, MPI_Abort(MPI_COMM_WORLD, 1);); (30, MPI, MPI_Abort(MPI_COMM_WORLD, -1);)"}
{"predict": "(1, TBB, oneapi::tbb::flow::graph g;)", "label": "(1, TBB, oneapi::tbb::flow::graph g;)"}
{"predict": "(21, CUDA, cudaCheckErrors(\"kernel launch error\");); (13, CUDA, cudaMemcpy(dArray, array, size, cudaMemcpyHostToDevice);); (32, CUDA, cudaFree(dArray);); (18, CUDA, cudaMemcpy(array, dArray, size, cudaMemcpyDeviceToHost);); (3, CUDA, cudaMalloc(&dArray, size);); (10, CUDA, cudaCheckErrors(\"cudaMemcpy H2D error\");); (17, CUDA, cudaCheckErrors(\"cudaMemcpy D2H error\");)", "label": "(12, CUDA, checkCudaErrors(cudaMemcpy(dArray, array, size, cudaMemcpyHostToDevice));); (10, CUDA, checkCudaErrors(cudaMalloc(&dArray, size));); (19, CUDA, checkCudaErrors(cudaFree(dArray));); (17, CUDA, checkCudaErrors(cudaMemcpy(array, dArray, size, cudaMemcpyDeviceToHost));)"}
{"predict": "(9, TBB, c.set_core_type(tbb::info::core_types().back());); (6, TBB, tbb::task_arena::constraints c;); (36, TBB, tbb::affinity_partitioner aff_p;); (6, TBB, c.set_numa_id(tbb::info::numa_nodes()[0]);); (26, TBB, tbb::tick_count t0 = tbb::tick_count::now();); (47, TBB, double static_time = (tbb::tick_count::now() - t0).seconds();); (5, TBB, c.set_max_concurrency(std::min(8, tbb::info::default_concurrency(c)));); (37, TBB, double affinity_time = (tbb::tick_count::now() - t0).seconds();); (32, TBB, t0 = tbb::tick_count::now();); (25, TBB, double auto_time = (tbb::tick_count::now() - t0).seconds();); (3, TBB, tbb::task_arena arena(c);)", "label": "(9, TBB, c.set_core_type(tbb::info::core_types().back());); (6, TBB, tbb::task_arena::constraints c;); (36, TBB, tbb::affinity_partitioner aff_p;); (5, TBB, c.set_numa_id(tbb::info::numa_nodes()[0]);); (26, TBB, tbb::tick_count t0 = tbb::tick_count::now();); (46, TBB, double static_time = (tbb::tick_count::now() - t0).seconds();); (5, TBB, c.set_max_concurrency(std::min(8, tbb::info::default_concurrency(c)));); (36, TBB, double affinity_time = (tbb::tick_count::now() - t0).seconds();); (31, TBB, t0 = tbb::tick_count::now();); (25, TBB, double auto_time = (tbb::tick_count::now() - t0).seconds();); (2, TBB, tbb::task_arena arena(c);)"}
{"predict": "(18, CUDA, checkRuntime(cudaStreamCreate(&stream));); (80, CUDA, checkRuntime(cudaMemcpyAsync(output_data_host, output_data_device, sizeof(float) * output_numel, cudaMemcpyDeviceToHost, stream));); (80, CUDA, checkRuntime(cudaStreamSynchronize(stream));); (58, CUDA, checkRuntime(cudaMemcpyAsync(input_data_device, input_data_host, input_numel * sizeof(float), cudaMemcpyHostToDevice, stream));); (24, CUDA, checkRuntime(cudaMallocHost(&input_data_host, input_numel * sizeof(float)));); (24, CUDA, checkRuntime(cudaMalloc(&input_data_device, input_numel * sizeof(float)));); (171, CUDA, checkRuntime(cudaFree(input_data_device));); (168, CUDA, checkRuntime(cudaFreeHost(input_data_host));); (170, CUDA, checkRuntime(cudaFree(output_data_device));); (63, CUDA, checkRuntime(cudaMalloc(&output_data_device, sizeof(float) * output_numel));); (-5, CUDA, auto engine = make_nvshared(runtime->deserializeCudaEngine(engine_data.data(), engine_data.size()));); (60, CUDA, checkRuntime(cudaMallocHost(&output_data_host, sizeof(float) * output_numel));); (164, CUDA, checkRuntime(cudaFreeHost(output_data_host));); (161, CUDA, checkRuntime(cudaStreamDestroy(stream));)", "label": "(18, CUDA, checkRuntime(cudaStreamCreate(&stream));); (80, CUDA, checkRuntime(cudaMemcpyAsync(output_data_host, output_data_device, sizeof(float) * output_numel, cudaMemcpyDeviceToHost, stream));); (80, CUDA, checkRuntime(cudaStreamSynchronize(stream));); (58, CUDA, checkRuntime(cudaMemcpyAsync(input_data_device, input_data_host, input_numel * sizeof(float), cudaMemcpyHostToDevice, stream));); (24, CUDA, checkRuntime(cudaMallocHost(&input_data_host, input_numel * sizeof(float)));); (24, CUDA, checkRuntime(cudaMalloc(&input_data_device, input_numel * sizeof(float)));); (191, CUDA, checkRuntime(cudaFree(input_data_device));); (188, CUDA, checkRuntime(cudaFreeHost(input_data_host));); (190, CUDA, checkRuntime(cudaFree(output_data_device));); (63, CUDA, checkRuntime(cudaMalloc(&output_data_device, sizeof(float) * output_numel));); (-5, CUDA, auto engine = make_nvshared(runtime->deserializeCudaEngine(engine_data.data(), engine_data.size()));); (60, CUDA, checkRuntime(cudaMallocHost(&output_data_host, sizeof(float) * output_numel));); (184, CUDA, checkRuntime(cudaFreeHost(output_data_host));); (181, CUDA, checkRuntime(cudaStreamDestroy(stream));)"}
{"predict": "(14, MPI, MPI_Pack_size(1, newtype, MPI_COMM_WORLD, b);); (12, MPI, MPI_Type_contiguous(1, MPI_INT, &newtype);); (13, MPI, MPI_Unpack_size(b[0], newtype, MPI_COMM_WORLD, d);)", "label": "(17, MPI, MPI_Sendrecv(b, 1, newtype, 0, 0, d, 0, newtype, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);); (10, MPI, MPI_Type_commit(&newtype);); (8, MPI, MPI_Type_create_hvector(0, 1, 10, MPI_DOUBLE, &newtype);); (9, MPI, MPI_Type_free(&newtype);); (10, MPI, MPI_Type_indexed(0, b, d, MPI_DOUBLE, &newtype);)"}
{"predict": "(17, CUDA, thrust::shuffle(in_keys.begin(), in_keys.end(), re);); (17, CUDA, thrust::shuffle(in_values.begin(), in_values.end(), re);); (13, CUDA, thrust::host_vector<KeyT> host_keys = in_keys;); (5, CUDA, thrust::host_vector<KeyT> data_source(elements);); (10, CUDA, thrust::device_vector<KeyT> out_keys(elements);); (4, CUDA, thrust::host_vector<ValueT> data(elements);); (10, CUDA, thrust::device_vector<ValueT> out_values(elements);); (13, CUDA, thrust::host_vector<ValueT> host_values = in_values;); (3, CUDA, thrust::host_vector<KeyT> in_keys(elements);); (7, CUDA, thrust::shuffle(data.begin(), data.end(), re);); (3, CUDA, thrust::host_vector<ValueT> in_values(elements);); (2, CUDA, thrust::shuffle(data_source.begin(), data_source.end(), re);); (14, CUDA, thrust::sort_by_key(out_keys.begin(), out_keys.end(), out_values.begin(), CustomLess{});)", "label": "(9, CUDA, thrust::device_vector<std::uint8_t> data_source(elements);); (12, CUDA, thrust::sequence(data_source.begin(), data_source.end());); (12, CUDA, thrust::shuffle(data_source.begin(), data_source.end(), re);); (5, CUDA, thrust::default_random_engine re;); (15, CUDA, thrust::device_vector<ValueT> in_values(data_source);); (17, CUDA, thrust::host_vector<KeyT> host_keys(in_keys);); (17, CUDA, thrust::host_vector<ValueT> host_values(in_values);); (13, CUDA, thrust::device_vector<ValueT> out_values(elements);); (8, CUDA, thrust::device_vector<KeyT> out_keys(elements);); (6, CUDA, thrust::device_vector<KeyT> in_keys(data_source);)"}
{"predict": "(13, OpenMP, #pragma omp parallel for); (44, OpenMP, #pragma omp critical)", "label": "(13, OpenMP, #pragma omp parallel for); (72, OpenMP, #pragma omp atomic); (43, OpenMP, #pragma omp critical)"}
{"predict": "(84, OpenCL, sub_buf = clCreateSubBuffer(buf[1], 0, CL_BUFFER_CREATE_TYPE_REGION, &region, &error );); (87, OpenCL, void * map_ptr = clEnqueueMapBuffer(queue, buf[0], 1, CL_MAP_READ, 0, 64, 0, NULL, NULL, NULL);)", "label": "(84, OpenCL, sub_buf = clCreateSubBuffer(buf[1], 0, CL_BUFFER_CREATE_TYPE_REGION, &region, &error );); (87, OpenCL, void * map_ptr = clEnqueueMapBuffer(queue, buf[0], 1, CL_MAP_READ, 0, 64, 0, NULL, NULL, NULL);)"}
{"predict": "(1, OpenMP, #pragma omp parallel num_threads(2)); (4, OpenMP, #pragma omp barrier); (1, OpenMP, #pragma omp cancel parallel)", "label": "(1, OpenMP, #pragma omp parallel num_threads(2)); (10, OpenMP, #pragma omp cancellation point parallel); (3, OpenMP, #pragma omp cancel parallel)"}
{"predict": "(3, OpenMP, omp_set_default_device(0);); (32, OpenMP, #pragma omp target teams distribute parallel for is_device_ptr(DATA) nowait); (15, OpenMP, #pragma omp target teams distribute parallel for is_device_ptr(DATA)); (34, OpenMP, #pragma omp taskwait); (19, OpenMP, t1=omp_get_wtime();); (3, OpenMP, #pragma omp parallel for); (-2, OpenMP, DATA = (double*)   omp_target_alloc(N*sizeof(double), omp_get_default_device()) ;); (22, OpenMP, t2=omp_get_wtime();)", "label": "(4, OpenMP, omp_set_default_device(0);); (33, OpenMP, #pragma omp target teams distribute parallel for is_device_ptr(DATA) nowait); (15, OpenMP, #pragma omp target teams distribute parallel for is_device_ptr(DATA)); (35, OpenMP, #pragma omp taskwait); (19, OpenMP, t1=omp_get_wtime();); (4, OpenMP, #pragma omp parallel for); (-1, OpenMP, DATA = (double*)   omp_target_alloc(N*sizeof(double), omp_get_default_device()) ;); (22, OpenMP, t2=omp_get_wtime();)"}
{"predict": "(8, CUDA, __shared__ double sum[THREADS_PER_BLOCK];)", "label": "(8, CUDA, __shared__ double sum[block_size];)"}
{"predict": "(62, CUDA, CHECK(cudaPeekAtLastError());)", "label": "(62, CUDA, CHECK(cudaPeekAtLastError());)"}
{"predict": "(42, CUDA, cudaFree(d_inPtr);); (27, CUDA, cudaMalloc((void**)&d_outPtr, size * sizeof(float));); (32, CUDA, cudaMemcpy(&result_gpu, &d_outPtr[0], sizeof(float), cudaMemcpyDeviceToHost);); (27, CUDA, cudaMemcpy(d_inPtr, h_inPtr, size * sizeof(float), cudaMemcpyHostToDevice);); (37, CUDA, cudaFree(d_outPtr);); (22, CUDA, cudaMalloc((void**)& d_inPtr, size * sizeof(float));)", "label": "(42, CUDA, cudaFree(d_inPtr);); (27, CUDA, cudaMalloc((void**)&d_outPtr, size * sizeof(float));); (32, CUDA, cudaMemcpy(&result_gpu, &d_outPtr[0], sizeof(float), cudaMemcpyDeviceToHost);); (27, CUDA, cudaMemcpy(d_inPtr, h_inPtr, size * sizeof(float), cudaMemcpyHostToDevice);); (37, CUDA, cudaFree(d_outPtr);); (22, CUDA, cudaMalloc((void**)& d_inPtr, size * sizeof(float));)"}
{"predict": "(21, CUDA, checkCudaErrors(cudaSetDevice(shm->devices[id]));); (75, CUDA, checkCudaErrors(cudaStreamSynchronize(stream));); (89, CUDA, checkCudaErrors(cudaEventDestroy(events[i]));); (87, CUDA, checkCudaErrors(cudaFree(ptrs[i]));); (55, CUDA, checkCudaErrors(cudaEventRecord(events[bufferId], stream));); (57, CUDA, checkCudaErrors(cudaStreamWaitEvent(stream, events[id], 0));); (89, CUDA, checkCudaErrors(cudaStreamDestroy(stream));); (6, CUDA, checkCudaErrors(cudaGetDeviceProperties(&prop, shm->devices[id]));); (46, CUDA, checkCudaErrors(cudaStreamCreateWithFlags(&stream, cudaStreamNonBlocking));); (56, CUDA, checkCudaErrors(cudaEventRecord(events[id], stream));); (83, CUDA, checkCudaErrors(cudaIpcCloseMemHandle(ptrs[i]));); (14, CUDA, checkCudaErrors(cudaSetDeviceFlags(cudaDeviceMapHost));)", "label": "(21, CUDA, checkCudaErrors(cudaSetDevice(shm->devices[id]));); (54, CUDA, checkCudaErrors(cudaStreamWaitEvent(stream, events[bufferId], 0));); (71, CUDA, checkCudaErrors(cudaStreamWaitEvent(stream, events[id], 0));); (56, CUDA, checkCudaErrors(cudaGetLastError());); (92, CUDA, checkCudaErrors(cudaStreamDestroy(stream));); (18, CUDA, checkCudaErrors(cudaStreamCreateWithFlags(&stream, cudaStreamNonBlocking));); (86, CUDA, checkCudaErrors(cudaIpcCloseMemHandle(ptrs[i]));); (86, CUDA, checkCudaErrors(cudaEventDestroy(events[i]));); (53, CUDA, checkCudaErrors(cudaEventRecord(events[bufferId], stream));); (68, CUDA, checkCudaErrors(cudaStreamSynchronize(stream));); (12, CUDA, checkCudaErrors(cudaGetDeviceProperties(&prop, shm->devices[id]));)"}
{"predict": "(21, OpenCL, retVal = clReleaseMemObject(smallBuffer);); (4, OpenCL, auto smallBuffer = clCreateBuffer(clContext, flags, size, hostPtr, &retVal);); (24, OpenCL, EXPECT_EQ(clReleaseContext(context), CL_SUCCESS);)", "label": "(21, OpenCL, retVal = clReleaseMemObject(smallBuffer);); (5, OpenCL, cl_mem smallBuffer = clCreateBuffer(clContext, flags, size, hostPtr, &retVal);); (24, OpenCL, EXPECT_EQ(clReleaseContext(context), CL_SUCCESS);)"}
{"predict": "(13, CUDA, cudaCheck(cudaDeviceSynchronize());); (13, CUDA, cudaCheck(cudaGetLastError());)", "label": "(13, CUDA, cudaCheck(cudaGetLastError());)"}
{"predict": "(70, MPI, MPI_Irecv(buf_recv, shuffile_mpi_buf_size, MPI_BYTE, rank_recv, 0, comm, &request[0]);); (85, MPI, MPI_Waitall(1, request, status);); (85, MPI, nwrite = MPI_Get_count(&status[0], MPI_BYTE, &nread);); (78, MPI, MPI_Isend(buf_send, nread, MPI_BYTE, rank_send, 0, comm, &request[1]);)", "label": "(82, MPI, MPI_Wait(&request[1], &status[1]);); (90, MPI, MPI_Wait(&request[0], &status[0]);); (90, MPI, MPI_Get_count(&status[0], MPI_BYTE, &nwrite);); (66, MPI, MPI_Irecv(buf_recv, shuffile_mpi_buf_size, MPI_BYTE, rank_recv, 0, comm, &request[0]);); (77, MPI, MPI_Isend(buf_send, nread, MPI_BYTE, rank_send, 0, comm, &request[1]);)"}
{"predict": "(16, CUDA, CUDASimulation cudaSimulation(model);)", "label": "(16, CUDA, CUDASimulation cudaSimulation(model);)"}
{"predict": "(65, CUDA, CHECK_CUDART(cudaFree(indata));); (19, CUDA, CHECK_CUDART(cudaMemcpy(indata, &inval, sizeof(T), cudaMemcpyHostToDevice));); (63, CUDA, CHECK_CUDART(cudaMemcpy(&outval, outdata, sizeof(T), cudaMemcpyDeviceToHost));); (14, CUDA, CHECK_CUDART(cudaMalloc((void**)&indata, sizeof(T)));); (14, CUDA, CHECK_CUDART(cudaMalloc((void**)&outdata, sizeof(T)));); (61, CUDA, CHECK_CUDART(cudaFree(outdata));)", "label": "(65, CUDA, CHECK_CUDART(cudaFree(indata));); (19, CUDA, CHECK_CUDART(cudaMemcpy(indata, &inval, sizeof(T), cudaMemcpyHostToDevice));); (61, CUDA, CHECK_CUDART(cudaMemcpy(&outval, outdata, sizeof(T), cudaMemcpyDeviceToHost));); (14, CUDA, CHECK_CUDART(cudaMalloc((void**)&indata, sizeof(T)));); (14, CUDA, CHECK_CUDART(cudaMalloc((void**)&outdata, sizeof(T)));); (59, CUDA, CHECK_CUDART(cudaFree(outdata));)"}
{"predict": "(162, OpenCL, clGetDeviceInfo(vkGPU->device, CL_DEVICE_VENDOR_ID, sizeof(cl_int), &vendorID, 0);); (77, CUDA, res = cudaMalloc((void**)&buffer, bufferSize);); (86, OpenCL, buffer = clCreateBuffer(vkGPU->context, CL_MEM_READ_WRITE, bufferSize, 0, &res);)", "label": "(162, OpenCL, clGetDeviceInfo(vkGPU->device, CL_DEVICE_VENDOR_ID, sizeof(cl_int), &vendorID, 0);); (77, CUDA, res = cudaMalloc((void**)&buffer, bufferSize);); (86, OpenCL, buffer = clCreateBuffer(vkGPU->context, CL_MEM_READ_WRITE, bufferSize, 0, &res);)"}
{"predict": "(15, OpenMP, #pragma omp teams distribute reduction +); (113, OpenMP, #pragma omp teams distribute reduction(+ : m)); (92, OpenMP, #pragma omp teams distribute reduction(+ : h, k, B::x)); (31, OpenMP, #pragma omp teams distribute reduction(\\)); (62, OpenMP, #pragma omp teams distribute reduction(+ : ba)); (4, OpenMP, #pragma omp target); (64, OpenMP, #pragma omp teams distribute reduction(^ : fl)); (23, OpenMP, #pragma omp teams distribute reduction(*)); (94, OpenMP, #pragma omp teams distribute reduction(+ : o)); (49, OpenMP, #pragma omp teams distribute reduction(max : h.b)); (84, OpenMP, #pragma omp teams distribute reduction(+ : p), reduction(+ : p)); (33, OpenMP, #pragma omp teams distribute reduction(~ : argc)); (6, OpenMP, #pragma omp teams distribute reduction(); (75, OpenMP, #pragma omp teams distribute reduction(+ : r)); (65, OpenMP, #pragma omp teams distribute reduction(&& : S2::S2s)); (88, OpenMP, #pragma omp teams distribute reduction(+ : fl)); (67, OpenMP, #pragma omp teams distribute reduction(& : e, g)); (22, OpenMP, #pragma omp teams distribute reduction(| : argc,); (76, OpenMP, #pragma omp parallel private(k)); (12, OpenMP, #pragma omp teams distribute reduction(foo : argc); (77, OpenMP, #pragma omp teams distribute reduction(+ : qa[1], qa[0])); (43, OpenMP, #pragma omp teams distribute reduction(- : da)); (32, OpenMP, #pragma omp teams distribute reduction(&& : argc, z)); (22, OpenMP, #pragma omp teams distribute reduction(|| : argc > 0 ? argv[1] : argv[2])); (77, OpenMP, #pragma omp teams distribute reduction(+ : p), reduction(+ : fl)); (49, OpenMP, #pragma omp teams distribute reduction(min : a, b, c, d, f)); (68, OpenMP, #pragma omp parallel reduction(min : i)); (38, OpenMP, #pragma omp teams distribute reduction(* : ca));", "label": "(113, OpenMP, #pragma omp teams distribute reduction(task, + : m)); (15, OpenMP, #pragma omp teams distribute reduction +); (29, OpenMP, #pragma omp teams distribute reduction(\\)); (37, OpenMP, #pragma omp teams distribute reduction(|| : argc > 0 ? argv[1] : argv[2])); (106, OpenMP, #pragma omp teams distribute reduction(+ : m)); (20, OpenMP, #pragma omp teams distribute reduction()); (6, OpenMP, #pragma omp target); (42, OpenMP, #pragma omp teams distribute reduction(^ : S1)); (44, OpenMP, #pragma omp teams distribute reduction(+ : a, b, c, d, f)); (67, OpenMP, #pragma omp teams distribute reduction(&& : S2::S2sc)); (57, OpenMP, #pragma omp teams distribute reduction(- : da)); (32, OpenMP, #pragma omp teams distribute reduction(~ : argc)); (10, OpenMP, #pragma omp teams distribute reduction(-); (45, OpenMP, #pragma omp teams distribute reduction(max : h.b)); (5, OpenMP, #pragma omp teams distribute reduction(); (75, OpenMP, #pragma omp parallel private(k)); (18, OpenMP, #pragma omp teams distribute reduction(foo : argc); (38, OpenMP, #pragma omp teams distribute reduction(min : a, b, c, d, f)); (70, OpenMP, #pragma omp teams distribute private(i), reduction(+ : j), reduction(+ : q)); (79, OpenMP, #pragma omp teams distribute reduction(+ : r)); (41, OpenMP, #pragma omp teams distribute reduction(+ : ba)); (25, OpenMP, #pragma omp teams distribute reduction(&& : argc)); (81, OpenMP, #pragma omp teams distribute reduction(max : j)); (78, OpenMP, #pragma omp parallel reduction(min : i)); (4, OpenMP, #pragma omp teams distribute reduction(*)); (67, OpenMP, #pragma omp teams distribute reduction(+ : p), reduction(+ : p)); (44, OpenMP, #pragma omp teams distribute reduction(^ : fl)); (58, OpenMP, #pragma omp teams distribute reduction(+ : o)); (54, OpenMP, #pragma omp teams distribute reduction(+ : h, k, B::x)); (35, OpenMP, #pragma omp teams distribute reduction(* : ca)); (76, OpenMP, #pragma omp teams distribute reduction(+ : fl, z)); (48, OpenMP, #pragma omp teams distribute reduction(& : e, g)); (68, OpenMP, #pragma omp parallel shared(i)); (4, OpenMP, #pragma omp teams distribute reduction(| : argc,); (-21, OpenMP, #pragma omp teams distribute reduction); (38, OpenMP, #pragma omp teams distribute reduction(&& : S2::S2s))"}
{"predict": "(4, CUDA, HANDLE_ERROR(cudaGetDeviceProperties(&prop, whichDevice));); (2, CUDA, HANDLE_ERROR(cudaGetDevice(&whichDevice));)", "label": "(4, CUDA, checkCudaErrors(cudaGetDeviceProperties(&prop, whichDevice));); (2, CUDA, checkCudaErrors(cudaGetDevice(&whichDevice));)"}
{"predict": "(4, OpenMP, #pragma omp parallel for)", "label": "(4, OpenMP, #pragma omp parallel for)"}
{"predict": "(21, CUDA, extern __shared__ float entire_buffer[];)", "label": "(21, CUDA, extern __shared__ float entire_buffer[];)"}
{"predict": "(29, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &wrank);); (24, MPI, MPI_Init_thread(&argc, &argv, required, &provided);); (55, MPI, MPI_Finalize();); (52, MPI, MPI_T_finalize();); (23, MPI, MPI_T_init_thread(required, &provided);); (36, MPI, MPI_Abort(MPI_COMM_WORLD, 1);)", "label": "(29, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &wrank);); (24, MPI, MPI_Init_thread(&argc, &argv, required, &provided);); (55, MPI, MPI_Finalize();); (52, MPI, MPI_T_finalize();); (23, MPI, MPI_T_init_thread(required, &provided);); (36, MPI, MPI_Abort(MPI_COMM_WORLD, 1);)"}
{"predict": "(2, TBB, typedef std::vector<T, tbb::tbb_allocator<T> > container_type;); (56, TBB, ets_type vvs( typename container_type::size_type(25), minus_one, tbb::tbb_allocator<T>() );); (27, TBB, tbb::parallel_for ( tbb::blocked_range<int> (0, N, RANGE_MIN), parallel_vector_for_body<T,Allocator>( vs, allocator_name ) );); (57, TBB, tbb::parallel_for ( tbb::blocked_range<int> (0, N, RANGE_MIN), parallel_vector_for_body<T,Allocator>( vvs, allocator_name ) );); (25, TBB, tbb::parallel_reduce ( vs.range(1), pvrb );); (57, TBB, tbb::parallel_reduce ( vvs.range(1), pvrb2 );); (27, TBB, tbb::flattened2d<ets_type> fvs = flatten2d(vs);); (51, TBB, typedef typename std::vector< container_type, tbb::tbb_allocator<container_type> > ets_type;); (47, TBB, tbb::flattened2d<ets_type> fvvs = flatten2d(vvs);); (-5, TBB, typedef tbb::enumerable_thread_specific< container_type, Allocator<container_type> > ets_type;); (0, TBB, tbb::task_scheduler_init init(p);)", "label": "(30, TBB, tbb::parallel_reduce ( vs.range(1), pvrb );); (60, TBB, tbb::parallel_for ( tbb::blocked_range<int> (0, N, RANGE_MIN), parallel_vector_for_body<T,Allocator>( vvs, allocator_name ) );); (1, TBB, typedef std::vector<T, tbb::tbb_allocator<T> > container_type;); (5, TBB, tbb::task_scheduler_init init(p);); (10, TBB, if (Verbose && t == 0) t0 = tbb::tick_count::now();); (64, TBB, tbb::flattened2d<ets_type> fvvs = flatten2d(vvs);); (59, TBB, tbb::parallel_reduce ( vvs.range(1), pvrb2 );); (-5, TBB, tbb::tick_count t0;); (30, TBB, tbb::flattened2d<ets_type> fvs = flatten2d(vs);); (50, TBB, ets_type vvs( typename container_type::size_type(25), minus_one, tbb::tbb_allocator<T>() );); (-6, TBB, typedef tbb::enumerable_thread_specific< container_type, Allocator<container_type> > ets_type;); (66, TBB, REMARK(\"done\\nparallel %s, %d, %g, %g\\n\", test_name, p, result_value, ( tbb::tick_count::now() - t0).seconds());)"}
{"predict": "(1, SYCL, EasyCL *cl = EasyCL::createForFirstGpuOtherwiseCpu();)", "label": "(1, SYCL, EasyCL *cl = EasyCL::createForFirstGpuOtherwiseCpu();)"}
{"predict": "(14, OpenMP, #pragma omp parallel for)", "label": "(14, OpenMP, #pragma omp parallel for)"}
{"predict": "(12, OpenCL, status = clEnqueueNDRangeKernel(pCmdQ, mockKernel.mockMultiDeviceKernel, testedWorkDim, nullptr, globalWorkSize, localWorkSize, 0, nullptr, nullptr);)", "label": "(12, OpenCL, status = clEnqueueNDRangeKernel(pCmdQ, mockKernel.mockMultiDeviceKernel, testedWorkDim, nullptr, globalWorkSize, localWorkSize, 0, nullptr, nullptr);)"}
{"predict": "(23, CUDA, CSC(cudaGetLastError(), STATUS_FAILURE);)", "label": "(23, CUDA, CSC(cudaGetLastError(), STATUS_FAILURE);)"}
{"predict": "(23, TBB, tbb::flow::make_edge( exe_node, *receivers[r] );); (32, TBB, tbb::flow::remove_edge( exe_node, *receivers[r] );); (7, TBB, tbb::flow::continue_node< OutputType > exe_node( g, cf );); (37, TBB, body_copy = tbb::flow::copy_body< inc_functor<OutputType> >( exe_node );); (44, TBB, g.reset(tbb::flow::rf_reset_bodies);); (0, TBB, tbb::flow::graph g;); (7, TBB, exe_node.register_predecessor( fake_sender );)", "label": "(46, TBB, g.reset(tbb::flow::rf_reset_bodies);); (21, TBB, tbb::flow::make_edge( exe_node, *receivers[r] );); (7, TBB, tbb::flow::continue_node< OutputType > exe_node( g, cf );); (22, TBB, utils::NativeParallelFor( p, parallel_puts<tbb::flow::continue_msg>(exe_node) );); (36, TBB, body_copy = tbb::flow::copy_body< inc_functor<OutputType> >( exe_node );); (-1, TBB, tbb::flow::graph g;); (29, TBB, tbb::flow::remove_edge( exe_node, *receivers[r] );); (5, TBB, tbb::detail::d2::register_predecessor(exe_node, fake_sender);)"}
{"predict": "(6, MPI, MPI_Init(&argc, &argv);); (47, MPI, MPI_Finalize();); (5, MPI, MPI_Comm_size(MPI_COMM_WORLD, &ntasks);); (5, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (21, MPI, MPI_Barrier(MPI_COMM_WORLD);); (21, MPI, auto t0 = MPI_Wtime();); (36, MPI, auto t1 = MPI_Wtime();)", "label": "(6, MPI, MPI_Init(&argc, &argv);); (47, MPI, MPI_Finalize();); (7, MPI, MPI_Comm_size(MPI_COMM_WORLD, &ntasks);); (7, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (38, MPI, double t1 = MPI_Wtime();); (20, MPI, MPI_Barrier(MPI_COMM_WORLD);); (20, MPI, double t0 = MPI_Wtime();)"}
{"predict": "(1, TBB, tbb::task_arena a(n_threads, n_threads);)", "label": "(1, TBB, tbb::task_arena a(1);); (13, TBB, CHECK(tbb::this_task_arena::max_concurrency() == 2);)"}
{"predict": "(13, OpenMP, #pragma omp teams distribute parallel for proc_bind(master); (34, OpenMP, #pragma omp teams distribute parallel for proc_bind(spread)); (16, OpenMP, #pragma omp teams distribute parallel for proc_bind(close), proc_bind(spread)); (30, OpenMP, #pragma omp teams distribute parallel for proc_bind(mapper)); (21, OpenMP, #pragma omp teams distribute parallel for proc_bind(x)); (4, OpenMP, #pragma omp teams distribute parallel for proc_bind(); (7, OpenMP, #pragma omp teams distribute parallel for proc_bind()); (23, OpenMP, #pragma omp teams distribute parallel for proc_bind(master)); (-4, OpenMP, #pragma omp target); (28, OpenMP, #pragma omp teams distribute parallel for proc_bind(none)); (11, OpenMP, #pragma omp teams distribute parallel for proc_bind(master,); (6, OpenMP, #pragma omp teams distribute parallel for proc_bind(master)", "label": "(31, OpenMP, #pragma omp teams distribute parallel for proc_bind(master)); (25, OpenMP, #pragma omp teams distribute parallel for proc_bind(x)); (4, OpenMP, #pragma omp teams distribute parallel for proc_bind); (34, OpenMP, #pragma omp teams distribute parallel for proc_bind(spread)); (6, OpenMP, #pragma omp teams distribute parallel for proc_bind(); (9, OpenMP, #pragma omp teams distribute parallel for proc_bind()); (16, OpenMP, #pragma omp teams distribute parallel for proc_bind(close), proc_bind(spread)); (-2, OpenMP, #pragma omp target); (27, OpenMP, #pragma omp parallel proc_bind(close)); (9, OpenMP, #pragma omp teams distribute parallel for proc_bind(master)"}
{"predict": "(42, CUDA, cudaFree(res_dev);); (35, CUDA, cudaMalloc(&res_dev, sizeof(float));); (37, CUDA, cudaMemcpy(&res_host, res_dev, sizeof(float), cudaMemcpyDeviceToHost);)", "label": "(42, CUDA, cudaFree(res_dev);); (35, CUDA, cudaMalloc(&res_dev, sizeof(float));); (37, CUDA, cudaMemcpy(&res_host, res_dev, sizeof(float), cudaMemcpyDeviceToHost);)"}
{"predict": "(8, CUDA, extern __shared__ __align__(sizeof(double)) unsigned char buf_[];)", "label": "(11, CUDA, extern __shared__ __align__(sizeof(double)) unsigned char buf_[];)"}
{"predict": "(135, MPI, MPI_Wait(&req, MPI_STATUS_IGNORE);); (21, MPI, MPI_Init_thread(&argc, &argv, required, &provided);); (191, MPI, MPI_Finalize();); (25, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (127, MPI, MPI_Test(&req, &completed, MPI_STATUS_IGNORE);); (32, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);)", "label": "(21, MPI, MPI_Init_thread(&argc, &argv, required, &provided);); (193, MPI, MPI_Finalize();); (25, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (23, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (124, MPI, MPI_Test(&req, &completed, MPI_STATUS_IGNORE);)"}
{"predict": "(41, MPI, MPIU_Assert( MPI_Op_free_list == NULL );); (41, MPI, MPIU_Assert( MPI_Type_free_list == NULL );); (85, MPI, Mpi.Instance.mpi_state = MPI_STATE_FINALIZED;); (38, MPI, MPIU_Assert( MPI_Abort_free_list == NULL );); (39, MPI, MPIU_Assert( MPI_Win_free_list == NULL );)", "label": "(40, MPI, mpi_errno = Mpi.Finalize();); (86, MPI, Mpi.CompleteFinalize();)"}
{"predict": "(44, MPI, MPI_T_finalize();); (19, MPI, MPI_T_init_thread(required, &provided);)", "label": "(44, MPI, MPI_T_finalize();); (19, MPI, MPI_T_init_thread(required, &provided);)"}
{"predict": "(147, MPI, MPI_Allgather(&end_offset, 1, ADIO_OFFSET, end_offsets, 1, ADIO_OFFSET, fd->comm);); (60, MPI, MPI_Comm_rank(fd->comm, &myrank);); (144, MPI, MPI_Allgather(&start_offset, 1, ADIO_OFFSET, st_offsets, 1, ADIO_OFFSET, fd->comm);); (146, MPI, MPI_Allgather(&count_sizes, 1, ADIO_OFFSET, count_sizes, 1, ADIO_OFFSET, fd->comm);)", "label": "(141, MPI, MPI_Allgather(&end_offset, 1, ADIO_OFFSET, end_offsets, 1, ADIO_OFFSET, fd->comm);); (59, MPI, MPI_Comm_rank(fd->comm, &myrank);); (138, MPI, MPI_Allgather(&start_offset, 1, ADIO_OFFSET, st_offsets, 1, ADIO_OFFSET, fd->comm);); (395, MPI, MPI_Type_size_x(datatype, &size);); (94, MPI, MPI_Type_size_x(datatype, &buftype_size);)"}
{"predict": "(41, OpenMP, lis2mdl_offset_temp_comp_set(&dev_ctx, PROPERTY_ENABLE);)", "label": "(41, OpenMP, lis2mdl_offset_temp_comp_set(&dev_ctx, PROPERTY_ENABLE);)"}
{"predict": "(67, OpenMP, kmp_gomp_depends_info_t gomp_depends(depend);); (100, OpenMP, __kmpc_omp_wait_deps(&loc, gtid, ndeps, dep_list, 0, NULL);); (74, OpenMP, __kmpc_omp_task(&loc, gtid, task);); (63, OpenMP, __kmpc_omp_task_with_deps(&loc, gtid, task, ndeps_cnv, dep_list, 0, NULL);)", "label": "(67, OpenMP, kmp_gomp_depends_info_t gomp_depends(depend);); (100, OpenMP, __kmpc_omp_wait_deps(&loc, gtid, ndeps, dep_list, 0, NULL);); (74, OpenMP, __kmpc_omp_task(&loc, gtid, task);); (71, OpenMP, __kmpc_omp_task_with_deps(&loc, gtid, task, ndeps_cnv, dep_list, 0, NULL);)"}
{"predict": "(10, MPI, MPI_Comm c_comm = MPI_Comm_f2c(*comm);)", "label": "(10, MPI, MPI_Comm c_comm = MPI_Comm_f2c(*comm);)"}
{"predict": "(98, OpenMP, #pragma omp barrier); (66, OpenMP, #pragma omp target enter data map(alloc: m_gate[:nCells], Vm[:nCells])); (160, OpenMP, #pragma omp target exit data map(delete: m_gate[:nCells], Vm[:nCells])); (85, OpenMP, kernel_endtime=sync_endtime(\"Finished kernel iteration\");); (100, OpenMP, #pragma omp target teams distribute parallel for thread_limit(128) map(tofrom: m_gate[:nCells], Vm[:nCells])); (97, OpenMP, kernel_runtime=kernel_endtime-kernel_starttime;); (60, OpenMP, #pragma omp target enter data map(to: m_gate[:nCells], Vm[:nCells])); (54, OpenMP, #pragma omp target map(tofrom: transfer_starttime, transfer_endtime)); (153, OpenMP, #pragma omp target update from(m_gate[:nCells], Vm[:nCells])); (173, OpenMP, rank0_printf_timestamp(\"Kernel timing %ld %.8f  cells %ld  %s  run time %.3f seconds\\n\", iterations, kernel_mem_used, nCells, VARIANT_DESC, kernel_runtime);); (177, OpenMP, rank0_printf_timestamp(\"Total elapsed time %.3f seconds\\n\", secs_elapsed());); (57, OpenMP, transfer_starttime=sync_starttime(\"Starting kernel iteration\");); (147, OpenMP, #pragma omp target update to(m_gate[:nCells], Vm[:nCells]))", "label": "(162, OpenMP, #pragma omp target exit data map(delete:Vm[:nCells])); (66, OpenMP, #pragma omp target enter data map(to: m_gate[:nCells])); (149, OpenMP, #pragma omp target update from (m_gate[0:nCells])); (65, OpenMP, #pragma omp target enter data map(to: Vm[:nCells])); (102, OpenMP, #pragma omp target teams distribute parallel for); (156, OpenMP, #pragma omp target exit data map(delete:m_gate[:nCells]))"}
{"predict": "(6, MPI, MPI_Type_get_attr(type, key[i], &val_p, &flag);)", "label": "(6, MPI, MPI_Type_get_attr(type, key[i], &val_p, &flag);)"}
{"predict": "(7, OpenMP, #pragma omp parallel)", "label": "(7, OpenMP, #pragma omp for nowait schedule(runtime))"}
{"predict": "(9, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);)", "label": "(9, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);)"}
{"predict": "(6, CUDA, extern __shared__ float s_data[];)", "label": "(6, CUDA, extern __shared__ float s_data[];)"}
{"predict": "(37, MPI, MPI_Info_get_nkeys(infos[i], &nkeys);); (74, MPI, MPI_Info_free(&infos[i]);); (23, MPI, MPI_Info_get_nkeys(infos[0], &nkeys);); (17, MPI, MPI_Info_create(&infos[i]);); (54, MPI, MPI_Info_get(infos[i], keystr, sizeof(valstr), valstr, &flag);)", "label": "(10, MPI, MPI_Info_create(&infos[i]);); (57, MPI, MPI_Info_get(infos[i], key, sizeof(value), value, &flag);); (47, MPI, MPI_Info_get_nthkey(infos[i], j, key);); (22, MPI, MPI_Info_get_nkeys(infos[0], &nkeys);); (33, MPI, MPI_Info_get_nkeys(infos[i], &nkeys);); (71, MPI, MPI_Info_free(&infos[i]);)"}
{"predict": "(5, OpenMP, #pragma omp parallel for)", "label": "(5, OpenMP, #pragma omp parallel for)"}
{"predict": "(13, MPI, MPI_Ireduce_scatter_block_c(sendbuf, recvbuf, count, datatype, MPI_SUM, comm, &req);); (9, MPI, MPI_Reduce_scatter_block_c(sendbuf, recvbuf, count, datatype, MPI_SUM, comm);); (12, MPI, MPI_Wait(&req, MPI_STATUS_IGNORE);)", "label": "(14, MPI, MPI_Wait(&req, MPI_STATUS_IGNORE);); (12, MPI, MPI_Ireduce_scatter_block_c(sendbuf, recvbuf, count, datatype, MPI_SUM, comm, &req);); (8, MPI, MPI_Reduce_scatter_block_c(sendbuf, recvbuf, count, datatype, MPI_SUM, comm);)"}
{"predict": "(29, CUDA, checkCudaErrors(cudaGetDeviceCount(&GPU_N));); (220, CUDA, checkCudaErrors(cufftXtFree(d_out_filter_kernel));); (120, CUDA, checkCudaErrors(cudaGetDeviceProperties(&deviceProp, whichGPUs[i]));); (217, CUDA, checkCudaErrors(cufftXtFree(d_out_signal));); (100, CUDA, checkCudaErrors(cufftCreate(&plan_input));); (41, CUDA, checkCudaErrors(cudaGetDeviceProperties(&deviceProp, i));); (212, CUDA, checkCudaErrors(cufftXtFree(d_signal));); (217, CUDA, checkCudaErrors(cufftDestroy(plan_input));); (211, CUDA, checkCudaErrors(cufftXtFree(d_filter_kernel));)", "label": "(29, CUDA, checkCudaErrors(cudaGetDeviceCount(&GPU_N));); (219, CUDA, checkCudaErrors(cufftXtFree(d_out_filter_kernel));); (120, CUDA, checkCudaErrors(cudaGetDeviceProperties(&deviceProp, whichGPUs[i]));); (216, CUDA, checkCudaErrors(cufftXtFree(d_out_signal));); (100, CUDA, checkCudaErrors(cufftCreate(&plan_input));); (40, CUDA, checkCudaErrors(cudaGetDeviceProperties(&deviceProp, i));); (211, CUDA, checkCudaErrors(cufftXtFree(d_signal));); (216, CUDA, checkCudaErrors(cufftDestroy(plan_input));); (210, CUDA, checkCudaErrors(cufftXtFree(d_filter_kernel));)"}
{"predict": "(58, MPI, err = MPI_Win_fence(0, win);); (36, MPI, MPI_Type_get_extent(MPI_INT, &tmp_lb, &extent);); (55, MPI, MPI_Win_create(recvBuf, totsize * extent, extent, MPI_INFO_NULL, comm, &win);); (29, MPI, MPI_Type_indexed(2, counts, displs, MPI_INT, &originType);); (55, MPI, err = MPI_Put(srcBuf, 1, originType, dest, 0, totsize, MPI_INT, win);); (76, MPI, MPI_Win_free(&win);); (27, MPI, MPI_Type_commit(&originType);); (29, MPI, MPI_Comm_size(comm, &size);); (54, MPI, MPI_Win_fence(0, win);); (26, MPI, MPI_Comm_rank(comm, &rank);); (74, MPI, MPI_Type_free(&originType);); (58, MPI, MPI_Win_lock(MPI_LOCK_EXCLUSIVE, dest, 0, win);); (64, MPI, MPI_Win_unlock(dest, win);); (32, MPI, MPI_Abort(MPI_COMM_WORLD, 1);)", "label": "(56, MPI, MPI_Type_get_extent(MPI_INT, &tmp_lb, &extent);); (33, MPI, MPI_Comm_size(comm, &size);); (55, MPI, MPI_Win_create(recvBuf, totsize * extent, extent, MPI_INFO_NULL, comm, &win);); (24, MPI, MPI_Type_indexed(2, counts, displs, MPI_INT, &originType);); (54, MPI, MPI_Win_fence(0, win);); (23, MPI, MPI_Type_commit(&originType);); (77, MPI, MPI_Win_free(&win);); (75, MPI, MPI_Type_free(&originType);); (58, MPI, err = MPI_Win_fence(0, win);); (53, MPI, MPI_Win_set_errhandler(win, MPI_ERRORS_RETURN);); (33, MPI, MPI_Abort(MPI_COMM_WORLD, 1);); (22, MPI, MPI_Comm_rank(comm, &rank);); (52, MPI, err = MPI_Put(srcBuf, 1, originType, dest, 0, totsize, MPI_INT, win);)"}
{"predict": "(25, OpenMP, #pragma omp parallel firstprivate(i)); (17, OpenMP, #pragma omp parallel firstprivate(h, B::x)); (32, OpenMP, #pragma omp parallel firstprivate(m)); (6, OpenMP, #pragma omp parallel firstprivate(argc); (11, OpenMP, #pragma omp parallel firstprivate(argv[1])); (18, OpenMP, #pragma omp parallel firstprivate(j)); (5, OpenMP, #pragma omp parallel firstprivate(argc,); (11, OpenMP, #pragma omp parallel firstprivate(da)); (12, OpenMP, #pragma omp parallel firstprivate(S2::S2s)); (9, OpenMP, #pragma omp parallel firstprivate(ca)); (1, OpenMP, #pragma omp parallel firstprivate(argc > 0 ? argv[1] : argv[2])); (-4, OpenMP, #pragma omp parallel firstprivate(); (11, OpenMP, #pragma omp parallel firstprivate(e, g)); (-3, OpenMP, #pragma omp parallel firstprivate(argc, z)); (3, OpenMP, #pragma omp parallel firstprivate(ba)); (-3, OpenMP, #pragma omp parallel firstprivate(a, b, c, d, f)); (10, OpenMP, #pragma omp parallel private(i), firstprivate(i)); (13, OpenMP, #pragma omp parallel firstprivate(i) private(i))", "label": "(8, OpenMP, #pragma omp task private(); (17, OpenMP, #pragma omp task private(ca)); (20, OpenMP, #pragma omp task private(threadvar, B::x)); (10, OpenMP, #pragma omp task private(argc argv)); (17, OpenMP, #pragma omp task private(e, g)); (31, OpenMP, #pragma omp task private(m)); (1, OpenMP, #pragma omp task private); (9, OpenMP, #pragma omp task private(argv[1])); (1, OpenMP, #pragma omp task private()); (19, OpenMP, #pragma omp task private(j)); (4, OpenMP, #pragma omp task private(S1)); (0, OpenMP, #pragma omp task private(argc,); (5, OpenMP, #pragma omp task private(ba) allocate , allocate(, allocate(omp_default , allocate(omp_default_mem_alloc, allocate(omp_default_mem_alloc:, allocate(omp_default_mem_alloc: argc, allocate(omp_default_mem_alloc: argv), allocate(argv)); (7, OpenMP, #pragma omp task private(S2::S2s)); (5, OpenMP, #pragma omp task private(da)); (-3, OpenMP, #pragma omp task private(argc > 0 ? argv[1] : argv[2])); (11, OpenMP, #pragma omp task private(i)); (6, OpenMP, #pragma omp task shared(i), private(i)); (14, OpenMP, #pragma omp task private(i) allocate(omp_thread_mem_alloc: i)); (6, OpenMP, #pragma omp task firstprivate(i) private(i)); (10, OpenMP, #pragma omp task firstprivate(i)); (-11, OpenMP, #pragma omp task private(argc); (-7, OpenMP, #pragma omp task private(z, a, b, c, d, f))"}
{"predict": "(24, OpenMP, omp_target_free(d_a, omp_get_default_device());); (12, OpenMP, d_a = (int *)omp_target_alloc(DataSize, omp_get_default_device());); (18, OpenMP, #pragma omp target update to(p_a[0:N])); (12, OpenMP, omp_target_associate_ptr(p_a, d_a, DataSize, 0, omp_get_default_device());); (19, OpenMP, omp_target_disassociate_ptr(p_a, omp_get_default_device());)", "label": "(25, OpenMP, omp_target_free(d_a, omp_get_default_device());); (12, OpenMP, d_a = (int *)omp_target_alloc(DataSize, omp_get_default_device());); (18, OpenMP, #pragma omp target update to(p_a)); (20, OpenMP, omp_target_disassociate_ptr(p_a, omp_get_default_device());); (11, OpenMP, omp_target_associate_ptr(p_a, d_a, DataSize, 0, omp_get_default_device());)"}
{"predict": "(70, MPI, MPI_Type_free(&newtype);); (35, MPI, err = MPI_Type_create_indexed_block(count, 2, disp, vectype, &newtype);); (43, MPI, err = MPI_Type_size(MPI_INT, &int_size);); (24, MPI, err = MPI_Type_vector(2, 1, 2, MPI_INT, &vectype);); (70, MPI, MPI_Type_free(&vectype);); (40, MPI, err = MPI_Type_size(newtype, &size);); (22, MPI, MPI_Type_commit(&vectype);); (25, MPI, MPI_Type_commit(&newtype);)", "label": "(35, MPI, err = MPI_Type_create_indexed_block(count, 1, disp, vectype, &newtype);); (42, MPI, MPI_Type_size(MPI_INT, &int_size);); (58, MPI, MPI_Type_commit(&newtype);); (24, MPI, err = MPI_Type_vector(2, 1, 2, MPI_INT, &vectype);); (41, MPI, err = MPI_Type_size(newtype, &size);); (74, MPI, MPI_Type_free(&newtype);); (72, MPI, MPI_Type_free(&vectype);)"}
{"predict": "(44, OpenCL, clReleaseEvent(retEvent);)", "label": "(44, OpenCL, clReleaseEvent(retEvent);)"}
{"predict": "(23, CUDA, ASSERT_EQ(cudaEventRecord(wm.ready, 0), cudaSuccess);); (15, CUDA, ASSERT_EQ(cudaMalloc(&p, i), cudaSuccess);); (2, CUDA, EXPECT_EQ(cudaMalloc(&_junk, junk_size), cudaSuccess);); (35, CUDA, ASSERT_EQ(cudaEventSynchronize(wm.ready), cudaSuccess);); (45, CUDA, ASSERT_EQ(cudaDeviceSynchronize(), cudaSuccess);); (14, CUDA, ASSERT_EQ(cudaFree(p), cudaSuccess);)", "label": "(24, CUDA, ASSERT_EQ(cudaEventRecord(wm.ready, 0), cudaSuccess);); (25, CUDA, cvcuda::WorkspaceMemAllocator wa(wm, cudaStream_t(0));); (51, CUDA, EXPECT_EQ(cudaEventQuery(wm.ready), cudaSuccess);); (1, CUDA, ASSERT_EQ(cudaMalloc(&_junk, junk_size), cudaSuccess);); (14, CUDA, ASSERT_EQ(cudaMemset(junk.get(), i, junk_size), cudaSuccess);); (6, CUDA, ASSERT_EQ(cudaEventCreateWithFlags(&wm.ready, cudaEventDisableTiming), cudaSuccess);); (26, CUDA, ASSERT_EQ(cudaDeviceSynchronize(), cudaSuccess);); (50, CUDA, ASSERT_EQ(cudaEventDestroy(wm.ready), cudaSuccess);); (19, CUDA, EXPECT_EQ(cudaEventQuery(wm.ready), cudaErrorNotReady);)"}
{"predict": "(65, CUDA, CHECK_CUDA(cudaMalloc(&dy, dataSize * sizeof(int32_t)));); (100, CUDA, CHECK_CUDA(cudaFree(dUpdates));); (97, CUDA, CHECK_HIEDNN(hiednnDestroyCudaHandle(handle));); (58, CUDA, CHECK_CUDA(cudaMalloc(&dUpdates, updatesSize * sizeof(int32_t)));); (37, CUDA, CHECK_HIEDNN(hiednnCreateCudaHandle(&handle));); (57, CUDA, CHECK_CUDA(cudaMalloc(&dIndices, indicesSize * sizeof(int32_t)));); (93, CUDA, CHECK_CUDA(cudaFree(dy));); (36, CUDA, CHECK_HIEDNN(hiednnSetCudaStream(handle, 0));); (90, CUDA, CHECK_CUDA(cudaFree(dIndices));); (51, CUDA, CHECK_CUDA(cudaMalloc(&dx, dataSize * sizeof(int32_t)));); (87, CUDA, CHECK_CUDA(cudaFree(dx));)", "label": "(65, CUDA, CHECK_CUDA(cudaMalloc(&dy, dataSize * sizeof(int32_t)));); (100, CUDA, CHECK_CUDA(cudaFree(dUpdates));); (62, CUDA, CHECK_CUDA(cudaMalloc(&dUpdates, updatesSize * sizeof(int32_t)));); (94, CUDA, CHECK_HIEDNN(hiednnDestroyCudaHandle(handle));); (37, CUDA, CHECK_HIEDNN(hiednnCreateCudaHandle(&handle));); (97, CUDA, CHECK_CUDA(cudaFree(dy));); (56, CUDA, CHECK_CUDA(cudaMalloc(&dx, dataSize * sizeof(int32_t)));); (93, CUDA, CHECK_CUDA(cudaFree(dIndices));); (36, CUDA, CHECK_HIEDNN(hiednnSetCudaStream(handle, 0));); (90, CUDA, CHECK_CUDA(cudaFree(dx));); (53, CUDA, CHECK_CUDA(cudaMalloc(&dIndices, indicesSize * sizeof(int32_t)));)"}
{"predict": "(29, TBB, tbb::flow::input_node<T> src2(g, source_body<T>() );); (13, TBB, tbb::flow::input_node<T> src3(g, source_body<T>() );); (3, TBB, tbb::flow::make_edge( src, dest );); (15, TBB, tbb::flow::function_node<T,bool> dest3(g, tbb::flow::unlimited, b3 );); (27, TBB, tbb::flow::function_node<T,bool,tbb::flow::rejecting> dest2(g, tbb::flow::serial, b2 );); (3, TBB, tbb::flow::make_edge( src3, dest3 );); (25, TBB, tbb::flow::make_edge( src2, dest2 );); (36, TBB, tbb::flow::input_node<T> src_copy(src);); (-4, TBB, tbb::flow::graph g;); (-4, TBB, tbb::flow::input_node<T> src(g, source_body<T>() );); (21, TBB, tbb::flow::make_edge( src, dest2 );)", "label": "(28, TBB, tbb::flow::input_node<T> src2(g, my_input_body<T>() );); (18, TBB, tbb::flow::function_node<T,bool> dest3(g, tbb::flow::unlimited, b3 );); (31, TBB, tbb::flow::function_node<T,bool,tbb::flow::rejecting> dest2(g, tbb::flow::serial, b2 );); (3, TBB, tbb::flow::make_edge( src, dest );); (0, TBB, tbb::flow::input_node<T> src(g, my_input_body<T>() );); (29, TBB, tbb::flow::make_edge( src2, dest2 );); (36, TBB, tbb::flow::input_node<T> src_copy(src);); (13, TBB, tbb::flow::make_edge( src3, dest3 );); (-5, TBB, tbb::flow::graph g;); (6, TBB, tbb::flow::input_node<T> src3(g, my_input_body<T>() );)"}
{"predict": "(26, CUDA, CUDA_CHECK_AND_EXIT(cudaMallocManaged(&output_data, output_size_bytes));); (18, CUDA, CUDA_CHECK_AND_EXIT(cudaMallocManaged(&input_data, input_size_bytes));); (47, CUDA, CUDA_CHECK_AND_EXIT(cudaFree(output_data));); (39, CUDA, CUDA_CHECK_AND_EXIT(cudaDeviceSynchronize());); (37, CUDA, CUDA_CHECK_AND_EXIT(cudaPeekAtLastError());); (44, CUDA, CUDA_CHECK_AND_EXIT(cudaFree(input_data));)", "label": "(26, CUDA, CUDA_CHECK_AND_EXIT(cudaMallocManaged(&output_data, output_size_bytes));); (18, CUDA, CUDA_CHECK_AND_EXIT(cudaMallocManaged(&input_data, input_size_bytes));); (48, CUDA, CUDA_CHECK_AND_EXIT(cudaFree(output_data));); (39, CUDA, CUDA_CHECK_AND_EXIT(cudaDeviceSynchronize());); (37, CUDA, CUDA_CHECK_AND_EXIT(cudaPeekAtLastError());); (44, CUDA, CUDA_CHECK_AND_EXIT(cudaFree(input_data));)"}
{"predict": "(84, CUDA, cudaFuncGetAttributes(&cuattr, slsum_fmod_inv_gpu_mrhs_nvshmem);); (87, CUDA, cudaOccupancyMaxPotentialBlockSize(&minGridSize,&myblockSize,(const void *) dwait_bcrd ,0,0 );); (83, CUDA, cudaDeviceSetLimit(cudaLimitStackSize, cuattr.localSizeBytes);); (138, CUDA, CUDA_CHECK(cudaDeviceSynchronize());); (76, CUDA, cudaStreamCreateWithFlags(&stream[i], cudaStreamNonBlocking);); (133, CUDA, CUDA_CHECK(cudaGetLastError());); (137, CUDA, CUDA_CHECK(cudaStreamDestroy(stream[i]));)", "label": "(85, CUDA, cudaDeviceSetLimit(cudaLimitStackSize, cuattr.localSizeBytes);); (140, CUDA, CUDA_CHECK(cudaDeviceSynchronize());); (78, CUDA, cudaStreamCreateWithFlags(&stream[i], cudaStreamNonBlocking);); (135, CUDA, CUDA_CHECK(cudaGetLastError());); (80, CUDA, cudaFuncGetAttributes(&cuattr, slsum_fmod_inv_gpu_mrhs_nvshmem);); (138, CUDA, CUDA_CHECK(cudaStreamDestroy(stream[i]));); (82, CUDA, cudaOccupancyMaxPotentialBlockSize(&minGridSize,&myblockSize,(const void *) swait_bcrd ,0,0 );)"}
{"predict": "(2, CUDA, __shared__ unsigned int s_data[2*WARP_SIZE];); (0, CUDA, __shared__ unsigned int d_data[2*WARP_SIZE];)", "label": "(2, CUDA, __shared__ volatile unsigned int s_data[WARP_SIZE*2];)"}
{"predict": "(29, OpenCL, error |= clSetKernelArg(kernel, 1, sizeof(value), &value);); (27, OpenCL, error |= clSetKernelArg(kernel, 0, sizeof(dst), &dst);)", "label": "(29, OpenCL, error |= clSetKernelArg(kernel, 1, sizeof(value), &value);); (27, OpenCL, error |= clSetKernelArg(kernel, 0, sizeof(dst), &dst);)"}
{"predict": "(8, MPI, tim::settings::mpi_init()       = false;); (8, MPI, tim::settings::mpi_finalize()   = false;)", "label": "(8, MPI, tim::settings::mpi_init()       = false;); (8, MPI, tim::settings::mpi_finalize()   = false;)"}
{"predict": "(19, OpenMP, #pragma omp parallel); (8, OpenMP, int nThreads = omp_get_max_threads();)", "label": "(19, OpenMP, #pragma omp parallel); (0, OpenMP, int nThreads = omp_get_max_threads();)"}
{"predict": "(4, TBB, using MyVector = oneapi::tbb::concurrent_vector<move_support_tests::Foo, MyAllocator>;); (8, TBB, oneapi::tbb::parallel_for(oneapi::tbb::blocked_range<std::size_t>(0, 10000*s, 100), GrowToAtLeast<MyVector, use_two_arg_form>(v, copy_from));)", "label": "(4, TBB, using MyVector = oneapi::tbb::concurrent_vector<move_support_tests::Foo, MyAllocator>;); (8, TBB, oneapi::tbb::parallel_for(oneapi::tbb::blocked_range<std::size_t>(0, 10000*s, s), GrowToAtLeast<MyVector>(use_two_arg_form, v, copy_from), oneapi::tbb::simple_partitioner());)"}
{"predict": "(144, MPI, MPI_Group_compare(g1, g45, &result);); (109, MPI, MPI_Group_range_excl(g1, 1, range, &g4);); (76, MPI, MPI_Group_free(&g1);); (141, MPI, MPI_Group_compare(g3, MPI_GROUP_EMPTY, &result);); (83, MPI, MPI_Group_excl(g1, g1size, lranks, &g6);); (108, MPI, MPI_Group_compare(g2, MPI_GROUP_EMPTY, &result);); (20, MPI, MPI_Group_incl(g1, 3, ranks, &g45);); (153, MPI, MPI_Group_compare(g7, MPI_GROUP_EMPTY, &result);); (34, MPI, MPI_Group_translate_ranks(g45, 3, rin, g1, rout);); (116, MPI, MPI_Group_range_excl(g1, 1, range, &g7);); (119, MPI, MPI_Group_compare(g6, MPI_GROUP_EMPTY, &result);); (85, MPI, MPI_Group_range_incl(g1, 1, range, &g2);); (28, MPI, MPI_Comm_group(MPI_COMM_WORLD, &selfgroup);); (139, MPI, MPI_Group_compare(g5, MPI_GROUP_EMPTY, &result);); (30, MPI, MPI_Group_translate_ranks(g45, 1, rin, selfgroup, rout);); (18, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (120, MPI, MPI_Group_difference(g1, g2, &g3);); (74, MPI, MPI_Group_size(g1, &g1size);); (99, MPI, MPI_Group_compare(g4, MPI_GROUP_EMPTY, &result);); (-1, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (128, MPI, MPI_Group_union(g6, g7, &g6);); (66, MPI, MPI_Group_range_incl(g1, 1, range, &g5);); (133, MPI, MPI_Group_free(&g45);); (10, MPI, MPI_Group_incl(g1, 3, ranks, &g1);); (11", "label": "(84, MPI, MPI_Group_excl(g1, g1size, lranks, &g6);); (27, MPI, MPI_Group_size(g2, &size);); (41, MPI, MPI_Group_translate_ranks(g2, 3, rin, g1, rout);); (70, MPI, MPI_Group_free(&selfgroup);); (105, MPI, MPI_Group_free(&g2);); (24, MPI, MPI_Group_rank(g2, &rank);); (117, MPI, MPI_Group_compare(MPI_GROUP_EMPTY, g4, &result);); (123, MPI, MPI_Group_free(&g45);); (113, MPI, MPI_Group_union(g4, g5, &g45);); (105, MPI, MPI_Group_range_excl(g1, 1, range, &g5);); (109, MPI, MPI_Group_range_incl(g1, 1, range, &g4);); (118, MPI, MPI_Group_free(&g5);); (-1, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (12, MPI, MPI_Group_incl(g1, 3, ranks, &g2);); (114, MPI, MPI_Group_free(&g4);); (140, MPI, MPI_Group_free(&g1);); (72, MPI, MPI_Group_free(&g6);); (62, MPI, MPI_Group_size(g1, &g1size);); (34, MPI, MPI_Comm_group(MPI_COMM_SELF, &selfgroup);); (-10, MPI, MPI_Comm_group(MPI_COMM_WORLD, &g1);); (-10, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &myrank);); (41, MPI, MPI_Group_translate_ranks(g1, size, rin, selfgroup, rout);); (32, MPI, MPI_Group_translate_ranks(selfgroup, 1, rin, g1, rout);)"}
{"predict": "(1, MPI, MPI_Init(&argc, &argv);); (58, MPI, MPI_Finalize();); (3, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (1, MPI, MPI_Comm_size(MPI_COMM_WORLD, &P);)", "label": "(1, MPI, MPI_Init(&argc, &argv);); (58, MPI, MPI_Finalize();); (3, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (1, MPI, MPI_Comm_size(MPI_COMM_WORLD, &P);)"}
{"predict": "(9, CUDA, extern __shared__ __align__(sizeof(float)) uchar s[];)", "label": "(7, CUDA, extern __shared__ __align__(sizeof(float)) uchar s[];)"}
{"predict": "(20, OpenMP, #pragma omp for); (36, OpenMP, #pragma omp cancel parallel); (1, OpenMP, #pragma omp section); (6, OpenMP, #pragma omp cancel sections); (14, OpenMP, #pragma omp parallel sections); (2, OpenMP, #pragma omp cancel parallel); (14, OpenMP, #pragma omp parallel for); (-3, OpenMP, #pragma omp cancel); (-2, OpenMP, #pragma omp cancel unknown); (-5, OpenMP, #pragma omp parallel cancel); (14, OpenMP, #pragma omp cancel for); (17, OpenMP, #pragma omp cancel parallel); (32, OpenMP, #pragma omp parallel reduction(+:r)); (-6, OpenMP, #pragma omp cancel sections)", "label": "(5, OpenMP, #pragma omp barrier); (23, OpenMP, #pragma omp task); (18, OpenMP, #pragma omp for); (0, OpenMP, #pragma omp cancel parallel if(flag)); (4, OpenMP, #pragma omp sections); (7, OpenMP, #pragma omp section); (22, OpenMP, #pragma omp parallel sections); (-6, OpenMP, #pragma omp parallel); (18, OpenMP, #pragma omp cancel taskgroup); (32, OpenMP, #pragma omp parallel for reduction(+: r)); (0, OpenMP, #pragma omp cancel sections); (11, OpenMP, #pragma omp cancel for)"}
{"predict": "(31, OpenCL, clReleaseMemObject(buffer);)", "label": "(31, OpenCL, clReleaseMemObject(buffer);)"}
{"predict": "(12, TBB, tbb::tick_count t1 = tbb::tick_count::now();); (10, TBB, tbb::parallel_for(tbb::blocked_range<size_t>(0,n,n/10),AddOne<Counter<M> >(counter));)", "label": "(5, TBB, tbb::profiling::set_name(counter.mutex, name);); (11, TBB, tbb::parallel_for(tbb::blocked_range<size_t>(0,n,n/10),AddOne<Counter<M> >(counter));); (11, TBB, tbb::tick_count t1 = tbb::tick_count::now();)"}
{"predict": "(233, MPI, MPI_Finalize();); (35, MPI, MPI_Init_thread( &argc, &argv, MPI_THREAD_MULTIPLE, &omp_mpi_level);)", "label": "(232, MPI, MPI_Finalize();); (35, MPI, MPI_Init_thread( &argc, &argv, MPI_THREAD_MULTIPLE, &omp_mpi_level);)"}
{"predict": "(46, OpenMP, #pragma omp teams distribute parallel for simd linear(e, g)); (53, OpenMP, #pragma omp teams distribute parallel for simd linear(h)); (37, OpenMP, #pragma omp teams distribute parallel for simd linear (S1)); (6, OpenMP, #pragma omp teams distribute parallel for simd linear (); (14, OpenMP, #pragma omp teams distribute parallel for simd linear ()); (47, OpenMP, #pragma omp teams distribute parallel for simd linear (argv[1])); (53, OpenMP, #pragma omp teams distribute parallel for simd linear(i)); (15, OpenMP, #pragma omp teams distribute parallel for simd linear (argc); (36, OpenMP, #pragma omp teams distribute parallel for simd linear (a, b:B::ib)); (20, OpenMP, #pragma omp teams distribute parallel for simd linear (argc > 0 ? argv[1] : argv[2])); (3, OpenMP, #pragma omp teams distribute parallel for simd linear (argc); (21, OpenMP, #pragma omp teams distribute parallel for simd linear (argc) allocate , allocate(, allocate(omp_default , allocate(omp_default_mem_alloc, allocate(omp_default_mem_alloc:, allocate(omp_default_mem_alloc: argc, allocate(omp_default_mem_alloc: argv), allocate(argv)); (-8, OpenMP, #pragma omp target); (5, OpenMP, #pragma omp teams distribute parallel for simd linear (argc,); (10, OpenMP, #pragma omp teams distribute parallel for simd linear (argc > 0 ? argv[1] : argv[3])); (28, OpenMP, #pragma omp teams distribute parallel for simd linear (argv[1][1] = '2')); (31, OpenMP, #pragma omp teams distribute parallel for simd linear (a, b)); (-6, OpenMP, #pragma omp teams distribute parallel for simd linear)", "label": "(34, OpenMP, #pragma omp teams distribute parallel for simd linear (argc : 5) allocate , allocate(, allocate(omp_default , allocate(omp_default_mem_alloc, allocate(omp_default_mem_alloc:, allocate(omp_default_mem_alloc: argc, allocate(omp_default_mem_alloc: argv), allocate(argv)); (19, OpenMP, #pragma omp teams distribute parallel for simd linear (argc); (27, OpenMP, #pragma omp teams distribute parallel for simd linear (argc > 0 ? argv[1] : argv[2])); (43, OpenMP, #pragma omp teams distribute parallel for simd linear (argv[1])); (38, OpenMP, #pragma omp teams distribute parallel for simd linear (a, b:B::ib)); (55, OpenMP, #pragma omp teams distribute parallel for simd linear(i)); (19, OpenMP, #pragma omp teams distribute parallel for simd linear (argc,); (8, OpenMP, #pragma omp teams distribute parallel for simd linear ()); (30, OpenMP, #pragma omp teams distribute parallel for simd linear (S1)); (-2, OpenMP, #pragma omp teams distribute parallel for simd linear); (41, OpenMP, #pragma omp teams distribute parallel for simd linear(e, g)); (-5, OpenMP, #pragma omp target); (-1, OpenMP, #pragma omp teams distribute parallel for simd linear (); (42, OpenMP, #pragma omp teams distribute parallel for simd linear(h))"}
{"predict": "(129, MPI, MPI_Bcast(&size2,      1, MPI_LONG_LONG_INT, root, MPI_COMM_WORLD);); (129, MPI, MPI_Bcast(&radius,     1, MPI_INT,           root, MPI_COMM_WORLD);); (301, MPI, MPI_Finalize();); (124, MPI, MPI_Bcast(&lsize2,     1, MPI_INT,           root, MPI_COMM_WORLD);); (122, MPI, MPI_Bcast(&lsize,      1, MPI_INT,           root, MPI_COMM_WORLD);); (123, MPI, MPI_Bcast(&size,       1, MPI_LONG_LONG_INT, root, MPI_COMM_WORLD);); (275, MPI, MPI_Reduce(&vector_sum, &check_sum, 1, MPI_DOUBLE, MPI_SUM, root, MPI_COMM_WORLD);); (42, MPI, MPI_Init(&argc,&argv);); (228, MPI, MPI_Barrier(MPI_COMM_WORLD);); (42, MPI, MPI_Comm_size(MPI_COMM_WORLD, &Num_procs);); (121, MPI, MPI_Bcast(&iterations, 1, MPI_INT,           root, MPI_COMM_WORLD);); (39, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &my_ID);)", "label": "(134, MPI, MPI_Bcast(&size2,      1, MPI_LONG_LONG_INT, root, MPI_COMM_WORLD);); (134, MPI, MPI_Bcast(&radius,     1, MPI_INT,           root, MPI_COMM_WORLD);); (316, MPI, MPI_Finalize();); (129, MPI, MPI_Bcast(&lsize2,     1, MPI_INT,           root, MPI_COMM_WORLD);); (127, MPI, MPI_Bcast(&lsize,      1, MPI_INT,           root, MPI_COMM_WORLD);); (128, MPI, MPI_Bcast(&size,       1, MPI_LONG_LONG_INT, root, MPI_COMM_WORLD);); (290, MPI, MPI_Reduce(&vector_sum, &check_sum, 1, MPI_DOUBLE, MPI_SUM, root, MPI_COMM_WORLD);); (41, MPI, MPI_Init(&argc,&argv);); (243, MPI, MPI_Barrier(MPI_COMM_WORLD);); (41, MPI, MPI_Comm_size(MPI_COMM_WORLD, &Num_procs);); (126, MPI, MPI_Bcast(&iterations, 1, MPI_INT,           root, MPI_COMM_WORLD);); (38, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &my_ID);)"}
{"predict": "(14, OpenMP, #pragma omp target map(tofrom: Inner, Outer, wayout)); (15, OpenMP, #pragma omp teams num_teams(1  ) thread_limit(tl)); (16, OpenMP, #pragma omp distribute parallel for)", "label": "(18, OpenMP, #pragma omp parallel for); (14, OpenMP, #pragma omp target map(tofrom: Inner, Outer, wayout)); (14, OpenMP, #pragma omp teams num_teams(1  ) thread_limit(tl))"}
{"predict": "(6, OpenMP, #pragma omp parallel for firstprivate(length))", "label": "(6, OpenMP, #pragma omp parallel for firstprivate(length, v_cut))"}
{"predict": "(23, MPI, MPI_Comm_size(comm, &par_size);); (219, MPI, MPI_Barrier(comm);); (22, MPI, MPI_Comm_rank(comm, &par_rank);); (160, MPI, actions[0][\"scenes/s2/image_prefix\"] = u_output_file;); (133, MPI, ascent::mpi::render(n, mesh, actions);); (7, MPI, ascent::mpi::init(comm);); (198, MPI, ascent::mpi::finalize(n);)", "label": "(166, MPI, opts[\"mpi_comm\"] = MPI_Comm_c2f(MPI_COMM_WORLD);); (171, MPI, MPI_Barrier(comm);); (21, MPI, MPI_Comm_rank(comm, &par_rank);); (21, MPI, MPI_Comm_size(comm, &par_size);)"}
{"predict": "(25, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &wrank);); (20, MPI, MPI_Init_thread(&argc, &argv, required, &provided);); (49, MPI, MPI_Finalize();); (47, MPI, MPI_T_finalize();); (19, MPI, MPI_T_init_thread(required, &provided);); (32, MPI, MPI_Abort(MPI_COMM_WORLD, 1);)", "label": "(25, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &wrank);); (20, MPI, MPI_Init_thread(&argc, &argv, required, &provided);); (51, MPI, MPI_Finalize();); (48, MPI, MPI_T_finalize();); (19, MPI, MPI_T_init_thread(required, &provided);); (32, MPI, MPI_Abort(MPI_COMM_WORLD, 1);)"}
{"predict": "(71, OpenMP, checkCudaErrors( ::cudaDeviceSynchronize() );)", "label": "(101, CUDA, checkHIPErrors( ::cudaDeviceSynchronize() );)"}
{"predict": "(32, OpenMP, #pragma omp parallel if(Gc>0.0 && c>0 && Sc>0.0)); (4, OpenMP, #pragma omp parallel); (22, OpenMP, #pragma omp target if(Ga>0.0 && a>0 && Sa>0.0))", "label": "(32, OpenMP, #pragma omp parallel if(Gc>0.0 && c>0 && Sc>0.0)); (22, OpenMP, #pragma omp target if(Ga>0.0 && a>0 && Sa>0.0))"}
{"predict": "(7, CUDA, __shared__ block_radix_sort_t::TempStorage temp_storage;)", "label": "(7, CUDA, __shared__ block_radix_sort_t::TempStorage temp_storage;)"}
{"predict": "(18, OpenMP, #pragma omp target teams distribute if(cond) firstprivate(fp) reduction(+:rd) map(alloc:map))", "label": "(18, OpenMP, #pragma omp target teams distribute if(cond) firstprivate(fp) reduction(+:rd) map(alloc:map))"}
{"predict": "(53, CUDA, thrust::fill(counts_out.begin(), counts_out.end(), 814920U);); (14, CUDA, thrust::host_vector<uint32_t> h_bins(NUM_INCREMENTS);); (14, CUDA, thrust::host_vector<uint32_t> h_increments(NUM_INCREMENTS);); (43, CUDA, thrust::device_vector<uint32_t> bins_in(NUM_ITEMS);); (50, CUDA, thrust::device_vector<uint32_t> counts_out(NUM_ITEMS);); (42, CUDA, thrust::device_vector<uint32_t> increments_in(NUM_INCREMENTS);); (57, CUDA, thrust::host_vector<uint32_t> host_counts(NUM_ITEMS);)", "label": "(14, CUDA, thrust::host_vector<uint32_t> h_increments(num_increments);); (43, CUDA, thrust::device_vector<uint32_t> increments_in(num_increments);); (53, CUDA, thrust::fill(counts_out.begin(), counts_out.end(), 814920U);); (40, CUDA, thrust::device_vector<uint32_t> bins_in(num_increments);); (41, CUDA, thrust::device_vector<uint32_t> counts_out(NUM_ITEMS);); (47, CUDA, thrust::host_vector<uint32_t> host_counts(num_increments);); (7, CUDA, thrust::host_vector<uint32_t> h_bins(num_increments);)"}
{"predict": "(20, OpenMP, omp_target_disassociate_ptr(a);); (21, OpenMP, omp_target_free(da, omp_get_default_device());)", "label": "(21, OpenMP, #pragma omp target update from(a[:n])); (12, OpenMP, #pragma omp target teams distribute parallel for map(to:b[:n])); (15, OpenMP, #pragma omp target teams distribute parallel for)"}
{"predict": "(6, CUDA, gpuErrchk(cudaPointerGetAttributes(&attributes, d_int));); (28, CUDA, gpuErrchk(cudaFree(d_int));); (1, CUDA, gpuErrchk(cudaMalloc(&d_int, sizeof(int)));)", "label": "(6, CUDA, gpuErrchk(cudaPointerGetAttributes(&attributes, d_int));); (28, CUDA, gpuErrchk(cudaFree(d_int));); (1, CUDA, gpuErrchk(cudaMalloc(&d_int, sizeof(int)));)"}
{"predict": "(2, CUDA, __shared__ float2 cellImagePos;); (2, CUDA, __shared__ bool isContained;); (2, CUDA, __shared__ Color color;)", "label": "(4, CUDA, __shared__ float3 color;); (2, CUDA, __shared__ bool isContained;); (0, CUDA, __shared__ float2 cellImagePos;)"}
{"predict": "(15, CUDA, CUDA_CHECK(cudaGetLastError());)", "label": "(12, CUDA, cudaMemset(d_sums, 0, sizeof(Type) * nkeys * ncols);)"}
{"predict": "(11, OpenMP, omp_set_num_threads(nr_threads);); (12, OpenMP, #pragma omp parallel default(none) shared(a)); (13, OpenMP, #pragma omp sections); (7, OpenMP, omp_set_dynamic(0);); (13, OpenMP, #pragma omp section); (15, OpenMP, int thread_nr = omp_get_thread_num();)", "label": "(11, OpenMP, omp_set_num_threads(nr_threads);); (12, OpenMP, #pragma omp parallel default(none) shared(a)); (13, OpenMP, #pragma omp sections); (7, OpenMP, omp_set_dynamic(0);); (13, OpenMP, #pragma omp section); (15, OpenMP, int thread_nr = omp_get_thread_num();)"}
{"predict": "(10, CUDA, extern __shared__ uint64_t buffer[];)", "label": "(10, CUDA, extern __shared__ uint64_t buffer[];)"}
{"predict": "(2, CUDA, extern __shared__ float shared[];)", "label": "(22, CUDA, __shared__ float shared[forward_threads];)"}
{"predict": "(12, CUDA, cudaDeviceSynchronize();); (7, CUDA, cudaMalloc((void **)&sm_o, sizeof(float) * m * m);); (34, CUDA, cudaFree(sm_o);)", "label": "(12, CUDA, cudaDeviceSynchronize();); (7, CUDA, cudaMalloc((void **)&sm_o, sizeof(float) * m * m);); (34, CUDA, cudaFree(sm_o);)"}
{"predict": "(46, CUDA, CUDA_CHECK(cudaStreamSynchronize(stream));); (33, CUDA, CUDA_CHECK(cudaMalloc(reinterpret_cast<void **>(&d_AP), sizeof(data_type) * AP.size()));); (63, CUDA, CUDA_CHECK(cudaDeviceReset());); (60, CUDA, CUDA_CHECK(cudaStreamDestroy(stream));); (29, CUDA, CUDA_CHECK(cudaMalloc(reinterpret_cast<void **>(&d_A), sizeof(data_type) * A.size()));); (53, CUDA, CUDA_CHECK(cudaFree(d_AP));); (53, CUDA, CUDA_CHECK(cudaFree(d_A));); (22, CUDA, CUDA_CHECK(cudaStreamCreateWithFlags(&stream, cudaStreamNonBlocking));)", "label": "(46, CUDA, CUDA_CHECK(cudaStreamSynchronize(stream));); (32, CUDA, CUDA_CHECK(cudaMalloc(reinterpret_cast<void **>(&d_AP), sizeof(data_type) * AP.size()));); (63, CUDA, CUDA_CHECK(cudaDeviceReset());); (60, CUDA, CUDA_CHECK(cudaStreamDestroy(stream));); (30, CUDA, CUDA_CHECK(cudaMalloc(reinterpret_cast<void **>(&d_A), sizeof(data_type) * A.size()));); (53, CUDA, CUDA_CHECK(cudaFree(d_AP));); (53, CUDA, CUDA_CHECK(cudaFree(d_A));); (22, CUDA, CUDA_CHECK(cudaStreamCreateWithFlags(&stream, cudaStreamNonBlocking));)"}
{"predict": "(12, OpenCL, profiling_queue = clCreateCommandQueue(ctx, device, CL_QUEUE_PROFILING_ENABLE, &status);); (50, OpenCL, clReleaseCommandQueue(profiling_queue);); (42, OpenCL, clReleaseEvent(exec_event);)", "label": "(40, OpenCL, clReleaseEvent(exec_event);); (11, OpenCL, profiling_queue = clCreateCommandQueue(ctx, device, CL_QUEUE_PROFILING_ENABLE, &status);); (47, OpenCL, clReleaseCommandQueue(profiling_queue);)"}
{"predict": "(87, MPI, MPI_Win_lock(MPI_LOCK_SHARED, target_rank, 0, win);); (22, MPI, MPI_Comm_size(comm, &size);); (130, MPI, MPI_Win_unlock(target_rank, win);); (133, MPI, MPI_Win_unlock_all(win);); (76, MPI, MPI_Barrier(comm);); (101, MPI, MPI_Get_count(MPI_BOTTOM, resulttype, &resultcount);); (82, MPI, MPI_Win_lock_all(0, win);); (163, MPI, MPI_Win_free(&win);); (13, MPI, MPI_Comm_rank(comm, &rank);); (78, MPI, MPI_Win_flush_local_all(win);); (18, MPI, MPI_Type_size(origtype, &origsize);); (212, MPI, MPI_Win_unlock_all(win);); (19, MPI, MPI_Type_size(targettype, &targetsize);); (87, MPI, MPI_Win_flush_all(win);); (109, MPI, MPI_Get_count(MPI_BOTTOM, origtype, &origcount);); (121, MPI, MPI_Win_flush_local_all(win);); (167, MPI, MPI_Type_free(&resulttype);); (163, MPI, MPI_Type_free(&targettype);); (71, MPI, MPI_Win_flush_local(t, win);); (159, MPI, MPI_Type_free(&origtype);); (123, MPI, MPI_Barrier(comm);); (116, MPI, MPI_Win_unlock_all(win);); (65, MPI, MPI_Win_flush(t, win);); (55, MPI, MPI_Win_lock(MPI_LOCK_SHARED, t, 0, win);); (155, MPI, MPI_Win_free(&win);); (67, MPI, MPI_Win_flush_all(win);); (50, MPI, MPI_Win_lock_all(0, win);); (100, MPI, MPI_Get_count(MPI_BOTTOM, targettype, &targetcount);); (156, MPI, MPI_Win_unlock_all(win);); (17, MPI, MPI_Type_size(resulttype, &resultsize);); (81, MPI, MPI_Win_unlock(t, win);); (146, MPI,", "label": "(163, MPI, MPI_Win_unlock(rank, win);); (22, MPI, MPI_Comm_size(comm, &size);); (125, MPI, MPI_Barrier(comm);); (134, MPI, MPI_Win_unlock(target_rank, win);); (135, MPI, MPI_Win_unlock_all(win);); (76, MPI, MPI_Win_lock(MPI_LOCK_SHARED, target_rank, 0, win);); (120, MPI, MPI_Win_flush_all(win);); (76, MPI, MPI_Win_lock_all(0, win);); (150, MPI, MPI_Win_lock(MPI_LOCK_SHARED, rank, 0, win);); (111, MPI, MPI_Win_flush_local_all(win);); (12, MPI, MPI_Comm_rank(comm, &rank);)"}
{"predict": "(39, CUDA, return cudaGetLastError();)", "label": "(39, CUDA, return cudaGetLastError();)"}
{"predict": "(19, MPI, MPIT_result = MPI_T_pvar_session_create(&session);); (12, MPI, MPIT_result = MPI_T_init_thread(MPI_THREAD_SINGLE, &provided);)", "label": "(19, MPI, MPIT_result = MPI_T_pvar_session_create(&session);); (12, MPI, MPIT_result = MPI_T_init_thread(MPI_THREAD_SINGLE, &provided);)"}
{"predict": "(34, CUDA, checkCudaErrors(cudaMalloc((void **) &dData, size));); (75, CUDA, getLastCudaError(\"Kernel execution failed\");); (125, CUDA, checkCudaErrors(cudaFreeArray(cuArray));); (55, CUDA, checkCudaErrors(cudaBindTextureToArray(tex, cuArray, channelDesc));); (61, CUDA, checkCudaErrors(cudaDeviceSynchronize());); (122, CUDA, checkCudaErrors(cudaFree(dData));)", "label": "(127, CUDA, checkCudaErrors(cudaFreeArray(cuArray));); (33, CUDA, checkCudaErrors(cudaMalloc((void **) &dData, size));); (56, CUDA, checkCudaErrors(cudaBindTextureToArray(tex, cuArray, channelDesc));); (63, CUDA, checkCudaErrors(cudaDeviceSynchronize());); (71, CUDA, getLastCudaError(\"Kernel execution failed\");); (-3, CUDA, int devID = findCudaDevice(argc, (const char **) argv);); (120, CUDA, checkCudaErrors(cudaFree(dData));)"}
{"predict": "(9, MPI, MPI_Group_compare(group, wgroup, &result);); (5, MPI, MPI_File_get_group(cFile, &group);); (0, MPI, MPI_File cFile = MPI_File_f2c(*file);); (4, MPI, MPI_Comm_group(MPI_COMM_WORLD, &wgroup);); (12, MPI, MPI_Group_free(&wgroup);); (10, MPI, MPI_Group_free(&group);)", "label": "(9, MPI, MPI_Group_compare(group, wgroup, &result);); (5, MPI, MPI_File_get_group(cFile, &group);); (0, MPI, MPI_File cFile = MPI_File_f2c(*file);); (4, MPI, MPI_Comm_group(MPI_COMM_WORLD, &wgroup);); (12, MPI, MPI_Group_free(&wgroup);); (10, MPI, MPI_Group_free(&group);)"}
{"predict": "(97, CUDA, cudaCheckErrors(\"Graph instantiation failed\");); (14, CUDA, cudaStreamCreateWithFlags(&streams[i], cudaStreamNonBlocking);); (49, CUDA, cudaGraphCreate(&graph, 0);); (64, CUDA, cudaCheckErrors(\"Event record failed\");); (54, CUDA, cudaCheckErrors(\"Stream begin capture failed\");); (31, CUDA, cudaMalloc((void**) &d_x, N * sizeof(float));); (63, CUDA, cudaCheckErrors(\"Event wait failed\");); (71, CUDA, cudaCheckErrors(\"Stream end capture failed\");); (73, CUDA, cudaGraphInstantiate(&instance, graph, NULL, NULL, 0);); (102, CUDA, cudaCheckErrors(\"Finishing memcpy failed\");); (91, CUDA, cudaGraphLaunch(instance, 0);); (57, CUDA, cudaStreamWaitEvent(streams[1], event1);); (75, CUDA, cudaCheckErrors(\"Launching graph failed\");); (114, CUDA, cudaMemcpy(h_y, d_y, N, cudaMemcpyDeviceToHost);); (60, CUDA, cudaStreamWaitEvent(streams[0], event2);); (53, CUDA, cudaCheckErrors(\"Kernel a failed\");); (76, CUDA, cudaGraphGetNodes(graph, nodes, &numNodes);); (81, CUDA, cudaCheckErrors(\"Graph get nodes failed\");); (58, CUDA, cudaCheckErrors(\"Kernel c failed\");); (65, CUDA, cudaStreamEndCapture(streams[0], &graph);); (-6, CUDA, cudaEventCreateWithFlags(&event1, cudaEventDisableTiming);); (-6, CUDA, cudaEventCreateWithFlags(&event2, cudaEventDisableTiming);); (41, CUDA, cudaCheckErrors(\"Kernel b failed\");); (68, CUDA, cudaStreamBeginCapture(streams[1], cudaStreamCaptureModeGlobal);); (98, CUDA, cudaCheckErrors(\"Stream begin capture failed\");); (44, CUDA, cudaEventRecord(event1, streams[0]);); (73, CUDA, cudaCheckErrors(\"Stream wait event failed\");); (14, CUDA, cudaMemcpy(d_y, h_y, N, cudaMemcpyHostToDevice);); (35, CUDA, cudaEventRecord(event2, streams[1]);); (", "label": "(75, CUDA, cudaCheckErrors(\"Kernel c failed\");); (99, CUDA, cudaCheckErrors(\"Launching graph failed\");); (13, CUDA, cudaStreamCreateWithFlags(&streams[i], cudaStreamNonBlocking);); (63, CUDA, cudaCheckErrors(\"Event record failed\");); (56, CUDA, cudaCheckErrors(\"Stream begin capture failed\");); (31, CUDA, cudaMalloc((void**) &d_x, N * sizeof(float));); (44, CUDA, cudaGraphCreate(FIXME, 0);); (62, CUDA, cudaCheckErrors(\"Kernel b failed\");); (104, CUDA, cudaDeviceSynchronize();); (98, CUDA, cudaGraphGetNodes(graph, nodes, &numNodes);); (121, CUDA, cudaMemcpy(h_y, d_y, N, cudaMemcpyDeviceToHost);); (73, CUDA, cudaCheckErrors(\"Kernel d failed\");); (89, CUDA, cudaStreamSynchronize(streams[0]);); (58, CUDA, cudaStreamWaitEvent(streams[1], event1);); (72, CUDA, cudaStreamEndCapture(streams[0], &graph);); (48, CUDA, cudaCheckErrors(\"Kernel a failed\");); (64, CUDA, cudaStreamWaitEvent(streams[0], event2);); (-11, CUDA, cudaEventCreateWithFlags(&event1, cudaEventDisableTiming);); (-11, CUDA, cudaEventCreateWithFlags(&event2, cudaEventDisableTiming);); (53, CUDA, cudaCheckErrors(\"Event wait failed\");); (88, CUDA, cudaCheckErrors(\"Graph get nodes failed\");); (44, CUDA, cudaEventRecord(event1, streams[0]);); (19, CUDA, cudaMemcpy(d_y, h_y, N, cudaMemcpyHostToDevice);); (54, CUDA, cudaEventRecord(event2, streams[1]);); (16, CUDA, cudaMemcpy(d_x, h_x, N, cudaMemcpyHostToDevice);); (107, CUDA, cudaCheckErrors(\"Finishing memcpy failed\");); (11, CUDA, cudaMalloc((void**) &d_y, N * sizeof(float));); (32, CUDA, cudaStreamBeginCapture(streams[0], cudaStreamCaptureModeGlobal);); (91, CUDA, cudaGraphLaunch(instance, streams[0]);); (63, CUDA, cudaCheckErrors(\"instantiating graph failed\");); (8, CUDA, cudaCheckErrors(\"cudaMalloc failed\");); (56, CUDA, cudaCheckErrors(\"Stream end capture failed\");); (59, CUDA, cudaGraphInstantiate(FIXME, graph, NULL, NULL, 0);); (66, CUDA, cudaGraphLaunch(FIXME, streams[0]);)"}
{"predict": "(19, MPI, MPI_Reduce_local(outbuf, inbuf, count, type, op);)", "label": "(19, MPI, MPI_Reduce_local((void*)inbuf, outbuf, count, type, op);)"}
{"predict": "(35, CUDA, __shared__ _VOLATILE_ float aSmem2[8][128+4];); (33, CUDA, __shared__ _VOLATILE_ float bSmem1[8][128+4];); (34, CUDA, __shared__ _VOLATILE_ float bSmem2[8][128+4];); (30, CUDA, __shared__ _VOLATILE_ float aSmem1[8][128+4];)", "label": "(35, CUDA, __shared__ _VOLATILE_ float aSmem2[8][128+4];); (33, CUDA, __shared__ _VOLATILE_ float bSmem1[8][128+4];); (34, CUDA, __shared__ _VOLATILE_ float bSmem2[8][128+4];); (30, CUDA, __shared__ _VOLATILE_ float aSmem1[8][128+4];)"}
{"predict": "(3, CUDA, extern __shared__ unsigned sfdatx[];)", "label": "(3, CUDA, extern __shared__ unsigned sfdatx[];)"}
{"predict": "(5, MPI, mpi.init();); (43, MPI, mpi.finalize();)", "label": "(9, MPI, test_integration_sin<2,1,double> t1( mpi.vm()[\"hsize\"].as<double>() );); (31, MPI, test_integration_sin<2,4,double> t2( mpi.vm()[\"hsize\"].as<double>() );); (14, MPI, test_integration_sin<2,2,double> t2( mpi.vm()[\"hsize\"].as<double>() );); (2, MPI, std::cout << \"Order = \" << mpi.vm()[\"order\"].as<int>() << \" / \" << FEELPP_MESH_MAX_ORDER << \"\\n\";); (20, MPI, test_integration_sin<2,3,double> t2( mpi.vm()[\"hsize\"].as<double>() );); (37, MPI, test_integration_sin<2,5,double> t2( mpi.vm()[\"hsize\"].as<double>() );)"}
{"predict": "(13, CUDA, cudaMemcpy(pointers, cpuPointers, sizeof(uint8_t*) * part, cudaMemcpyHostToDevice);); (8, CUDA, uint8_t ** pointers = (uint8_t**)FastllmCudaMalloc(sizeof(uint8_t*) * part);); (15, CUDA, FastllmCudaFree(pointers);)", "label": "(16, CUDA, FastllmCudaFree(pointers);); (12, CUDA, cudaMemcpy(pointers, cpuPointers, sizeof(uint8_t*) * part, cudaMemcpyHostToDevice);); (6, CUDA, uint8_t ** pointers = (uint8_t**)FastllmCudaMalloc(sizeof(uint8_t*) * part);)"}
{"predict": "(20, MPI, errs = MPI_Isend(\"No Errors\", 10, MPI_CHAR, 1, 0, MPI_COMM_WORLD, &request);); (5, MPI, MPI_Init(&argc, &argv);); (65, MPI, MPI_Finalize();); (4, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (4, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (24, MPI, errs = MPI_Irecv(buf, 10, MPI_CHAR, 1, 0, MPI_COMM_WORLD, &request);); (3, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);); (5, MPI, MPI_Abort(MPI_COMM_WORLD, 1);); (34, MPI, errs = MPI_Isend(\"No Errors\", 10, MPI_CHAR, 2, 0, MPI_COMM_WORLD, &request);); (7, MPI, MPI_Wait(&request, MPI_STATUS_IGNORE);)", "label": "(30, MPI, errs = MPI_Irecv(buf, 10, MPI_CHAR, 0, 0, MPI_COMM_WORLD, &request);); (5, MPI, MPI_Init(&argc, &argv);); (65, MPI, MPI_Finalize();); (18, MPI, errs = MPI_Issend(\"No Errors\", 10, MPI_CHAR, 3, 0, MPI_COMM_WORLD, &request);); (3, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (3, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (16, MPI, errs += MPI_Wait(&request, MPI_STATUS_IGNORE);); (2, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);); (5, MPI, MPI_Abort(MPI_COMM_WORLD, 1);); (34, MPI, errs = MPI_Issend(\"No Errors\", 10, MPI_CHAR, 2, 0, MPI_COMM_WORLD, &request);)"}
{"predict": "(1, TBB, tbb::task_scheduler_init init(1);); (13, TBB, tbb::parallel_for(tbb::blocked_range<int>(0, 100000000, 100), test_body<TBB_TASK>(4), tbb::simple_partitioner());); (9, TBB, tbb::parallel_for(tbb::blocked_range<int>(0, 100000000, 100), test_body<TBB_TASK>(2), tbb::simple_partitioner());); (5, TBB, tbb::parallel_for(tbb::blocked_range<int>(0, 100000000, 100), test_body<TBB_TASK>(1), tbb::simple_partitioner());); (-3, TBB, tbb::task_arena a(1);); (13, TBB, tbb::parallel_for(tbb::blocked_range<int>(0, 100000000, 100), test_body<TBB_TASK>(5), tbb::simple_partitioner());); (6, TBB, tbb::parallel_for(tbb::blocked_range<int>(0, 100000000, 100), test_body<TBB_TASK>(3), tbb::simple_partitioner());)", "label": "(7, OpenMP, #pragma omp target teams distribute parallel for simd order(); (15, OpenMP, #pragma omp target teams distribute parallel for simd order(concurrent)); (-1, OpenMP, #pragma omp target teams distribute parallel for simd nowait nowait); (7, OpenMP, #pragma omp target teams distribute parallel for simd order(none); (9, OpenMP, #pragma omp target teams distribute parallel for simd order(concurrent); (-1, OpenMP, #pragma omp target teams distribute parallel for simd order)"}
{"predict": "(24, CUDA, CHECK_CUDA_RETURN(cudaGetLastError());)", "label": "(24, CUDA, CHECK_CUDA_RETURN(cudaGetLastError());)"}
{"predict": "(7, TBB, tbb::tick_count t1 = tbb::tick_count::now();); (14, TBB, ASSERT( num_threads > 0, \"tbb::thread::hardware_concurrency() has returned an incorrect value\" );); (3, TBB, tbb::tick_count t0 = tbb::tick_count::now();); (11, TBB, int num_threads = tbb::tbb_thread::hardware_concurrency();); (5, TBB, tbb::tick_count t2 = tbb::tick_count::now();)", "label": "(7, TBB, tbb::tick_count t1 = tbb::tick_count::now();); (14, TBB, ASSERT( num_threads > 0, \"tbb::thread::hardware_concurrency() has returned an incorrect value\" );); (3, TBB, tbb::tick_count t0 = tbb::tick_count::now();); (11, TBB, int num_threads = tbb::tbb_thread::hardware_concurrency();); (5, TBB, tbb::tick_count t2 = tbb::tick_count::now();)"}
{"predict": "(330, OpenMP, #pragma omp distribute parallel for simd lastprivate(ii)); (317, OpenMP, #pragma omp distribute parallel for simd firstprivate(ii)); (334, OpenMP, #pragma omp distribute parallel for simd collapse(2)); (3, OpenMP, #pragma omp target); (3, OpenMP, #pragma omp distribute parallel for simd); (326, OpenMP, #pragma omp distribute parallel for simd collapse(3)); (176, OpenMP, #pragma omp distribute parallel for simd private(ii)); (4, OpenMP, #pragma omp distribute parallel for simd }); (329, OpenMP, #pragma omp distribute parallel for simd collapse(N)); (322, OpenMP, #pragma omp distribute parallel for simd collapse(1)); (275, OpenMP, #pragma omp distribute parallel for simd linear(ii)); (2, OpenMP, #pragma omp distribute parallel for simd [); (178, OpenMP, #pragma omp distribute parallel for simd firstprivate(ii)); (1, OpenMP, #pragma omp distribute parallel for simd (); (179, OpenMP, #pragma omp distribute parallel for simd private(ii)); (269, OpenMP, #pragma omp distribute parallel for simd linear(fii)); (317, OpenMP, #pragma omp distribute parallel for simd collapse(N - 1)); (279, OpenMP, #pragma omp distribute parallel for simd linear(dii)); (169, OpenMP, #pragma omp distribute parallel for simd lastprivate(ii)); (30, OpenMP, #pragma omp distribute parallel for simd }); (170, OpenMP, #pragma omp distribute parallel for simd linear(ii, fii, dii)); (269, OpenMP, #pragma omp distribute parallel for simd linear(ii :)); (274, OpenMP, #pragma omp distribute parallel for simd linear(ii : 5)); (278, OpenMP, #pragma omp distribute parallel for simd linear(ii : 5 - 5)); (279, OpenMP, #pragma omp distribute parallel for simd linear(ii : 0)); (268, OpenMP, #pragma omp distribute parallel for simd linear(ii : 5)); (-12, OpenMP, #pragma omp teams)", "label": "(311, OpenMP, #pragma omp distribute parallel for simd firstprivate(ii)); (332, OpenMP, #pragma omp distribute parallel for simd lastprivate(ii)); (6, OpenMP, #pragma omp distribute parallel for simd); (322, OpenMP, #pragma omp distribute parallel for simd private(ii)); (313, OpenMP, #pragma omp distribute parallel for simd linear(ii)); (1, OpenMP, #pragma omp target); (347, OpenMP, #pragma omp distribute parallel for simd collapse(2)); (0, OpenMP, #pragma omp teams)"}
{"predict": "(16, CUDA, cudaFree(work_space_);); (26, CUDA, cudaFree(numeric_workspace_);); (14, CUDA, cudaFree(solution_vector_);); (15, CUDA, cudaFree(residual_vector_);); (21, CUDA, cudaFree(cusolver_glu_work_space_);); (23, CUDA, cudaFree(cusolver_rf_work_space_);); (-3, CUDA, cudaFree(mat_A_csr_device_);)", "label": "(17, CUDA, cudaFree(devx_);); (27, CUDA, cudaFree(d_T_);); (24, CUDA, cudaFree(d_P_);); (24, CUDA, cudaFree(d_Q_);); (12, CUDA, cudaFree(devr_);); (1, CUDA, cudaFree(d_work_);)"}
{"predict": "(15, OpenMP, #pragma omp target teams distribute parallel for); (7, OpenMP, #pragma omp target parallel for)", "label": "(7, OpenMP, printf(\"#pragma omp target teams distribute parallel for thread_limit(4)\\n\");); (10, OpenMP, num_teams[j] = omp_get_num_teams();); (13, OpenMP, printf(\"#pragma omp target teams distribute parallel for\\n\");); (7, OpenMP, num_threads[j] = omp_get_num_threads();); (4, OpenMP, #pragma omp target teams distribute parallel for)"}
{"predict": "(19, OpenCL, clReleaseContext_ExpectAndReturn(make_context(0), CL_SUCCESS);)", "label": "(19, OpenCL, clReleaseContext_ExpectAndReturn(make_context(0), CL_SUCCESS);)"}
{"predict": "(43, MPI, MPI_Type_size(c_info->r_data_type, &r_size);); (41, MPI, MPI_Type_size(c_info->s_data_type, &s_size);)", "label": "(63, MPI, *time -= MPI_Wtime();); (43, MPI, MPI_Type_size(c_info->r_data_type, &r_size);); (41, MPI, MPI_Type_size(c_info->s_data_type, &s_size);); (73, MPI, *time += MPI_Wtime();)"}
{"predict": "(2, TBB, typedef typename tbb::flow::tuple_element<0,OutputTuple>::type OutputType;); (26, TBB, tbb::flow::remove_edge( exe_node, receivers[r] );); (11, TBB, tbb::flow::make_edge( exe_node, receivers[r] );); (3, TBB, tbb::flow::multifunction_node< InputType, OutputTuple, tbb::flow::rejecting > exe_node( g, tbb::flow::unlimited, body );); (1, TBB, tbb::flow::graph g;)", "label": "(14, TBB, tbb::flow::make_edge( tbb::flow::output_port<0>(exe_node), receivers[r] );); (1, TBB, typedef typename tbb::flow::tuple_element<0,OutputTuple>::type OutputType;); (27, TBB, tbb::flow::remove_edge( tbb::flow::output_port<0>(exe_node), receivers[r] );); (3, TBB, tbb::flow::multifunction_node< InputType, OutputTuple, tbb::flow::rejecting > exe_node( g, tbb::flow::unlimited, body );); (1, TBB, tbb::flow::graph g;)"}
{"predict": "(446, MPI, MPI_Comm_size(MPI_COMM_WORLD, &nr_nodes);); (446, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &nodeID);); (73, MPI, MPI_Allgather(&local_n0, 1, MPI_INT, slice_width, 1, MPI_INT, MPI_COMM_WORLD);)", "label": "(11, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &nodeID);); (9, MPI, MPI_Comm_size(MPI_COMM_WORLD, &nr_nodes);); (73, MPI, MPI_Allgather(&local_n0, 1, MPI_INT, slice_width, 1, MPI_INT, MPI_COMM_WORLD);)"}
{"predict": "(270, OpenMP, #pragma omp teams distribute simd firstprivate(ii)); (274, OpenMP, #pragma omp teams distribute simd private(ii)); (5, OpenMP, #pragma omp teams distribute simd); (277, OpenMP, #pragma omp teams distribute simd lastprivate(ii)); (2, OpenMP, #pragma omp target); (285, OpenMP, #pragma omp teams distribute simd collapse(2))", "label": "(266, OpenMP, #pragma omp teams distribute simd firstprivate(ii)); (6, OpenMP, #pragma omp teams distribute simd); (270, OpenMP, #pragma omp teams distribute simd private(ii)); (275, OpenMP, #pragma omp teams distribute simd lastprivate(ii)); (287, OpenMP, #pragma omp teams distribute simd collapse(2)); (1, OpenMP, #pragma omp target)"}
{"predict": "(84, OpenMP, test_comp_vlen_strings(COMP_VL_STRS_FILE, \"group\", 1);); (84, OpenMP, test_comp_vlen_strings(COMP_VL_STRS_FILE, \"group_copy\", 0);)", "label": "(84, OpenMP, test_comp_vlen_strings(COMP_VL_STRS_FILE, \"group\", 1);); (84, OpenMP, test_comp_vlen_strings(COMP_VL_STRS_FILE, \"group_copy\", 0);)"}
{"predict": "(6, OpenMP, #pragma omp parallel for)", "label": "(6, OpenMP, #pragma omp parallel for)"}
{"predict": "(10, MPI, dray::dray::mpi_comm(MPI_Comm_c2f(comm));)", "label": "(20, MPI, int rank = dray::dray::mpi_rank();); (9, MPI, dray::dray::mpi_comm(MPI_Comm_c2f(comm));); (19, MPI, int size = dray::dray::mpi_size();)"}
{"predict": "(6, MPI, MPI_Comm_size(MPI_COMM_WORLD, &ranks);); (104, MPI, MPI_Barrier(MPI_COMM_WORLD);); (3, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);)", "label": "(6, MPI, MPI_Comm_size(MPI_COMM_WORLD, &ranks);); (104, MPI, MPI_Barrier(MPI_COMM_WORLD);); (3, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);)"}
{"predict": "(144, MPI, MPI_Alltoall(x_send_counts, 1, MPI_INT, x_recv_counts, 1, MPI_INT, grid2d->comm);); (265, MPI, MPI_Waitall(num_procs_to_recv, recv_reqs, recv_count_list);); (222, MPI, MPI_Isend(Btmp, nrhs * A3d->m_loc, MPI_DOUBLE, src, tag, grid3d->zscp.comm, &send_reqs[k]);); (92, MPI, MPI_Comm_rank(grid2d->comm, &rank);); (243, MPI, MPI_Isend(Btmp, nrhs * A3d->m_loc, MPI_DOUBLE, src, tag, grid3d->zscp.comm, &send_reqs[k]);); (214, MPI, MPI_Irecv(Btmp, nrhs * A3d->m_loc, MPI_DOUBLE, src, tag, grid3d->zscp.comm, &recv_reqs[k]);); (132, MPI, MPI_Status send_status;); (230, MPI, MPI_Irecv(Btmp, nrhs * A3d->m_loc, MPI_DOUBLE, src, tag, grid3d->zscp.comm, &recv_reqs[k]);); (86, MPI, int p, nprow = grid2d->nprow, npcol = grid2d->npcol;); (225, MPI, MPI_Waitall(num_procs_to_send, send_reqs, send_count_list);); (125, MPI, MPI_Comm_proc_name(src, MPI_MAX_PROC_NAME, grid3d->zscp.comm);); (256, MPI, MPI_Finalize();); (169, MPI, MPI_Barrier(grid3d->zscp.comm);); (81, MPI, MPI_Comm_rank(grid3d->zscp.comm, &iam);); (120, MPI, MPI_Abort(grid3d->zscp.comm, -1);)", "label": "(270, MPI, MPI_Wait(&recv_req, &recv_status);)"}
{"predict": "(24, MPI, MPI_Type_get_true_extent(key, &key_true_lb, &key_true_extent);); (19, MPI, MPI_Type_get_extent(keysat, &keysat_lb, &keysat_extent);); (255, MPI, MPI_Type_free(&type_int_with_key);); (98, MPI, MPI_Type_commit(&type_int_with_key);)", "label": "(24, MPI, MPI_Type_get_true_extent(key, &key_true_lb, &key_true_extent);); (204, MPI, MPI_Type_free(&type_int_with_key);); (280, MPI, MPI_Comm_rank(comm, &comm_rank);); (17, MPI, MPI_Type_get_extent(keysat, &keysat_lb, &keysat_extent);)"}
{"predict": "(8, MPI, MPI_Comm_set_errhandler( comm, newerr );); (6, MPI, MPI_Errhandler_free( &newerr );); (4, MPI, MPI_Errhandler_create( ehandler, &newerr );); (11, MPI, MPI_Comm_free( &comm );); (5, MPI, MPI_Comm_call_errhandler( comm, 3 );)", "label": "(10, MPI, MPI_Comm_call_errhandler( comm, MPI_ERR_OTHER );); (8, MPI, MPI_Comm_set_errhandler( comm, newerr );); (14, MPI, MPI_Finalize();); (5, MPI, MPI_Comm_create_errhandler( eh, &newerr );); (1, MPI, MPI_Init( &argc, &argv );); (6, MPI, MPI_Errhandler_free( &newerr );)"}
{"predict": "(11, OpenMP, #pragma omp parallel for)", "label": "(11, OpenMP, #pragma omp parallel for)"}
{"predict": "(11, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (32, MPI, MPI_Comm_free(&intra);); (29, MPI, MPI_Comm_free(&merge1);); (13, MPI, err = MPI_Intercomm_create(intra, 0, intra, MPI_COMM_NULL, tag, &inter);); (21, MPI, MPI_Barrier(inter);); (30, MPI, MPI_Comm_free(&inter);); (5, MPI, MPI_Comm_split(MPI_COMM_WORLD, 0, rank, &intra);); (22, MPI, err = MPI_Intercomm_merge(inter, first, &merge1);); (1, MPI, MPI_Abort(parent, 1);)", "label": "(38, MPI, MPI_Comm_disconnect(&parent);); (27, MPI, err = MPI_Intercomm_merge(inter, 0, &merge1);); (34, MPI, MPI_Comm_free(&intra);); (31, MPI, MPI_Comm_free(&merge1);); (6, MPI, err = MPI_Intercomm_merge(parent, 1, &intra);); (30, MPI, MPI_Comm_free(&inter);); (25, MPI, err = MPI_Barrier(merge1);); (18, MPI, err = MPI_Barrier(inter);); (21, MPI, MPI_Comm_rank(merge1, &rank);); (7, MPI, err = MPI_Intercomm_create(intra, 0, MPI_COMM_NULL, 0, tag, &inter);); (1, MPI, MPI_Comm_rank(intra, &rank);); (10, MPI, err = MPI_Intercomm_create(MPI_COMM_WORLD, 0, intra, 0, tag, &inter);)"}
{"predict": "(119, MPI, MPI_Get_count(&statuses[j], send_type, &count_recved);); (19, MPI, MPI_Alltoall(send_size, 1, MPI_COUNT, recv_size, 1, MPI_COUNT, fd->comm);); (93, MPI, MPI_Type_commit(&send_type);); (135, MPI, MPI_Waitall(nprocs_send, requests + nprocs_recv, MPI_STATUSES_IGNORE);); (27, MPI, MPI_Alltoall(recv_size, 1, MPI_COUNT, send_size, 1, MPI_COUNT, fd->comm);); (92, MPI, MPI_Type_free(&send_type);)", "label": "(94, MPI, MPI_Type_commit(&send_type);); (137, MPI, MPI_Waitall(nprocs_send, requests + nprocs_recv, MPI_STATUSES_IGNORE);); (19, MPI, MPI_Alltoall(send_size, 1, MPI_COUNT, recv_size, 1, MPI_COUNT, fd->comm);); (118, MPI, MPI_Get_count_c(&statuses[j], MPI_BYTE, &count_recved);); (93, MPI, MPI_Type_free(&send_type);)"}
{"predict": "(98, OpenMP, #pragma omp task); (99, OpenMP, #pragma omp taskgroup)", "label": "(101, OpenMP, #pragma omp task); (102, OpenMP, #pragma omp taskgroup)"}
{"predict": "(17, CUDA, qmc_cuda::cuda_check(cudaDeviceSynchronize());); (15, CUDA, qmc_cuda::cuda_check(cudaGetLastError());)", "label": "(17, CUDA, qmc_cuda::cuda_check(cudaDeviceSynchronize());); (15, CUDA, qmc_cuda::cuda_check(cudaGetLastError());)"}
{"predict": "(27, MPI, MPI_Allreduce(&local, &global, 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);); (29, MPI, MPI_Finalize();); (5, MPI, MPI_Get_processor_name(mach_name, &mach_len);); (18, MPI, MPI_Barrier(MPI_COMM_WORLD);)", "label": "(28, MPI, MPI_Finalize();); (8, MPI, MPI_Get_processor_name(mach_name,&mach_len);); (22, MPI, MPI_Allreduce(&local,&global,1,MPI_INT,MPI_SUM,MPI_COMM_WORLD);)"}
{"predict": "(1, OpenMP, #pragma omp target); (24, OpenMP, #pragma omp distribute parallel for if (Arg)); (1, OpenMP, #pragma omp distribute parallel for if (true)); (19, OpenMP, #pragma omp distribute parallel for if (false)); (-1, OpenMP, #pragma omp teams)", "label": "(3, OpenMP, #pragma omp distribute parallel for if (true)); (11, OpenMP, #pragma omp distribute parallel for if (false)); (19, OpenMP, #pragma omp distribute parallel for if (Arg)); (-2, OpenMP, #pragma omp target); (-2, OpenMP, #pragma omp teams)"}
{"predict": "(3, OpenMP, #pragma omp parallel for)", "label": "(3, OpenMP, #pragma omp parallel for)"}
{"predict": "(19, OpenCL, clReleaseEvent(event);)", "label": "(19, OpenCL, clReleaseEvent(event);)"}
{"predict": "(11, MPI, MPI_Init(&argc, &argv);); (60, MPI, MPI_Finalize();); (10, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &mpi_rank);); (10, MPI, MPI_Comm_size(MPI_COMM_WORLD, &mpi_size);); (54, MPI, MPI_Abort(MPI_COMM_WORLD, 1);)", "label": "(10, MPI, MPI_Init(&argc, &argv);); (206, MPI, MPI_Finalize();); (10, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &mpi_rank);); (185, MPI, MPI_Barrier(MPI_COMM_WORLD);); (7, MPI, MPI_Comm_size(MPI_COMM_WORLD, &mpi_size);)"}
{"predict": "(8, OpenMP, #pragma omp master taskloop firstprivate(t_var, vec, s_arr, s_arr, var, var))", "label": "(8, OpenMP, #pragma omp master taskloop lastprivate(t_var, vec, s_arr, s_arr, var, var))"}
{"predict": "(11, OpenMP, #pragma omp target teams distribute parallel for map(tofrom : a[ : n]) map(to : b[ : n]))", "label": "(11, OpenMP, #pragma omp target teams distribute parallel for map(tofrom : a[ : n]) map(to : b[ : n]))"}
{"predict": "(8, OpenMP, #pragma omp target update CLAUSE(present: i)); (6, OpenMP, #pragma omp target data map(alloc: i) use_device_ptr(i))", "label": "(8, OpenMP, #pragma omp target update CLAUSE(present: i)); (6, OpenMP, #pragma omp target enter data map(alloc: i)); (7, OpenMP, #pragma omp target exit data map(delete: i))"}
{"predict": "(78, OpenMP, #pragma omp for collapse(2))", "label": "(163, OpenMP, #pragma omp for collapse(2))"}
{"predict": "(79, OpenMP, #pragma omp parallel private(i)); (7, OpenMP, #pragma omp distribute parallel for firstprivate); (51, OpenMP, #pragma omp distribute parallel for firstprivate(argv[1])); (30, OpenMP, #pragma omp distribute parallel for firstprivate(argc > 0 ? argv[1] : argv[2])); (2, OpenMP, #pragma omp target); (88, OpenMP, #pragma omp distribute parallel for lastprivate(g) firstprivate(g)); (43, OpenMP, #pragma omp distribute parallel for firstprivate(k)); (33, OpenMP, #pragma omp distribute parallel for firstprivate(argc)); (65, OpenMP, #pragma omp parallel); (46, OpenMP, #pragma omp distribute parallel for firstprivate(h)); (57, OpenMP, #pragma omp distribute parallel for firstprivate(i)); (69, OpenMP, #pragma omp distribute parallel for firstprivate(j)); (11, OpenMP, #pragma omp distribute parallel for firstprivate(argc); (16, OpenMP, #pragma omp distribute parallel for firstprivate(argc,); (4, OpenMP, #pragma omp distribute parallel for firstprivate()); (59, OpenMP, #pragma omp distribute parallel for firstprivate(v)); (-5, OpenMP, #pragma omp distribute parallel for firstprivate(); (22, OpenMP, #pragma omp distribute parallel for firstprivate(S1)); (86, OpenMP, #pragma omp parallel reduction(+ : i)); (-13, OpenMP, #pragma omp teams)", "label": "(38, OpenMP, #pragma omp distribute parallel for firstprivate(argc) allocate , allocate(, allocate(omp_default , allocate(omp_default_mem_alloc, allocate(omp_default_mem_alloc:, allocate(omp_default_mem_alloc: argc, allocate(omp_default_mem_alloc: argv), allocate(argv)); (78, OpenMP, #pragma omp parallel private(i)); (56, OpenMP, #pragma omp distribute parallel for firstprivate(e, g)); (30, OpenMP, #pragma omp distribute parallel for firstprivate(argc > 0 ? argv[1] : argv[2])); (68, OpenMP, #pragma omp distribute parallel for firstprivate(i)); (1, OpenMP, #pragma omp target); (57, OpenMP, #pragma omp distribute parallel for firstprivate(k, h)); (59, OpenMP, #pragma omp parallel); (40, OpenMP, #pragma omp distribute parallel for firstprivate(a, b)); (93, OpenMP, #pragma omp parallel reduction(+ : i)); (3, OpenMP, #pragma omp distribute parallel for firstprivate(); (71, OpenMP, #pragma omp distribute parallel for firstprivate(j)); (41, OpenMP, #pragma omp distribute parallel for firstprivate(argv[1])); (5, OpenMP, #pragma omp distribute parallel for firstprivate()); (9, OpenMP, #pragma omp distribute parallel for firstprivate(argc); (78, OpenMP, #pragma omp distribute parallel for lastprivate(g) firstprivate(g)); (27, OpenMP, #pragma omp distribute parallel for firstprivate(S1)); (11, OpenMP, #pragma omp distribute parallel for firstprivate(argc,); (60, OpenMP, #pragma omp parallel shared(i)); (-11, OpenMP, #pragma omp distribute parallel for firstprivate); (-13, OpenMP, #pragma omp teams)"}
{"predict": "(19, MPI, MPI_Comm_dup(MPI_COMM_WORLD, &comms[x]);)", "label": "(25, MPI, MPI_Comm_free(&comms[x]);); (18, MPI, MPI_Comm_dup(MPI_COMM_WORLD, &comms[x]);)"}
{"predict": "(4, OpenCL, clReleaseContext_ExpectAndReturn(make_context(0), CL_SUCCESS);); (2, OpenCL, clReleaseDevice_ExpectAndReturn(make_device_id(1), CL_SUCCESS);); (0, OpenCL, clReleaseDevice_ExpectAndReturn(make_device_id(0), CL_SUCCESS);)", "label": "(5, OpenCL, clReleaseContext_ExpectAndReturn(make_context(0), CL_SUCCESS);); (3, OpenCL, clCreateContext_StubWithCallback(clCreateContext_testContextNonNullProperties);)"}
{"predict": "(13, OpenMP, #pragma omp sections firstprivate(,); (24, OpenMP, #pragma omp sections firstprivate()); (42, OpenMP, #pragma omp sections firstprivate(x)); (46, OpenMP, #pragma omp sections firstprivate(x, y)); (1, OpenMP, #pragma omp sections firstprivate(); (26, OpenMP, #pragma omp sections firstprivate(int)); (13, OpenMP, #pragma omp sections firstprivate(, )); (-5, OpenMP, #pragma omp parallel); (46, OpenMP, #pragma omp sections firstprivate(x, y, z)); (28, OpenMP, #pragma omp sections firstprivate(0))", "label": "(5, OpenMP, #pragma omp sections firstprivate(); (24, OpenMP, #pragma omp sections firstprivate()); (35, OpenMP, #pragma omp sections firstprivate(0)); (51, OpenMP, #pragma omp sections lastprivate(x, y, z) firstprivate(x, y, z)); (45, OpenMP, #pragma omp sections lastprivate(x, y) firstprivate(x, y)); (39, OpenMP, #pragma omp sections lastprivate(x) firstprivate(x)); (-4, OpenMP, #pragma omp parallel); (6, OpenMP, #pragma omp sections firstprivate(,); (11, OpenMP, #pragma omp sections firstprivate(, )); (22, OpenMP, #pragma omp sections firstprivate(int))"}
{"predict": "(3, OpenMP, #pragma omp target); (4, OpenMP, #pragma omp parallel for)", "label": "(10, OpenMP, #pragma omp target update to(i) nowait (3.14) device (-10u)); (3, OpenMP, #pragma omp target nowait update to(i)); (7, OpenMP, #pragma omp target update to(i) nowait device (-10u)); (5, OpenMP, #pragma omp target update to(i) nowait (argc))); (7, OpenMP, #pragma omp target update to(i) nowait nowait); (7, OpenMP, #pragma omp target update nowait to(i) nowait); (-3, OpenMP, #pragma omp nowait target update to(i)); (-1, OpenMP, #pragma omp target update nowait() to(i)); (-1, OpenMP, #pragma omp target update to(i) nowait()"}
{"predict": "(7, OpenACC, #pragma acc loop gang worker vector); (5, OpenACC, #pragma acc parallel deviceptr(position,cell_keys))", "label": "(7, OpenACC, #pragma acc loop gang worker vector); (5, OpenACC, #pragma acc parallel deviceptr(position,cell_keys))"}
{"predict": "(6, TBB, tbb::flow::queue_node< q3_input_type >  q3(g);); (11, TBB, ASSERT(tbb::flow::input_port<0>(my_indexer).predecessor_count() == 0, NULL);); (7, TBB, tbb::flow::make_edge(my_indexer, q3);)", "label": "(6, TBB, tbb::flow::queue_node< q3_input_type >  q3(g);); (11, TBB, ASSERT(tbb::flow::input_port<0>(my_indexer).predecessor_count() == 0, NULL);); (7, TBB, tbb::flow::make_edge(my_indexer, q3);)"}
{"predict": "(5, TBB, tbb::atomic<bool> taskDoneFlag;); (84, TBB, tbb::task::enqueue(*t, p);); (82, TBB, const tbb::priority_t p = getPriorityByInt(i);); (8, TBB, tbb::task::enqueue(*w);); (12, TBB, FFTask* t = new( tbb::task::allocate_root() ) FFTask(&flag);); (98, TBB, tbb::atomic<int> counter;); (11, TBB, tbb::task::enqueue(*t);); (108, TBB, tbb::atomic<bool> signalToLeave;); (-4, TBB, tbb::atomic<int> flag;); (1, TBB, WaiterTask* w = new( tbb::task::allocate_root() ) WaiterTask(&taskDoneFlag);); (3, TBB, tbb::global_control c(tbb::global_control::max_allowed_parallelism, 1);)", "label": "(5, TBB, tbb::atomic<bool> taskDoneFlag;); (85, TBB, tbb::task::enqueue(*t, p);); (9, TBB, tbb::task::enqueue(*w);); (13, TBB, FFTask* t = new( tbb::task::allocate_root() ) FFTask(&flag);); (81, TBB, const tbb::priority_t p = getPriorityByInt(i);); (98, TBB, tbb::atomic<int> counter;); (11, TBB, tbb::task::enqueue(*t);); (108, TBB, tbb::atomic<bool> signalToLeave;); (-4, TBB, tbb::atomic<int> flag;); (1, TBB, WaiterTask* w = new( tbb::task::allocate_root() ) WaiterTask(&taskDoneFlag);); (3, TBB, tbb::global_control c(tbb::global_control::max_allowed_parallelism, 1);)"}
{"predict": "(24, MPI, open_opts[\"mpi_comm\"] = MPI_Comm_c2f(comm);); (7, MPI, MPI_Comm_rank(comm, &par_rank);); (7, MPI, MPI_Comm_size(comm, &par_size);)", "label": "(8, MPI, MPI_Comm_rank(comm, &par_rank);); (24, MPI, open_opts[\"mpi_comm\"] = MPI_Comm_c2f(comm);); (7, MPI, MPI_Comm_size(comm, &par_size);)"}
{"predict": "(8, OpenMP, #pragma omp parallel for)", "label": "(5, OpenMP, #pragma omp workshare)"}
{"predict": "(6, OpenCL, retVal = clEnqueueWriteBuffer(pCmdQ, unifiedMemoryPtr, CL_TRUE, 0, dataSize, input.data(), 0, nullptr, nullptr);)", "label": "(6, OpenCL, retVal = clEnqueueMemcpyINTEL(this->pCmdQ, true, unifiedMemoryPtr, input.data(), dataSize, 0, nullptr, nullptr);)"}
{"predict": "(98, OpenMP, #pragma omp master taskloop reduction(+ : r)); (123, OpenMP, #pragma omp master taskloop reduction(+ : m)); (82, OpenMP, #pragma omp master taskloop reduction(+ : h, k, B::x)); (51, OpenMP, #pragma omp master taskloop reduction(+ : z, a, b, c, d, f)); (61, OpenMP, #pragma omp master taskloop reduction(^ : fl)); (105, OpenMP, #pragma omp parallel reduction(* : fl)); (111, OpenMP, #pragma omp master taskloop reduction(+ : fl)); (121, OpenMP, #pragma omp master taskloop reduction(task, + : m)); (84, OpenMP, #pragma omp parallel private(k)); (34, OpenMP, #pragma omp master taskloop reduction(~ : argc)); (23, OpenMP, #pragma omp master taskloop reduction(\\)); (76, OpenMP, #pragma omp master taskloop private(i), reduction(+ : j), reduction(+ : q)); (103, OpenMP, #pragma omp parallel reduction(min : i)); (106, OpenMP, #pragma omp parallel private(fl)); (89, OpenMP, #pragma omp master taskloop reduction(+ : p), reduction(+ : p)); (49, OpenMP, #pragma omp master taskloop reduction(&& : argc)); (96, OpenMP, #pragma omp master taskloop reduction(max : j)); (78, OpenMP, #pragma omp parallel shared(i)); (4, OpenMP, #pragma omp master taskloop reduction(); (59, OpenMP, #pragma omp master taskloop reduction(&& : S2::S2s)); (18, OpenMP, #pragma omp master taskloop reduction(|| : argc > 0 ? argv[1] : argv[2])); (59, OpenMP, #pragma omp master taskloop reduction(& : e, g)); (60, OpenMP, #pragma omp master taskloop reduction(+ : o)); (20, OpenMP, #pragma omp master taskloop reduction(^ : S1)); (84, OpenMP, #pragma omp master taskloop reduction(+ : fl)); (69, OpenMP, #pragma omp master taskloop reduction(+ : ba)); (96, OpenMP,", "label": "(15, OpenMP, #pragma omp master taskloop reduction +); (65, OpenMP, #pragma omp master taskloop reduction(- : da)); (61, OpenMP, #pragma omp master taskloop reduction(* : ca)); (54, OpenMP, #pragma omp master taskloop reduction(max : h.b)); (47, OpenMP, #pragma omp master taskloop reduction(+ : a, b, c, d, f)); (55, OpenMP, #pragma omp master taskloop reduction(+ : ba)); (30, OpenMP, #pragma omp master taskloop reduction(| : argc,); (84, OpenMP, #pragma omp master taskloop reduction(+ : p), reduction(+ : p)); (46, OpenMP, #pragma omp master taskloop reduction(min : a, b, c, d, f)); (33, OpenMP, #pragma omp master taskloop reduction(~ : argc)); (38, OpenMP, #pragma omp master taskloop reduction(^ : S1)); (73, OpenMP, #pragma omp master taskloop reduction(+ : o)); (90, OpenMP, #pragma omp master taskloop reduction(max : j)); (11, OpenMP, #pragma omp master taskloop reduction()); (95, OpenMP, #pragma omp parallel reduction(* : fl)); (63, OpenMP, #pragma omp master taskloop reduction(& : e, g)); (65, OpenMP, #pragma omp master taskloop reduction(+ : h, k, B::x)); (73, OpenMP, #pragma omp parallel private(k)); (96, OpenMP, #pragma omp master taskloop reduction(+ : m)); (20, OpenMP, #pragma omp master taskloop reduction(|| : argc > 0 ? argv[1] : argv[2])); (-2, OpenMP, #pragma omp master taskloop reduction(); (24, OpenMP, #pragma omp master taskloop reduction(&& : argc, z)); (53, OpenMP, #pragma omp master taskloop reduction(&& : S2::S2sc)); (46, OpenMP, #pragma omp master taskloop reduction(^ : fl)); (6, OpenMP, #pragma omp master taskloop reduction(\\)); (-13, OpenMP, #pragma omp master taskloop reduction); (7, OpenMP, #pragma omp master taskloop reduction(foo : argc); (74, OpenMP, #pragma omp parallel reduction(min : i)); (77, OpenMP, #pragma omp parallel private(fl)); (91, OpenMP, #pragma omp master taskloop reduction(task, + : m)); (-9, OpenMP, #pragma omp master taskloop reduction(-); (86, OpenMP, #pragma omp master taskloop nogroup reduction(+ : m)); (65, OpenMP, #pragma omp master taskloop reduction(+ : r)); (-6, OpenMP, #pragma omp master taskloop reduction(*)); (53, OpenMP, #pragma omp master taskloop private(i), reduction(+ : j), reduction(+ : q)); (65, OpenMP, #pragma omp parallel shared(i)); (36, OpenMP, #pragma omp master taskloop reduction(&& : S2::S2s)); (69, OpenMP, #pragma omp master taskloop reduction(+ : fl))"}
{"predict": "(31, CUDA, __shared__ float4 pillarSumSM[32];); (34, CUDA, __shared__ int4 cordsSM[32];); (29, CUDA, __shared__ int pointsNumSM[32];); (29, CUDA, __shared__ float4 pillarOutSM[32][64][11];); (25, CUDA, __shared__ float4 pillarSM[32][max_points];)", "label": "(34, CUDA, __shared__ int pointsNumSM[4];); (30, CUDA, __shared__ float4 pillarSM[4][64];); (30, CUDA, __shared__ float4 pillarSumSM[4];); (30, CUDA, __shared__ int4 cordsSM[4];); (31, CUDA, __shared__ float pillarOutSM[4][64][11];)"}
{"predict": "(1, OpenMP, void *p = default_alloc(1024 * 1024, omp_get_default_allocator());)", "label": "(1, OpenMP, omp_allocator_handle_t default_alloc = omp_get_default_allocator();); (4, OpenMP, int *p = (int *)omp_alloc(123456*sizeof(int));)"}
{"predict": "(11, OpenMP, #pragma omp for simd reduction(inscan, +:a[:n], b)); (44, OpenMP, #pragma omp scan inclusive(a[:n], b)); (192, OpenMP, #pragma omp scan exclusive(a[:n], b))", "label": "(194, OpenMP, #pragma omp scan exclusive(a[:n], b)); (44, OpenMP, #pragma omp scan inclusive(a[:n], b)); (9, OpenMP, #pragma omp for reduction(inscan, +:a[:n], b))"}
{"predict": "(11, MPI, MPI_Comm_size(MPI_COMM_WORLD, &np);); (67, MPI, err = MPI_File_open(MPI_COMM_WORLD, filename, MPI_MODE_WRONLY, MPI_INFO_NULL, &fh);); (30, MPI, err = MPI_File_close(&fh);); (62, MPI, MPI_Type_commit(&filetype);); (25, MPI, err = MPI_File_write(fh, buf, MAXLEN, MPI_INT, &status);); (76, MPI, err = MPI_File_open(MPI_COMM_SELF, filename, MPI_MODE_RDONLY, MPI_INFO_NULL, &fh);); (5, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (46, MPI, MPI_Type_create_hindexed(num, blocklen, addrs, MPI_INT, &filetype);); (78, MPI, err = MPI_File_read(fh, buf, MAXLEN, MPI_INT, &status);); (62, MPI, err = MPI_File_set_view(fh, 0, MPI_INT, filetype, \"native\", MPI_INFO_NULL);); (65, MPI, err = MPI_File_write_all(fh, buf, buflen, MPI_INT, &status);); (49, MPI, MPI_Type_create_struct(num, blocklen, addrs, types, &filetype);); (24, MPI, MPI_Barrier(MPI_COMM_WORLD);); (54, MPI, MPI_Type_free(&filetype);)", "label": "(11, MPI, MPI_Comm_size(MPI_COMM_WORLD, &np);); (68, MPI, err = MPI_File_open(MPI_COMM_WORLD, filename, MPI_MODE_WRONLY, MPI_INFO_NULL, &fh);); (73, MPI, err = MPI_File_write_all(fh, buf, buflen, MPI_INT, &status);); (29, MPI, err = MPI_File_close(&fh);); (60, MPI, MPI_Type_commit(&filetype);); (24, MPI, err = MPI_File_write(fh, buf, MAXLEN, MPI_INT, &status);); (4, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (65, MPI, err = MPI_File_set_view(fh, 0, MPI_INT, filetype, \"native\", MPI_INFO_NULL);); (45, MPI, MPI_Type_create_hindexed(num, blocklen, addrs, MPI_INT, &filetype);); (76, MPI, err = MPI_File_open(MPI_COMM_SELF, filename, MPI_MODE_RDONLY, MPI_INFO_NULL, &fh);); (40, MPI, MPI_Type_indexed(num, blocklen, indices, MPI_INT, &filetype);); (67, MPI, MPI_Type_free(&filetype);); (76, MPI, err = MPI_File_read(fh, buf, MAXLEN, MPI_INT, &status);); (23, MPI, MPI_Barrier(MPI_COMM_WORLD);); (42, MPI, MPI_Type_create_struct(num, blocklen, addrs, types, &filetype);)"}
{"predict": "(21, OpenMP, #pragma omp parallel sections default(none)); (8, OpenMP, #pragma omp parallel sections default(shared), default(shared)); (3, OpenMP, #pragma omp parallel sections default()); (6, OpenMP, #pragma omp parallel sections default(none); (-2, OpenMP, #pragma omp parallel sections default); (-1, OpenMP, #pragma omp parallel sections default(); (13, OpenMP, #pragma omp parallel sections default(shared))", "label": "(5, OpenMP, #pragma omp parallel sections default()); (2, OpenMP, #pragma omp parallel sections default(); (7, OpenMP, #pragma omp parallel sections default(shared), default(shared)); (4, OpenMP, #pragma omp parallel sections default(none); (7, OpenMP, #pragma omp parallel sections default(x)); (16, OpenMP, #pragma omp parallel sections default(none)); (-5, OpenMP, #pragma omp parallel sections default); (21, OpenMP, #pragma omp parallel sections default(shared))"}
{"predict": "(16, CUDA, __shared__ float s_b[2][BK][BN];); (14, CUDA, __shared__ float s_a[2][BK][BM];)", "label": "(16, CUDA, __shared__ float s_a[2][BK][BM];); (16, CUDA, __shared__ float s_b[2][BK][BN];)"}
{"predict": "(17, OpenMP, volatile  int_t thread_id = omp_get_thread_num();)", "label": "(17, OpenMP, volatile  int_t thread_id = omp_get_thread_num();)"}
{"predict": "(9, TBB, tbb::tick_count t0 = tbb::tick_count::now();); (11, TBB, tbb::tick_count t1 = tbb::tick_count::now();); (7, TBB, tbb::parallel_for(tbb::blocked_range<size_t>(0,n,n/100),TwiddleInvariant<Invariant<M,8> >(invariant));)", "label": "(8, TBB, tbb::tick_count t0 = tbb::tick_count::now();); (9, TBB, tbb::tick_count t1 = tbb::tick_count::now();); (7, TBB, tbb::parallel_for(tbb::blocked_range<size_t>(0,n,n/100),TwiddleInvariant<Invariant<M,8> >(invariant));)"}
{"predict": "(36, MPI, errcode = MPI_File_iread_at_all(fh, off, buf2, BUFSIZE, MPI_INT, &request);); (25, MPI, errcode = MPI_File_open(MPI_COMM_WORLD, filename, MPI_MODE_CREATE | MPI_MODE_RDWR, info, &fh);); (12, MPI, MPI_Info_create(&info);); (27, MPI, MPI_Wait(&request, &status);); (22, MPI, errcode = MPI_File_iwrite_at_all(fh, off, buffer, BUFSIZE, MPI_INT, &request);); (8, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (26, MPI, errcode = MPI_File_close(&fh);); (31, MPI, errcode = MPI_File_open(MPI_COMM_WORLD, filename, MPI_MODE_RDONLY, info, &fh);)", "label": "(19, MPI, MPI_Info_set(info, \"cb_nodes\", \"1\");); (25, MPI, errcode = MPI_File_open(MPI_COMM_WORLD, filename, MPI_MODE_WRONLY | MPI_MODE_CREATE, info, &fh);); (27, MPI, errcode = MPI_File_iwrite_at_all(fh, off, buffer, BUFSIZE, MPI_INT, &request);); (30, MPI, errcode = MPI_File_close(&fh);); (28, MPI, MPI_Wait(&request, &status);); (12, MPI, MPI_Info_create(&info);); (9, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (33, MPI, errcode = MPI_File_iread_at_all(fh, off, buf2, BUFSIZE, MPI_INT, &request);); (10, MPI, MPI_Info_set(info, \"romio_cb_write\", \"enable\");); (43, MPI, MPI_Info_free(&info);); (27, MPI, errcode = MPI_File_open(MPI_COMM_WORLD, filename, MPI_MODE_RDONLY, info, &fh);)"}
{"predict": "(109, OpenMP, #pragma omp barrier); (75, OpenMP, nthread = omp_get_num_threads();); (92, OpenMP, #pragma omp for); (70, OpenMP, #pragma omp master); (67, OpenMP, #pragma omp parallel private(j,iter))", "label": "(109, OpenMP, #pragma omp barrier); (75, OpenMP, nthread = omp_get_num_threads();); (92, OpenMP, #pragma omp for); (71, OpenMP, #pragma omp master); (68, OpenMP, #pragma omp parallel private(j,iter))"}
{"predict": "(14, OpenMP, #pragma omp target parallel for)", "label": "(14, OpenMP, #pragma omp target parallel for)"}
{"predict": "(16, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &mpi_rank);)", "label": "(16, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &scri_rank);); (16, MPI, MPI_Comm_size(MPI_COMM_WORLD, &scri_ranks);)"}
{"predict": "(250, OpenCL, error = clSetKernelArg( kernel, 0, sizeof( cl_mem ), &inputStream );); (231, OpenCL, error = clSetKernelArg( kernel, 2, sizeof( int ), &lod );); (161, OpenCL, clReleaseMemObject(image);); (227, OpenCL, error = clSetKernelArg( kernel, 1, sizeof( cl_mem ), &image );); (251, OpenCL, error = clEnqueueNDRangeKernel( queue, kernel, 2, NULL, threads, NULL, 0, NULL, NULL );); (424, OpenCL, if (gTestImageUseHostPtr) maxImageUseHostPtrBackingStore = clCreateBuffer(context, CL_MEM_READ_WRITE, imageInfo->width * inputTypeSize, NULL, NULL);); (178, OpenCL, error = clEnqueueWriteBuffer( queue, image, CL_TRUE, 0, imageInfo->width * inputTypeSize, imageValues, 0, NULL, NULL );); (431, OpenCL, if (gTestImageUseHostPtr && maxImageUseHostPtrBackingStore) clReleaseMemObject(maxImageUseHostPtrBackingStore);); (166, OpenCL, error = clCreateImage( context, mem_flag_types[ mem_flag_index ], imageInfo->format, &imageInfo->region, NULL, &image );); (419, OpenCL, if (gTestImageUseHostPtr) image = clCreateBuffer(context, CL_MEM_READ_WRITE, imageInfo->width * inputTypeSize, NULL, NULL);); (236, OpenCL, threads[1] = (int)imageInfo->region.height;); (212, OpenCL, error = clSetKernelArg( kernel, 3, sizeof( int ), &forceCorrectlyRoundedWrites );); (233, OpenCL, threads[0] = (int)imageInfo->region.width;); (420, OpenCL, if (image) clReleaseMemObject(image);); (432, OpenCL, if (gTestImageUseHostPtr && image) clReleaseMemObject(maxImageUseHostPtrBackingStore);); (416, OpenCL, if (gTestImageUseHostPtr) maxImageUseHostPtrBackingStore =", "label": "(242, OpenCL, error = clSetKernelArg( kernel, 0, sizeof( cl_mem ), &inputStream );); (228, OpenCL, error = clSetKernelArg( kernel, 2, sizeof( int ), &lod );); (215, OpenCL, error = clSetKernelArg( kernel, 1, sizeof( cl_mem ), &image );); (244, OpenCL, error = clEnqueueNDRangeKernel( queue, kernel, 1, NULL, threads, NULL, 0, NULL, NULL );); (260, OpenCL, error = clEnqueueReadImage( queue, image, CL_TRUE, origin, region, gEnablePitch ? imageInfo->rowPitch : 0, 0, resultValues, 0, NULL, NULL );)"}
{"predict": "(9, MPI, MPI_Comm_rank( MPI_COMM_WORLD, &iam );)", "label": "(9, MPI, MPI_Comm_rank( MPI_COMM_WORLD, &iam );)"}
{"predict": "(36, MPI, MPI_File_close(&c_info->fh);)", "label": "(36, MPI, MPI_File_close(&c_info->fh);)"}
{"predict": "(8, OpenMP, #pragma omp parallel)", "label": "(8, OpenMP, #pragma omp parallel); (10, OpenMP, #pragma omp for); (14, OpenMP, #pragma omp critical)"}
{"predict": "(38, OpenMP, std::cout << \"Number of threads    = \" << omp_get_max_threads() << std::endl;)", "label": "(38, OpenMP, std::cout << \"Number of threads    = \" << omp_get_max_threads() << std::endl;)"}
{"predict": "(32, CUDA, CUDA_CHECK(cudaStreamSynchronize(stream));); (34, CUDA, CUDA_CHECK(cudaFree(d_data));)", "label": "(32, CUDA, CUDA_CHECK(cudaStreamSynchronize(stream));); (34, CUDA, CUDA_CHECK(cudaFree(d_data));)"}
{"predict": "(7, SYCL, sycl::accessor a(A, cgh, sycl::write_only, sycl::noinit);); (14, SYCL, sycl::accessor b(B, cgh, sycl::write_only, sycl::noinit);)", "label": "(16, SYCL, auto b = B.get_access<sycl::access_mode::write>(cgh);); (5, SYCL, auto a = A.get_access<sycl::access_mode::write>(cgh);)"}
{"predict": "(20, OpenCL, clReleaseMemObject(mobjA_);); (16, OpenCL, clReleaseMemObject(mobjX_);)", "label": "(20, OpenCL, clReleaseMemObject(mobjA_);); (16, OpenCL, clReleaseMemObject(mobjX_);)"}
{"predict": "(72, TBB, tbb::flow::make_edge( q, q2 );); (27, TBB, tbb::flow::queue_node<T> q2(g);); (44, TBB, tbb::flow::make_edge( q, q3 );); (26, TBB, tbb::flow::queue_node<T> q3(g);); (1, TBB, tbb::flow::graph g;); (55, TBB, tbb::flow::remove_edge( q, q2 );); (-2, TBB, tbb::flow::queue_node<T> q(g);)", "label": "(4, TBB, tbb::flow::queue_node<T> q2(g);); (70, TBB, tbb::flow::make_edge( q2, q3 );); (67, TBB, tbb::flow::queue_node<T> q3(g);); (37, TBB, tbb::flow::make_edge( q, q2 );); (56, TBB, tbb::flow::remove_edge( q, q2 );); (87, TBB, tbb::flow::remove_edge( q,  q2 );); (-3, TBB, tbb::flow::queue_node<T> q(g);); (-5, TBB, tbb::flow::graph g;)"}
{"predict": "(14, OpenCL, cl_command_queue cmdQ = clCreateCommandQueueWithProperties(context.get(), clDevice, properties, &retVal);); (38, OpenCL, retVal = clReleaseCommandQueue(cmdQ);); (1, OpenCL, clGetDeviceInfo(clDevice, CL_DEVICE_SLICE_COUNT_INTEL, sizeof(size_t), &maxSliceCount, nullptr);)", "label": "(14, OpenCL, cl_command_queue cmdQ = clCreateCommandQueueWithProperties(context.get(), clDevice, properties, &retVal);); (38, OpenCL, retVal = clReleaseCommandQueue(cmdQ);); (1, OpenCL, clGetDeviceInfo(clDevice, CL_DEVICE_SLICE_COUNT_INTEL, sizeof(size_t), &maxSliceCount, nullptr);)"}
{"predict": "(20, OpenMP, #pragma omp parallel for schedule (guided))", "label": "(205, OpenMP, const int th=omp_get_thread_num();); (19, OpenMP, #pragma omp parallel for schedule (guided))"}
{"predict": "(8, MPI, MPI_Init(&argc, &argv);); (MPI_Finalize();); (7, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (58, MPI, MPI_Finalize();); (6, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (82, MPI, MPI_Barrier(MPI_COMM_WORLD);)", "label": "(7, MPI, MPI_Init(&argc, &argv);); (85, MPI, MPI_Finalize();); (8, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (6, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (57, MPI, MPI_Barrier(MPI_COMM_WORLD);)"}
{"predict": "(13, CUDA, os << \"cudaMalloc((void**) &d_merged\" << T::name << \"GroupStartID\" << m.getIndex() << \", \" << sizeBytes << \");)", "label": "(14, CUDA, os << \"__device__ \";); (8, CUDA, os << \"__device__ __constant__ \";)"}
{"predict": "(7, OpenMP, #pragma omp target teams distribute parallel for)", "label": "(12, OpenMP, #pragma omp target teams); (9, OpenMP, #pragma omp target update to(vec.v[0:N])); (16, OpenMP, #pragma omp target update from(vec.v[0:N])); (10, OpenMP, #pragma omp distribute parallel for)"}
{"predict": "(12, OpenMP, #pragma omp target teams distribute parallel for map(tofrom: data[N/3:2*N/3]))", "label": "(12, OpenMP, #pragma omp target teams distribute parallel for)"}
{"predict": "(28, OpenCL, retVal = clReleaseMemObject(buffer);); (3, OpenCL, cl_mem notUsedBuffer = clCreateBuffer(clContext, flags, size, hostPtr, &retVal);); (20, OpenCL, retVal = clReleaseMemObject(subBuffer);); (3, OpenCL, cl_mem buffer = clCreateBuffer(clContext, flags, size, hostPtr, &retVal);); (10, OpenCL, cl_mem subBuffer = clCreateSubBuffer(buffer, flags, CL_BUFFER_CREATE_TYPE_REGION, &region, &retVal);); (22, OpenCL, retVal = clReleaseMemObject(notUsedBuffer);)", "label": "(21, OpenCL, retVal = clReleaseMemObject(subBuffer);); (26, OpenCL, retVal = clReleaseMemObject(notUsedBuffer);); (28, OpenCL, EXPECT_EQ(clReleaseContext(context), CL_SUCCESS);); (-2, OpenCL, cl_mem notUsedBuffer = clCreateBuffer(clContext, flags, size, hostPtr, &retVal);); (20, OpenCL, retVal = clReleaseMemObject(buffer);); (0, OpenCL, cl_mem buffer = clCreateBuffer(clContext, flags, size, hostPtr, &retVal);); (8, OpenCL, cl_mem subBuffer = clCreateSubBuffer(buffer, flags, CL_BUFFER_CREATE_TYPE_REGION, &region, &retVal);)"}
{"predict": "(167, MPI, rc = MPI_Reduce(usinbuf, usoutbuf, 3, MPI_UNSIGNED_SHORT, MPI_BXOR, 0, comm);); (247, MPI, rc = MPI_Reduce(iinbuf, ioutbuf, 3, MPI_INT, MPI_BXOR, 0, comm);); (23, MPI, MPI_Comm_size(comm, &size);); (34, MPI, rc = MPI_Reduce(cinbuf, coutbuf, 3, MPI_CHAR, MPI_BXOR, 0, comm);); (338, MPI, rc = MPI_Reduce(llinbuf, lloutbuf, 3, MPI_LONG_LONG, MPI_BXOR, 0, comm);); (63, MPI, rc = MPI_Reduce(scinbuf, scoutbuf, 3, MPI_SIGNED_CHAR, MPI_BXOR, 0, comm);); (92, MPI, rc = MPI_Reduce(ucinbuf, ucoutbuf, 3, MPI_UNSIGNED_CHAR, MPI_BXOR, 0, comm);); (127, MPI, rc = MPI_Reduce(sinbuf, soutbuf, 3, MPI_SHORT, MPI_BXOR, 0, comm);); (271, MPI, rc = MPI_Reduce(ulinbuf, uloutbuf, 3, MPI_UNSIGNED_LONG, MPI_BXOR, 0, comm);); (15, MPI, MPI_Comm_set_errhandler(comm, MPI_ERRORS_RETURN);); (180, MPI, rc = MPI_Reduce(uinbuf, uoutbuf, 3, MPI_UNSIGNED, MPI_BXOR, 0, comm);); (216, MPI, rc = MPI_Reduce(llinbuf, lloutbuf, 3, MPI_LONG, MPI_BXOR, 0, comm);); (9, MPI, MPI_Comm_rank(comm, &rank);); (11, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);); (240, MPI, rc = MPI_Reduce(linbuf, loutbuf, 3, MPI_LONG, MPI_BXOR, 0, comm);)", "label": "(25, MPI, MPI_Comm_size(comm, &size);); (97, MPI, rc = MPI_Reduce(ucinbuf, ucoutbuf, 3, MPI_UNSIGNED_CHAR, MPI_BXOR, 0, comm);); (156, MPI, rc = MPI_Reduce(sinbuf, soutbuf, 3, MPI_SHORT, MPI_BXOR, 0, comm);); (125, MPI, rc = MPI_Reduce(cinbuf, coutbuf, 3, MPI_BYTE, MPI_BXOR, 0, comm);); (274, MPI, rc = MPI_Reduce(linbuf, loutbuf, 3, MPI_LONG, MPI_BXOR, 0, comm);); (63, MPI, rc = MPI_Reduce(scinbuf, scoutbuf, 3, MPI_SIGNED_CHAR, MPI_BXOR, 0, comm);); (31, MPI, rc = MPI_Reduce(cinbuf, coutbuf, 3, MPI_CHAR, MPI_BXOR, 0, comm);); (335, MPI, rc = MPI_Reduce(llinbuf, lloutbuf, 3, MPI_LONG_LONG, MPI_BXOR, 0, comm);); (14, MPI, MPI_Comm_set_errhandler(comm, MPI_ERRORS_RETURN);); (299, MPI, rc = MPI_Reduce(ulinbuf, uloutbuf, 3, MPI_UNSIGNED_LONG, MPI_BXOR, 0, comm);); (238, MPI, rc = MPI_Reduce(iinbuf, ioutbuf, 3, MPI_INT, MPI_BXOR, 0, comm);); (13, MPI, MPI_Comm_rank(comm, &rank);); (206, MPI, rc = MPI_Reduce(uinbuf, uoutbuf, 3, MPI_UNSIGNED, MPI_BXOR, 0, comm);); (175, MPI, rc = MPI_Reduce(usinbuf, usoutbuf, 3, MPI_UNSIGNED_SHORT, MPI_BXOR, 0, comm);)"}
{"predict": "(19, CUDA, ColorSpinorParam cudaParam(cpuParam, *inv_param, QUDA_CUDA_FIELD_LOCATION);)", "label": "(19, CUDA, ColorSpinorParam cudaParam(cpuParam, *inv_param, QUDA_CUDA_FIELD_LOCATION);)"}
{"predict": "(144, OpenMP, lsm303ah_mg_offset_temp_comp_set(&dev_ctx_mg, PROPERTY_ENABLE);)", "label": "(145, OpenMP, lsm303ah_mg_offset_temp_comp_set(&dev_ctx_mg, PROPERTY_ENABLE);)"}
{"predict": "(87, OpenMP, test_comp_vlen_strings(COMP_VL_STRS_FILE, \"group\", 1);); (87, OpenMP, test_comp_vlen_strings(COMP_VL_STRS_FILE, \"group_copy\", 0);)", "label": "(87, OpenMP, test_comp_vlen_strings(COMP_VL_STRS_FILE, \"group\", 1);); (87, OpenMP, test_comp_vlen_strings(COMP_VL_STRS_FILE, \"group_copy\", 0);)"}
{"predict": "(22, CUDA, nvinfer1::ICudaEngine* engine = builder->buildCudaEngine(*network);)", "label": "(22, CUDA, nvinfer1::ICudaEngine* engine = builder->buildCudaEngine(*network);)"}
{"predict": "(35, OpenCL, streams[1] = clCreateBuffer(context, CL_MEM_READ_WRITE, length, NULL, &err);); (57, OpenCL, err |= clSetKernelArg(kernel, 1, sizeof streams[0], &streams[0]);); (58, OpenCL, err |= clSetKernelArg(kernel, 2, sizeof sampler, &sampler);); (55, OpenCL, err |= clSetKernelArg(kernel, 0, sizeof streams[1], &streams[1]);)", "label": "(58, OpenCL, err = clSetKernelArg(kernel, 0, sizeof(streams[0]), &streams[0]);); (58, OpenCL, err |= clSetKernelArg(kernel, 1, sizeof(streams[1]), &streams[1]);); (58, OpenCL, err |= clSetKernelArg(kernel, 2, sizeof(sampler), &sampler);); (33, OpenCL, streams[1] = clCreateBuffer(context, CL_MEM_READ_WRITE, length, NULL, &err);)"}
{"predict": "(41, CUDA, cudaDeviceSynchronize();)", "label": "(41, CUDA, cudaDeviceSynchronize();)"}
{"predict": "(5, OpenMP, #pragma omp atomic)", "label": "(7, OpenMP, #pragma omp atomic)"}
{"predict": "(21, CUDA, cudaMemcpy(&max, tempCfl, sizeof(float), cudaMemcpyDeviceToHost);)", "label": "(21, CUDA, CUDA_SAFE_CALL(cudaMemcpy(&max, tempCfl, sizeof(float), cudaMemcpyDeviceToHost));)"}
{"predict": "(24, CUDA, cudaSetDevice(deviceId);); (20, CUDA, cudaGetDeviceCount(&nDevices);); (9, MPI, MPIManager mpi_manager(MPI_COMM_WORLD);)", "label": "(24, CUDA, cudaSetDevice(deviceId);); (20, CUDA, cudaGetDeviceCount(&nDevices);); (9, MPI, MPIManager mpi_manager(MPI_COMM_WORLD);)"}
{"predict": "(8, OpenMP, #pragma omp distribute parallel for schedule(guided, argc) default(none) copyin(g) dist_schedule(static, a) private(a), shared(argc)); (19, OpenMP, #pragma omp distribute parallel for private(argc, b), firstprivate(argv, c), lastprivate(d, f) collapse(2) schedule(auto) if (argc) num_threads(a) default(shared) shared(e) reduction(+ : h) dist_schedule(static, b)); (16, OpenMP, #pragma omp target); (16, OpenMP, #pragma omp teams)", "label": "(5, OpenMP, #pragma omp threadprivate(g)); (21, OpenMP, #pragma omp distribute parallel for private(argc, b), firstprivate(argv, c), lastprivate(d, f) collapse(2) schedule(auto) if (argc) num_threads(a) default(shared) shared(e) reduction(+ : h) dist_schedule(static, b)); (7, OpenMP, #pragma omp distribute parallel for schedule(guided, argc) default(none) copyin(g) dist_schedule(static, a) private(a) shared(argc)); (4, OpenMP, #pragma omp target); (4, OpenMP, #pragma omp teams)"}
{"predict": "(33, MPI, mpi_errno = MPI_Waitall(block, req, error_status);); (9, MPI, MPI_Comm_size(MPI_COMM_WORLD, &nproc);); (7, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (20, MPI, mpi_errno = MPI_Comm_dup(MPI_COMM_WORLD, &comm_hdls[i]);); (44, MPI, mpi_errno = MPI_Comm_dupall(block, req, comm_hdls + ncomm);); (7, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);)", "label": "(11, MPI, MPI_Comm_size(MPI_COMM_WORLD, &nproc);); (9, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (22, MPI, mpi_errno = MPI_Waitall(block, req, error_status);); (10, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);); (47, MPI, mpi_errno = MPI_Waitall(block, req, MPI_STATUSES_IGNORE);); (17, MPI, MPI_Comm_idup(MPI_COMM_WORLD, &comm_hdls[i], &req[block++]);); (28, MPI, mpi_errno = MPI_Wait(&req[j], MPI_STATUSES_IGNORE);)"}
{"predict": "(13, TBB, double serial_time = (tbb::tick_count::now() - t0).seconds();); (10, TBB, tbb::tick_count t0 = tbb::tick_count::now();); (19, TBB, double tbb_time = (tbb::tick_count::now() - t1).seconds();); (16, TBB, tbb::tick_count t1 = tbb::tick_count::now();)", "label": "(13, TBB, double serial_time = (tbb::tick_count::now() - t0).seconds();); (10, TBB, tbb::tick_count t0 = tbb::tick_count::now();); (19, TBB, double tbb_time = (tbb::tick_count::now() - t1).seconds();); (16, TBB, tbb::tick_count t1 = tbb::tick_count::now();)"}
{"predict": "(3, CUDA, extern __shared__ double sdat[];)", "label": "(3, CUDA, extern __shared__ double sdat[];)"}
{"predict": "(80, OpenMP, #pragma\tomp\ttaskloop private (nn,lbstart,lbend,thread_id1,rtemp_loc) untied); (140, OpenMP, #pragma omp simd); (81, OpenMP, #pragma omp taskloop private (nn,lbstart,lbend,thread_id1,rtemp_loc) untied)", "label": "(82, OpenMP, #pragma\tomp\ttaskloop firstprivate (stat) private (thread_id1,Uinv,nn,lbstart,lbend,ub,temp,rtemp_loc,ik,lk1,gik,gikcol,usub,uval,lsub,lusup,iknsupc,il,i,irow,bmod_tmp,p,ii,jj,t1,t2,j,ikfrow,iklrow,dest,y,uptr,fnz,nsupr,nroot_send_tmp) untied nogroup); (126, OpenMP, #pragma omp simd); (141, OpenMP, #pragma omp atomic capture); (75, OpenMP, #pragma\tomp\tparallel for private (thread_id1,Uinv,nn,lbstart,lbend,ub,temp,rtemp_loc,ik,lk1,gik,gikcol,usub,uval,lsub,lusup,iknsupc,il,i,irow,bmod_tmp,p,ii,jj,t1,t2,j,ikfrow,iklrow,dest,y,uptr,fnz,nsupr))"}
{"predict": "(14, CUDA, thrust::host_vector<PJ_COORD> input(num_points);); (7, CUDA, thrust::device_vector<PJ_COORD> d_output(num_points);); (15, CUDA, thrust::copy(pj_input.begin(), pj_input.end(), d_output.begin());)", "label": "(8, CUDA, auto input   = thrust::host_vector<coordinate<T>>(d_input);)"}
{"predict": "(17, TBB, my_n_thread = tbb::internal::rml::get_num_threads(\"TBB_MIN_THREADS\");); (19, TBB, my_thread_array = tbb::cache_aligned_allocator<padded_ipc_worker>().allocate( my_n_thread );)", "label": "(20, TBB, my_thread_array = tbb::cache_aligned_allocator<padded_ipc_worker>().allocate( my_n_thread );); (14, TBB, my_n_thread = tbb::detail::r1::AvailableHwConcurrency();); (25, TBB, my_waker = tbb::cache_aligned_allocator<ipc_waker>().allocate(1);); (27, TBB, my_stopper = tbb::cache_aligned_allocator<ipc_stopper>().allocate(1);)"}
{"predict": "(78, OpenMP, #pragma omp teams distribute parallel for num_teams(20) num_threads(512)); (18, OpenMP, #pragma omp distribute parallel for); (45, OpenMP, #pragma omp distribute parallel for num_threads(64)); (35, OpenMP, #pragma omp teams num_teams(20) thread_limit(768)); (13, OpenMP, #pragma omp target teams num_teams(20) thread_limit(128)); (22, OpenMP, #pragma omp target teams num_teams(20) thread_limit(256)); (5, OpenMP, #pragma omp target)", "label": "(19, OpenMP, #pragma omp distribute parallel for); (17, OpenMP, #pragma omp target); (45, OpenMP, #pragma omp distribute parallel for num_threads(128)); (72, OpenMP, #pragma omp teams distribute parallel for thread_limit(512) num_threads(128)); (22, OpenMP, #pragma omp target teams thread_limit(64)); (76, OpenMP, #pragma omp teams distribute parallel for); (29, OpenMP, #pragma omp teams)"}
{"predict": "(106, CUDA, checkCudaErrors(cudaFree(d_idata));); (106, CUDA, checkCudaErrors(cudaFree(d_odata));); (12, CUDA, checkCudaErrors(cudaGetDeviceProperties(&prop, device));); (64, CUDA, checkCudaErrors(cudaMalloc((void **)&d_idata, bytes));); (64, CUDA, checkCudaErrors(cudaMalloc((void **)&d_odata, numBlocks * sizeof(float)));); (66, CUDA, checkCudaErrors(cudaMemcpy(d_idata, h_idata, bytes, cudaMemcpyHostToDevice));)", "label": "(68, CUDA, checkCudaErrors(cudaMalloc((void **)&d_odata, numBlocks * sizeof(float)));); (105, CUDA, cudaFree(d_odata);); (65, CUDA, checkCudaErrors(cudaMalloc((void **)&d_idata, bytes));); (10, CUDA, checkCudaErrors(cudaGetDeviceProperties(&prop, device));); (8, CUDA, checkCudaErrors(cudaSetDevice(device));); (100, CUDA, cudaFree(d_idata);); (65, CUDA, checkCudaErrors(cudaMemcpy(d_idata, h_idata, bytes, cudaMemcpyHostToDevice));)"}
{"predict": "(20, CUDA, cudaFree(res_dev);); (10, CUDA, cudaMalloc(&res_dev, sizeof(float));); (12, CUDA, cudaMemcpy(&res_host, res_dev, sizeof(float), cudaMemcpyDeviceToHost);)", "label": "(20, CUDA, cudaFree(res_dev);); (10, CUDA, cudaMalloc(&res_dev, sizeof(float));); (12, CUDA, cudaMemcpy(&res_host, res_dev, sizeof(float), cudaMemcpyDeviceToHost);)"}
{"predict": "(2, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (2, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);)", "label": "(2, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (2, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);)"}
{"predict": "(13, TBB, return tbb::parallel_deterministic_reduce(r, 0, accum, std::plus<Gain>(), tbb::simple_partitioner());); (5, TBB, auto r = tbb::blocked_range<size_t>(UL(0), end, 1000);)", "label": "(14, TBB, return tbb::parallel_reduce(range, 0, accum, std::plus<>());); (3, TBB, auto range = tbb::blocked_range<size_t>(UL(0), end);)"}
{"predict": "(12, CUDA, cudaDeviceSynchronize();)", "label": "(12, CUDA, cudaDeviceSynchronize();)"}
{"predict": "(11, MPI, MPI_Type_size_x(type, &typesize);)", "label": "(11, MPI, MPI_Type_size_x(type, &typesize);)"}
{"predict": "(15, MPI, MPI_Finalize();); (1, MPI, MPI_Init(&argc,&argv);)", "label": "(15, MPI, MPI_Finalize();); (1, MPI, MPI_Init(&argc,&argv);)"}
{"predict": "(77, CUDA, flamegpu::CUDASimulation cudaSimulation(model);)", "label": "(80, CUDA, flamegpu::CUDASimulation cudaSimulation(model);)"}
{"predict": "(16, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &mpi_rank);); (16, MPI, MPI_Comm_size(MPI_COMM_WORLD, &mpi_size);)", "label": "(16, MPI, MPI_Comm_size(MPI_COMM_WORLD,&mpi_size);); (16, MPI, MPI_Comm_rank(MPI_COMM_WORLD,&mpi_rank);)"}
{"predict": "(62, MPI, MPI_Unpack(pack_buf, pack_size, &pos, buf, 1, datatype, MPI_COMM_WORLD);); (35, MPI, MPI_Type_size_x(datatype, &type_size);); (55, MPI, MPI_Pack(buf, 1, datatype, pack_buf, pack_size, &pos, MPI_COMM_WORLD);); (33, MPI, MPI_Pack_size(1, datatype, MPI_COMM_WORLD, &pack_size);)", "label": "(63, MPI, MPI_Unpack(check_pack_buf, pack_size, &pos, unpack_buf, 1, datatype, MPI_COMM_WORLD);); (6, MPI, MPI_Type_size_c(datatype, &type_size);); (34, MPI, MPI_Pack_size(1, datatype, MPI_COMM_WORLD, &pack_size);); (54, MPI, MPI_Pack(check_unpack_buf, 1, datatype, pack_buf, pack_size, &pos, MPI_COMM_WORLD);)"}
{"predict": "(4, OpenMP, #pragma omp parallel for)", "label": "(4, OpenMP, #pragma omp parallel for)"}
{"predict": "(171, OpenCL, err = clEnqueueVerifyBuffer(queue, pThreadData->m_input_ptr[0], pThreadData->m_input_ptr[1], pThreadData->m_expected_result, num_elements * vectorSize * sizeof(cl_uint), startIndx, endIndx, 0, NULL, NULL);); (112, OpenCL, err = clEnqueueWriteBuffer(queue, pThreadData->m_input_buffer[0], CL_TRUE, 0, num_elements * vectorSize * sizeof(cl_char), pThreadData->m_input_ptr[ 0 ], 0, NULL, NULL);); (171, OpenCL, clReleaseKernel(kernel);); (113, OpenCL, err = clEnqueueNDRangeKernel(queue, kernel, 1, NULL, threads, NULL, 0, NULL, NULL);); (116, OpenCL, err = clEnqueueReadBuffer(queue, pThreadData->m_result_buffer, CL_TRUE, 0, num_elements * vectorSize * sizeof(cl_uint), pThreadData->m_result_ptr, 0, NULL, NULL);); (105, OpenCL, err = clEnqueueWriteBuffer(queue, pThreadData->m_input_buffer[1], CL_TRUE, 0, num_elements * vectorSize * sizeof(cl_char), pThreadData->m_input_ptr[ 1 ], 0, NULL, NULL);); (32, OpenCL, cl_kernel kernel = clCreateKernel(programs[ testID ], test_names[ testID ], &err);)", "label": "(113, OpenCL, err = clEnqueueWriteBuffer( queue, pThreadData->m_streams[1], CL_FALSE, 0, pThreadData->m_type_size*num_elements * inputBVecSize, (void *)pThreadData->m_input_ptr[1], 0, NULL, NULL );); (110, OpenCL, err = clEnqueueWriteBuffer(queue, pThreadData->m_streams[0], CL_FALSE, 0, pThreadData->m_type_size*num_elements * inputAVecSize, (void *)pThreadData->m_input_ptr[0], 0, NULL, NULL);); (117, OpenCL, err = clEnqueueReadBuffer( queue, pThreadData->m_streams[2], CL_TRUE, 0, pThreadData->m_type_size*num_elements * vectorSize, (void *)pThreadData->m_output_ptr, 0, NULL, NULL );); (113, OpenCL, err = clEnqueueNDRangeKernel( queue, pThreadData->m_kernel[i], 1, NULL, threads, NULL, 0, NULL, NULL );)"}
{"predict": "(113, OpenMP, if (iter==1) stencil_time = omp_get_wtime();); (125, OpenMP, stencil_time = omp_get_wtime() - stencil_time;)", "label": "(114, OpenMP, if (iter==1) stencil_time = omp_get_wtime();); (59, OpenMP, std::cout << \"Number of threads (max)   = \" << omp_get_max_threads() << std::endl;); (125, OpenMP, stencil_time = omp_get_wtime() - stencil_time;)"}
{"predict": "(36, CUDA, cudaMalloc((void**)(&d_out), out_bytes);); (83, CUDA, cudaFree(d_in);); (83, CUDA, cudaFree(d_out);); (32, CUDA, cudaMalloc((void**)(&d_in), in_bytes);); (45, CUDA, assert(cudaStreamSynchronize(gpu_device.stream()) == cudaSuccess);); (33, CUDA, cudaMemcpy(d_in, tensor.data(), in_bytes, cudaMemcpyHostToDevice);); (42, CUDA, assert(cudaMemcpyAsync(tensor_arg.data(), d_out, out_bytes, cudaMemcpyDeviceToHost, gpu_device.stream()) == cudaSuccess);)", "label": "(36, CUDA, cudaMalloc((void**)(&d_out), out_bytes);); (83, CUDA, cudaFree(d_in);); (83, CUDA, cudaFree(d_out);); (32, CUDA, cudaMalloc((void**)(&d_in), in_bytes);); (45, CUDA, assert(cudaStreamSynchronize(gpu_device.stream()) == cudaSuccess);); (33, CUDA, cudaMemcpy(d_in, tensor.data(), in_bytes, cudaMemcpyHostToDevice);); (42, CUDA, assert(cudaMemcpyAsync(tensor_arg.data(), d_out, out_bytes, cudaMemcpyDeviceToHost, gpu_device.stream()) == cudaSuccess);)"}
{"predict": "(13, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (28, MPI, MPI_Send(buf, 1, newtype, 1, 123, MPI_COMM_WORLD);); (36, MPI, MPI_Type_free(&newtype);); (17, MPI, MPI_Get_address(&count, &displs[0]);); (20, MPI, MPI_Type_commit(&newtype);); (17, MPI, MPI_Type_create_struct(2, lens, displs, types, &newtype);); (26, MPI, MPI_Recv(buf, 1, newtype, 0, 123, MPI_COMM_WORLD, MPI_STATUS_IGNORE);)", "label": "(30, MPI, MPI_Send(MPI_BOTTOM, 1, newtype, 1, 0, MPI_COMM_WORLD);); (23, MPI, MPI_Type_commit(&newtype);); (11, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (20, MPI, MPI_Type_create_struct(2, lens, displs, types, &newtype);); (15, MPI, MPI_Get_address(&count, &displs[0]);); (27, MPI, MPI_Recv(buf, 6, MPI_INT, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);); (35, MPI, MPI_Type_free(&newtype);); (15, MPI, types[1] = MPI_Type_f2c(*ftype);)"}
{"predict": "(15, OpenMP, #pragma omp master taskloop simd linear (); (10, OpenMP, #pragma omp master taskloop simd linear(f) linear(f)); (29, OpenMP, #pragma omp master taskloop simd linear (argc, z)); (40, OpenMP, #pragma omp master taskloop simd linear(val(e, g))); (13, OpenMP, #pragma omp master taskloop simd linear ()); (35, OpenMP, #pragma omp master taskloop simd linear(val(i))); (14, OpenMP, #pragma omp master taskloop simd linear (argc); (45, OpenMP, #pragma omp master taskloop simd linear(i)); (23, OpenMP, #pragma omp master taskloop simd linear (S1)); (38, OpenMP, #pragma omp parallel); (19, OpenMP, #pragma omp master taskloop simd linear (argc > 0 ? argv[1] : argv[2])); (27, OpenMP, #pragma omp master taskloop simd linear(a, b)); (20, OpenMP, #pragma omp master taskloop simd linear (argv[1])); (13, OpenMP, #pragma omp master taskloop simd linear (argc,); (42, OpenMP, #pragma omp master taskloop simd linear(i : 4)); (30, OpenMP, #pragma omp master taskloop simd linear(uval(i) : 4)); (26, OpenMP, #pragma omp master taskloop simd linear(h, C::x)); (-6, OpenMP, #pragma omp master taskloop simd linear); (36, OpenMP, #pragma omp master taskloop simd linear(ref(j))); (7, OpenMP, #pragma omp master taskloop simd linear (argc /); (30, OpenMP, #pragma omp master taskloop simd linear(ref(e, g))); (0, OpenMP, #pragma omp master taskloop simd linear (argc)", "label": "(11, OpenMP, #pragma omp taskloop simd linear(f) linear(f)); (54, OpenMP, #pragma omp taskloop simd linear(ref(j))); (35, OpenMP, #pragma omp taskloop simd linear(a, b)); (26, OpenMP, #pragma omp taskloop simd linear (argc > 0 ? argv[1] : argv[2])); (27, OpenMP, #pragma omp taskloop simd linear (argc, z)); (10, OpenMP, #pragma omp taskloop simd linear (); (39, OpenMP, #pragma omp taskloop simd linear(h, C::x)); (16, OpenMP, #pragma omp taskloop simd linear (foo())); (49, OpenMP, #pragma omp taskloop simd linear(i)); (38, OpenMP, #pragma omp parallel); (17, OpenMP, #pragma omp taskloop simd linear (argc,); (2, OpenMP, #pragma omp taskloop simd linear); (13, OpenMP, #pragma omp taskloop simd linear (argc); (37, OpenMP, #pragma omp taskloop simd linear(val(i))); (19, OpenMP, #pragma omp taskloop simd linear (S1)); (24, OpenMP, #pragma omp taskloop simd linear (argv[1])); (3, OpenMP, #pragma omp taskloop simd linear (val); (4, OpenMP, #pragma omp taskloop simd linear (ref())); (34, OpenMP, #pragma omp taskloop simd linear(uval(i) : 4)); (24, OpenMP, #pragma omp taskloop simd linear(val(e, g))); (-3, OpenMP, #pragma omp taskloop simd linear ())"}
{"predict": "(1, OpenMP, #pragma omp taskyield); (2, OpenMP, #pragma omp taskyield untied); (2, OpenMP, #pragma omp taskyield unknown)", "label": "(3, OpenMP, #pragma omp taskyield untied); (0, OpenMP, #pragma omp taskyield); (2, OpenMP, #pragma omp taskyield unknown)"}
{"predict": "(8, CUDA, cudaFuncGetAttributes(&attr,ptr);); (6, CUDA, cudaOccupancyMaxPotentialBlockSize(&mingridsize,&qblocksize,(const void*)ptr,0,0);)", "label": "(9, CUDA, cudaFuncGetAttributes(&attr,(void*)ptr);); (14, CUDA, fcuda::Check_CudaErroorFun(\"Error collecting kernel information.\");); (5, CUDA, cudaOccupancyMaxPotentialBlockSize(&mingridsize,&qblocksize,(void*)ptr,0,0);)"}
{"predict": "(52, TBB, tbb::flow::make_edge( b2, b3 );); (50, TBB, tbb::flow::make_edge( b, b2 );); (73, TBB, tbb::flow::buffer_node<T> b_copy(b);); (2, TBB, tbb::flow::buffer_node<T> b3(g);); (0, TBB, tbb::flow::buffer_node<T> b2(g);); (-3, TBB, tbb::flow::graph g;); (-3, TBB, tbb::flow::buffer_node<T> b(g);)", "label": "(52, TBB, tbb::flow::make_edge( b2, b3 );); (50, TBB, tbb::flow::make_edge( b, b2 );); (73, TBB, tbb::flow::buffer_node<T> b_copy(b);); (2, TBB, tbb::flow::buffer_node<T> b3(g);); (0, TBB, tbb::flow::buffer_node<T> b2(g);); (-3, TBB, tbb::flow::graph g;); (-3, TBB, tbb::flow::buffer_node<T> b(g);)"}
{"predict": "(132, OpenCL, err |= clSetKernelArg(kernel, 2, sizeof streams[2], &streams[2]);); (130, OpenCL, err |= clSetKernelArg(kernel, 1, sizeof streams[1], &streams[1]);); (128, OpenCL, err |= clSetKernelArg(kernel, 0, sizeof streams[0], &streams[0]);); (132, OpenCL, err |= clSetKernelArg(kernel, 3, sizeof streams[3], &streams[3]);)", "label": "(132, OpenCL, err |= clSetKernelArg(kernel, 1, sizeof(cl_mem), &streams[1]);); (132, OpenCL, err |= clSetKernelArg(kernel, 2, sizeof(cl_mem), &streams[2]);); (132, OpenCL, err |= clSetKernelArg(kernel, 3, sizeof(cl_mem), &streams[3]);); (128, OpenCL, err = clSetKernelArg(kernel, 0, sizeof(cl_mem), &streams[0]);)"}
{"predict": "(26, OpenMP, #pragma omp parallel default(shared)); (11, OpenMP, #pragma omp parallel); (30, OpenMP, #pragma omp parallel num_threads(x)); (16, OpenMP, #pragma omp parallel default(none)); (36, OpenMP, #pragma omp parallel default(firstprivate)); (7, OpenMP, #pragma omp parallel default(none); (-1, OpenMP, #pragma omp parallel default(); (17, OpenMP, #pragma omp parallel default(x))", "label": "(19, OpenMP, #pragma omp parallel default(shared)); (11, OpenMP, #pragma omp parallel); (38, OpenMP, #pragma omp parallel num_threads(x)); (23, OpenMP, #pragma omp parallel default(none)); (29, OpenMP, #pragma omp parallel default(firstprivate))"}
{"predict": "(3, TBB, typedef tbb::blocked_range2d<row_type,col_type> range_type;); (19, TBB, AssertSameType( r.cols(), tbb::blocked_range<col_type>( coli, colj, 1 ));); (22, TBB, range_type r2(r,tbb::split());); (16, TBB, AssertSameType( r.rows(), tbb::blocked_range<row_type>( rowi, rowj, 1 ));)", "label": "(24, TBB, range_type r2(r,tbb::split());); (2, TBB, typedef tbb::blocked_range2d<row_type,col_type> range_type;); (18, TBB, AssertSameType( r.cols(), tbb::blocked_range<col_type>( coli, colj, 1 ));); (16, TBB, AssertSameType( r.rows(), tbb::blocked_range<row_type>( rowi, rowj, 1 ));)"}
{"predict": "(15, OpenMP, #pragma omp flush); (23, OpenMP, #pragma omp critical); (7, OpenMP, #pragma omp parallel); (8, OpenMP, #pragma omp for private(sum1)); (10, OpenMP, #pragma omp orphaned)", "label": "(13, OpenMP, #pragma omp for private(sum0) schedule(static,1)); (7, OpenMP, #pragma omp parallel); (22, OpenMP, #pragma omp critical); (13, OpenMP, #pragma omp flush)"}
{"predict": "(150, MPI, MPI_CALL(MPI_Barrier(MPI_COMM_WORLD));); (22, MPI, MPI_CALL(MPI_Comm_free(&local_comm));); (244, CUDA, CUDA_RT_CALL(cudaStreamDestroy(compute_stream));); (204, MPI, double stop = MPI_Wtime();); (253, CUDA, CUDA_RT_CALL(cudaFree(a));); (-2, MPI, MPI_CALL(MPI_Comm_rank(MPI_COMM_WORLD, &rank));); (86, CUDA, CUDA_RT_CALL(cudaDeviceSynchronize());); (20, CUDA, CUDA_RT_CALL(cudaFree(0));); (18, CUDA, CUDA_RT_CALL(cudaSetDevice(local_rank%num_devices));); (60, CUDA, CUDA_RT_CALL(cudaMalloc(&a, nx * (chunk_size + 2) * sizeof(real)));); (239, CUDA, CUDA_RT_CALL(cudaFree(l2_norm_d));); (32, CUDA, CUDA_RT_CALL(cudaMallocHost(&a_h, nx * ny * sizeof(real)));); (29, CUDA, CUDA_RT_CALL(cudaMallocHost(&a_ref_h, nx * ny * sizeof(real)));); (82, CUDA, CUDA_RT_CALL(cudaGetLastError());); (231, CUDA, CUDA_RT_CALL(cudaEventDestroy(compute_done));); (56, CUDA, CUDA_RT_CALL(cudaMalloc(&a_new, nx * (chunk_size + 2) * sizeof(real)));); (-11, MPI, MPI_CALL(MPI_Comm_size(MPI_COMM_WORLD, &size));); (77, CUDA, CUDA_RT_CALL(cudaStreamCreate(&compute_stream));); (92, CUDA, CUDA_RT_CALL(cudaEventCreate(&compute_done));); (220, CUDA, CUDA_RT_CALL(cudaFreeHost(a_ref_h));); (45, CUDA, CUDA_RT_CALL(cudaMemset(a_new, 0, nx * (chunk_size + 2) * sizeof(real)));); (-11, CUDA, CUDA_RT_CALL(cudaGetDeviceCount(&num_devices));); (222, CUDA, CUDA_RT_CALL(cudaFreeHost(l2_norm_h));); (16, MPI, MPI_CALL(MPI_Finalize());); (148, CUDA, CUDA_RT_CALL(cudaStreamSynchronize(compute_stream));); (-19, MPI, MPI_CALL(MPI_Init(&argc, &argv));); (211, CUDA, CUDA_RT_CALL(cudaEventDestroy(reset_l2_norm_done", "label": "(118, CUDA, CUDA_RT_CALL(cudaEventCreateWithFlags(&reset_l2norm_done, cudaEventDisableTiming));); (143, MPI, MPI_CALL(MPI_Barrier(MPI_COMM_WORLD));); (21, MPI, MPI_CALL(MPI_Comm_free(&local_comm));); (249, CUDA, CUDA_RT_CALL(cudaStreamDestroy(compute_stream));); (201, MPI, double stop = MPI_Wtime();); (244, CUDA, CUDA_RT_CALL(cudaEventDestroy(push_done));); (257, CUDA, CUDA_RT_CALL(cudaFree(a));); (-4, MPI, MPI_CALL(MPI_Comm_rank(MPI_COMM_WORLD, &rank));); (94, CUDA, CUDA_RT_CALL(cudaDeviceSynchronize());); (18, CUDA, CUDA_RT_CALL(cudaFree(0));); (16, CUDA, CUDA_RT_CALL(cudaSetDevice(local_rank%num_devices));); (58, CUDA, CUDA_RT_CALL(cudaMalloc(&a, nx * (chunk_size + 2) * sizeof(real)));); (243, CUDA, CUDA_RT_CALL(cudaFree(l2_norm_d));); (138, CUDA, CUDA_RT_CALL(cudaStreamWaitEvent(push_stream, reset_l2norm_done, 0));); (100, CUDA, CUDA_RT_CALL(cudaEventCreateWithFlags(&push_prep_done, cudaEventDisableTiming));); (28, CUDA, CUDA_RT_CALL(cudaMallocHost(&a_h, nx * ny * sizeof(real)));); (25, CUDA, CUDA_RT_CALL(cudaMallocHost(&a_ref_h, nx * ny * sizeof(real)));); (84, CUDA, CUDA_RT_CALL(cudaGetLastError());); (145, CUDA, CUDA_RT_CALL(cudaStreamWaitEvent(compute_stream, push_prep_done, 0));); (89, CUDA, CUDA_RT_CALL(cudaStreamCreateWithPriority(&compute_stream, cudaStreamDefault, leastPriority));); (51, CUDA, CUDA_RT_CALL(cudaMalloc(&a_new, nx * (chunk_size + 2) * sizeof(real)));); (230, CUDA, CUDA_RT_CALL(cudaStreamDestroy(push_stream));); (-17, MPI, MPI_CALL(MPI_Comm_size(MPI_COMM_WORLD, &size));); (170, CUDA, CUDA_RT_CALL(cudaStreamSynchronize(compute_stream));); (125, CUDA, CUDA_RT_CALL(cudaEventRecord(reset_l2norm_done, compute_stream));); (-18, CUDA, CUDA_RT_CALL(cudaGetDeviceCount(&num_devices));); (102, CUDA, CUDA_RT_CALL(cudaMallocHost(&l2_norm_h, sizeof(real)));); (121, CUDA, CUDA_RT_CALL(cudaMemsetAsync(l2_norm_d, 0, sizeof(real), compute_stream));); (-27, MPI, MPI_CALL(MPI_Init(&argc, &argv));); (46, CUDA, CUDA_RT_CALL(cudaMemset(a_new, 0, nx * (chunk_size + 2) * sizeof(real)));); (76, CUDA, CUDA_RT_CALL(cudaDeviceGetStreamPriorityRange(&leastPriority, &greatestPriority));); (219, CUDA, CUDA_RT_CALL(cudaEventDestroy(push_prep_done));); (94, CUDA, CUDA_RT_CALL(cudaMalloc(&l2_norm_d, sizeof(real)));); (-12, MPI, MPI_CALL(MPI_Comm_rank(local_comm, &local_rank));); (233, CUDA, CUDA_RT_CALL(cudaFreeHost(a_ref_h));); (159, MPI, MPI_CALL(MPI_Allreduce(l2_norm_h, &l2_norm, 1, MPI_REAL_TYPE, MPI_SUM, MPI_COMM_WORLD));); (109, MPI, double start = MPI_Wtime();); (79, CUDA, CUDA_RT_CALL(cudaEventCreateWithFlags(&push_done, cudaEventDisableTiming));); (210, CUDA, CUDA_RT_CALL(cudaEventDestroy(reset_l2norm_done));); (215, CUDA, CUDA_RT_CALL(cudaFreeHost(l2_norm_h));); (120, CUDA, CUDA_RT_CALL(cudaEventRecord(push_prep_done, push_stream));)"}
{"predict": "(33, TBB, tbb::parallel_for( tbb::blocked_range<int>( 0, N, 10000 ), ParallelScalarBody<T>( sums ) );); (30, TBB, tbb::parallel_for( tbb::blocked_range<int>( 0, N, 10000 ), ParallelScalarBody<T>( my_decl ) );); (12, TBB, tbb::combinable<T> sums;); (26, TBB, tbb::parallel_for( tbb::blocked_range<int>( 0, N, 10000 ), ParallelScalarBody<T>( my_ref_decl ) );); (37, TBB, tbb::parallel_for( tbb::blocked_range<int>( 0, N, 10000 ), ParallelScalarBody<T>( assigned ) );); (29, TBB, tbb::parallel_for( tbb::blocked_range<int>( 0, N, 10000 ), ParallelScalarBody<T>( my_finit_decl ) );); (16, TBB, tbb::combinable<T> finit_combinable;); (3, TBB, tbb::combinable<T> my_decl;); (11, TBB, tbb::tick_count t0;); (-2, TBB, tbb::task_scheduler_init init(tbb::task_scheduler_init::deferred);); (26, TBB, t0 = tbb::tick_count::now();); (-1, TBB, tbb::combinable<T> my_ref_decl;); (14, TBB, tbb::combinable<T> assigned;)", "label": "(30, TBB, tbb::combinable<T> finit_combinable(my_finit_decl);); (32, TBB, tbb::parallel_for( tbb::blocked_range<int>( 0, N, 10000 ), ParallelScalarBodyNoInit<T>( finit_combinable ) );); (24, TBB, if (Verbose && t == 0) t0 = tbb::tick_count::now();); (31, TBB, tbb::parallel_for( tbb::blocked_range<int>( 0, N, 10000 ), ParallelScalarBody<T>( sums ) );); (40, TBB, tbb::combinable<T> assigned;); (-2, TBB, tbb::task_scheduler_init init(tbb::task_scheduler_init::deferred);); (7, TBB, tbb::tick_count t0;); (21, TBB, tbb::combinable<T> sums;)"}
{"predict": "(12, OpenMP, omp_set_num_threads(nr_threads);); (13, OpenMP, #pragma omp parallel default(none) shared(a)); (14, OpenMP, #pragma omp sections); (8, OpenMP, omp_set_dynamic(0);); (14, OpenMP, #pragma omp section); (16, OpenMP, int thread_nr = omp_get_thread_num();)", "label": "(12, OpenMP, omp_set_num_threads(nr_threads);); (13, OpenMP, #pragma omp parallel default(none) shared(a)); (14, OpenMP, #pragma omp sections); (8, OpenMP, omp_set_dynamic(0);); (14, OpenMP, #pragma omp section); (16, OpenMP, int thread_nr = omp_get_thread_num();)"}
{"predict": "(12, CUDA, extern __shared__ float _shared_centroids[];)", "label": "(12, CUDA, extern __shared__ float _shared_centroids[];)"}
{"predict": "(21, CUDA, extern __shared__ float entire_buffer[];)", "label": "(21, CUDA, extern __shared__ float entire_buffer[];)"}
{"predict": "(3, OpenMP, #pragma omp flush); (4, OpenMP, #pragma omp flush acq_rel); (5, OpenMP, #pragma omp flush acquire); (6, OpenMP, #pragma omp flush release); (7, OpenMP, #pragma omp flush (a))", "label": "(5, OpenMP, #pragma omp flush acquire); (5, OpenMP, #pragma omp flush release); (1, OpenMP, #pragma omp flush); (4, OpenMP, #pragma omp flush(a)); (0, OpenMP, #pragma omp flush acq_rel)"}
{"predict": "(64, CUDA, CUDA_CHECK(cudaFree(d_info));); (40, CUDA, CUDA_CHECK(cudaMemcpy(d_A, h_A, sizeof(data_type) * lda * n, cudaMemcpyHostToDevice));); (37, CUDA, CUDA_CHECK(cudaMalloc(reinterpret_cast<void **>(&d_info), sizeof(int)));); (45, CUDA, CUDA_CHECK(cudaStreamSynchronize(stream));); (43, CUDA, CUDA_CHECK(cudaMemcpy(&h_info, d_info, sizeof(int), cudaMemcpyDeviceToHost));); (60, CUDA, CUDA_CHECK(cudaFree(d_A_inv));); (30, CUDA, CUDA_CHECK(cudaMalloc(reinterpret_cast<void **>(&d_A_inv), sizeof(data_type) * lda * n));); (60, CUDA, CUDA_CHECK(cudaFree(d_A));); (54, CUDA, CUDA_CHECK(cudaDeviceReset());); (32, CUDA, CUDA_CHECK(cudaMalloc(reinterpret_cast<void **>(&d_A), sizeof(data_type) * lda * n));); (25, CUDA, CUDA_CHECK(cudaStreamCreateWithFlags(&stream, cudaStreamNonBlocking));)", "label": "(43, CUDA, CUDA_CHECK(cudaMemcpy(d_A_inv, d_A, sizeof(data_type) * lda * n, cudaMemcpyDeviceToDevice));); (47, CUDA, CUDA_CHECK(cudaStreamSynchronize(stream));); (69, CUDA, CUDA_CHECK(cudaFree(d_info));); (34, CUDA, CUDA_CHECK(cudaMalloc(reinterpret_cast<void **>(&d_A), sizeof(data_type) * lda * n));); (34, CUDA, CUDA_CHECK(cudaMalloc(reinterpret_cast<void **>(&d_A_inv), sizeof(data_type) * lda * n));); (65, CUDA, CUDA_CHECK(cudaFree(d_A_inv));); (58, CUDA, CUDA_CHECK(cudaStreamDestroy(stream));); (32, CUDA, CUDA_CHECK(cudaMalloc(&d_info, sizeof(int)));); (34, CUDA, CUDA_CHECK(cudaMemcpy(d_A, h_A, sizeof(data_type) * lda * n, cudaMemcpyHostToDevice));); (42, CUDA, CUDA_CHECK(cudaMemcpy(&h_info, d_info, sizeof(int), cudaMemcpyDeviceToHost));); (34, CUDA, CUDA_CHECK(cudaMemset(d_info, 0, sizeof(int)));); (58, CUDA, CUDA_CHECK(cudaFree(d_A));); (20, CUDA, CUDA_CHECK(cudaStreamCreateWithFlags(&stream, cudaStreamNonBlocking));)"}
{"predict": "(29, CUDA, thrust::complex<T2>* vb_(vb + Q * nchol_max * nwalk);); (27, CUDA, thrust::complex<T> const* v1_(v1 + Qm * nchol_max * nwalk);); (40, CUDA, thrust::complex<T> const* v2_(v1 + Q * nchol_max * nwalk);); (11, CUDA, __shared__ thrust::cuda_cub::core::uninitialized_array<thrust::complex<T2>, nchol_max * nwalk> vb_;); (11, CUDA, __shared__ thrust::cuda_cub::core::uninitialized_array<thrust::complex<T>, nchol_max * nwalk> v1_, v2_;); (13, CUDA, thrust::complex<T> ialpha = -static_cast<thrust::complex<T>>(1.0) * thrust::complex<T>(0.0, 1.0);)", "label": "(31, CUDA, thrust::complex<T> const* v1_(v1 + Q * nchol_max * nwalk);); (31, CUDA, thrust::complex<T> const* v2_(v1 + Qm * nchol_max * nwalk);); (52, CUDA, thrust::complex<T2> ialpha(alpha * thrust::complex<T2>(0.0, 1.0));); (27, CUDA, thrust::complex<T2>* vb_(vb + nc0 * nwalk);); (46, CUDA, thrust::complex<T2>* vb_(vb + (nc0 + nc) * nwalk);)"}
{"predict": "(83, OpenACC, #pragma acc update host(state[(nz + 2 * hs) * (nx + 2 * hs) * NUM_VARS])); (45, OpenACC, #pragma acc data copyin(state_tmp[(nz + 2 * hs) * (nx + 2 * hs) * NUM_VARS], hy_dens_cell[nz + 2 * hs], hy_dens_theta_cell[nz + 2 * hs], hy_dens_int[nz + 1], hy_dens_theta_int[nz + 1], hy_pressure_int[nz + 1]))", "label": "(83, OpenACC, #pragma acc update host(state[(nz + 2 * hs) * (nx + 2 * hs) * NUM_VARS])); (45, OpenACC, #pragma acc data copyin(state_tmp[(nz + 2 * hs) * (nx + 2 * hs) * NUM_VARS], hy_dens_cell[nz + 2 * hs], hy_dens_theta_cell[nz + 2 * hs], hy_dens_int[nz + 1], hy_dens_theta_int[nz + 1], hy_pressure_int[nz + 1]))"}
{"predict": "(21, CUDA, OMEGA_H_CHECK(cudaWaitall(reqs.size(), reqs.data()) == cudaSuccess);)", "label": "(32, MPI, CALL(MPI_Waitall(static_cast<int>(reqs.size()), reqs.data(), MPI_STATUSES_IGNORE));); (20, MPI, CALL(MPI_Waitall(reqs.size(), reqs.data(), MPI_STATUSES_IGNORE));)"}
{"predict": "(28, MPI, double start_mpi_bcast = MPI_Wtime();); (43, MPI, MPI_Finalize();); (7, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);); (19, MPI, MPI_Barrier(MPI_COMM_WORLD);); (23, MPI, double end_my_bcast = MPI_Wtime();); (30, MPI, double end_mpi_bcast = MPI_Wtime();); (24, MPI, MPI_Bcast(data, num_elements, MPI_INT, 0, MPI_COMM_WORLD);); (16, MPI, double start_my_bcast = MPI_Wtime();); (-2, MPI, MPI_Init(NULL, NULL);); (29, MPI, total_mpi_bcast_time += (end_mpi_bcast - start_mpi_bcast);); (21, MPI, total_my_bcast_time += (end_my_bcast - start_my_bcast);)", "label": "(28, MPI, total_my_bcast_time += MPI_Wtime();); (31, MPI, total_mpi_bcast_time -= MPI_Wtime();); (45, MPI, MPI_Finalize();); (32, MPI, total_mpi_bcast_time += MPI_Wtime();); (5, MPI, MPI_Init(NULL, NULL);); (28, MPI, MPI_Bcast(data, num_elements, MPI_INT, 0, MPI_COMM_WORLD);); (6, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);); (17, MPI, total_my_bcast_time -= MPI_Wtime();); (15, MPI, MPI_Barrier(MPI_COMM_WORLD);)"}
{"predict": "(4, CUDA, __shared__ float Bs[block_size][block_size];); (2, CUDA, __shared__ float As[block_size][block_size];)", "label": "(4, CUDA, __shared__ float Bs[block_size][block_size];); (2, CUDA, __shared__ float As[block_size][block_size];)"}
{"predict": "(11, MPI, MPI_Type_get_true_extent(item, &lb, &extent);)", "label": "(11, MPI, MPI_Type_get_extent(item, &lb, &extent);)"}
{"predict": "(20, CUDA, TrtUniquePtr<ICudaStream> profileStream{cudaStreamCreate()};); (45, CUDA, env.engine.reset(runtime->deserializeCudaEngine(env.serializedEngine->data(), env.serializedEngine->size()));)", "label": "(46, CUDA, env.engine.reset(runtime->deserializeCudaEngine(env.serializedEngine->data(), env.serializedEngine->size()));); (19, CUDA, auto profileStream = samplesCommon::makeCudaStream();)"}
{"predict": "(29, CUDA, cudaFree( p );)", "label": "(28, CUDA, cudaFree( p );)"}
{"predict": "(34, OpenMP, #pragma omp target teams is_device_ptr(raa)); (38, OpenMP, #pragma omp target teams is_device_ptr(h)); (42, OpenMP, #pragma omp target teams is_device_ptr(rh)); (26, OpenMP, #pragma omp target teams is_device_ptr(aa)); (15, OpenMP, #pragma omp target teams is_device_ptr(k)); (19, OpenMP, #pragma omp target teams is_device_ptr(z)); (43, OpenMP, #pragma omp target teams is_device_ptr(da))", "label": "(49, OpenMP, #pragma omp target teams is_device_ptr(da)); (23, OpenMP, #pragma omp target teams is_device_ptr(z)); (27, OpenMP, #pragma omp target teams is_device_ptr(aa)); (16, OpenMP, #pragma omp target teams is_device_ptr(k)); (30, OpenMP, #pragma omp target teams is_device_ptr(raa)); (39, OpenMP, #pragma omp target teams is_device_ptr(rh)); (33, OpenMP, #pragma omp target teams is_device_ptr(h))"}
{"predict": "(84, MPI, MPI_Finalize();); (35, MPI, tim::mpi::mpi_get_measurements(_measurements);)", "label": "(35, MPI, _measurements = get_measure()->mpi_get();)"}
{"predict": "(42, MPI, MPI_T_finalize();); (17, MPI, MPI_T_init_thread(required, &provided);)", "label": "(42, MPI, MPI_T_finalize();); (17, MPI, MPI_T_init_thread(required, &provided);)"}
{"predict": "(5, CUDA, __shared__ float reduce_smem[NUM_WARPS];)", "label": "(5, CUDA, __shared__ float reduce_smem[NUM_WARPS];)"}
{"predict": "(3, TBB, tbb::parallel_for( tbb::blocked_range<int>(0,m,100), GrowBy<MyVector>(v), tbb::simple_partitioner() );)", "label": "(3, TBB, tbb::parallel_for( tbb::blocked_range<int>(0,m,1000), GrowBy(v) );)"}
{"predict": "(40, OpenMP, #pragma omp parallel reduction(^ : S1)); (76, OpenMP, #pragma omp parallel reduction(+ : r)); (60, OpenMP, #pragma omp parallel reduction(+ : o)); (31, OpenMP, #pragma omp parallel reduction(| : argc,); (24, OpenMP, #pragma omp parallel reduction(|| : argc > 0 ? argv[1] : argv[2])); (54, OpenMP, #pragma omp parallel reduction(& : e, g)); (59, OpenMP, #pragma omp parallel reduction(+ : p), reduction(+ : p)); (18, OpenMP, #pragma omp parallel reduction(~ : argc)); (69, OpenMP, #pragma omp parallel reduction(max : j)); (59, OpenMP, #pragma omp parallel private(i), reduction(+ : j), reduction(+ : q)); (52, OpenMP, #pragma omp parallel reduction(+ : h, k, B::x)); (60, OpenMP, #pragma omp parallel reduction(+ : fl)); (2, OpenMP, #pragma omp parallel reduction +); (4, OpenMP, #pragma omp parallel reduction(); (7, OpenMP, #pragma omp parallel reduction()); (58, OpenMP, #pragma omp parallel reduction(+ : m)); (-6, OpenMP, #pragma omp parallel); (21, OpenMP, #pragma omp parallel reduction(+ : a, b, c, d, f)); (41, OpenMP, #pragma omp parallel reduction(+ : ba)); (44, OpenMP, #pragma omp parallel reduction(* : ca)); (-2, OpenMP, #pragma omp parallel reduction(-); (14, OpenMP, #pragma omp parallel reduction(min : a, b, c, d, f)); (49, OpenMP, #pragma omp parallel reduction(+ : qa[1], qa[0])); (31, OpenMP, #pragma omp parallel reduction(- : da)); (45, OpenMP, #pragma omp parallel reduction(max : h.b)); (19, OpenMP, #pragma omp parallel reduction(&& : argc, z)); (52, OpenMP, #pragma omp parallel reduction(task, + : m)); (0, OpenMP, #pragma omp parallel reduction(*)); (16, OpenMP, #pragma omp parallel reduction(max : h, k, B::x)); (", "label": "(54, OpenMP, #pragma omp parallel reduction(&& : S2::S2sc)); (25, OpenMP, #pragma omp parallel reduction(foo : argc); (44, OpenMP, #pragma omp parallel reduction(* : ca)); (78, OpenMP, #pragma omp for reduction(- : fl)); (28, OpenMP, #pragma omp parallel reduction(~ : argc)); (53, OpenMP, #pragma omp parallel reduction(+ : h, k, B::x)); (82, OpenMP, #pragma omp parallel reduction(task, + : m)); (79, OpenMP, #pragma omp parallel reduction(+ : m)); (36, OpenMP, #pragma omp parallel reduction(+ : ba)); (39, OpenMP, #pragma omp parallel reduction(- : da)); (59, OpenMP, #pragma omp parallel reduction(+ : r)); (5, OpenMP, #pragma omp parallel reduction(); (50, OpenMP, #pragma omp parallel private(i), reduction(+ : j), reduction(+ : q)); (47, OpenMP, #pragma omp parallel reduction(+ : o)); (-2, OpenMP, #pragma omp parallel); (37, OpenMP, #pragma omp parallel reduction(&& : S2::S2s)); (2, OpenMP, #pragma omp parallel reduction(-); (17, OpenMP, #pragma omp parallel reduction(&& : argc, z)); (-4, OpenMP, #pragma omp parallel reduction); (52, OpenMP, #pragma omp parallel shared(i)); (44, OpenMP, #pragma omp parallel private(k)); (21, OpenMP, #pragma omp parallel reduction(max : h.b)); (6, OpenMP, #pragma omp parallel reduction(| : argc,); (15, OpenMP, #pragma omp parallel reduction(+ : a, b, c, d, f)); (49, OpenMP, #pragma omp parallel reduction(max : j)); (5, OpenMP, #pragma omp parallel reduction(|| : argc > 0 ? argv[1] : argv[2])); (14, OpenMP, #pragma omp parallel reduction(min : a, b, c, d, f)); (45, OpenMP, #pragma omp parallel reduction(min : i)); (-4, OpenMP, #pragma omp parallel reduction(\\)); (-9, OpenMP, #pragma omp parallel reduction()); (60, OpenMP, #pragma omp parallel reduction(+:gptr[:argc])); (45, OpenMP, #pragma omp for private(fl)); (-10, OpenMP, #pragma omp parallel reduction(*)); (17, OpenMP, #pragma omp parallel reduction(^ : fl)); (2, OpenMP, #pragma omp parallel reduction(^ : S1)); (30, OpenMP, #pragma omp parallel reduction(+ : p), reduction(+ : p)); (20, OpenMP, #pragma omp parallel reduction(& : e, g))"}
{"predict": "(2, TBB, typedef tbb::concurrent_lru_cache<key_type,mapped_type> cache_type;)", "label": "(10, TBB, static const size_t number_of_threads = 4 * tbb::task_scheduler_init::default_num_threads();)"}
{"predict": "(8, CUDA, cuda_safe_call(cudaMalloc((void**) &dX, N * sizeof(double)));); (12, CUDA, cuda_safe_call(cudaDeviceSynchronize());); (8, CUDA, cuda_safe_call(cudaMalloc((void**) &dZ, N * sizeof(double)));); (6, CUDA, cuda_safe_call(cudaMalloc((void**) &dY, N * sizeof(double)));)", "label": "(8, CUDA, cuda_safe_call(cudaMalloc((void**) &dX, N * sizeof(double)));); (8, CUDA, cuda_safe_call(cudaMalloc((void**) &dY, N * sizeof(double)));); (8, CUDA, cuda_safe_call(cudaMalloc((void**) &dZ, N * sizeof(double)));); (11, CUDA, cuda_safe_call(cudaDeviceSynchronize());)"}
{"predict": "(8, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &wrank);)", "label": "(8, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &wrank);)"}
{"predict": "(55, CUDA, cudaEventRecord(stop[i], stream1[i]);); (127, CUDA, cudaEventDestroy(start[d]);); (17, CUDA, cudaMemset(buffers[d], 0, numElems * sizeof(int));); (119, CUDA, cudaFree(buffersD2D[d]);); (34, CUDA, cudaDeviceEnablePeerAccess(i, 0);); (10, CUDA, cudaCheckError();); (122, CUDA, cudaEventDestroy(stop[d]);); (85, CUDA, cudaEventElapsedTime(&time_ms, start[i], stop[j]);); (58, CUDA, cudaStreamBeginCapture(stream1[j], cudaStreamCaptureModeGlobal);); (114, CUDA, cudaFreeHost((void *)flag);); (96, CUDA, cudaDeviceDisablePeerAccess(i);); (96, CUDA, cudaDeviceDisablePeerAccess(j);); (25, CUDA, cudaSetDevice(i);); (39, CUDA, cudaStreamWaitEvent(stream1[i], start[i], 0);); (0, CUDA, cudaMemset(buffersD2D[d], 0, numElems * sizeof(int));); (14, CUDA, cudaEventCreate(&stop[d]);); (11, CUDA, cudaCheckError();); (55, CUDA, cudaEventRecord(start[i], stream0[i]);); (-6, CUDA, cudaMalloc(&buffersD2D[d], numElems * sizeof(int));); (74, CUDA, cudaEventSynchronize(stop[j]);); (34, CUDA, cudaStreamWaitEvent(stream0[i], stop[i], 0);); (-14, CUDA, cudaSetDevice(d);); (-16, CUDA, cudaMalloc(&buffers[d], numElems * sizeof(int));); (13, CUDA, cudaSetDevice(j);); (1, CUDA, cudaEventCreate(&start[d]);); (42, CUDA, cudaStreamBeginCapture(stream0[i], cudaStreamCaptureModeGlobal);); (-21, CUDA, cudaHostAlloc((void **)&flag, sizeof(*flag), cudaHostAllocPortable);); (111, CUDA, cudaFree(buffers[d]);); (26, CUDA, cudaEventRecord(stop[j], stream1[j]);); (63, CUDA, cudaEventSynchronize(start[i]);); (39, CUDA, cudaStream", "label": "(147, CUDA, cudaStreamDestroy(stream0[d]);); (16, CUDA, cudaMalloc(&buffersD2D[d], numElems * sizeof(int));); (141, CUDA, cudaEventDestroy(start[d]);); (41, CUDA, cudaDeviceEnablePeerAccess(i, 0);); (7, CUDA, cudaCheckError();); (136, CUDA, cudaFree(buffersD2D[d]);); (35, CUDA, cudaDeviceEnablePeerAccess(j, 0);); (138, CUDA, cudaEventDestroy(stop[d]);); (25, CUDA, cudaSetDevice(i);); (106, CUDA, cudaDeviceDisablePeerAccess(i);); (139, CUDA, cudaStreamDestroy(stream1[d]);); (83, CUDA, cudaEventRecord(stop[i], stream0[i]);); (10, CUDA, cudaEventCreate(&stop[d]);); (140, CUDA, cudaFreeHost((void *)flag);); (79, CUDA, cudaStreamWaitEvent(stream0[i], stop[j], 0);); (3, CUDA, cudaMemset(buffersD2D[d], 0, numElems * sizeof(int));); (35, CUDA, cudaStreamSynchronize(stream1[j]);); (52, CUDA, cudaStreamWaitEvent(stream1[j], start[i], 0);); (-2, CUDA, cudaMemset(buffers[d], 0, numElems * sizeof(int));); (-4, CUDA, cudaMalloc(&buffers[d], numElems * sizeof(int));); (-10, CUDA, cudaHostAlloc((void **)&flag, sizeof(*flag), cudaHostAllocPortable);); (119, CUDA, cudaFree(buffers[d]);); (28, CUDA, cudaStreamSynchronize(stream0[i]);); (-9, CUDA, cudaSetDevice(d);); (0, CUDA, cudaStreamCreateWithFlags(&stream0[d], cudaStreamNonBlocking);); (13, CUDA, cudaDeviceCanAccessPeer(&access, i, j);); (42, CUDA, cudaEventRecord(start[i], stream0[i]);); (16, CUDA, cudaSetDevice(j);); (64, CUDA, cudaEventRecord(stop[j], stream1[j]);); (74, CUDA, cudaEventElapsedTime(&time_ms, start[i], stop[i]);); (-10, CUDA, cudaEventCreate(&start[d]);); (-5, CUDA, cudaStreamCreateWithFlags(&stream1[d], cudaStreamNonBlocking);); (81, CUDA, cudaDeviceDisablePeerAccess(j);)"}
{"predict": "(19, MPI, MPI_Bcast(state, NUM_VARS * (nz + 2 * hs) * (nx + 2 * hs), MPI_DOUBLE, 0, MPI_COMM_WORLD);)", "label": "(5, OpenACC, #pragma acc parallel loop)"}
{"predict": "(24, OpenMP, #pragma omp master taskloop collapse (S)); (34, OpenMP, #pragma omp master taskloop collapse (N)); (13, OpenMP, #pragma omp master taskloop collapse (1)); (14, OpenMP, #pragma omp master taskloop collapse ((ST > 0) ? 1 + ST : 2)); (9, OpenMP, #pragma omp master taskloop collapse (ST); (-3, OpenMP, #pragma omp master taskloop collapse); (4, OpenMP, #pragma omp master taskloop collapse (argc); (-3, OpenMP, #pragma omp master taskloop collapse (); (-2, OpenMP, #pragma omp master taskloop collapse ()); (28, OpenMP, #pragma omp master taskloop collapse (2)); (12, OpenMP, #pragma omp master taskloop collapse (foobool(argc)), collapse (true), collapse (-5))", "label": "(10, OpenMP, #pragma omp master taskloop collapse (argc); (1, OpenMP, #pragma omp master taskloop collapse); (13, OpenMP, #pragma omp master taskloop collapse (1)); (14, OpenMP, #pragma omp master taskloop collapse ((ST > 0) ? 1 + ST : 2)); (31, OpenMP, #pragma omp master taskloop collapse (N)); (32, OpenMP, #pragma omp master taskloop collapse (2)); (16, OpenMP, #pragma omp master taskloop collapse (foobool(argc)), collapse (true), collapse (-5)); (-3, OpenMP, #pragma omp master taskloop collapse (); (-2, OpenMP, #pragma omp master taskloop collapse ()); (15, OpenMP, #pragma omp master taskloop collapse (S)); (3, OpenMP, #pragma omp master taskloop collapse (ST)"}
{"predict": "(5, CUDA, __shared__ float reduce_smem[NUM_WARPS];)", "label": "(5, CUDA, __shared__ float reduce_smem[NUM_WARPS];)"}
{"predict": "(245, CUDA, cudaDeviceSynchronize();)", "label": "(161, CUDA, thrust::device_vector<ElementA> d_A = h_A;); (183, CUDA, cuda_err = cudaDeviceSynchronize();); (148, CUDA, thrust::host_vector<ElementB> h_B(N_size * K_size * L_size);); (184, CUDA, std::cerr << cudaGetErrorString(cuda_err) << \"\\n\";); (148, CUDA, thrust::host_vector<ElementD> h_D(M_size * N_size * L_size);); (157, CUDA, thrust::device_vector<ElementB> d_B = h_B;); (158, CUDA, thrust::device_vector<ElementD> cutlass_result = h_D;); (144, CUDA, thrust::host_vector<ElementC> h_C(M_size * N_size * L_size);); (213, CUDA, thrust::host_vector<ElementD> h_cutlass_result = cutlass_result;); (156, CUDA, thrust::device_vector<ElementD> reference_result = h_D;); (153, CUDA, thrust::device_vector<ElementC> d_C = h_C;); (138, CUDA, thrust::host_vector<ElementA> h_A(M_size * K_size * L_size);)"}
{"predict": "(2, CUDA, cudaSetDevice(0);); (16, CUDA, cudaGetDeviceCount(&deviceCount);); (2, CUDA, cudaFree(0);)", "label": "(18, CUDA, gpuErrchk(cudaGetDeviceCount(&deviceCount));); (1, CUDA, gpuErrchk(cudaSetDevice(0));); (2, CUDA, gpuErrchk(cudaFree(0));); (7, CUDA, gpuErrchk(cudaDeviceReset());)"}
{"predict": "(36, MPI, MPI_Error_string(ERR_CODE, aux_string, &L);)", "label": "(36, MPI, MPI_Error_string(ERR_CODE, aux_string, &L);)"}
{"predict": "(201, OpenMP, #pragma omp target teams distribute parallel for private(k, j, i, m, tmp, u21i, u31i, u41i, u51i, u21jm1, u31jm1, u41jm1, u51jm1))", "label": "(22, OpenMP, #pragma omp distribute); (17, OpenMP, #pragma omp target data map(alloc: frct, rsd, ce, flux_G)); (19, OpenMP, #pragma omp target teams)"}
{"predict": "(22, CUDA, CUDA_RT_CALL(cudaMemset(a_new, 0, nx * ny * sizeof(real)));); (100, CUDA, CUDA_RT_CALL(cudaStreamDestroy(compute_stream));); (105, CUDA, CUDA_RT_CALL(cudaFree(a));); (23, CUDA, CUDA_RT_CALL(cudaDeviceSynchronize());); (100, CUDA, CUDA_RT_CALL(cudaFree(l2_norm_d));); (27, CUDA, CUDA_RT_CALL(cudaEventCreateWithFlags(&push_top_done, cudaEventDisableTiming));); (24, CUDA, CUDA_RT_CALL(cudaStreamCreate(&push_bottom_stream));); (26, CUDA, CUDA_RT_CALL(cudaEventCreateWithFlags(&push_bottom_done, cudaEventDisableTiming));); (49, CUDA, CUDA_RT_CALL(cudaStreamWaitEvent(compute_stream, push_bottom_done, 0));); (67, CUDA, CUDA_RT_CALL(cudaStreamWaitEvent(push_bottom_stream, compute_done, 0));); (69, CUDA, CUDA_RT_CALL(cudaEventRecord(push_bottom_done, push_bottom_stream));); (89, CUDA, CUDA_RT_CALL(cudaStreamDestroy(push_top_stream));); (86, CUDA, CUDA_RT_CALL(cudaEventDestroy(compute_done));); (81, CUDA, CUDA_RT_CALL(cudaMemcpy(a_ref_h, a, nx * ny * sizeof(real), cudaMemcpyDeviceToHost));); (82, CUDA, CUDA_RT_CALL(cudaEventDestroy(push_bottom_done));); (14, CUDA, CUDA_RT_CALL(cudaStreamCreate(&push_top_stream));); (81, CUDA, CUDA_RT_CALL(cudaEventDestroy(push_top_done));); (65, CUDA, CUDA_RT_CALL(cudaStreamSynchronize(compute_stream));); (44, CUDA, CUDA_RT_CALL(cudaEventRecord(compute_done, compute_stream));); (17, CUDA, CUDA_RT_CALL(cudaMallocHost(&l2_norm_h, sizeof(real)));); (54, CUDA, CUDA_RT_CALL(cudaEventRecord(push_top_done, push_top_stream));); (33, CUDA, CUDA_RT_CALL(cudaMemsetAsync(l2_norm_d, 0, sizeof(real), compute_stream));); (6, CUDA, CUDA_RT_CALL(cudaStreamCreate(&compute_stream));); (-2, CUDA, CUDA_RT_CALL(cudaMemset(a, 0, nx * ny * sizeof(real)));); (7, CUDA, CUDA_RT_CALL(cudaEventCreateWithFlags(&compute_done,", "label": "(22, CUDA, CUDA_RT_CALL(cudaMemset(a_new, 0, nx * ny * sizeof(real)));); (100, CUDA, CUDA_RT_CALL(cudaStreamDestroy(compute_stream));); (105, CUDA, CUDA_RT_CALL(cudaFree(a));); (23, CUDA, CUDA_RT_CALL(cudaDeviceSynchronize());); (100, CUDA, CUDA_RT_CALL(cudaFree(l2_norm_d));); (27, CUDA, CUDA_RT_CALL(cudaEventCreateWithFlags(&push_top_done, cudaEventDisableTiming));); (24, CUDA, CUDA_RT_CALL(cudaStreamCreate(&push_bottom_stream));); (26, CUDA, CUDA_RT_CALL(cudaEventCreateWithFlags(&push_bottom_done, cudaEventDisableTiming));); (49, CUDA, CUDA_RT_CALL(cudaStreamWaitEvent(compute_stream, push_bottom_done, 0));); (67, CUDA, CUDA_RT_CALL(cudaStreamWaitEvent(push_bottom_stream, compute_done, 0));); (69, CUDA, CUDA_RT_CALL(cudaEventRecord(push_bottom_done, push_bottom_stream));); (89, CUDA, CUDA_RT_CALL(cudaStreamDestroy(push_top_stream));); (86, CUDA, CUDA_RT_CALL(cudaEventDestroy(compute_done));); (81, CUDA, CUDA_RT_CALL(cudaMemcpy(a_ref_h, a, nx * ny * sizeof(real), cudaMemcpyDeviceToHost));); (82, CUDA, CUDA_RT_CALL(cudaEventDestroy(push_bottom_done));); (14, CUDA, CUDA_RT_CALL(cudaStreamCreate(&push_top_stream));); (81, CUDA, CUDA_RT_CALL(cudaEventDestroy(push_top_done));); (65, CUDA, CUDA_RT_CALL(cudaStreamSynchronize(compute_stream));); (44, CUDA, CUDA_RT_CALL(cudaEventRecord(compute_done, compute_stream));); (17, CUDA, CUDA_RT_CALL(cudaMallocHost(&l2_norm_h, sizeof(real)));); (54, CUDA, CUDA_RT_CALL(cudaEventRecord(push_top_done, push_top_stream));); (33, CUDA, CUDA_RT_CALL(cudaMemsetAsync(l2_norm_d, 0, sizeof(real), compute_stream));); (6, CUDA, CUDA_RT_CALL(cudaStreamCreate(&compute_stream));); (-2, CUDA, CUDA_RT_CALL(cudaMemset(a, 0, nx * ny * sizeof(real)));); (7, CUDA, CUDA_RT_CALL(cudaEventCreateWithFlags(&compute_done, cudaEventDisableTiming));); (81, CUDA, CUDA_RT_CALL(cudaFree(a_new));); (45, CUDA, CUDA_RT_CALL(cudaStreamWaitEvent(push_top_stream, compute_done, 0));); (72, CUDA, CUDA_RT_CALL(cudaStreamDestroy(push_bottom_stream));); (28, CUDA, CUDA_RT_CALL(cudaStreamWaitEvent(compute_stream, push_top_done, 0));); (6, CUDA, CUDA_RT_CALL(cudaMalloc(&l2_norm_d, sizeof(real)));); (21, MPI, double start = MPI_Wtime();); (-13, CUDA, CUDA_RT_CALL(cudaMalloc(&a, nx * ny * sizeof(real)));); (71, CUDA, CUDA_RT_CALL(cudaFreeHost(l2_norm_h));); (-14, CUDA, CUDA_RT_CALL(cudaMalloc(&a_new, nx * ny * sizeof(real)));)"}
{"predict": "(30, MPI, MPI_Bcast( work, diag_len[p], MPI_DOUBLE, pkk, grid->comm );); (27, MPI, MPI_Bcast( work, lwork, MPI_DOUBLE, pkk, grid->comm );)", "label": "(30, MPI, MPI_Bcast( work, diag_len[p], MPI_DOUBLE, pkk, grid->comm );); (27, MPI, MPI_Bcast( work, lwork, MPI_DOUBLE, pkk, grid->comm );)"}
{"predict": "(4, CUDA, const T** input_ptrs = GetCudaDeviceArrayOnDevice(&input_ptr_data);)", "label": "(4, CUDA, const T** input_ptrs = GetCudaDeviceArrayOnDevice(&input_ptr_data);)"}
{"predict": "(19, MPI, MPI_Allreduce(bins_ptr, global_ptr, bins_size, MPI_DOUBLE, MPI_MAX, mpi_comm);); (10, MPI, MPI_Allreduce(bins_ptr, global_ptr, bins_size, MPI_DOUBLE, MPI_SUM, mpi_comm);); (14, MPI, MPI_Allreduce(bins_ptr, global_ptr, bins_size, MPI_DOUBLE, MPI_MIN, mpi_comm);); (17, MPI, MPI_Allreduce(bins_ptr, global_ptr, bins_size, MPI_DOUBLE, MPI_MAX, mpi_comm);); (2, MPI, MPI_Comm mpi_comm = MPI_Comm_f2c(flow::Workspace::default_mpi_comm());)", "label": "(17, MPI, MPI_Allreduce(bins_ptr, global_ptr, bins_size, MPI_DOUBLE, MPI_MIN, mpi_comm);); (12, MPI, MPI_Allreduce(bins_ptr, global_ptr, bins_size, MPI_DOUBLE, MPI_SUM, mpi_comm);); (19, MPI, MPI_Allreduce(bins_ptr, global_ptr, bins_size, MPI_DOUBLE, MPI_MAX, mpi_comm);); (2, MPI, MPI_Comm mpi_comm = MPI_Comm_f2c(flow::Workspace::default_mpi_comm());)"}
{"predict": "(71, OpenMP, const int th=omp_get_thread_num();); (10, OpenMP, #pragma omp parallel for schedule (guided))", "label": "(71, OpenMP, const int th=omp_get_thread_num();); (10, OpenMP, #pragma omp parallel for schedule (guided))"}
{"predict": "(10, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &wrank);); (15, MPI, MPI_Dims_create(tests[k].size, tests[k].dim, dims);)", "label": "(10, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &wrank);); (15, MPI, MPI_Dims_create(tests[k].size, tests[k].dim, dims);)"}
{"predict": "(18, CUDA, __shared__ float b_smem[BN * BK];); (16, CUDA, __shared__ float a_smem[BK * BN];)", "label": "(17, CUDA, __shared__ float a_smem[BM * BK];); (17, CUDA, __shared__ float b_smem[BK * BN];)"}
{"predict": "(86, OpenCL, err = clReleaseMemObject(image_buffer);); (83, OpenCL, err = clReleaseMemObject(buffer);)", "label": "(86, OpenCL, err = clReleaseMemObject(buffer);); (82, OpenCL, err = clReleaseMemObject(image_buffer);)"}
{"predict": "(46, CUDA, cudaDeviceSynchronize();); (20, CUDA, cudaMalloc((void**)&d_a, bufsize);); (20, CUDA, cudaMalloc((void**)&d_b, bufsize);); (65, CUDA, cudaFree(d_c);); (63, CUDA, cudaFree(d_b);); (10, CUDA, cudaMallocHost((void**)&h_a, bufsize);); (66, CUDA, cudaFreeHost(h_b);); (66, CUDA, cudaFreeHost(h_c);); (17, CUDA, cudaMalloc((void**)&d_c, bufsize);); (62, CUDA, cudaFree(d_a);); (7, CUDA, cudaMallocHost((void**)&h_b, bufsize);); (4, CUDA, cudaMallocHost((void**)&h_c, bufsize);)", "label": "(12, CUDA, cudaMallocHost((void**)&h_a, bufsize);); (13, CUDA, cudaMallocHost((void**)&h_c, bufsize);); (43, CUDA, cudaDeviceSynchronize();); (20, CUDA, cudaMalloc((void**)&d_a, bufsize);); (63, CUDA, cudaFree(d_c);); (61, CUDA, cudaFree(d_b);); (7, CUDA, cudaMallocHost((void**)&h_b, bufsize);); (64, CUDA, cudaFreeHost(h_b);); (64, CUDA, cudaFreeHost(h_c);); (56, CUDA, cudaFree(d_a);); (60, CUDA, cudaFreeHost(h_a);); (14, CUDA, cudaMalloc((void**)&d_c, bufsize);); (12, CUDA, cudaMalloc((void**)&d_b, bufsize);)"}
{"predict": "(43, OpenMP, lis2mdl_offset_temp_comp_set(&dev_ctx, PROPERTY_ENABLE);)", "label": "(43, OpenMP, lis2mdl_offset_temp_comp_set(&dev_ctx, PROPERTY_ENABLE);)"}
{"predict": "(3, TBB, ValueType r1 = tbb::parallel_reduce( m_range, I, Sum(), partitioner );)", "label": "(3, TBB, ValueType r1 = tbb::parallel_reduce( m_range, I, Accumulator(), Sum(), partitioner );)"}
{"predict": "(11, CUDA, __shared__ float r[_N_], k[_N_], u[_N_], w[_N_];)", "label": "(11, CUDA, __shared__ float r[_N_], k[_N_], u[_N_], w[_N_];)"}
{"predict": "(50, CUDA, flamegpu::CUDASimulation cudaSimulation(model, argc, argv);)", "label": "(50, CUDA, flamegpu::CUDASimulation cudaSimulation(model, argc, argv);)"}
{"predict": "(12, CUDA, cudaError_t error = cudaGetDeviceProperties(&props, 0);); (81, CUDA, cudaError_t result = cudaDeviceSynchronize();)", "label": "(12, CUDA, cudaError_t error = cudaGetDeviceProperties(&props, 0);); (13, CUDA, std::cerr << \"cudaGetDeviceProperties() returned an error: \" << cudaGetErrorString(error) << std::endl;); (80, CUDA, cudaError_t result = cudaDeviceSynchronize();)"}
{"predict": "(22, MPI, MPI_Finalize();); (1, MPI, MPI_Init(&argc,&argv);)", "label": "(22, MPI, MPI_Finalize();); (1, MPI, MPI_Init(&argc,&argv);)"}
{"predict": "(11, MPI, MPI_Type_get_extent(int_with_key, &lb, &extent);)", "label": "(11, MPI, MPI_Type_get_extent(int_with_key, &lb, &extent);)"}
{"predict": "(19, OpenCL, retVal = clEnqueueNDRangeKernel(clCommandQ, clKernel, 1, offset, gws, nullptr, 1, &eventBlocking, &eventOut);); (13, OpenCL, clCommandQ = clCreateCommandQueue(context, devices[0], properties, &retVal);); (32, OpenCL, clWaitForEvents(1, &callbackEvent);); (38, OpenCL, clReleaseEvent(eventOut);); (38, OpenCL, clReleaseEvent(callbackEvent);); (39, OpenCL, clReleaseCommandQueue(clCommandQ);); (28, OpenCL, clWaitForEvents(1, &eventOut);)", "label": "(15, OpenCL, retVal = clEnqueueNDRangeKernel(clCommandQ, clKernel, 1, offset, gws, nullptr, 1, &eventBlocking, &eventOut);); (13, OpenCL, clCommandQ = clCreateCommandQueue(context, devices[0], properties, &retVal);); (38, OpenCL, clReleaseEvent(eventOut);); (31, OpenCL, clWaitForEvents(1, &callbackEvent);); (37, OpenCL, clReleaseCommandQueue(clCommandQ);); (28, OpenCL, clWaitForEvents(1, &eventOut);)"}
{"predict": "(38, CUDA, CUDA_CHECK(cudaStreamSynchronize(stream));); (40, CUDA, CUDA_CHECK(cudaFree(d_data));)", "label": "(38, CUDA, CUDA_CHECK(cudaStreamSynchronize(stream));); (40, CUDA, CUDA_CHECK(cudaFree(d_data));)"}
{"predict": "(12, OpenMP, #pragma omp target)", "label": "(12, OpenMP, #pragma omp target)"}
{"predict": "(11, MPI, MPI_Abort(MPI_COMM_WORLD, EXIT_FAILURE);)", "label": "(10, MPI, MPI_Abort(MPI_COMM_WORLD, EXIT_FAILURE);)"}
{"predict": "(33, MPI, MPI_Type_free(&type);); (16, MPI, MPI_Type_get_extent(type, &lb, &extent);); (7, MPI, err = MPI_Type_indexed(3, len, disp, MPI_INT, &type);)", "label": "(33, MPI, MPI_Type_free(&type);); (16, MPI, MPI_Type_get_extent(type, &lb, &extent);); (7, MPI, err = MPI_Type_indexed(3, len, disp, MPI_INT, &type);)"}
{"predict": "(23, MPI, MPI_Wait(&req, MPI_STATUS_IGNORE);); (17, MPI, MPI_Alltoallw_c(sendbuf, counts, displs, types, recvbuf, counts, displs, types, comm);)", "label": "(23, MPI, MPI_Wait(&req, MPI_STATUS_IGNORE);); (17, MPI, MPI_Alltoallw_c(sendbuf, counts, displs, types, recvbuf, counts, displs, types, comm);)"}
{"predict": "(3, OpenMP, #pragma omp target enter data map(alloc: i)); (8, OpenMP, #pragma omp target exit data map(delete: i)); (5, OpenMP, #pragma omp target data map(tofrom: i) present(i))", "label": "(3, OpenMP, #pragma omp target enter data map(alloc:i)); (6, OpenMP, #pragma omp target data map(present, alloc: i)); (7, OpenMP, #pragma omp target exit data map(delete:i))"}
{"predict": "(25, MPI, MPI_Grequest_complete(aio_req->req);); (8, MPI, MPI_Status_set_elements_x(status, MPI_BYTE, aio_req->nbytes);)", "label": "(10, MPI, errcode = MPI_Grequest_complete(aio_req->req);)"}
{"predict": "(18, OpenMP, #pragma omp flush); (8, OpenMP, #pragma omp parallel); (9, OpenMP, #pragma omp single); (11, OpenMP, #pragma omp task private(sum)); (20, OpenMP, #pragma omp critical)", "label": "(20, OpenMP, #pragma omp flush); (13, OpenMP, #pragma omp task private(sum) shared(result, known_sum)); (7, OpenMP, #pragma omp parallel); (8, OpenMP, #pragma omp single); (21, OpenMP, #pragma omp critical)"}
{"predict": "(20, OpenCL, clReleaseMemObject(mobjAP_);); (16, OpenCL, clReleaseMemObject(mobjX_);)", "label": "(20, OpenCL, clReleaseMemObject(mobjAP_);); (16, OpenCL, clReleaseMemObject(mobjX_);)"}
{"predict": "(30, OpenCL, TEST_OCL_CHECK(clReleaseCommandQueue(ocl_queue));)", "label": "(27, OpenCL, TEST_OCL_CHECK(clReleaseCommandQueue(ocl_queue));)"}
{"predict": "(9, MPI, MPI_Comm_rank(comm, &comm_rank);); (10, MPI, MPI_Comm_size(comm, &comm_size);)", "label": "(9, MPI, MPI_Comm_rank(comm, &comm_rank);); (10, MPI, MPI_Comm_size(comm, &comm_size);)"}
{"predict": "(23, CUDA, cudaMalloc(reinterpret_cast<void**>(&d_messages),    message_size * batch);); (35, CUDA, cudaMemcpy(signatures.data(), d_signatures, length_signature * batch, cudaMemcpyDeviceToHost);); (26, CUDA, cudaMemcpy(d_secret_keys, secret_keys.data(), length_secret_key * batch, cudaMemcpyHostToDevice);); (18, CUDA, cudaMalloc(reinterpret_cast<void**>(&d_secret_keys), length_secret_key * batch);); (37, CUDA, cudaFree(d_messages);); (23, CUDA, cudaMemcpy(d_messages, messages.data(), message_size * batch, cudaMemcpyHostToDevice);); (36, CUDA, cudaFree(d_secret_keys);); (13, CUDA, cudaMalloc(reinterpret_cast<void**>(&d_signatures),  length_signature_aligned * batch);); (35, CUDA, cudaFree(d_signatures);)", "label": "(36, CUDA, cudaMemcpy(signatures.data(), d_signatures, length_signature_aligned * batch, cudaMemcpyDeviceToHost);); (40, CUDA, cudaFree(d_secret_keys);); (26, CUDA, cudaMemcpy(d_secret_keys, secret_keys.data(), length_secret_key * batch, cudaMemcpyHostToDevice);); (26, CUDA, cudaMemcpy(d_messages, messages.data(), message_size * batch, cudaMemcpyHostToDevice);); (39, CUDA, cudaFree(d_messages);); (17, CUDA, cudaMalloc(reinterpret_cast<void**>(&d_secret_keys), length_secret_key * batch);); (15, CUDA, cudaMalloc(reinterpret_cast<void**>(&d_signatures), length_signature_aligned * batch);); (35, CUDA, cudaFree(d_signatures);); (15, CUDA, cudaMalloc(reinterpret_cast<void**>(&d_messages), message_size * batch);)"}
{"predict": "(19, OpenMP, #pragma omp parallel for)", "label": "(19, OpenMP, #pragma omp parallel for)"}
{"predict": "(27, MPI, MPI_Finalize();); (12, MPI, MPI_Bcast(&factor, 1, MPI_INT, root, MPI_COMM_WORLD);); (3, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (3, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (0, MPI, MPI_Init(NULL, NULL);); (16, MPI, MPI_Wait(&request, MPI_STATUS_IGNORE);); (5, MPI, MPI_Abort(MPI_COMM_WORLD, 1);)", "label": "(27, MPI, MPI_Finalize();); (5, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (3, MPI, MPI_Init(NULL, NULL);); (4, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (20, MPI, MPI_Wait(&request, MPI_STATUS_IGNORE);); (6, MPI, MPI_Abort(MPI_COMM_WORLD, 1);); (9, MPI, MPI_Bcast(&factor, 1, MPI_INT, root, MPI_COMM_WORLD);)"}
{"predict": "(3, OpenMP, #pragma omp target); (4, OpenMP, #pragma omp distribute parallel for simd); (2, OpenMP, #pragma omp teams)", "label": "(3, OpenMP, #pragma omp target); (4, OpenMP, #pragma omp distribute parallel for simd); (2, OpenMP, #pragma omp teams)"}
{"predict": "(4, OpenMP, #pragma omp target teams distribute parallel for map(tofrom:a[:n]))", "label": "(5, OpenMP, #pragma omp target teams distribute parallel for)"}
{"predict": "(43, MPI, err = MPI_Type_size(eviltype, &val);); (18, MPI, err = MPI_Type_create_resized(tmptype, 6, -9, &inttype);); (31, MPI, err = MPI_Type_vector(3, 4, 5, inttype, &eviltype);); (5, MPI, err = MPI_Type_contiguous(4, MPI_BYTE, &tmptype);); (97, MPI, MPI_Type_free(&tmptype);); (95, MPI, MPI_Type_free(&inttype);); (52, MPI, err = MPI_Type_get_extent(eviltype, &lb, &extent);); (94, MPI, MPI_Type_free(&eviltype);); (72, MPI, err = MPI_Type_get_true_extent(eviltype, &true_lb, &aval);)", "label": "(43, MPI, err = MPI_Type_size(eviltype, &val);); (100, MPI, MPI_Type_free(&inttype);); (19, MPI, err = MPI_Type_create_resized(tmptype, 6, -9, &inttype);); (55, MPI, err = MPI_Type_get_extent(eviltype, &lb, &extent);); (28, MPI, err = MPI_Type_vector(3, 4, 5, inttype, &eviltype);); (95, MPI, MPI_Type_free(&tmptype);); (3, MPI, err = MPI_Type_contiguous(4, MPI_BYTE, &tmptype);); (95, MPI, MPI_Type_free(&eviltype);); (71, MPI, err = MPI_Type_get_true_extent(eviltype, &true_lb, &aval);)"}
{"predict": "(79, CUDA, CHECK(cudaFree(d_y));); (75, CUDA, CHECK(cudaFree(d_NN));); (55, CUDA, CHECK(cudaMemcpy(NL, d_NL, N*M*sizeof(int), cudaMemcpyDefault));); (34, CUDA, CHECK(cudaMalloc(&d_NL, N*M*sizeof(int)));); (32, CUDA, CHECK(cudaMalloc(&d_NN, N*sizeof(int)));); (46, CUDA, CHECK(cudaMemcpy(d_y, y.data(), N*sizeof(real), cudaMemcpyDefault));); (50, CUDA, CHECK(cudaMemcpy(NN, d_NN, N*sizeof(int), cudaMemcpyDefault));); (33, CUDA, CHECK(cudaMalloc(&d_y, N*sizeof(real)));); (70, CUDA, CHECK(cudaFree(d_x));); (30, CUDA, CHECK(cudaMalloc(&d_x, N*sizeof(real)));); (67, CUDA, CHECK(cudaFree(d_NL));)", "label": "(78, CUDA, CHECK(cudaFree(d_y));); (74, CUDA, CHECK(cudaFree(d_NN));); (56, CUDA, CHECK(cudaMemcpy(NL, d_NL, N*M*sizeof(int), cudaMemcpyDefault));); (34, CUDA, CHECK(cudaMalloc(&d_NL, N*M*sizeof(int)));); (32, CUDA, CHECK(cudaMalloc(&d_NN, N*sizeof(int)));); (46, CUDA, CHECK(cudaMemcpy(d_y, y.data(), N*sizeof(real), cudaMemcpyDefault));); (51, CUDA, CHECK(cudaMemcpy(NN, d_NN, N*sizeof(int), cudaMemcpyDefault));); (33, CUDA, CHECK(cudaMalloc(&d_y, N*sizeof(real)));); (69, CUDA, CHECK(cudaFree(d_x));); (30, CUDA, CHECK(cudaMalloc(&d_x, N*sizeof(real)));); (66, CUDA, CHECK(cudaFree(d_NL));)"}
{"predict": "(34, MPI, MPI_Recv(msg3, 1, MPI_CHAR, src, tag + 2, comm, MPI_STATUS_IGNORE);); (39, MPI, MPI_Recv(msg2, 2, MPI_DOUBLE, src, tag + 1, comm, MPI_STATUS_IGNORE);); (27, MPI, MPI_Buffer_attach(buf, bufsize);); (15, MPI, MPI_Pack_size(1, MPI_CHAR, comm, &s1);); (15, MPI, MPI_Pack_size(1, MPI_DOUBLE, comm, &s2);); (15, MPI, MPI_Pack_size(1, MPI_CHAR, comm, &s3);); (29, MPI, MPI_Send(msg1, 1, MPI_CHAR, dest, tag, comm);); (51, MPI, MPI_Buffer_detach(&bbuf, &bsize);); (28, MPI, MPI_Send(msg3, 1, MPI_CHAR, dest, tag + 2, comm);); (26, MPI, MPI_Send(msg2, 2, MPI_DOUBLE, dest, tag + 1, comm);); (8, MPI, MPI_Comm_rank(comm, &rank);); (29, MPI, MPI_Recv(rmsg1, 64, MPI_CHAR, src, tag, comm, MPI_STATUS_IGNORE);); (29, MPI, MPI_Recv(rmsg2, 64, MPI_DOUBLE, src, tag + 1, comm, MPI_STATUS_IGNORE);); (29, MPI, MPI_Recv(rmsg3, 64, MPI_CHAR, src, tag + 2, comm, MPI_STATUS_IGNORE);)", "label": "(19, MPI, MPI_Pack_size(2, MPI_DOUBLE, comm, &s2);); (38, MPI, MPI_Recv(rmsg2, 10, MPI_DOUBLE, src, tag, comm, MPI_STATUS_IGNORE);); (21, MPI, MPI_Buffer_attach(buf, bufsize);); (56, MPI, MPI_Buffer_detach(&bbuf, &bsize);); (34, MPI, MPI_Recv(rmsg1, 7, MPI_CHAR, src, tag, comm, MPI_STATUS_IGNORE);); (9, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (27, MPI, MPI_Bsend(msg2, 2, MPI_DOUBLE, dest, tag, comm);); (13, MPI, MPI_Pack_size(17, MPI_CHAR, comm, &s3);); (24, MPI, MPI_Bsend(msg1, 7, MPI_CHAR, dest, tag, comm);); (25, MPI, MPI_Bsend(msg3, 17, MPI_CHAR, dest, tag, comm);); (8, MPI, MPI_Pack_size(7, MPI_CHAR, comm, &s1);); (29, MPI, MPI_Recv(rmsg3, 17, MPI_CHAR, src, tag, comm, MPI_STATUS_IGNORE);)"}
{"predict": "(9, SYCL, sycl::device device;)", "label": "(9, SYCL, sycl::device device;)"}
{"predict": "(49, OpenMP, #pragma omp interop device(dev) depend(inout : ap) init(targetsync : I)); (14, OpenMP, #pragma omp interop destroy(I)); (41, OpenMP, #pragma omp interop device(dev) depend(inout : ap) use(I)); (79, OpenMP, #pragma omp interop init(prefer_type(2, 4, 6, 1), targetsync : I)); (89, OpenMP, #pragma omp interop init(prefer_type(\"cuda\", \"cuda_driver\", \"opencl\", \"sycl\", \"hip\", \"level_zero\"), targetsync : I)); (16, OpenMP, #pragma omp interop use(IRef)); (30, OpenMP, #pragma omp interop use(CI)); (61, OpenMP, #pragma omp interop device(dev) depend(inout : ap) destroy(I)); (4, OpenMP, #pragma omp interop use(I)); (70, OpenMP, #pragma omp interop init(prefer_type(1, 2, 3, 4, 5, 6), targetsync : I)); (8, OpenMP, #pragma omp interop destroy(IRef)); (-5, OpenMP, #pragma omp interop init(target : IRef))", "label": "(140, OpenMP, #pragma omp interop use(I) use(J)); (129, OpenMP, #pragma omp interop init(target:I) init(targetsync:J)); (24, OpenMP, #pragma omp interop init(target:IRef)); (31, OpenMP, #pragma omp interop destroy(IRef)); (71, OpenMP, #pragma omp interop device(dev) depend(inout:ap) destroy(I)); (159, OpenMP, #pragma omp interop destroy(I) use(J)); (4, OpenMP, #pragma omp interop use(I)); (141, OpenMP, #pragma omp interop destroy(I) destroy(J)); (47, OpenMP, #pragma omp interop device(dev) depend(inout:ap) init(targetsync:I)); (7, OpenMP, #pragma omp interop destroy(I)); (-2, OpenMP, #pragma omp interop init(target:I)); (127, OpenMP, #pragma omp interop init(target:I) use(J)); (29, OpenMP, #pragma omp interop use(CI)); (84, OpenMP, #pragma omp interop init(prefer_type(2,4,6,1),targetsync:I)); (14, OpenMP, #pragma omp interop use(IRef)); (50, OpenMP, #pragma omp interop device(dev) depend(inout:ap) use(I)); (71, OpenMP, #pragma omp interop init(prefer_type(1,2,3,4,5,6),targetsync:I)); (145, OpenMP, #pragma omp interop init(target:I) destroy(J)); (-14, OpenMP, #pragma omp interop init()"}
{"predict": "(36, CUDA, CUDA_CHECK(cudaStreamSynchronize(stream));); (38, CUDA, CUDA_CHECK(cudaFree(d_data));)", "label": "(36, CUDA, CUDA_CHECK(cudaStreamSynchronize(stream));); (38, CUDA, CUDA_CHECK(cudaFree(d_data));)"}
{"predict": "(86, CUDA, cudaFreeHost( outHost );); (84, CUDA, cudaFree( texDevice );)", "label": "(86, CUDA, cudaFreeHost( outHost );); (84, CUDA, cudaFree( texDevice );)"}
{"predict": "(31, OpenMP, #pragma omp teams reduction(+:sum)); (28, OpenMP, #pragma omp target map(tofrom: b, sum, t) map(alloc: a)); (31, OpenMP, #pragma omp distribute parallel for reduction(+:sum)); (33, OpenMP, t[i] = omp_get_team_num();)", "label": "(31, OpenMP, #pragma omp teams reduction(+:sum)); (28, OpenMP, #pragma omp target map(tofrom: b, sum, t) map(alloc: a)); (31, OpenMP, #pragma omp distribute parallel for reduction(+:sum)); (33, OpenMP, t[i] = omp_get_team_num();)"}
{"predict": "(91, OpenMP, const int NumThreads = omp_get_max_threads();)", "label": "(91, OpenMP, const int NumThreads = omp_get_max_threads();)"}
{"predict": "(44, CUDA, checkCudaErrors(cudaMemset(d_Output, 0, QRNG_DIMENSIONS * N * sizeof(float)));); (20, CUDA, int dev = findCudaDevice(argc, (const char **)argv);); (48, CUDA, checkCudaErrors(cudaDeviceSynchronize());); (123, CUDA, checkCudaErrors(cudaFree(d_Output));); (19, CUDA, checkCudaErrors(cudaGetDeviceProperties(&deviceProp, dev));); (28, CUDA, checkCudaErrors(cudaMalloc((void **)&d_Output, QRNG_DIMENSIONS * N * sizeof(float)));); (60, CUDA, checkCudaErrors(cudaMemcpy(h_OutputGPU, d_Output, QRNG_DIMENSIONS * N * sizeof(float), cudaMemcpyDeviceToHost));)", "label": "(44, CUDA, checkCudaErrors(cudaMemset(d_Output, 0, QRNG_DIMENSIONS * N * sizeof(float)));); (20, CUDA, int dev = findCudaDevice(argc, (const char **)argv);); (49, CUDA, checkCudaErrors(cudaDeviceSynchronize());); (123, CUDA, checkCudaErrors(cudaFree(d_Output));); (18, CUDA, checkCudaErrors(cudaGetDeviceProperties(&deviceProp, dev));); (28, CUDA, checkCudaErrors(cudaMalloc((void **)&d_Output, QRNG_DIMENSIONS * N * sizeof(float)));); (60, CUDA, checkCudaErrors(cudaMemcpy(h_OutputGPU, d_Output, QRNG_DIMENSIONS * N * sizeof(float), cudaMemcpyDeviceToHost));)"}
{"predict": "(251, OpenMP, nthreads = omp_get_num_threads();); (236, OpenMP, #pragma omp parallel firstprivate(niter) private(step)); (216, OpenMP, #pragma omp parallel); (239, OpenMP, #pragma omp master)", "label": "(249, OpenMP, nthreads = omp_get_num_threads();); (234, OpenMP, #pragma omp parallel firstprivate(niter) private(step)); (214, OpenMP, #pragma omp parallel); (237, OpenMP, #pragma omp master)"}
{"predict": "(24, MPI, MPI_Allreduce(&errs, &toterrs, 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);); (5, MPI, MPI_Init(&argc, &argv);); (32, MPI, MPI_Finalize();); (4, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (4, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (10, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);)", "label": "(6, MPI, MPI_Init(&argc, &argv);); (32, MPI, MPI_Finalize();); (11, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (5, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (20, MPI, MPI_Reduce(&errs, &toterrs, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);)"}
{"predict": "(147, MPI, MPI_Allgather(&nlocalranks, 1, MPI_INT, allranks, 1, MPI_INT, leader_comm);); (139, MPI, MPI_Allgather(&mylocalrank, 1, MPI_INT, allranks, 1, MPI_INT, local_comm);); (209, MPI, MPI_Allgather(&comm_mode, 1, MPI_INT, allcomm_mode, 1, MPI_INT, MPI_COMM_WORLD);)", "label": "(150, MPI, MPI_Type_commit(&mydt);); (154, MPI, MPI_Op_free(&myop);); (154, MPI, MPI_Type_free(&mydt);); (146, MPI, MPI_Type_contiguous(sizeof(comm_method_string_conversion_t), MPI_BYTE, &mydt);); (147, MPI, MPI_Op_create(myfn, 1, &myop);)"}
{"predict": "(13, MPI, MPI_Win_set_attr(windows[0], keyval, (void *) (MPI_Aint) (uintptr_t) base_ptr[0]);); (16, MPI, MPI_Win_free_keyval(&keyval_copy);); (13, MPI, MPI_Win_free(&windows[0]);); (6, MPI, MPI_Win_create_keyval(MPI_NULL_COPY_FN, delete_fn, &keyval, (void *) 0);); (8, MPI, MPI_Win_create(base_ptr[i], SIZE * sizeof(int), sizeof(int), MPI_INFO_NULL, MPI_COMM_WORLD, &windows[i]);); (10, MPI, MPI_Win_free(&windows[1]);); (4, MPI, MPI_Alloc_mem(SIZE * sizeof(int), MPI_INFO_NULL, &base_ptr[i]);); (10, MPI, MPI_Win_free_keyval(&keyval);); (6, MPI, MPI_Win_set_attr(windows[1], keyval, (void *) (MPI_Aint) (uintptr_t) base_ptr[1]);)", "label": "(8, MPI, MPI_Alloc_mem(DATA_SZ, MPI_INFO_NULL, &base_ptr[0]);); (20, MPI, MPI_Win_free_keyval(&keyval);); (21, MPI, MPI_Win_free(&windows[1]);); (6, MPI, MPI_Win_create(base_ptr[0], DATA_SZ, 1, MPI_INFO_NULL, MPI_COMM_WORLD, &windows[0]);); (12, MPI, MPI_Win_set_attr(windows[0], keyval, NULL);); (5, MPI, MPI_Alloc_mem(DATA_SZ, MPI_INFO_NULL, &base_ptr[1]);); (14, MPI, MPI_Free_mem(base_ptr[0]);); (15, MPI, MPI_Win_free_keyval(&keyval_copy);); (16, MPI, MPI_Free_mem(base_ptr[1]);); (4, MPI, MPI_Win_create_keyval(MPI_WIN_NULL_COPY_FN, delete_fn, &keyval, NULL);); (9, MPI, MPI_Win_free(&windows[0]);); (0, MPI, MPI_Win_create(base_ptr[1], DATA_SZ, 1, MPI_INFO_NULL, MPI_COMM_WORLD, &windows[1]);); (5, MPI, MPI_Win_set_attr(windows[1], keyval, NULL);)"}
{"predict": "(46, CUDA, thrust::fill(thrust::device, B.begin(), B.end(), 0.0);); (44, CUDA, thrust::sequence(thrust::device, A.begin(), A.end() );); (40, CUDA, thrust::device_vector<double> A(order*order);); (40, CUDA, thrust::device_vector<double> B(order*order);)", "label": "(46, CUDA, thrust::fill(thrust::device, B.begin(), B.end(), 0.0);); (44, CUDA, thrust::sequence(thrust::device, A.begin(), A.end() );); (40, CUDA, thrust::device_vector<double> A(order*order);); (40, CUDA, thrust::device_vector<double> B(order*order);)"}
{"predict": "(2, CUDA, extern __shared__ char shared_memory[];)", "label": "(2, CUDA, extern __shared__ char shared_memory[];)"}
{"predict": "(3, CUDA, extern __shared__ float s_data[];)", "label": "(5, CUDA, extern __shared__ float s_data[];)"}
{"predict": "(133, OpenMP, #pragma omp sections reduction(+ : h, k, B::x)); (85, OpenMP, #pragma omp sections reduction(^ : S1)); (58, OpenMP, #pragma omp sections reduction(+ : a, b, c, d, f)); (20, OpenMP, #pragma omp sections reduction(); (121, OpenMP, #pragma omp sections reduction(+ : p), reduction(+ : p)); (5, OpenMP, #pragma omp parallel); (130, OpenMP, #pragma omp sections private(i), reduction(+ : j), reduction(+ : q)); (87, OpenMP, #pragma omp sections reduction(&& : S2::S2sc)); (77, OpenMP, #pragma omp sections reduction(& : e, g)); (22, OpenMP, #pragma omp sections reduction(\\)); (96, OpenMP, #pragma omp sections reduction(&& : S2::S2s)); (115, OpenMP, #pragma omp sections reduction(+ : o)); (158, OpenMP, #pragma omp sections reduction(+ : m)); (33, OpenMP, #pragma omp sections reduction(| : argc,); (127, OpenMP, #pragma omp parallel private(k)); (49, OpenMP, #pragma omp sections reduction(- : da)); (86, OpenMP, #pragma omp sections reduction(+ : ba)); (118, OpenMP, #pragma omp sections reduction(+ : r)); (12, OpenMP, #pragma omp sections reduction(*)); (64, OpenMP, #pragma omp sections reduction(max : h.b)); (132, OpenMP, #pragma omp sections reduction(+ : fl)); (94, OpenMP, #pragma omp sections reduction(* : ca)); (142, OpenMP, #pragma omp sections reduction(task, + : m)); (102, OpenMP, #pragma omp sections reduction(+ : qa[1], qa[0])); (29, OpenMP, #pragma omp sections reduction(~ : argc)); (11, OpenMP, #pragma omp sections reduction(foo : argc); (121, OpenMP, #pragma omp parallel reduction(min : i)); (51, OpenMP, #pragma omp sections reduction(min : a, b, c, d, f)); (39, OpenMP,", "label": "(58, OpenMP, #pragma omp sections reduction(|| : argc > 0 ? argv[1] : argv[2])); (102, OpenMP, #pragma omp sections reduction(- : da)); (131, OpenMP, #pragma omp sections reduction(+ : o)); (75, OpenMP, #pragma omp sections reduction(+ : a, b, c, d, f)); (160, OpenMP, #pragma omp sections reduction(+ : fl)); (83, OpenMP, #pragma omp sections reduction(max : h.b)); (117, OpenMP, #pragma omp sections reduction(& : e, g)); (146, OpenMP, #pragma omp sections reduction(+ : r)); (20, OpenMP, #pragma omp sections reduction(-); (129, OpenMP, #pragma omp sections private(i), reduction(+ : j), reduction(+ : q)); (164, OpenMP, #pragma omp sections reduction(+ : m)); (102, OpenMP, #pragma omp sections reduction(&& : S2::S2s)); (61, OpenMP, #pragma omp sections reduction(^ : S1)); (80, OpenMP, #pragma omp sections reduction(+ : ba)); (154, OpenMP, #pragma omp parallel reduction(* : fl)); (-3, OpenMP, #pragma omp parallel); (67, OpenMP, #pragma omp sections reduction(min : a, b, c, d, f)); (111, OpenMP, #pragma omp sections reduction(+ : h, k, B::x)); (0, OpenMP, #pragma omp sections reduction +); (-6, OpenMP, #pragma omp sections reduction); (122, OpenMP, #pragma omp parallel private(k)); (87, OpenMP, #pragma omp sections reduction(^ : fl)); (31, OpenMP, #pragma omp sections reduction(| : argc,); (120, OpenMP, #pragma omp sections reduction(+ : p), reduction(+ : p)); (154, OpenMP, #pragma omp sections reduction(task, + : m)); (13, OpenMP, #pragma omp sections reduction(*)); (132, OpenMP, #pragma omp parallel reduction(min : i)); (136, OpenMP, #pragma omp parallel private(fl)); (40, OpenMP, #pragma omp sections reduction(&& : argc, z)); (69, OpenMP, #pragma omp sections reduction(* : ca)); (3, OpenMP, #pragma omp sections reduction()); (87, OpenMP, #pragma omp sections reduction(&& : S2::S2sc)); (127, OpenMP, #pragma omp sections reduction(max : j)); (-10, OpenMP, #pragma omp sections reduction(); (9, OpenMP, #pragma omp sections reduction(\\)); (13, OpenMP, #pragma omp sections reduction(foo : argc); (121, OpenMP, #pragma omp parallel shared(i)); (26, OpenMP, #pragma omp sections reduction(~ : argc))"}
{"predict": "(14, CUDA, cuda::CUDABlas *blas = new cuda::CUDABlas(cuda_executor);)", "label": "(14, CUDA, cuda::CUDABlas *blas = new cuda::CUDABlas(cuda_executor);)"}
{"predict": "(13, CUDA, qmc_cuda::cuda_check(cudaDeviceSynchronize());); (11, CUDA, qmc_cuda::cuda_check(cudaGetLastError());)", "label": "(13, CUDA, qmc_cuda::cuda_check(cudaDeviceSynchronize());); (11, CUDA, qmc_cuda::cuda_check(cudaGetLastError());)"}
{"predict": "(11, MPI, MPI_Error_string(code, msg, &resultLen);); (12, MPI, MPI_Abort(MPI_COMM_WORLD, code);); (8, MPI, MPI_Error_class(code, &class);)", "label": "(11, MPI, MPI_Error_string(code, msg, &resultLen);); (12, MPI, MPI_Abort(MPI_COMM_WORLD, code);); (8, MPI, MPI_Error_class(code, &class);)"}
{"predict": "(2, CUDA, __shared__ uchar as[18][66];)", "label": "(2, CUDA, __shared__ uchar as[18][66];)"}
{"predict": "(47, OpenMP, #pragma omp target parallel for is_device_ptr(rh)); (18, OpenMP, #pragma omp target parallel for is_device_ptr(k)); (52, OpenMP, #pragma omp target parallel for is_device_ptr(da)); (37, OpenMP, #pragma omp target parallel for is_device_ptr(raa)); (23, OpenMP, #pragma omp target parallel for is_device_ptr(z)); (30, OpenMP, #pragma omp target parallel for is_device_ptr(h)); (15, OpenMP, #pragma omp target parallel for is_device_ptr(aa))", "label": "(25, OpenMP, #pragma omp target parallel for is_device_ptr(z)); (36, OpenMP, #pragma omp target parallel for is_device_ptr(raa)); (29, OpenMP, #pragma omp target parallel for is_device_ptr(aa)); (46, OpenMP, #pragma omp target parallel for is_device_ptr(rh)); (39, OpenMP, #pragma omp target parallel for is_device_ptr(h)); (14, OpenMP, #pragma omp target parallel for is_device_ptr(k)); (49, OpenMP, #pragma omp target parallel for is_device_ptr(da))"}
{"predict": "(4, OpenMP, #pragma omp parallel); (7, OpenMP, #pragma omp for collapse(2))", "label": "(11, OpenMP, #pragma omp ordered); (3, OpenMP, #pragma omp parallel); (13, OpenMP, #pragma omp critical); (5, OpenMP, #pragma omp for private(i,j) schedule(static,1) collapse(2) ordered)"}
{"predict": "(5, OpenMP, #pragma omp section); (31, OpenMP, #pragma omp sections private(g, sivar)); (59, OpenMP, #pragma omp sections private(t_var, vec, s_arr, s_arr, var, var, sivar)); (3, OpenMP, #pragma omp parallel); (68, OpenMP, #pragma omp sections private(A::x))", "label": "(60, OpenMP, #pragma omp sections lastprivate(t_var, vec, s_arr, var, sivar)); (4, OpenMP, #pragma omp section); (2, OpenMP, #pragma omp parallel); (28, OpenMP, #pragma omp sections lastprivate(g, sivar)); (65, OpenMP, #pragma omp sections lastprivate(CONDITIONAL A::x, B::x))"}
{"predict": "(29, CUDA, cudaFree(d_ret);); (13, CUDA, cudaMalloc(&d_ret, sizeof(void *) * THREAD);); (25, CUDA, cudaMemcpy(h_clk, d_clk, sizeof(uint32_t) * THREAD, cudaMemcpyDeviceToHost);); (10, CUDA, cudaMalloc(&d_clk, sizeof(uint32_t) * THREAD);); (26, CUDA, cudaFree(d_clk);); (22, CUDA, cudaFree(d_ptr);); (3, CUDA, cudaMalloc(&d_ptr, sizeof(void *) * THREAD);)", "label": "(10, CUDA, cudaMallocHost(&h_ptr, THREAD * sizeof(void *));); (29, CUDA, cudaFree(d_ptr);); (25, CUDA, cudaMemcpy(h_clk, d_clk, THREAD * sizeof(uint32_t), cudaMemcpyDeviceToHost);); (28, CUDA, cudaFree(d_ret);); (12, CUDA, cudaMemcpy(d_ptr, h_ptr, THREAD * sizeof(void *), cudaMemcpyHostToDevice);); (27, CUDA, cudaFree(d_clk);); (-1, CUDA, cudaMalloc(&d_ptr, THREAD * sizeof(void *));); (26, CUDA, cudaFreeHost(h_ptr);); (-1, CUDA, cudaMalloc(&d_clk, THREAD * sizeof(uint32_t));); (-3, CUDA, cudaMalloc(&d_ret, sizeof(void *));)"}
{"predict": "(14, MPI, MPI_Finalize();); (1, MPI, MPI_Init(&argc,&argv);)", "label": "(14, MPI, MPI_Finalize();); (1, MPI, MPI_Init(&argc,&argv);)"}
{"predict": "(11, TBB, tbb::flow::multifunction_node< InputType, OutputType > exe_node( g, lc, cf );); (49, TBB, tbb::flow::remove_edge( tbb::flow::output_port<0>(exe_node), *receivers[r] );); (57, TBB, tbb::flow::make_edge( senders[s], exe_node );); (63, TBB, inc_functor body_copy = tbb::flow::copy_body<inc_functor>( exe_node );); (4, TBB, tbb::flow::graph g;); (17, TBB, tbb::flow::make_edge( tbb::flow::output_port<0>(exe_node), *receivers[r] );); (65, TBB, g.reset(tbb::flow::rf_reset_bodies);)", "label": "(69, TBB, g.reset(tbb::flow::rf_reset_bodies);); (28, TBB, tbb::flow::make_edge( senders[s], exe_node );); (19, TBB, tbb::flow::make_edge( exe_node, *receivers[r] );); (61, TBB, inc_functor body_copy = tbb::flow::copy_body<inc_functor>( exe_node );); (66, TBB, body_copy = tbb::flow::copy_body<inc_functor>( exe_node );); (0, TBB, tbb::flow::graph g;); (44, TBB, tbb::flow::remove_edge( exe_node, *receivers[r] );); (4, TBB, tbb::flow::function_node< InputType, OutputType > exe_node( g, lc, cf );)"}
{"predict": "(19, TBB, using CombinableType = oneapi::tbb::combinable< ContainerType >;); (4, TBB, typedef std::vector<T, oneapi::tbb::tbb_allocator<T>> ContainerType;); (18, TBB, if (Verbose && t == 0) oneapi::tbb::tick_count t0;); (1, TBB, oneapi::tbb::global_control gc(oneapi::tbb::global_control::max_allowed_parallelism, p);)", "label": "(8, TBB, oneapi::tbb::global_control gc(oneapi::tbb::global_control::max_allowed_parallelism, p);); (23, TBB, oneapi::tbb::parallel_for( oneapi::tbb::blocked_range<int> (0, N, 10000), ParallelVectorForBody<T>( vs ) );); (0, TBB, typedef std::vector<T, oneapi::tbb::tbb_allocator<T> > ContainerType;); (17, TBB, typedef typename oneapi::tbb::combinable< ContainerType > CombinableType;)"}
{"predict": "(11, TBB, tbb::flow::multifunction_node< InputType, OutputType > exe_node( g, lc, cf );); (15, TBB, tbb::flow::make_edge( tbb::flow::output_port<0>(exe_node), receivers[r] );); (43, TBB, tbb::flow::remove_edge( tbb::flow::output_port<0>(exe_node), receivers[r] );); (21, TBB, tbb::flow::make_edge( senders[s], exe_node );); (52, TBB, inc_functor body_copy = tbb::flow::copy_body<inc_functor>( exe_node );); (0, TBB, tbb::flow::graph g;)", "label": "(16, TBB, tbb::flow::make_edge( exe_node, receivers[r] );); (23, TBB, tbb::flow::make_edge( senders[s], exe_node );); (43, TBB, tbb::flow::remove_edge( exe_node, receivers[r] );); (53, TBB, inc_functor body_copy = tbb::flow::copy_body<inc_functor>( exe_node );); (1, TBB, tbb::flow::graph g;); (6, TBB, tbb::flow::function_node< InputType, OutputType > exe_node( g, lc, cf );)"}
{"predict": "(29, CUDA, cudaMalloc((void **)&d_C_ref, m * n * sizeof(float));); (68, CUDA, cudaEventElapsedTime(&elapsed_time, start, stop);); (30, CUDA, cudaMemcpy(d_A, A, m * k * sizeof(float), cudaMemcpyHostToDevice);); (32, CUDA, cudaMemcpy(d_C_ref, C_ref, m * n * sizeof(float), cudaMemcpyHostToDevice);); (36, CUDA, cudaMemcpy(C, d_C, m * n * sizeof(float), cudaMemcpyDeviceToHost);); (61, CUDA, cudaEventRecord(stop);); (61, CUDA, cudaEventSynchronize(stop);); (15, CUDA, cudaMalloc((void **)&d_B, k * n * sizeof(float));); (13, CUDA, cudaMalloc((void **)&d_A, m * k * sizeof(float));); (52, CUDA, cudaEventRecord(start);); (13, CUDA, cudaMalloc((void **)&d_C, m * n * sizeof(float));); (23, CUDA, cudaMemcpy(d_C, C, m * n * sizeof(float), cudaMemcpyHostToDevice);); (21, CUDA, cudaMemcpy(d_B, B, k * n * sizeof(float), cudaMemcpyHostToDevice);); (46, CUDA, cudaEventCreate(&stop);); (44, CUDA, cudaEventCreate(&start);)", "label": "(29, CUDA, cudaMalloc((void **)&d_C_ref, m * n * sizeof(float));); (68, CUDA, cudaEventElapsedTime(&elapsed_time, start, stop);); (30, CUDA, cudaMemcpy(d_A, A, m * k * sizeof(float), cudaMemcpyHostToDevice);); (32, CUDA, cudaMemcpy(d_C_ref, C_ref, m * n * sizeof(float), cudaMemcpyHostToDevice);); (36, CUDA, cudaMemcpy(C, d_C, m * n * sizeof(float), cudaMemcpyDeviceToHost);); (61, CUDA, cudaEventRecord(stop);); (61, CUDA, cudaEventSynchronize(stop);); (15, CUDA, cudaMalloc((void **)&d_B, k * n * sizeof(float));); (13, CUDA, cudaMalloc((void **)&d_A, m * k * sizeof(float));); (52, CUDA, cudaEventRecord(start);); (13, CUDA, cudaMalloc((void **)&d_C, m * n * sizeof(float));); (23, CUDA, cudaMemcpy(d_C, C, m * n * sizeof(float), cudaMemcpyHostToDevice);); (21, CUDA, cudaMemcpy(d_B, B, k * n * sizeof(float), cudaMemcpyHostToDevice);); (46, CUDA, cudaEventCreate(&stop);); (44, CUDA, cudaEventCreate(&start);)"}
{"predict": "(6, OpenMP, #pragma omp parallel for)", "label": "(6, OpenMP, #pragma omp parallel for)"}
{"predict": "(12, CUDA, A[blockIdx.z * stride + i * lda + j] = thrust::complex<T>(0.0, 0.0);); (7, CUDA, A[blockIdx.z * stride + i * lda + i] = thrust::complex<T>(1.0, 0.0);)", "label": "(8, CUDA, A[blockIdx.z * stride + i * lda + i] = thrust::complex<T>(1.0, 0.0);); (11, CUDA, A[blockIdx.z * stride + j * lda + i] = thrust::complex<T>(0.0, 0.0);)"}
{"predict": "(25, CUDA, cudaMalloc((void**)(&d_t_right), t_right_bytes);); (25, CUDA, cudaMalloc((void**)(&d_t_result), t_result_bytes);); (52, CUDA, cudaFree((void*)d_t_left);); (26, CUDA, cudaMemcpy(d_t_right, t_right.data(), t_right_bytes, cudaMemcpyHostToDevice);); (20, CUDA, cudaMalloc((void**)(&d_t_left), t_left_bytes);); (23, CUDA, cudaMemcpy(d_t_left, t_left.data(), t_left_bytes, cudaMemcpyHostToDevice);); (46, CUDA, cudaFree((void*)d_t_result);); (44, CUDA, cudaFree((void*)d_t_right);); (37, CUDA, cudaMemcpy(t_result_gpu.data(), d_t_result, t_result_bytes, cudaMemcpyDeviceToHost);)", "label": "(25, CUDA, cudaMalloc((void**)(&d_t_right), t_right_bytes);); (25, CUDA, cudaMalloc((void**)(&d_t_result), t_result_bytes);); (50, CUDA, cudaFree((void*)d_t_left);); (26, CUDA, cudaMemcpy(d_t_right, t_right.data(), t_right_bytes, cudaMemcpyHostToDevice);); (20, CUDA, cudaMalloc((void**)(&d_t_left), t_left_bytes);); (23, CUDA, cudaMemcpy(d_t_left, t_left.data(), t_left_bytes, cudaMemcpyHostToDevice);); (48, CUDA, cudaFree((void*)d_t_result);); (46, CUDA, cudaFree((void*)d_t_right);); (36, CUDA, cudaMemcpy(t_result_gpu.data(), d_t_result, t_result_bytes, cudaMemcpyDeviceToHost);)"}
{"predict": "(111, MPI, MPI_Barrier(adio_fh->comm);); (34, MPI, MPI_Comm_rank(adio_fh->comm, &myrank);)", "label": "(37, MPI, MPI_Comm_rank(adio_fh->comm, &myrank);); (24, MPI, MPI_Bcast(&tmp_whence, 1, MPI_INT, 0, adio_fh->comm);); (12, MPI, MPI_Bcast(&tmp_offset, 1, ADIO_OFFSET, 0, adio_fh->comm);); (110, MPI, MPI_Barrier(adio_fh->comm);)"}
{"predict": "(2, OpenMP, #pragma omp parallel num_threads(2) shared(data, out, flag))", "label": "(22, OpenMP, #pragma omp flush(out)); (17, OpenMP, #pragma omp atomic read); (10, OpenMP, #pragma omp atomic write); (-1, OpenMP, #pragma omp target parallel num_threads(64) map(tofrom); (6, OpenMP, #pragma omp flush(data))"}
{"predict": "(11, TBB, tbb::task_scheduler_init init(nthread);)", "label": "(11, TBB, tbb::task_scheduler_init init(nthread);)"}
{"predict": "(21, MPI, MPI_Comm_rank(comm_node, &rank_node);); (34, MPI, MPI_Finalize();); (19, MPI, MPI_Comm_size(comm_node, &size_node);); (9, MPI, MPI_Get_processor_name(procname, &namelen);); (4, MPI, MPI_Comm_split_type(MPI_COMM_WORLD, MPI_COMM_TYPE_SHARED, rank, MPI_INFO_NULL, &comm_node);); (0, MPI, MPI_Init(&argc, &argv);); (1, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (26, MPI, MPI_Comm_free(&comm_node);); (-1, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);)", "label": "(12, MPI, MPI_Comm_size(comm_node, &size_node);); (1, MPI, MPI_Init(&argc, &argv);); (32, MPI, MPI_Finalize();); (3, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (13, MPI, MPI_Get_processor_name(procname, &namelen);); (5, MPI, MPI_Comm_split_type(MPI_COMM_WORLD, MPI_COMM_TYPE_SHARED, 0, MPI_INFO_NULL, &comm_node);); (-1, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (6, MPI, MPI_Comm_rank(comm_node, &rank_node);); (19, MPI, MPI_Barrier(MPI_COMM_WORLD);)"}
{"predict": "(12, OpenMP, #pragma omp parallel for)", "label": "(12, OpenMP, #pragma omp parallel for)"}
{"predict": "(37, CUDA, HANDLE_ERROR( cudaEventRecord( start, 0 ) );); (58, CUDA, HANDLE_ERROR( cudaEventDestroy( start ) );); (3, CUDA, HANDLE_ERROR( cudaEventCreate( &stop ) );); (47, CUDA, HANDLE_ERROR( cudaFreeHost( b ) );); (33, CUDA, HANDLE_ERROR( cudaEventRecord( stop, 0 ) );); (44, CUDA, HANDLE_ERROR( cudaFreeHost( partial_c ) );); (19, CUDA, HANDLE_ERROR( cudaHostGetDevicePointer( &dev_a, a, 0 ) );); (44, CUDA, HANDLE_ERROR( cudaFreeHost( a ) );); (-3, CUDA, HANDLE_ERROR( cudaEventCreate( &start ) );); (16, CUDA, HANDLE_ERROR( cudaHostGetDevicePointer( &dev_b, b, 0 ) );)", "label": "(56, CUDA, HANDLE_ERROR( cudaEventDestroy( start ) );); (6, CUDA, HANDLE_ERROR( cudaEventCreate( &stop ) );); (55, CUDA, HANDLE_ERROR( cudaEventDestroy( stop ) );); (36, CUDA, HANDLE_ERROR( cudaThreadSynchronize() );); (20, CUDA, HANDLE_ERROR( cudaHostGetDevicePointer( &dev_b, b, 0 ) );); (18, CUDA, HANDLE_ERROR( cudaHostGetDevicePointer( &dev_a, a, 0 ) );); (28, CUDA, HANDLE_ERROR( cudaEventRecord( start, 0 ) );); (33, CUDA, HANDLE_ERROR( cudaEventRecord( stop, 0 ) );); (33, CUDA, HANDLE_ERROR( cudaEventSynchronize( stop ) );); (43, CUDA, HANDLE_ERROR( cudaFreeHost( b ) );); (41, CUDA, HANDLE_ERROR( cudaFreeHost( a ) );); (42, CUDA, HANDLE_ERROR( cudaFreeHost( partial_c ) );); (-6, CUDA, HANDLE_ERROR( cudaEventCreate( &start ) );)"}
{"predict": "(13, MPI, mpi_err = MPI_Type_commit(&type);); (10, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);)", "label": "(13, MPI, mpi_err = MPI_Type_commit(&type);); (9, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);)"}
{"predict": "(7, TBB, tbb::blocked_range<RangeType> range2(range,tbb::split());)", "label": "(7, TBB, RangeType range2( range, tbb::split() );)"}
{"predict": "(20, MPI, MPI_Allreduce( & tmp , & result , 1 , MPI_DOUBLE , MPI_SUM , MPI_COMM_WORLD );)", "label": "(20, MPI, MPI_Allreduce( & tmp , & result , 1 , MPI_DOUBLE , MPI_SUM , MPI_COMM_WORLD );)"}
{"predict": "(3, CUDA, __shared__ float local[threads];)", "label": "(3, CUDA, __shared__ float local[threads];)"}
{"predict": "(9, CUDA, __shared__ float s_variance;); (7, CUDA, __shared__ float s_mean;)", "label": "(9, CUDA, __shared__ float s_variance;); (7, CUDA, __shared__ float s_mean;)"}
{"predict": "(103, MPI, MPI_File_open(MPI_COMM_WORLD, file_name.c_str(), MPI_MODE_CREATE | MPI_MODE_WRONLY, MPI_INFO_NULL, &file);); (105, MPI, MPI_File_write(file, &size_array, 1, MPI_INT, &status);); (111, MPI, MPI_File_close(&file);); (106, MPI, MPI_File_seek(file, mpi_offset, MPI_SEEK_SET);); (109, MPI, MPI_File_write(file, &pos_values[0], data_size[rank], MPI_DOUBLE, &status);)", "label": "(99, MPI, MPI_File_open(MPI_COMM_WORLD, file_name.c_str(), MPI_MODE_CREATE | MPI_MODE_WRONLY, MPI_INFO_NULL, &file);); (105, MPI, MPI_File_write(file, &size_array, 1, MPI_INT, &status);); (110, MPI, MPI_File_close(&file);); (102, MPI, MPI_File_seek(file, mpi_offset, MPI_SEEK_SET);); (107, MPI, MPI_File_write(file, &pos_values[0], data_size[rank], MPI_DOUBLE, &status);)"}
{"predict": "(15, CUDA, __shared__ float Bsh[_M_ * _K_];)", "label": "(16, CUDA, extern __shared__ volatile float Bsh[];)"}
{"predict": "(8, MPI, MPI_Init(&argc, &argv);); (29, MPI, MPI_Finalize();)", "label": "(8, MPI, MPI_Init(&argc, &argv);); (28, MPI, MPI_Finalize();)"}
{"predict": "(20, CUDA, cudaStream_t stream = at::cuda::getCurrentCUDAStream();)", "label": "(20, CUDA, cudaStream_t stream = at::cuda::getCurrentCUDAStream();)"}
{"predict": "(116, CUDA, CUDA_CHECK(cudaEventRecord(events[1]));); (107, CUDA, CUDA_CHECK(cudaEventCreate(&event));); (113, CUDA, CUDA_CHECK(cudaEventElapsedTime(&runtime_ms, events[0], events[1]));); (103, CUDA, CUDA_CHECK(cudaEventRecord(events[0]));); (56, CUDA, CUDA_CHECK(cudaMalloc(&p.workspace, p.workspace_size()));); (114, CUDA, CUDA_CHECK(cudaEventSynchronize(events[1]));); (121, CUDA, CUDA_CHECK(cudaEventDestroy(event));); (117, CUDA, CUDA_CHECK(cudaFree(p.workspace));); (100, CUDA, CUDA_CHECK(cudaEventSynchronize(events[0]));)", "label": "(85, CUDA, cudaDeviceSynchronize();); (59, CUDA, cudaMalloc(&p.workspace, p.workspace_size());); (114, CUDA, CUDA_CHECK(cudaEventSynchronize(events[1]));); (112, CUDA, CUDA_CHECK(cudaEventRecord(events[1]));); (84, CUDA, CUDA_CHECK(cudaFuncSetAttribute(kernel_fn, cudaFuncAttributeMaxDynamicSharedMemorySize, int(smem_bytes)));); (114, CUDA, CUDA_CHECK(cudaEventElapsedTime(&runtime_ms, events[0], events[1]));); (9, CUDA, std::cerr << \"FATAL: \" #FN \" failed: \" << cudaGetErrorString(cudaError) << std::endl;); (102, CUDA, CUDA_CHECK(cudaEventCreate(&event));); (103, CUDA, CUDA_CHECK(cudaEventRecord(events[0]));)"}
{"predict": "(18, CUDA, cudaMemcpy(pointers, cpuPointers, sizeof(uint8_t*) * total * 3, cudaMemcpyHostToDevice);); (7, CUDA, uint8_t ** pointers = (uint8_t**)FastllmCudaMalloc(sizeof(uint8_t*) * total * 3);); (19, CUDA, FastllmCudaFree(pointers);)", "label": "(19, CUDA, cudaMemcpy(pointers, cpuPointers, sizeof(uint8_t*) * total * 3, cudaMemcpyHostToDevice);); (6, CUDA, uint8_t ** pointers = (uint8_t**)FastllmCudaMalloc(sizeof(uint8_t*) * total * 3);); (20, CUDA, FastllmCudaFree(pointers);)"}
{"predict": "( MPI, MPI, MPI_Comm_size( MPI_COMM_WORLD, &Parallel::nprocs );); ( MPI, MPI, MPI_Init( &argc, &argv );); ( MPI, MPI, MPI_Comm_rank( MPI_COMM_WORLD, &Parallel::pid );); ( MPI, MPI, MPI_Finalize();); (104, MPI, MPI_Send( A[ 1 ].data(), N + 1, MPI_DOUBLE, activep[ numactivep - 2 ], 1, MPI_COMM_WORLD );); (97, MPI, MPI_Send( A[ 1 ].data(), N + 1, MPI_DOUBLE, activep[ 1 ], 0, MPI_COMM_WORLD );); (109, MPI, MPI_Recv( A[ 3 ].data(), N + 1, MPI_DOUBLE, activep[ j - 1 ], 1, MPI_COMM_WORLD, &status );); (101, MPI, MPI_Send( A[ 1 ].data(), N + 1, MPI_DOUBLE, activep[ j + 1 ], 0, MPI_COMM_WORLD );); (105, MPI, MPI_Recv( A[ 4 ].data(), N + 1, MPI_DOUBLE, activep[ j + 1 ], 1, MPI_COMM_WORLD, &status );); (94, MPI, MPI_Send( A[ 1 ].data(), N + 1, MPI_DOUBLE, activep[ 2 ], 0, MPI_COMM_WORLD );); (105, MPI, MPI_Recv( A[ 4 ].data(), N + 1, MPI_DOUBLE, activep[ numactivep - 2 ], 1, MPI_COMM_WORLD, &status );); (97, MPI, MPI_Recv( A[ 3 ].data(), N + 1, MPI_DOUBLE, activep[ 1 ], 1, MPI_COMM_WORLD, &status );)", "label": "(106, MPI, MPI_Send( A[ 1 ].data(), N + 1, MPI_DOUBLE, activep[ j + 1 ], 0, MPI_COMM_WORLD );); (104, MPI, MPI_Send( A[ 1 ].data(), N + 1, MPI_DOUBLE, activep[ j - 1 ], 1, MPI_COMM_WORLD );); (108, MPI, MPI_Recv( A[ 3 ].data(), N + 1, MPI_DOUBLE, activep[ j - 1 ], 0, MPI_COMM_WORLD, &status );); (7, MPI, MPI_Comm_size( MPI_COMM_WORLD, &Parallel::nprocs );); (97, MPI, MPI_Send( A[ 1 ].data(), N + 1, MPI_DOUBLE, activep[ numactivep - 2 ], 1, MPI_COMM_WORLD );); (135, MPI, MPI_Allgather( &tmp, 1, MPI_DOUBLE, x.data(), 1, MPI_DOUBLE, MPI_COMM_WORLD);); (187, MPI, MPI_Finalize();); (157, MPI, MPI_Allgather( &tmp, 1, MPI_DOUBLE, x.data(), 1, MPI_DOUBLE, MPI_COMM_WORLD );); (1, MPI, MPI_Init( &argc, &argv );); (2, MPI, MPI_Comm_rank( MPI_COMM_WORLD, &Parallel::pid );); (101, MPI, MPI_Recv( A[ 4 ].data(), N + 1, MPI_DOUBLE, activep[ j + 1 ], 1, MPI_COMM_WORLD, &status );); (86, MPI, MPI_Send( A[ 1 ].data(), N + 1, MPI_DOUBLE, activep[ 1 ], 0, MPI_COMM_WORLD );)"}
{"predict": "(25, OpenMP, #pragma omp parallel default(shared)); (10, OpenMP, #pragma omp parallel); (37, OpenMP, #pragma omp parallel num_threads(x)); (15, OpenMP, #pragma omp parallel default(none)); (28, OpenMP, #pragma omp parallel default(firstprivate))", "label": "(25, OpenMP, #pragma omp parallel default(shared)); (10, OpenMP, #pragma omp parallel); (37, OpenMP, #pragma omp parallel num_threads(x)); (15, OpenMP, #pragma omp parallel default(none)); (28, OpenMP, #pragma omp parallel default(firstprivate))"}
{"predict": "(41, CUDA, __shared__ float Bs[BLOCK_SIZE][BLOCK_SIZE];); (36, CUDA, __shared__ float As[BLOCK_SIZE][BLOCK_SIZE];)", "label": "(41, CUDA, __shared__ float Bs[BLOCK_SIZE][BLOCK_SIZE];); (36, CUDA, __shared__ float As[BLOCK_SIZE][BLOCK_SIZE];)"}
{"predict": "(4, CUDA, __shared__ int sharedHistogram[32][cBuckets];)", "label": "(12, CUDA, __shared__ unsigned char sharedHistogram[NUM_THREADS][cBuckets];)"}
{"predict": "(24, TBB, tbb::flow::make_edge(bnode, tbb::flow::input_port<0>(jnode));); (5, TBB, tbb::flow::make_edge(bnode, fnode);); (33, TBB, g.reset(tbb::flow::rf_clear_edges);); (-2, TBB, tbb::flow::sequencer_node<int> bnode(g, seq_body());); (18, TBB, tbb::flow::join_node<std::tuple<int,int>,tbb::flow::reserving> jnode(g);); (-3, TBB, tbb::flow::function_node<int> fnode(g, tbb::flow::serial, serial_fn_body<int>(serial_fn_state0));); (-6, TBB, tbb::flow::graph g;)", "label": "(25, TBB, tbb::flow::make_edge(bnode, tbb::flow::input_port<0>(jnode));); (7, TBB, tbb::flow::make_edge(bnode, fnode);); (22, TBB, tbb::flow::join_node<std::tuple<int,int>,tbb::flow::reserving> jnode(g);); (-1, TBB, tbb::flow::sequencer_node<int> bnode(g, seq_body());); (-3, TBB, tbb::flow::graph g;); (32, TBB, g.reset(tbb::flow::rf_clear_edges);); (-2, TBB, tbb::flow::function_node<int> fnode(g, tbb::flow::serial, serial_fn_body<int>(serial_fn_state0));); (15, TBB, tbb::flow::remove_edge(bnode, fnode);)"}
{"predict": "(47, TBB, oneapi::tbb::global_control control(oneapi::tbb::global_control::max_allowed_parallelism, p);); (51, TBB, oneapi::tbb::flow::make_edge(the_source, *bins[i]);); (61, TBB, oneapi::tbb::flow::make_edge(*bins[i], the_value_pool);); (1, TBB, oneapi::tbb::flow::graph g;)", "label": "(34, TBB, oneapi::tbb::tick_count start = oneapi::tbb::tick_count::now();); (69, TBB, utility::report_elapsed_time((oneapi::tbb::tick_count::now() - start).seconds());); (49, TBB, oneapi::tbb::flow::make_edge(the_source, the_value_pool);); (53, TBB, oneapi::tbb::flow::make_edge(the_value_pool, *(bins[i]));); (44, TBB, oneapi::tbb::flow::graph g;); (31, TBB, oneapi::tbb::global_control c(oneapi::tbb::global_control::max_allowed_parallelism, p);)"}
{"predict": "(18, OpenMP, #pragma omp target teams distribute parallel for simd safelen (ST); (32, OpenMP, #pragma omp target teams distribute parallel for simd safelen (foobool(argc)), safelen (true), safelen (-5)); (52, OpenMP, #pragma omp target teams distribute parallel for simd safelen (N)); (0, OpenMP, #pragma omp target teams distribute parallel for simd safelen); (18, OpenMP, #pragma omp target teams distribute parallel for simd safelen (1))); (32, OpenMP, #pragma omp target teams distribute parallel for simd safelen (S)); (1, OpenMP, #pragma omp target teams distribute parallel for simd safelen (); (19, OpenMP, #pragma omp target teams distribute parallel for simd safelen ((ST > 0) ? 1 + ST : 2)); (42, OpenMP, #pragma omp target teams distribute parallel for simd safelen (4)); (5, OpenMP, #pragma omp target teams distribute parallel for simd safelen (argc); (1, OpenMP, #pragma omp target teams distribute parallel for simd safelen ())", "label": "(37, OpenMP, #pragma omp target teams distribute parallel for simd safelen (S)); (17, OpenMP, #pragma omp target teams distribute parallel for simd safelen (ST); (20, OpenMP, #pragma omp target teams distribute parallel for simd safelen (1))); (51, OpenMP, #pragma omp target teams distribute parallel for simd safelen (N)); (46, OpenMP, #pragma omp target teams distribute parallel for simd safelen (4)); (2, OpenMP, #pragma omp target teams distribute parallel for simd safelen (); (20, OpenMP, #pragma omp target teams distribute parallel for simd safelen ((ST > 0) ? 1 + ST : 2)); (26, OpenMP, #pragma omp target teams distribute parallel for simd safelen (foobool(argc)), safelen (true), safelen (-5)); (3, OpenMP, #pragma omp target teams distribute parallel for simd safelen ()); (5, OpenMP, #pragma omp target teams distribute parallel for simd safelen (argc); (-7, OpenMP, #pragma omp target teams distribute parallel for simd safelen)"}
{"predict": "(13, CUDA, extern __shared__ char shared_mem[];)", "label": "(13, CUDA, extern __shared__ char shared_mem[];)"}
{"predict": "(14, MPI, MPI_Abort(MPI_COMM_WORLD, 127);)", "label": "(14, MPI, MPI_Abort(MPI_COMM_WORLD, 127);)"}
{"predict": "(51, CUDA, cuda_safe_call(cudaStreamSynchronize(stream));)", "label": "(51, CUDA, cuda_safe_call(cudaStreamSynchronize(stream));)"}
{"predict": "(34, OpenCL, TEST_OCL_CHECK(clReleaseCommandQueue(interop_ocl_queue));)", "label": "(34, OpenCL, TEST_OCL_CHECK(clReleaseCommandQueue(interop_ocl_queue));)"}
{"predict": "(7, OpenMP, #pragma omp taskloop simd allocate(d) if(taskloop: argc > N) default(shared) untied priority(N) safelen(N) linear(c) aligned(ptr) grainsize(N) reduction(+:g) in_reduction(+: d)); (13, OpenMP, #pragma omp parallel); (13, OpenMP, #pragma omp taskloop simd private(argc, b), firstprivate(c, d), lastprivate(d, f) collapse(N) shared(g) if (c) final(d) mergeable priority(f) simdlen(N) nogroup num_tasks(N)); (3, OpenMP, #pragma omp taskgroup task_reduction(+: d) allocate(d))", "label": "(15, OpenMP, #pragma omp taskloop simd private(argc, b), firstprivate(c, d), lastprivate(d, f) collapse(N) shared(g) if (c) final(d) mergeable priority(f) simdlen(N) nogroup num_tasks(N)); (13, OpenMP, #pragma omp parallel); (5, OpenMP, #pragma omp taskloop simd allocate(d) if(taskloop: argc > N) default(shared) untied priority(N) safelen(N) linear(c) aligned(ptr) grainsize(N) reduction(+:g) in_reduction(+: d)); (3, OpenMP, #pragma omp taskgroup task_reduction(+: d) allocate(d))"}
{"predict": "(10, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (8, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (42, MPI, mpi_errno = MPI_Comm_free(&stream_comm);); (15, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);)", "label": "(10, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (43, MPI, mpi_errno = MPI_Comm_free(&stream_comm);); (7, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (15, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);)"}
{"predict": "(18, MPI, *ierr = MPI_Info_delete( (MPI_Info)(*v1), p2 );)", "label": "(18, MPI, *ierr = MPI_Info_delete( (MPI_Info)(*v1), p2 );)"}
{"predict": "(2, TBB, tbb::tick_count t0 = tbb::tick_count::now();); (11, TBB, tbb::tick_count t1 = tbb::tick_count::now();)", "label": "(2, TBB, tbb::tick_count t0 = tbb::tick_count::now();); (11, TBB, tbb::tick_count t1 = tbb::tick_count::now();)"}
{"predict": "(13, CUDA, A_[j] = static_cast<thrust::complex<T1>>(B_[j]);)", "label": "(12, CUDA, A_[j] = static_cast<thrust::complex<T1>>(B_[j]);)"}
{"predict": "(17, OpenMP, #pragma omp for linear (argc : 5) allocate , allocate(, allocate(omp_default , allocate(omp_default_mem_alloc, allocate(omp_default_mem_alloc:, allocate(omp_default_mem_alloc: argc, allocate(omp_default_mem_alloc: argv), allocate(argv)); (40, OpenMP, #pragma omp for linear(j)); (5, OpenMP, #pragma omp for linear (); (6, OpenMP, #pragma omp for linear ()); (7, OpenMP, #pragma omp for linear (argc); (24, OpenMP, #pragma omp for linear(h)); (27, OpenMP, #pragma omp for linear(i)); (34, OpenMP, #pragma omp parallel); (16, OpenMP, #pragma omp for linear (argv[1])); (30, OpenMP, #pragma omp for linear(v : i)); (2, OpenMP, #pragma omp for linear (argc > 0 ? argv[1] : argv[2])); (3, OpenMP, #pragma omp for linear (argc) allocate , allocate(, allocate(omp_default , allocate(omp_default_mem_alloc, allocate(omp_default_mem_alloc:, allocate(omp_default_mem_alloc: argc, allocate(omp_default_mem_alloc: argv), allocate(argv)); (15, OpenMP, #pragma omp for linear(e, g)); (6, OpenMP, #pragma omp for linear (k : argc)); (23, OpenMP, #pragma omp for linear(v : j)); (6, OpenMP, #pragma omp for linear (S1)); (-9, OpenMP, #pragma omp for linear)", "label": "(7, OpenMP, #pragma omp for linear (); (24, OpenMP, #pragma omp for linear (argv[1])); (17, OpenMP, #pragma omp for linear (S1)); (12, OpenMP, #pragma omp for linear (argc > 0 ? argv[1] : argv[2])); (1, OpenMP, #pragma omp for linear); (22, OpenMP, #pragma omp for linear(e, g, k)); (27, OpenMP, #pragma omp parallel); (33, OpenMP, #pragma omp for linear(j)); (3, OpenMP, #pragma omp for linear (argc); (34, OpenMP, #pragma omp for linear(v:j)); (-1, OpenMP, #pragma omp for linear ()); (2, OpenMP, #pragma omp for linear (argc,); (11, OpenMP, #pragma omp for linear (a, b:B::ib)); (34, OpenMP, #pragma omp for linear(i) ordered(1)); (15, OpenMP, #pragma omp for linear(h)); (2, OpenMP, #pragma omp for linear (argc : 5) allocate , allocate(, allocate(omp_default , allocate(omp_default_mem_alloc, allocate(omp_default_mem_alloc:, allocate(omp_default_mem_alloc: argc, allocate(omp_default_mem_alloc: argv), allocate(argv)); (21, OpenMP, #pragma omp for linear(v:i)); (14, OpenMP, #pragma omp for linear(i))"}
{"predict": "(16, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);)", "label": "(16, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);)"}
{"predict": "(8, CUDA, cudaStreamSynchronize(LU_v1->A_gpu.cuStreams[0]);)", "label": "(8, CUDA, cudaStreamSynchronize(LU_v1->A_gpu.cuStreams[0]);)"}
{"predict": "(31, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);)", "label": "(31, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);)"}
{"predict": "(5, CUDA, __shared__ float reduce_smem[NUM_WARPS];)", "label": "(5, CUDA, __shared__ float reduce_smem[NUM_WARPS];)"}
{"predict": "(8, CUDA, extern __shared__ float buffer[];)", "label": "(16, CUDA, extern __shared__ float buffer[];)"}
{"predict": "(96, MPI, MPI_Allreduce(&source_rank, &source, 1, MPI_INT, MPI_MIN, scr_comm_world);); (94, MPI, MPI_Allreduce(&min_depth, &min_source, 1, MPI_INT, MPI_MIN, scr_comm_world);); (159, MPI, MPI_Allreduce(group_rank, ranks, groups, MPI_UINT64_T, MPI_MAX, scr_comm_world);); (213, MPI, MPI_Barrier(scr_comm_world);); (150, MPI, MPI_Allreduce(group_id,   id,     groups, MPI_UINT64_T, MPI_MIN, scr_comm_world);)", "label": "(85, MPI, MPI_Bcast(&min_source, 1, MPI_INT, source, scr_comm_world);); (96, MPI, MPI_Allreduce(&min_depth, &min_global, 1, MPI_INT, MPI_MIN, scr_comm_world);); (76, MPI, MPI_Allreduce(&source_rank, &source, 1, MPI_INT, MPI_MIN, scr_comm_world);); (95, MPI, MPI_Allreduce(&max_depth, &max_global, 1, MPI_INT, MPI_MAX, scr_comm_world);); (168, MPI, MPI_Barrier(scr_comm_world);)"}
{"predict": "(32, CUDA, CUDA_CHECK_AND_EXIT(cudaMalloc((void**)&d_ref, size * sizeof(DataType)));); (35, CUDA, CUDA_CHECK_AND_EXIT(cudaMemcpy(h_ref.data(), d_ref, size * sizeof(DataType), cudaMemcpyDeviceToHost));); (28, CUDA, CUDA_CHECK_AND_EXIT(cudaDeviceSynchronize());); (55, CUDA, CUDA_CHECK_AND_EXIT(cudaFree(d_out));); (53, CUDA, CUDA_CHECK_AND_EXIT(cudaFree(states));); (4, CUDA, CUDA_CHECK_AND_EXIT(cudaMalloc((void**)&d_out, size * sizeof(DataType)));); (21, CUDA, CUDA_CHECK_AND_EXIT(cudaPeekAtLastError());); (15, CUDA, CUDA_CHECK_AND_EXIT(cudaMalloc((void**)&states, size * sizeof(RNG)));); (27, CUDA, CUDA_CHECK_AND_EXIT(cudaMemcpy(h_out.data(), d_out, size * sizeof(DataType), cudaMemcpyDeviceToHost));)", "label": "(8, CUDA, CUDA_CHECK_AND_EXIT(cudaMalloc((void**)&d_out, size * sizeof(DataType)));); (32, CUDA, CUDA_CHECK_AND_EXIT(cudaMemcpy(h_out.data(), d_out, size * sizeof(DataType), cudaMemcpyDeviceToHost));); (28, CUDA, CUDA_CHECK_AND_EXIT(cudaDeviceSynchronize());); (35, CUDA, CUDA_CHECK_AND_EXIT(cudaMalloc((void**)&d_ref, size * sizeof(DataType)));); (48, CUDA, CUDA_CHECK_AND_EXIT(cudaFree(d_out));); (16, CUDA, CUDA_CHECK_AND_EXIT(cudaMalloc((void**)&states, block_dim * grid_size * sizeof(RNG)));); (19, CUDA, CUDA_CHECK_AND_EXIT(cudaPeekAtLastError());); (44, CUDA, CUDA_CHECK_AND_EXIT(cudaFree(states));); (45, CUDA, CUDA_CHECK_AND_EXIT(cudaFree(d_ref));); (39, CUDA, CUDA_CHECK_AND_EXIT(cudaMemcpy(h_ref.data(), d_ref, size * sizeof(DataType), cudaMemcpyDeviceToHost));)"}
{"predict": "(37, OpenCL, err = clSetKernelArg(scan_kernel, 1, sizeof(dyn_mem_size), &dyn_mem_size);); (30, OpenCL, err = clSetKernelArg(scan_kernel, 0, sizeof(buffer), &buffer);); (65, OpenCL, err = clEnqueueWriteBuffer(queue, buffer, CL_NON_BLOCKING, 0, sizeof(kernel_work_size), kernel_work_size, 0, NULL, NULL);); (44, OpenCL, err = clEnqueueNDRangeKernel(queue, scan_kernel, work_dim, global_work_offset, test_values, local_work_size, NULL, 0, NULL, NULL);); (73, OpenCL, err = clEnqueueReadBuffer(queue, buffer, CL_BLOCKING, 0, sizeof(kernel_work_size), kernel_work_size, 0, NULL, NULL);); (32, OpenCL, err = clSetKernelArg(scan_kernel, 2, sizeof(global_work_offset), global_work_offset);); (41, OpenCL, err = clEnqueueGetKernelWorkGroupInfo(scan_kernel, device, CL_KERNEL_WORK_GROUP_SIZE, sizeof(workgroupinfo_size), &workgroupinfo_size, NULL);)", "label": "(36, OpenCL, err = clSetKernelArg(scan_kernel, 1, dyn_mem_size, NULL);); (31, OpenCL, err = clSetKernelArg(scan_kernel, 0, sizeof(buffer), &buffer);)"}
{"predict": "(23, MPI, err = MPI_Type_create_struct(1, &blen, &displ, &type, &tmptype);); (12, MPI, err = MPI_Type_create_struct(1, &blen, &displ, &type, datatype);); (28, MPI, MPI_Type_free(&tmptype);)", "label": "(22, MPI, err = MPI_Type_create_resized(tmptype, 0, aext * sizeof(int), datatype);); (28, MPI, MPI_Type_free(&tmptype);); (12, MPI, err = MPI_Type_create_struct(1, &blen, &displ, &type, &tmptype);)"}
{"predict": "(9, OpenMP, #pragma omp atomic seq_cst seq_cst); (3, OpenMP, #pragma omp atomic seq_cst)", "label": "(4, OpenMP, #pragma omp atomic seq_cst); (8, OpenMP, #pragma omp atomic seq_cst seq_cst); (10, OpenMP, #pragma omp atomic update seq_cst)"}
{"predict": "(12, CUDA, img[idx] = cudaAlphaBlend(img[idx], color);)", "label": "(12, CUDA, img[idx] = cudaAlphaBlend(img[idx], color);)"}
{"predict": "(25, MPI, MPI_Bcast(&len, 1, MPI_INT, 0, MPI_COMM_WORLD);); (5, MPI, MPI_Init(&argc, &argv);); (41, MPI, err = MPI_File_close(&fh);); (141, MPI, MPI_Finalize();); (22, MPI, MPI_Bcast(filename, len + 10, MPI_CHAR, 0, MPI_COMM_WORLD);); (3, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (16, MPI, MPI_Abort(MPI_COMM_WORLD, 1);); (28, MPI, MPI_Barrier(MPI_COMM_WORLD);)", "label": "(25, MPI, MPI_Bcast(&len, 1, MPI_INT, 0, MPI_COMM_WORLD);); (40, MPI, err = MPI_File_close(&fh);); (4, MPI, MPI_Init(&argc, &argv);); (143, MPI, MPI_Finalize();); (22, MPI, MPI_Bcast(filename, len + 10, MPI_CHAR, 0, MPI_COMM_WORLD);); (2, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (39, MPI, MPI_Barrier(MPI_COMM_WORLD);); (12, MPI, MPI_Abort(MPI_COMM_WORLD, 1);)"}
{"predict": "(13, MPI, MPI_Comm_size(comm, &size);); (106, MPI, MPI_Reduce(ldinbuf, ldoutbuf, 3, MPI_LONG_DOUBLE, MPI_MAX, 0, comm);); (137, MPI, MPI_Reduce(llinbuf, lloutbuf, 3, MPI_LONG_LONG, MPI_MAX, 0, comm);); (22, MPI, MPI_Reduce(cinbuf, coutbuf, 3, MPI_CHAR, MPI_MAX, 0, comm);); (48, MPI, MPI_Reduce(scinbuf, scoutbuf, 3, MPI_SIGNED_CHAR, MPI_MAX, 0, comm);); (72, MPI, MPI_Reduce(ucinbuf, ucoutbuf, 3, MPI_UNSIGNED_CHAR, MPI_MAX, 0, comm);); (7, MPI, MPI_Comm_rank(comm, &rank);)", "label": "(106, MPI, MPI_Reduce(ldinbuf, ldoutbuf, 3, MPI_LONG_DOUBLE, MPI_MAX, 0, comm);); (13, MPI, MPI_Comm_size(comm, &size);); (24, MPI, MPI_Reduce(cinbuf, coutbuf, 3, MPI_CHAR, MPI_MAX, 0, comm);); (49, MPI, MPI_Reduce(scinbuf, scoutbuf, 3, MPI_SIGNED_CHAR, MPI_MAX, 0, comm);); (73, MPI, MPI_Reduce(ucinbuf, ucoutbuf, 3, MPI_UNSIGNED_CHAR, MPI_MAX, 0, comm);); (8, MPI, MPI_Comm_rank(comm, &rank);); (132, MPI, MPI_Reduce(llinbuf, lloutbuf, 3, MPI_LONG_LONG, MPI_MAX, 0, comm);)"}
{"predict": "(28, OpenMP, #pragma omp distribute parallel for copyin(argc > 0 ? argv[1] : argv[2])); (18, OpenMP, #pragma omp distribute parallel for copyin(k); (14, OpenMP, #pragma omp distribute parallel for copyin()); (32, OpenMP, #pragma omp distribute parallel for copyin(i)); (37, OpenMP, #pragma omp distribute parallel for copyin(ST<int>::s, B::x)); (2, OpenMP, #pragma omp distribute parallel for copyin(); (5, OpenMP, #pragma omp distribute parallel for copyin()); (-3, OpenMP, #pragma omp target); (28, OpenMP, #pragma omp distribute parallel for copyin(argv[1])); (-4, OpenMP, #pragma omp teams)", "label": "(19, OpenMP, #pragma omp distribute parallel for proc_bind(master); (3, OpenMP, #pragma omp distribute parallel for proc_bind); (12, OpenMP, #pragma omp distribute parallel for proc_bind()); (6, OpenMP, #pragma omp distribute parallel for proc_bind(); (25, OpenMP, #pragma omp distribute parallel for proc_bind(x)); (37, OpenMP, #pragma omp distribute parallel for proc_bind(spread)); (18, OpenMP, #pragma omp distribute parallel for proc_bind(close), proc_bind(spread)); (-5, OpenMP, #pragma omp target); (31, OpenMP, #pragma omp parallel proc_bind(close)); (26, OpenMP, #pragma omp distribute parallel for proc_bind(master)); (-7, OpenMP, #pragma omp teams)"}
{"predict": "(14, OpenCL, retVal = clEnqueueReleaseGLObjects(commandQueue, 1, &glBuffer, 0, nullptr, &retEvent);); (2, OpenCL, auto commandQueue = clCreateCommandQueue(&context, context.getDevice(0), 0, &retVal);); (30, OpenCL, retVal = clReleaseCommandQueue(commandQueue);); (1, OpenCL, auto glBuffer = clCreateFromGLBuffer(&context, 0, bufferId, &retVal);); (24, OpenCL, retVal = clReleaseMemObject(glBuffer);); (11, OpenCL, retVal = clWaitForEvents(1, &retEvent);); (13, OpenCL, retVal = clReleaseEvent(retEvent);); (-1, OpenCL, retVal = clEnqueueAcquireGLObjects(commandQueue, 1, &glBuffer, 0, nullptr, &retEvent);)", "label": "(19, OpenCL, retVal = clEnqueueReleaseGLObjects(commandQueue, 1, &glBuffer, 0, nullptr, &retEvent);); (30, OpenCL, retVal = clReleaseMemObject(glBuffer);); (3, OpenCL, auto glBuffer = clCreateFromGLBuffer(&context, 0, bufferId, &retVal);); (1, OpenCL, auto commandQueue = clCreateCommandQueue(&context, context.getDevice(0), 0, &retVal);); (12, OpenCL, retVal = clReleaseEvent(retEvent);); (1, OpenCL, retVal = clEnqueueAcquireGLObjects(commandQueue, 1, &glBuffer, 0, nullptr, &retEvent);); (23, OpenCL, retVal = clReleaseCommandQueue(commandQueue);)"}
{"predict": "(21, MPI, MPI_Type_set_attr(type, key[2], &attrval[2]);); (22, MPI, MPI_Type_set_attr(type, key[0], &attrval[0]);); (56, MPI, MPI_Type_free_keyval(&key[i]);); (19, MPI, MPI_Type_set_attr(type, key[1], &attrval[1]);); (23, MPI, MPI_Type_delete_attr(type, key[0]);); (23, MPI, MPI_Type_delete_attr(type, key[1]);); (23, MPI, MPI_Type_delete_attr(type, key[2]);)", "label": "(21, MPI, MPI_Type_set_attr(type, key[2], &attrval[2]);); (22, MPI, MPI_Type_set_attr(type, key[0], &attrval[0]);); (56, MPI, MPI_Type_free_keyval(&key[i]);); (19, MPI, MPI_Type_set_attr(type, key[1], &attrval[1]);); (23, MPI, MPI_Type_delete_attr(type, key[0]);); (23, MPI, MPI_Type_delete_attr(type, key[1]);); (23, MPI, MPI_Type_delete_attr(type, key[2]);)"}
{"predict": "(5, CUDA, __shared__ float reduce_smem[NUM_WARPS];)", "label": "(5, CUDA, __shared__ float reduce_smem[NUM_WARPS];)"}
{"predict": "(8, TBB, tbb::enumerable_thread_specific<HyperedgeWeight> deltas(0);)", "label": "(8, TBB, tbb::enumerable_thread_specific<HyperedgeWeight> deltas(0);)"}
{"predict": "(8, OpenCL, retVal = clEnqueueMemcpyINTEL(commandQueues[0][0].get(), true, deviceMemAlloc, buffer.data(), bufferSize, 0, nullptr, nullptr);); (16, OpenCL, retVal = clEnqueueMemcpyINTEL(commandQueues[0][0].get(), true, hostMemAlloc, deviceMemAlloc, bufferSize, 0, nullptr, nullptr);)", "label": "(8, OpenCL, retVal = clEnqueueMemcpyINTEL(commandQueues[0][0].get(), true, deviceMemAlloc, buffer.data(), bufferSize, 0, nullptr, nullptr);); (16, OpenCL, retVal = clEnqueueMemcpyINTEL(commandQueues[0][0].get(), true, hostMemAlloc, deviceMemAlloc, bufferSize, 0, nullptr, nullptr);)"}
{"predict": "(45, MPI, MPI_Recv(receiveBuffer.data(), msgsize, MPI_INT, 1, MPI_ANY_TAG, MPI_COMM_WORLD, &status);); (7, MPI, MPI_Init(&argc, &argv);); (54, MPI, MPI_Finalize();); (6, MPI, MPI_Comm_size(MPI_COMM_WORLD, &ntasks);); (36, MPI, MPI_Send(message.data(), msgsize, MPI_INT, 1, tag, MPI_COMM_WORLD);); (4, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (37, MPI, MPI_Recv(receiveBuffer.data(), msgsize, MPI_INT, 0, MPI_ANY_TAG, MPI_COMM_WORLD, &status);); (43, MPI, MPI_Send(message.data(), msgsize, MPI_INT, 0, 1, MPI_COMM_WORLD);); (8, MPI, MPI_Abort(MPI_COMM_WORLD, 1);)", "label": "(42, MPI, MPI_Recv(receiveBuffer.data(), msgsize, MPI_INT, 1, MPI_ANY_TAG, MPI_COMM_WORLD, MPI_STATUS_IGNORE);); (7, MPI, MPI_Init(&argc, &argv);); (48, MPI, MPI_Send(message.data(), msgsize, MPI_INT, 0, 1, MPI_COMM_WORLD);); (54, MPI, MPI_Finalize();); (5, MPI, MPI_Comm_size(MPI_COMM_WORLD, &ntasks);); (5, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (33, MPI, MPI_Send(message.data(), msgsize, MPI_INT, 1, tag, MPI_COMM_WORLD);); (8, MPI, MPI_Abort(MPI_COMM_WORLD, 1);); (41, MPI, MPI_Recv(receiveBuffer.data(), msgsize, MPI_INT, 0, MPI_ANY_TAG, MPI_COMM_WORLD, &status);)"}
{"predict": "(9, CUDA, CUDA_CHECK(cudaGetDeviceCount(&ndevices));); (9, CUDA, CUDA_CHECK(cudaSetDevice(rank % ndevices));); (0, MPI, MPI_Init(&argc, &argv);); (37, MPI, MPI_Finalize();); (1, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (1, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);)", "label": "(9, CUDA, CUDA_CHECK(cudaGetDeviceCount(&ndevices));); (9, CUDA, CUDA_CHECK(cudaSetDevice(rank % ndevices));); (0, MPI, MPI_Init(&argc, &argv);); (37, MPI, MPI_Finalize();); (1, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (1, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);)"}
{"predict": "(2, CUDA, extern __shared__ __align__(sizeof(float2)) char smem[];)", "label": "(2, CUDA, extern __shared__ char smem[];)"}
{"predict": "(21, CUDA, __shared__ FP sDenom[Br];); (21, CUDA, __shared__ FP sNewO[Br][dim];); (9, CUDA, __shared__ FP sV[Bc][dim];); (10, CUDA, __shared__ FP sMax[Br];); (5, CUDA, __shared__ FP sQK[Br][Bc];); (1, CUDA, __shared__ FP sQ[Br][dim];); (5, CUDA, __shared__ FP sSafeE[Br][Bc];); (-3, CUDA, __shared__ FP sK[Bc][dim];)", "label": "(12, CUDA, __shared__ FP sV[Bc][dim];); (20, CUDA, __shared__ FP sMax[Br];); (9, CUDA, __shared__ FP sK[Bc][dim];); (11, CUDA, __shared__ FP sQK[Br][Bc];); (14, CUDA, __shared__ FP sSafeE[Br][Bc];); (8, CUDA, __shared__ FP sO[Br][dim];); (10, CUDA, __shared__ FP sNewO[Br][dim];); (3, CUDA, __shared__ FP sQ[Br][dim];); (12, CUDA, __shared__ FP sDenom[Br];)"}
{"predict": "(7, OpenMP, #pragma omp parallel for)", "label": "(7, OpenMP, #pragma omp parallel for)"}
{"predict": "(12, CUDA, cudaError_t error = cudaGetDeviceProperties(&props, 0);); (13, CUDA, std::cerr << \"cudaGetDeviceProperties() returned an error: \" << cudaGetErrorString(error) << std::endl;)", "label": "(12, CUDA, cudaError_t error = cudaGetDeviceProperties(&props, 0);); (13, CUDA, std::cerr << \"cudaGetDeviceProperties() returned an error: \" << cudaGetErrorString(error) << std::endl;)"}
{"predict": "(16, OpenCL, clCreateBuffer_StubWithCallback(clCreateBuffer_testBufferConstructorContextIterator);); (34, OpenCL, clReleaseCommandQueue_ExpectAndReturn(make_command_queue(0), CL_SUCCESS);); (43, OpenCL, clReleaseMemObject_ExpectAndReturn(expected, CL_SUCCESS);); (24, OpenCL, clCreateCommandQueueWithProperties_StubWithCallback(clCreateCommandQueueWithProperties_testCommandQueueFromSpecifiedContext);); (31, OpenCL, clReleaseEvent_StubWithCallback(clReleaseEvent_testCopyHostToBuffer);); (41, OpenCL, clReleaseContext_ExpectAndReturn(make_context(0), CL_SUCCESS);); (26, OpenCL, clEnqueueMapBuffer_StubWithCallback(clEnqueueMapBuffer_testCopyHostToBuffer);); (26, OpenCL, clEnqueueUnmapMemObject_StubWithCallback(clEnqueueUnmapMemObject_testCopyHostToBuffer);)", "label": "(16, OpenCL, clCreateBuffer_StubWithCallback(clCreateBuffer_testBufferConstructorContextIterator);); (35, OpenCL, clReleaseCommandQueue_ExpectAndReturn(make_command_queue(0), CL_SUCCESS);); (43, OpenCL, clReleaseMemObject_ExpectAndReturn(expected, CL_SUCCESS);); (24, OpenCL, clCreateCommandQueueWithProperties_StubWithCallback(clCreateCommandQueueWithProperties_testCommandQueueFromSpecifiedContext);); (31, OpenCL, clReleaseEvent_StubWithCallback(clReleaseEvent_testCopyHostToBuffer);); (41, OpenCL, clReleaseContext_ExpectAndReturn(make_context(0), CL_SUCCESS);); (26, OpenCL, clEnqueueMapBuffer_StubWithCallback(clEnqueueMapBuffer_testCopyHostToBuffer);); (26, OpenCL, clEnqueueUnmapMemObject_StubWithCallback(clEnqueueUnmapMemObject_testCopyHostToBuffer);)"}
{"predict": "(33, MPI, MPI_Cart_shift(cart_comm, 0, 1, &source, &destination);); (50, MPI, t1 = MPI_Wtime();); (12, MPI, MPI_Init(&argc, &argv);); (56, MPI, MPI_Finalize();); (11, MPI, MPI_Comm_size(MPI_COMM_WORLD, &ntasks);); (11, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (26, MPI, MPI_Cart_create(MPI_COMM_WORLD, ndims, dims, periods, 1, &cart_comm);); (51, MPI, MPI_Comm_free(&cart_comm);); (27, MPI, MPI_Comm_rank(cart_comm, &cart_id);); (28, MPI, MPI_Barrier(MPI_COMM_WORLD);); (28, MPI, t0 = MPI_Wtime();)", "label": "(33, MPI, MPI_Cart_shift(cart_comm, 0, 1, &source, &destination);); (52, MPI, t1 = MPI_Wtime();); (12, MPI, MPI_Init(&argc, &argv);); (57, MPI, MPI_Finalize();); (11, MPI, MPI_Comm_size(MPI_COMM_WORLD, &ntasks);); (27, MPI, MPI_Cart_create(MPI_COMM_WORLD, ndims, dims, periods, 1, &cart_comm);); (10, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (52, MPI, MPI_Comm_free(&cart_comm);); (27, MPI, MPI_Comm_rank(cart_comm, &cart_id);); (29, MPI, MPI_Barrier(MPI_COMM_WORLD);); (29, MPI, t0 = MPI_Wtime();)"}
{"predict": "(8, MPI, MPI_Comm_rank(mpi_comm, &rank);); (6, MPI, MPI_Comm mpi_comm = MPI_Comm_f2c(vtkh::GetMPICommHandle());); (56, MPI, MPI_Bcast(&entropy, 1, MPI_DOUBLE, 0, mpi_comm);)", "label": "(8, MPI, MPI_Comm_rank(mpi_comm, &rank);); (6, MPI, MPI_Comm mpi_comm = MPI_Comm_f2c(vtkh::GetMPICommHandle());); (56, MPI, MPI_Bcast(&entropy, 1, MPI_DOUBLE, 0, mpi_comm);)"}
{"predict": "(68, CUDA, cudaCheck(cudaMemset(d_dinp, 0, B * T * 3 * C * sizeof(float)));); (60, CUDA, cudaCheck(cudaMalloc(&d_dpreatt, B * NH * T * T * sizeof(float)));); (158, CUDA, cudaCheck(cudaFree(d_inp));); (69, CUDA, cudaCheck(cudaMemset(d_dvaccum, 0, B * T * C * sizeof(float)));); (86, CUDA, cudaCheck(cudaMemcpy(h_dinp, d_dinp, B * T * 3 * C * sizeof(float), cudaMemcpyDeviceToHost));); (163, CUDA, cudaCheck(cudaFree(d_dpreatt));); (160, CUDA, cudaCheck(cudaFree(d_dinp));); (160, CUDA, cudaCheck(cudaFree(d_dqkvr));); (153, CUDA, cudaCheck(cudaFree(d_qkvr));); (23, CUDA, cudaCheck(cudaMalloc(&d_att, B * NH * T * T * sizeof(float)));); (159, CUDA, cudaCheck(cudaFree(d_datt));); (58, CUDA, cudaCheck(cudaMemset(d_dqkvr, 0, B * T * 3 * C * sizeof(float)));); (150, CUDA, cudaCheck(cudaFree(d_preatt));); (50, CUDA, cudaCheck(cudaMalloc(&d_dvaccum, B * T * C * sizeof(float)));); (50, CUDA, cudaCheck(cudaMalloc(&d_dout, B * T * C * sizeof(float)));); (15, CUDA, cudaCheck(cudaMalloc(&d_qkvr, B * T * 3 * C * sizeof(float)));); (17, CUDA, cudaCheck(cudaMalloc(&d_vaccum, B * T * C * sizeof(float)));); (14, CUDA, cudaCheck(cudaMalloc(&d_preatt, B * NH * T * T * sizeof(float)));); (48, CUDA, cudaCheck(cudaMemcpy(d_dout, dout, B * T * C * sizeof(float), cudaMemcpyHostToDevice));); (145, CUDA, cudaCheck(cudaFree(d_vaccum));); (40, CUDA, cudaCheck(cudaMalloc(&d_dqkvr, B * T * 3 * C * sizeof(float)));); (38,", "label": "(68, CUDA, cudaCheck(cudaMemset(d_dinp, 0, B * T * 3 * C * sizeof(float)));); (60, CUDA, cudaCheck(cudaMalloc(&d_dpreatt, B * NH * T * T * sizeof(float)));); (157, CUDA, cudaCheck(cudaFree(d_inp));); (69, CUDA, cudaCheck(cudaMemset(d_dvaccum, 0, B * T * C * sizeof(float)));); (86, CUDA, cudaCheck(cudaMemcpy(h_dinp, d_dinp, B * T * 3 * C * sizeof(float), cudaMemcpyDeviceToHost));); (162, CUDA, cudaCheck(cudaFree(d_dpreatt));); (159, CUDA, cudaCheck(cudaFree(d_dinp));); (159, CUDA, cudaCheck(cudaFree(d_dqkvr));); (152, CUDA, cudaCheck(cudaFree(d_qkvr));); (23, CUDA, cudaCheck(cudaMalloc(&d_att, B * NH * T * T * sizeof(float)));); (158, CUDA, cudaCheck(cudaFree(d_datt));); (58, CUDA, cudaCheck(cudaMemset(d_dqkvr, 0, B * T * 3 * C * sizeof(float)));); (149, CUDA, cudaCheck(cudaFree(d_preatt));); (50, CUDA, cudaCheck(cudaMalloc(&d_dvaccum, B * T * C * sizeof(float)));); (50, CUDA, cudaCheck(cudaMalloc(&d_dout, B * T * C * sizeof(float)));); (15, CUDA, cudaCheck(cudaMalloc(&d_qkvr, B * T * 3 * C * sizeof(float)));); (17, CUDA, cudaCheck(cudaMalloc(&d_vaccum, B * T * C * sizeof(float)));); (14, CUDA, cudaCheck(cudaMalloc(&d_preatt, B * NH * T * T * sizeof(float)));); (48, CUDA, cudaCheck(cudaMemcpy(d_dout, dout, B * T * C * sizeof(float), cudaMemcpyHostToDevice));); (144, CUDA, cudaCheck(cudaFree(d_vaccum));); (40, CUDA, cudaCheck(cudaMalloc(&d_dqkvr, B * T * 3 * C * sizeof(float)));); (38, CUDA, cudaCheck(cudaMalloc(&d_dinp, B * T * 3 * C * sizeof(float)));); (49, CUDA, cudaCheck(cudaMemset(d_datt, 0, B * NH * T * T * sizeof(float)));); (141, CUDA, cudaCheck(cudaFree(d_out));); (145, CUDA, cudaCheck(cudaFree(d_dvaccum));); (9, CUDA, cudaCheck(cudaMalloc(&d_out, B * T * C * sizeof(float)));); (36, CUDA, cudaCheck(cudaMalloc(&d_datt, B * NH * T * T * sizeof(float)));); (2, CUDA, cudaCheck(cudaMalloc(&d_inp, B * T * 3 * C * sizeof(float)));); (134, CUDA, cudaCheck(cudaFree(d_att));); (41, CUDA, cudaCheck(cudaMemset(d_dpreatt, 0, B * NH * T * T * sizeof(float)));); (6, CUDA, cudaCheck(cudaMemcpy(d_inp, inp, B * T * 3 * C * sizeof(float), cudaMemcpyHostToDevice));); (139, CUDA, cudaCheck(cudaFree(d_dout));)"}
{"predict": "(22, CUDA, cudaFree(x);); (22, CUDA, cudaFree(y);); (22, CUDA, cudaFree(z);); (6, CUDA, cudaMalloc((void **)&z, M);); (4, CUDA, cudaMalloc((void **)&x, M);); (4, CUDA, cudaMalloc((void **)&y, M);)", "label": "(9, CUDA, CHECK(cudaMallocManaged((void **)&z, M));); (23, CUDA, CHECK(cudaFree(x));); (5, CUDA, CHECK(cudaMallocManaged((void **)&x, M));); (22, CUDA, CHECK(cudaFree(y));); (22, CUDA, CHECK(cudaFree(z));); (16, CUDA, CHECK(cudaDeviceSynchronize());); (2, CUDA, CHECK(cudaMallocManaged((void **)&y, M));)"}
{"predict": "(51, MPI, MPI_Allreduce(rwork, temprwork, A->ncol, MPI_DOUBLE, MPI_SUM, grid->comm);); (25, MPI, MPI_Allreduce(&value, &tempvalue, 1, MPI_DOUBLE, MPI_MAX, grid->comm);)", "label": "(26, MPI, MPI_Allreduce(&value, &tempvalue, 1, MPI_DOUBLE, MPI_MAX, grid->comm);); (50, MPI, MPI_Allreduce(rwork, temprwork, A->ncol, MPI_DOUBLE, MPI_SUM, grid->comm);)"}
{"predict": "(17, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (26, MPI, MPI_Abort(MPI_COMM_WORLD, 1);); (14, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);)", "label": "(17, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (26, MPI, MPI_Abort(MPI_COMM_WORLD, 1);); (14, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);)"}
{"predict": "(25, OpenCL, clReleaseMemObject(scratchBuff);); (20, OpenCL, clReleaseMemObject(mobjDP_);); (15, OpenCL, clReleaseMemObject(mobjY_);); (10, OpenCL, clReleaseMemObject(mobjX_);)", "label": "(25, OpenCL, clReleaseMemObject(scratchBuff);); (20, OpenCL, clReleaseMemObject(mobjDP_);); (15, OpenCL, clReleaseMemObject(mobjY_);); (10, OpenCL, clReleaseMemObject(mobjX_);)"}
{"predict": "(5, TBB, oneapi::tbb::global_control limit(oneapi::tbb::global_control::max_allowed_parallelism, nthreads);); (21, TBB, static oneapi::tbb::affinity_partitioner g_ap;)", "label": "(5, TBB, oneapi::tbb::global_control c(oneapi::tbb::global_control::max_allowed_parallelism, nthreads);); (21, TBB, static oneapi::tbb::affinity_partitioner g_ap;)"}
{"predict": "(16, SYCL, using namespace cl::sycl::access;); (4, SYCL, cl::sycl::queue queue;)", "label": "(16, SYCL, using namespace cl::sycl::access;); (4, SYCL, cl::sycl::queue queue;)"}
{"predict": "(34, OpenMP, omp_target_free(d_a, DefaultDeviceNum);); (14, OpenMP, d_a = (int *)omp_target_alloc(DataSize, DefaultDeviceNum);); (25, OpenMP, omp_target_disassociate_ptr(p_a, DefaultDeviceNum);); (16, OpenMP, omp_target_associate_ptr(p_a, d_a, DataSize, 0, DefaultDeviceNum);); (2, OpenMP, int DefaultDeviceNum = omp_get_default_device();); (20, OpenMP, omp_target_update_to(d_a, DefaultDeviceNum);)", "label": "(33, OpenMP, omp_target_free(d_a, DefaultDeviceNum);); (15, OpenMP, d_a = (int *)omp_target_alloc(DataSize, DefaultDeviceNum);); (23, OpenMP, #pragma omp target update to(d_a)); (5, OpenMP, int DefaultDeviceNum = omp_get_default_device();); (16, OpenMP, omp_target_associate_ptr(p_a, d_a, DataSize, 0, DefaultDeviceNum);); (24, OpenMP, omp_target_disassociate_ptr(p_a, DefaultDeviceNum);)"}
{"predict": "(26, OpenCL, clEnqueueNDRangeKernel(queue, kernel, 1, NULL, globals, locals, 2, &ev[0], &ev[2]);); (14, OpenCL, clEnqueueWriteBuffer(queue, buf[0], CL_TRUE, 0, BUFFERSIZE*sizeof(int), (void *)cpu_src, 1, &ev[0], &ev[1]);); (48, OpenCL, clReleaseEvent(ev[i]);); (30, OpenCL, clWaitForEvents(1, &ev[2]);)", "label": "(51, OpenCL, clReleaseEvent(ev[i]);); (24, OpenCL, clEnqueueNDRangeKernel(queue, kernel, 1, NULL, globals, locals, 2, &ev[0], &ev[2]);); (30, OpenCL, buf_data[0] = clEnqueueMapBuffer(queue, buf[0], CL_FALSE, 0, 0, BUFFERSIZE*sizeof(int), 1, &ev[2], NULL, NULL);); (14, OpenCL, clEnqueueWriteBuffer(queue, buf[0], CL_FALSE, 0, BUFFERSIZE*sizeof(int), (void *)cpu_src, 1, &ev[0], &ev[1]);)"}
{"predict": "(103, MPI, MPI_Allreduce(MPI_IN_PLACE, myusize, nsupers, mpi_int_t, MPI_MAX, grid3d->zscp.comm);); (101, MPI, MPI_Allreduce(MPI_IN_PLACE, mylsize, nsupers, mpi_int_t, MPI_MAX, grid3d->zscp.comm);)", "label": "(50, MPI, MPI_Allreduce(MPI_IN_PLACE, &(flag), 1, mpi_int_t, MPI_MAX, grid3d->zscp.comm);); (105, MPI, MPI_Allreduce(  MPI_IN_PLACE, myusize, nsupers, mpi_int_t, MPI_MAX, grid->comm );); (102, MPI, MPI_Allreduce( MPI_IN_PLACE, mylsize, nsupers, mpi_int_t, MPI_MAX, grid->comm );); (50, MPI, MPI_Bcast( &(size), 1, mpi_int_t, gridid,  grid3d->zscp.comm);); (48, MPI, MPI_Allreduce(MPI_IN_PLACE, &(gridid), 1, mpi_int_t, MPI_MAX, grid3d->zscp.comm);)"}
{"predict": "(27, CUDA, checkCudaErrors(cudaEventCreate(&ev1));); (42, CUDA, checkCudaErrors(cudaEventRecord(ev2, stream));); (63, CUDA, checkCudaErrors(cudaFree(ringbuf));); (38, CUDA, checkCudaErrors(cudaEventSynchronize(ev2));); (61, CUDA, checkCudaErrors(cudaFree(gpustack));); (22, CUDA, checkCudaErrors(cudaMalloc(&ringbuf, sizeof(qsortRingbuf)));); (32, CUDA, checkCudaErrors(cudaEventRecord(ev1, stream));); (24, CUDA, checkCudaErrors(cudaEventCreate(&ev2));)", "label": "(15, CUDA, checkCudaErrors(cudaMalloc((void **)&ringbuf, sizeof(qsortRingbuf)));); (28, CUDA, checkCudaErrors(cudaEventRecord(ev1));); (40, CUDA, checkCudaErrors(cudaEventRecord(ev2));); (38, CUDA, checkCudaErrors(cudaGetLastError());); (61, CUDA, checkCudaErrors(cudaFree(ringbuf));); (38, CUDA, checkCudaErrors(cudaDeviceSynchronize());); (21, CUDA, checkCudaErrors(cudaEventCreate(&ev1));); (21, CUDA, checkCudaErrors(cudaEventCreate(&ev2));); (58, CUDA, checkCudaErrors(cudaFree(gpustack));)"}
{"predict": "(93, MPI, MPI_Group_free(&newgroup);); (15, MPI, MPI_Comm_create_group(MPI_COMM_WORLD, newgroup, 0, &newcomm);); (34, MPI, MPI_Error_class(rc, &errclass);); (88, MPI, MPI_Comm_free(&newcomm);); (78, MPI, MPI_Group_free(&world);); (5, MPI, MPI_Init(&argc, &argv);); (30, MPI, rc = MPI_Bcast(sendbuf, 10, MPI_CHAR, 0, MPI_COMM_WORLD);); (8, MPI, MPI_Comm_group(MPI_COMM_WORLD, &world);); (53, MPI, rc = MPI_Scatter(sendbuf, 100000, MPI_CHAR, rbuf, 100000, MPI_CHAR, 0, newcomm);); (4, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (13, MPI, MPI_Group_excl(world, 1, deadprocs, &newgroup);); (4, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (20, MPI, rc = MPI_Bcast(sendbuf, 10, MPI_CHAR, 0, newcomm);); (-3, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);); (74, MPI, MPI_Finalize();); (1, MPI, MPI_Abort(MPI_COMM_WORLD, 1);); (46, MPI, rc = MPI_Reduce(&errs, &toterrs, 1, MPI_INT, MPI_SUM, 0, newcomm);)", "label": "(21, MPI, MPI_Comm_create_group(MPI_COMM_WORLD, newgroup, 0, &newcomm);); (19, MPI, MPI_Group_excl(world, 1, deadprocs, &newgroup);); (7, MPI, MPI_Init(&argc, &argv);); (82, MPI, MPI_Group_free(&newgroup);); (84, MPI, MPI_Finalize();); (53, MPI, rc = MPI_Scatter(sendbuf, 100000, MPI_CHAR, rbuf, 100000, MPI_CHAR, 0, MPI_COMM_WORLD);); (4, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (4, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (76, MPI, MPI_Comm_free(&newcomm);); (3, MPI, MPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);); (76, MPI, MPI_Group_free(&world);); (25, MPI, rc = MPI_Scatter(sendbuf, 10, MPI_CHAR, rbuf, 10, MPI_CHAR, 0, MPI_COMM_WORLD);); (4, MPI, MPI_Abort(MPI_COMM_WORLD, 1);); (26, MPI, MPI_Error_class(rc, &errclass);); (5, MPI, MPI_Comm_group(MPI_COMM_WORLD, &world);)"}
{"predict": "(8, OpenMP, omp_set_nest_lock(&lock);); (10, OpenMP, omp_unset_nest_lock(&lock);); (4, OpenMP, #pragma omp parallel num_threads(2) shared(var)); (14, OpenMP, omp_destroy_nest_lock(&lock);); (0, OpenMP, omp_init_nest_lock(&lock);)", "label": "(6, OpenMP, #pragma omp parallel num_threads(8) shared(var)); (7, OpenMP, omp_set_nest_lock(&lock);); (9, OpenMP, omp_unset_nest_lock(&lock);); (1, OpenMP, omp_init_nest_lock(&lock);); (13, OpenMP, omp_destroy_nest_lock(&lock);)"}
{"predict": "(2, CUDA, cudaSetDevice(device);)", "label": "(8, CUDA, sim->CUDAConfig().device_id = device;)"}
{"predict": "(203, OpenMP, #pragma omp parallel); (206, OpenMP, #pragma omp for schedule(dynamic,2) nowait)", "label": "(203, OpenMP, #pragma omp parallel); (206, OpenMP, #pragma omp for schedule(dynamic,2) nowait)"}
{"predict": "(10, OpenMP, omp_set_default_device(0);); (10, OpenMP, omp_set_default_affinity(0);)", "label": "(19, OpenMP, #pragma omp parallel for)"}
{"predict": "(38, OpenCL, test_clEnqueueUnmapMemObject(&clEnqueueUnmapMemObjectData[i]);); (4, OpenCL, test_clEnqueueReadBuffer(&clEnqueueReadBufferData[i]);); (27, OpenCL, test_clEnqueueMapBuffer(&clEnqueueMapBufferData[i]);); (10, OpenCL, test_clEnqueueReadBufferRect(&clEnqueueReadBufferRectData[i]);); (20, OpenCL, test_clEnqueueCopyBuffer(&clEnqueueCopyBufferData[i]);); (13, OpenCL, test_clEnqueueFillBuffer(&clEnqueueFillBufferData[i]);); (38, OpenCL, test_clEnqueueNDRangeKernel(&clEnqueueNDRangeKernelData[i]);); (15, OpenCL, test_clEnqueueCopyBufferRect(&clEnqueueCopyBufferRectData[i]);); (-3, OpenCL, test_clEnqueueWriteBuffer(&clEnqueueWriteBufferData[i]);)", "label": "(24, OpenCL, test_clEnqueueCopyBuffer(&clEnqueueCopyBufferData[i]);); (27, OpenCL, test_clEnqueueCopyBufferRect(&clEnqueueCopyBufferRectData[i]);); (6, OpenCL, test_clEnqueueWriteBuffer(&clEnqueueWriteBufferData[i]);); (41, OpenCL, test_clEnqueueUnmapMemObject(&clEnqueueUnmapMemObjectData[i]);); (8, OpenCL, test_clEnqueueReadBufferRect(&clEnqueueReadBufferRectData[i]);); (-1, OpenCL, test_clEnqueueReadBuffer(&clEnqueueReadBufferData[i]);); (14, OpenCL, test_clEnqueueFillBuffer(&clEnqueueFillBufferData[i]);); (25, OpenCL, test_clEnqueueMapBuffer(&clEnqueueMapBufferData[i]);); (8, OpenCL, test_clEnqueueWriteBufferRect(&clEnqueueWriteBufferRectData[i]);)"}
{"predict": "(7, OpenMP, #pragma omp parallel sections reduction(task, *: f)); (14, OpenMP, #pragma omp parallel sections default(none), private(argc, b), firstprivate(argv) if (argc > 0) num_threads(ee) copyin(a) proc_bind(spread) reduction(|: c, d) reduction(*: e) lastprivate(argv))", "label": "(7, OpenMP, #pragma omp parallel sections reduction(task,*:f)); (14, OpenMP, #pragma omp parallel sections default(none), private(argc, b) firstprivate(argv) if (argc > 0) num_threads(ee) copyin(a) proc_bind(spread) reduction(| : c, d) reduction(* : e) lastprivate(argv)); (2, OpenMP, #pragma omp threadprivate(a)); (16, OpenMP, #pragma omp section)"}
{"predict": "(15, OpenMP, #pragma omp target teams distribute parallel for collapse(2) depend(out:image[y_start]) nowait); (6, OpenMP, double st = omp_get_wtime();); (28, OpenMP, double et = omp_get_wtime();); (24, OpenMP, #pragma omp taskwait); (5, OpenMP, #pragma omp target data map(alloc:image[0:width*height])); (18, OpenMP, #pragma omp target update from(image[block*block_size:block_size]))", "label": "(15, OpenMP, #pragma omp target teams distribute parallel for collapse(2) depend(out:image[y_start]) nowait); (6, OpenMP, double st = omp_get_wtime();); (28, OpenMP, double et = omp_get_wtime();); (25, OpenMP, #pragma omp taskwait); (5, OpenMP, #pragma omp target data map(alloc:image[0:width*height])); (18, OpenMP, #pragma omp target update from(image[block*block_size:block_size]))"}
{"predict": "(36, MPI, MPI_Type_size(c_info->s_data_type, &s_size);); (36, MPI, MPI_Type_size(c_info->r_data_type, &r_size);)", "label": "(36, MPI, MPI_Type_size(c_info->s_data_type, &s_size);); (36, MPI, MPI_Type_size(c_info->r_data_type, &r_size);)"}
{"predict": "(22, CUDA, PyObject* shape = PyTuple_Pack(2, PyLong_FromUnsignedLong(self->width), PyLong_FromUnsignedLong(self->height));)", "label": "(13, CUDA, PyObject* shape = PyCudaImage_GetShape(self, closure);)"}
{"predict": "(32, MPI, MPI_Type_commit(&newtype);); (46, MPI, MPI_Recv(buf, 1, newtype, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);); (10, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (65, MPI, MPI_Type_free(&newtype);); (71, MPI, MPI_Recv(&recv_errs, 1, MPI_INT, 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);); (40, MPI, MPI_Send(buf, 1, newtype, 1, 0, MPI_COMM_WORLD);); (6, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (24, MPI, MPI_Type_vector(i, 128, 129, MPI_CHAR, &newtype);); (75, MPI, MPI_Send(&errs, 1, MPI_INT, 0, 0, MPI_COMM_WORLD);); (5, MPI, MPI_Abort(MPI_COMM_WORLD, 1);)", "label": "(31, MPI, MPI_Type_commit(&newtype);); (9, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (42, MPI, MPI_Send(buf, 1, newtype, 1, i, MPI_COMM_WORLD);); (8, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (66, MPI, MPI_Type_free(&newtype);); (24, MPI, MPI_Type_vector(i, 128, 129, MPI_CHAR, &newtype);); (70, MPI, MPI_Recv(&recv_errs, 1, MPI_INT, 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);); (76, MPI, MPI_Send(&errs, 1, MPI_INT, 0, 0, MPI_COMM_WORLD);); (39, MPI, MPI_Recv(buf, 1, newtype, 0, i, MPI_COMM_WORLD, MPI_STATUS_IGNORE);)"}
{"predict": "(106, MPI, MPI_Allgather(st_end_offset, 2, ADIO_OFFSET, all_st_end_offsets, 2, ADIO_OFFSET, fd->comm);); (360, MPI, MPI_Type_free(&client_comm_dtype_arr[i]);); (367, MPI, MPI_Type_free(&agg_dtype);); (319, MPI, MPI_Type_size_x(datatype, &size);); (95, MPI, MPI_Comm_rank(fd->comm, &myrank);); (358, MPI, MPI_Type_free(&fd->file_realm_types[0]);); (301, MPI, MPI_Type_get_extent(datatype, &lb, &extent);); (355, MPI, MPI_Type_free(&fd->file_realm_types[i]);); (362, MPI, MPI_Type_free(&agg_comm_dtype_arr[i]);); (88, MPI, MPI_Comm_size(fd->comm, &nprocs);); (350, MPI, MPI_Type_free(&client_file_view_state_arr[i].datatype);); (356, MPI, MPI_Type_free(&client_comm_sz_arr[i]);); (351, MPI, MPI_Type_free(&agg_file_view_state_arr[i].datatype);); (251, MPI, MPI_Type_create_struct(1, &count, &offset, &datatype, &agg_dtype);); (348, MPI, MPI_Type_free(&agg_comm_sz_arr[i]);); (241, MPI, MPI_Type_get_extent(agg_dtype, &lb, &extent);); (250, MPI, MPI_Type_create_resized(agg_dtype, 0, bufsize, &client_comm_dtype_arr[i]);); (342, MPI, MPI_Type_free(&my_mem_view_state_arr[i].datatype);); (241, MPI, MPI_Type_size_x(agg_dtype, &bufsize);); (250, MPI, MPI_Type_create_resized(client_comm_dtype_arr[i], 0, count * extent, &client_comm_sz_arr[i]);); (342, MPI, MPI_Type_free(&cb_buf);); (253, MPI, MPI_Type_free(&agg_dtype_copy);); (84, MPI, MPI_Barrier(fd->comm);); (216, MPI, MPI_Type_dup(fd->filetype, &agg_dtype);); (249, MPI, MPI_Type_free(&", "label": "(106, MPI, MPI_Allgather(st_end_offset, 2, ADIO_OFFSET, all_st_end_offsets, 2, ADIO_OFFSET, fd->comm);); (71, MPI, MPI_Comm_rank(fd->comm, &myrank);); (527, MPI, MPI_Type_free(&client_comm_dtype_arr[i]);); (587, MPI, MPI_Type_free(&fd->file_realm_types[0]);); (67, MPI, MPI_Comm_size(fd->comm, &nprocs);); (589, MPI, MPI_Type_free(&fd->file_realm_types[i]);); (155, MPI, MPI_Type_get_extent(datatype, &lb, &extent);); (307, MPI, MPI_Type_size_x(agg_comm_dtype_arr[i], &size);); (301, MPI, MPI_Type_free(&agg_dtype);)"}
{"predict": "(99, MPI, MPI_Alltoall(sendcounts, 1, MPI_INT, recvcounts, 1, MPI_INT, MPI_COMM_WORLD);); (45, MPI, MPI_Comm_size(MPI_COMM_WORLD, &ranks);); (132, MPI, MPI_Type_free(&keytype);)", "label": "(99, MPI, MPI_Alltoall(sendcounts, 1, MPI_INT, recvcounts, 1, MPI_INT, MPI_COMM_WORLD);); (46, MPI, MPI_Comm_size(MPI_COMM_WORLD, &ranks);); (40, MPI, MPI_Type_free(&keytype);)"}
{"predict": "(13, OpenMP, #pragma omp parallel default(none) shared(data, repeats, x, y, z))", "label": "(13, OpenMP, #pragma omp parallel default(none) shared(data,x,y,z,repeats))"}
{"predict": "(2, MPI, MPIDataCommunicator mpi_world_communicator(MPI_COMM_WORLD);)", "label": "(2, MPI, MPIDataCommunicator mpi_world_communicator(MPI_COMM_WORLD);)"}
{"predict": "(207, MPI, MPI_Reduce(&total, &total_sum, 1, MPI_INT, MPI_SUM, root, MPI_COMM_WORLD);); (231, MPI, MPI_Finalize();); (78, MPI, MPI_Bcast(&iterations,    1, MPI_INT, root, MPI_COMM_WORLD);); (22, MPI, MPI_Init(&argc,&argv);); (75, MPI, MPI_Bcast(&vector_length, 1, MPI_INT, root, MPI_COMM_WORLD);); (76, MPI, MPI_Bcast(&btype,         1, MPI_INT, root, MPI_COMM_WORLD);); (93, MPI, MPI_Barrier(MPI_COMM_WORLD);); (20, MPI, MPI_Comm_size(MPI_COMM_WORLD, &Num_procs);); (18, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &my_ID);)", "label": "(207, MPI, MPI_Reduce(&total, &total_sum, 1, MPI_INT, MPI_SUM, root, MPI_COMM_WORLD);); (230, MPI, MPI_Finalize();); (79, MPI, MPI_Bcast(&iterations,    1, MPI_INT, root, MPI_COMM_WORLD);); (21, MPI, MPI_Init(&argc,&argv);); (76, MPI, MPI_Bcast(&vector_length, 1, MPI_INT, root, MPI_COMM_WORLD);); (77, MPI, MPI_Bcast(&btype,         1, MPI_INT, root, MPI_COMM_WORLD);); (93, MPI, MPI_Barrier(MPI_COMM_WORLD);); (19, MPI, MPI_Comm_size(MPI_COMM_WORLD, &Num_procs);); (17, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &my_ID);)"}
{"predict": "(36, CUDA, CUDA_CHECK(cudaStreamSynchronize(stream));); (38, CUDA, CUDA_CHECK(cudaFree(d_data));)", "label": "(36, CUDA, CUDA_CHECK(cudaStreamSynchronize(stream));); (38, CUDA, CUDA_CHECK(cudaFree(d_data));)"}
{"predict": "(34, MPI, MPI_Recv(b, 10, MPI_INT, i, 27 + j, MPI_COMM_WORLD, &status);); (15, MPI, MPI_Bcast(a, 100, MPI_INT, 0, MPI_COMM_WORLD);); (7, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (7, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (20, MPI, MPI_Probe(MPI_ANY_SOURCE, MPI_ANY_TAG, MPI_COMM_WORLD, &status);)", "label": "(44, MPI, MPI_Buffer_detach(&bptr, &bl);); (24, MPI, MPI_Recv(b, 10, MPI_INT, i, 27 + j, MPI_COMM_WORLD, &status);); (14, MPI, MPI_Bsend(a, 10, MPI_INT, 0, 27 + j, MPI_COMM_WORLD);); (7, MPI, MPI_Buffer_attach(buf, BUFSIZE);); (4, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (4, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);)"}
{"predict": "(2, CUDA, __shared__ int sharedMemory[32][32];)", "label": "(2, CUDA, __shared__ int sharedMemory [BLOCK_SIZE] [BLOCK_SIZE + 1];)"}
{"predict": "(41, MPI, MPI_Irecv(x_external, n_recv, MPI_DOUBLE, neighbors[i], MPI_MY_TAG, MPI_COMM_WORLD, request+i);); (15, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (15, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);); (56, MPI, MPI_Send(sendBuffer, n_send, MPI_DOUBLE, neighbors[i], MPI_MY_TAG, MPI_COMM_WORLD);)", "label": "(57, MPI, MPI_Send(sendBuffer, n_send, MPI_DOUBLE, neighbors[i], MPI_MY_TAG, MPI_COMM_WORLD);); (15, MPI, MPI_Comm_size(MPI_COMM_WORLD, &size);); (36, MPI, MPI_Irecv(x_external, n_recv, MPI_DOUBLE, neighbors[i], MPI_MY_TAG, MPI_COMM_WORLD, request+i);); (14, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &rank);)"}
{"predict": "(11, OpenMP, #pragma omp for nowait); (4, OpenMP, #pragma omp parallel num_threads(4)); (7, OpenMP, omp_get_rank(&rank);); (21, OpenMP, #pragma omp for release); (12, OpenMP, #pragma omp atomic)", "label": "(5, OpenMP, #pragma omp parallel num_threads(4)); (11, OpenMP, #pragma omp for schedule(static) nowait); (8, OpenMP, rank = omp_get_thread_num();); (16, OpenMP, #pragma omp atomic); (20, OpenMP, #pragma omp for schedule(static))"}
{"predict": "(5, OpenMP, #pragma omp target data map(tofrom: ai, af, ad, ri, rf, rd)); (4, OpenMP, #pragma omp target teams distribute parallel for)", "label": "(4, OpenMP, #pragma omp parallel for)"}
{"predict": "(16, OpenMP, #pragma omp ordered depend(source)); (9, OpenMP, #pragma omp ordered depend(sink:i+2)); (5, OpenMP, #pragma omp ordered depend(sink:i+1)); (13, OpenMP, #pragma omp ordered depend(sink:i-1)); (-2, OpenMP, #pragma omp parallel); (9, OpenMP, #pragma omp ordered depend(sink:i-2)); (-2, OpenMP, #pragma omp ordered)", "label": "(1, OpenMP, #pragma omp parallel for ordered ordered); (15, OpenMP, #pragma omp parallel for order(concurrent)); (8, OpenMP, #pragma omp parallel for order(none); (4, OpenMP, #pragma omp parallel for order(); (0, OpenMP, #pragma omp parallel for order); (8, OpenMP, #pragma omp parallel for order(concurrent)"}
{"predict": "(27, OpenMP, #pragma omp atomic); (13, OpenMP, printf(\"Thread %d of %d\\n\", omp_get_thread_num(), omp_get_num_threads());)", "label": "(14, OpenMP, printf(\"Thread %d of %d\\n\", omp_get_thread_num(), omp_get_num_threads());)"}
{"predict": "(16, CUDA, cuda_st = cudaGetDeviceCount(&num_devices);)", "label": "(43, CUDA, CUDA_CHECK_GOTO(cudaGetDevice(&self->device), free_mpool, status);); (15, CUDA, cuda_st = cudaGetDeviceCount(&num_devices);)"}
{"predict": "(26, CUDA, assert(cudaMemcpyAsync(out.data(), d_out, out_bytes, cudaMemcpyDeviceToHost, gpu_device.stream()) == cudaSuccess);); (11, CUDA, cudaMalloc((void**)(&d_out), out_bytes);); (9, CUDA, cudaMalloc((void**)(&d_in1), in1_bytes);); (11, CUDA, cudaMemcpy(d_in1, in1.data(), in1_bytes, cudaMemcpyHostToDevice);); (40, CUDA, cudaFree(d_out);); (21, CUDA, assert(cudaStreamSynchronize(gpu_device.stream()) == cudaSuccess);); (37, CUDA, cudaFree(d_in1);)", "label": "(25, CUDA, assert(cudaMemcpyAsync(out.data(), d_out, out_bytes, cudaMemcpyDeviceToHost, gpu_device.stream()) == cudaSuccess);); (11, CUDA, cudaMalloc((void**)(&d_out), out_bytes);); (9, CUDA, cudaMalloc((void**)(&d_in1), in1_bytes);); (11, CUDA, cudaMemcpy(d_in1, in1.data(), in1_bytes, cudaMemcpyHostToDevice);); (39, CUDA, cudaFree(d_out);); (21, CUDA, assert(cudaStreamSynchronize(gpu_device.stream()) == cudaSuccess);); (36, CUDA, cudaFree(d_in1);)"}
{"predict": "(10, OpenMP, #pragma omp teams default(none), private(argc,b) num_teams(f) firstprivate(argv) reduction(|: c,d) reduction(*: e) thread_limit(f+g)); (5, OpenMP, #pragma omp target); (1, OpenMP, #pragma omp teams)", "label": "(14, OpenMP, #pragma omp teams default(none), private(argc,b) num_teams(f) firstprivate(argv) reduction(| : c, d) reduction(* : e) thread_limit(f+g)); (6, OpenMP, #pragma omp target); (2, OpenMP, #pragma omp threadprivate(a)); (5, OpenMP, #pragma omp teams)"}
{"predict": "(341, CUDA, __shared__ int cur_send_num;); (339, CUDA, __shared__ int recv_num, finish_num;)", "label": "(341, CUDA, __shared__ int cur_send_num;); (339, CUDA, __shared__ int recv_num, finish_num;)"}
{"predict": "(72, TBB, tbb::flow::make_edge( q, q2 );); (5, TBB, tbb::flow::priority_queue_node<T> q2(g, my_check);); (39, TBB, tbb::flow::make_edge( q, q2 );); (26, TBB, tbb::flow::priority_queue_node<T> q3(g, my_check);); (1, TBB, tbb::flow::priority_queue_node<T> q(g, my_check);); (65, TBB, tbb::flow::remove_edge( q, q2 );); (-5, TBB, tbb::flow::graph g;)", "label": "(4, TBB, tbb::flow::queue_node<T> q2(g);); (70, TBB, tbb::flow::make_edge( q2, q3 );); (67, TBB, tbb::flow::queue_node<T> q3(g);); (37, TBB, tbb::flow::make_edge( q, q2 );); (56, TBB, tbb::flow::remove_edge( q, q2 );); (87, TBB, tbb::flow::remove_edge( q,  q2 );); (-3, TBB, tbb::flow::queue_node<T> q(g);); (-5, TBB, tbb::flow::graph g;)"}
{"predict": "(23, OpenCL, clReleaseEvent(event);)", "label": "(23, OpenCL, clReleaseEvent(event);)"}
{"predict": "(25, MPI, MPI_Get_processor_name(mpi_name, &mpi_namelen);); (23, MPI, MPI_Comm_size(comm, &mpi_size);); (23, MPI, MPI_Comm_rank(comm, &mpi_rank);)", "label": "(25, MPI, MPI_Comm_rank(MPI_COMM_WORLD, &mpi_rank);); (25, MPI, MPI_Get_processor_name(mpi_name, &mpi_namelen);); (22, MPI, MPI_Comm_size(MPI_COMM_WORLD, &mpi_size);)"}
{"predict": "(43, OpenCL, clReleaseMemObject(imageDesc.mem_object);); (14, OpenCL, imageDesc.mem_object = clCreateBuffer(&context, CL_MEM_READ_WRITE, imageDesc.image_height * imageDesc.image_width, nullptr, &retVal);)", "label": "(43, OpenCL, clReleaseMemObject(imageDesc.mem_object);); (14, OpenCL, imageDesc.mem_object = clCreateBuffer(&context, CL_MEM_READ_WRITE, imageDesc.image_height * imageDesc.image_width, nullptr, &retVal);)"}
{"predict": "(41, OpenMP, #pragma omp teams distribute parallel for default(shared) collapse(3)); (16, OpenMP, y1 = (double*)omp_target_alloc(m3k*m2k*m1k*sizeof(double), omp_get_default_device());); (60, OpenMP, #pragma omp parallel for default(shared)); (11, OpenMP, #pragma omp target is_device_ptr(x1, y1) map(tofrom: or[0:m3k*m2k*m1k]) map(tofrom: os[0:m3j*m2j*m1j])); (26, OpenMP, #pragma omp parallel for default(shared) collapse(3))", "label": "(114, OpenMP, omp_target_free(y1, omp_get_default_device());); (41, OpenMP, #pragma omp teams distribute parallel for default(shared) collapse(3)); (39, OpenMP, #pragma omp target is_device_ptr(x1, y1) map(tofrom: or[0:m3k*m2k*m1k]) map(tofrom: os[0:m3j*m2j*m1j])); (13, OpenMP, y1 = (double*)omp_target_alloc(m3k*m2k*m1k*sizeof(double), omp_get_default_device());)"}
{"predict": "(9, MPI, MPI_Finalize();); (1, MPI, MPI_Init(&argc,&argv);)", "label": "(9, MPI, MPI_Finalize();); (1, MPI, MPI_Init(&argc,&argv);)"}
{"predict": "(17, CUDA, extern __shared__ _VOLATILE_ float sMem[];)", "label": "(17, CUDA, extern __shared__ _VOLATILE_ float sMem[];)"}
{"predict": "(1, SYCL, EasyCL *cl = EasyCL::createForFirstGpuOtherwiseCpu();)", "label": "(1, SYCL, EasyCL *cl = EasyCL::createForFirstGpuOtherwiseCpu();)"}
